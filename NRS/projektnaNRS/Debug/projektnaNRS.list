
projektnaNRS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e044  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000518  0800e1d8  0800e1d8  0001e1d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e6f0  0800e6f0  00020350  2**0
                  CONTENTS
  4 .ARM          00000000  0800e6f0  0800e6f0  00020350  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e6f0  0800e6f0  00020350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e6f0  0800e6f0  0001e6f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e6f4  0800e6f4  0001e6f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000350  20000000  0800e6f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020350  2**0
                  CONTENTS
 10 .bss          000012dc  20000350  20000350  00020350  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000162c  2000162c  00020350  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020350  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001eaec  00000000  00000000  00020380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003fc0  00000000  00000000  0003ee6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001570  00000000  00000000  00042e30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000013b8  00000000  00000000  000443a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002246f  00000000  00000000  00045758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ba7a  00000000  00000000  00067bc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bc23e  00000000  00000000  00083641  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0013f87f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006d78  00000000  00000000  0013f8d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000350 	.word	0x20000350
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e1bc 	.word	0x0800e1bc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000354 	.word	0x20000354
 80001cc:	0800e1bc 	.word	0x0800e1bc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <i2c1_pisiRegister>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint8_t i2c1_pisiRegister(uint8_t naprava, uint8_t reg, uint8_t podatek)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b086      	sub	sp, #24
 8000c4c:	af04      	add	r7, sp, #16
 8000c4e:	4603      	mov	r3, r0
 8000c50:	71fb      	strb	r3, [r7, #7]
 8000c52:	460b      	mov	r3, r1
 8000c54:	71bb      	strb	r3, [r7, #6]
 8000c56:	4613      	mov	r3, r2
 8000c58:	717b      	strb	r3, [r7, #5]
  naprava <<= 1;
 8000c5a:	79fb      	ldrb	r3, [r7, #7]
 8000c5c:	005b      	lsls	r3, r3, #1
 8000c5e:	71fb      	strb	r3, [r7, #7]
  return HAL_I2C_Mem_Write(&hi2c1, naprava, reg, I2C_MEMADD_SIZE_8BIT, &podatek, 1, 10);
 8000c60:	79fb      	ldrb	r3, [r7, #7]
 8000c62:	b299      	uxth	r1, r3
 8000c64:	79bb      	ldrb	r3, [r7, #6]
 8000c66:	b29a      	uxth	r2, r3
 8000c68:	230a      	movs	r3, #10
 8000c6a:	9302      	str	r3, [sp, #8]
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	9301      	str	r3, [sp, #4]
 8000c70:	1d7b      	adds	r3, r7, #5
 8000c72:	9300      	str	r3, [sp, #0]
 8000c74:	2301      	movs	r3, #1
 8000c76:	4804      	ldr	r0, [pc, #16]	; (8000c88 <i2c1_pisiRegister+0x40>)
 8000c78:	f001 faf0 	bl	800225c <HAL_I2C_Mem_Write>
 8000c7c:	4603      	mov	r3, r0
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	2000059c 	.word	0x2000059c

08000c8c <i2c1_beriRegistre>:

void i2c1_beriRegistre(uint8_t naprava, uint8_t reg, uint8_t* podatek, uint8_t dolzina)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b086      	sub	sp, #24
 8000c90:	af04      	add	r7, sp, #16
 8000c92:	603a      	str	r2, [r7, #0]
 8000c94:	461a      	mov	r2, r3
 8000c96:	4603      	mov	r3, r0
 8000c98:	71fb      	strb	r3, [r7, #7]
 8000c9a:	460b      	mov	r3, r1
 8000c9c:	71bb      	strb	r3, [r7, #6]
 8000c9e:	4613      	mov	r3, r2
 8000ca0:	717b      	strb	r3, [r7, #5]
  if ((dolzina>1)&&(naprava==0x19))  // ce je naprava 0x19 moramo postaviti ta bit, ce zelimo brati vec zlogov
 8000ca2:	797b      	ldrb	r3, [r7, #5]
 8000ca4:	2b01      	cmp	r3, #1
 8000ca6:	d906      	bls.n	8000cb6 <i2c1_beriRegistre+0x2a>
 8000ca8:	79fb      	ldrb	r3, [r7, #7]
 8000caa:	2b19      	cmp	r3, #25
 8000cac:	d103      	bne.n	8000cb6 <i2c1_beriRegistre+0x2a>
    reg |= 0x80;
 8000cae:	79bb      	ldrb	r3, [r7, #6]
 8000cb0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000cb4:	71bb      	strb	r3, [r7, #6]
  naprava <<= 1;
 8000cb6:	79fb      	ldrb	r3, [r7, #7]
 8000cb8:	005b      	lsls	r3, r3, #1
 8000cba:	71fb      	strb	r3, [r7, #7]
  HAL_I2C_Mem_Read(&hi2c1, naprava, reg, I2C_MEMADD_SIZE_8BIT, podatek, dolzina, dolzina);
 8000cbc:	79fb      	ldrb	r3, [r7, #7]
 8000cbe:	b299      	uxth	r1, r3
 8000cc0:	79bb      	ldrb	r3, [r7, #6]
 8000cc2:	b298      	uxth	r0, r3
 8000cc4:	797b      	ldrb	r3, [r7, #5]
 8000cc6:	b29b      	uxth	r3, r3
 8000cc8:	797a      	ldrb	r2, [r7, #5]
 8000cca:	9202      	str	r2, [sp, #8]
 8000ccc:	9301      	str	r3, [sp, #4]
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	9300      	str	r3, [sp, #0]
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	4602      	mov	r2, r0
 8000cd6:	4803      	ldr	r0, [pc, #12]	; (8000ce4 <i2c1_beriRegistre+0x58>)
 8000cd8:	f001 fbd4 	bl	8002484 <HAL_I2C_Mem_Read>
}
 8000cdc:	bf00      	nop
 8000cde:	3708      	adds	r7, #8
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	2000059c 	.word	0x2000059c

08000ce8 <initLSM303DLHC>:

void initLSM303DLHC()
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  HAL_Delay(10);
 8000cec:	200a      	movs	r0, #10
 8000cee:	f000 ff45 	bl	8001b7c <HAL_Delay>
  // Za potrebe testa, moramo testni napravi sporociti kateri senzor imamo
  #define OLD_SENSOR 0x73 // Odkomentiramo za LSM303DLHC / stari senzor
  //#define NEW_SENSOR 0x6E // Odkomentiramo za LSM303AGR / novi senzor

  #if defined(OLD_SENSOR) && !defined(NEW_SENSOR)
  i2c1_pisiRegister(0x1e, 0x4F, OLD_SENSOR); // Povemo testni napravi, da imamo stari senzor
 8000cf2:	2273      	movs	r2, #115	; 0x73
 8000cf4:	214f      	movs	r1, #79	; 0x4f
 8000cf6:	201e      	movs	r0, #30
 8000cf8:	f7ff ffa6 	bl	8000c48 <i2c1_pisiRegister>
  #elif !defined(OLD_SENSOR) && defined(NEW_SENSOR)
  i2c1_pisiRegister(0x1e, 0x4F, NEW_SENSOR); // Povemo testni napravi, da imamo novi senzor
  #else
  for(;;); // V primeru napake, pocakamo tukaj
  #endif
  HAL_Delay(100);
 8000cfc:	2064      	movs	r0, #100	; 0x64
 8000cfe:	f000 ff3d 	bl	8001b7c <HAL_Delay>

  // inicializiraj pospeskometer
  i2c1_pisiRegister(0x19, 0x20, 0x27);  // zbudi pospeskometer in omogoci osi
 8000d02:	2227      	movs	r2, #39	; 0x27
 8000d04:	2120      	movs	r1, #32
 8000d06:	2019      	movs	r0, #25
 8000d08:	f7ff ff9e 	bl	8000c48 <i2c1_pisiRegister>
  i2c1_pisiRegister(0x19, 0x23, 0x88);  // nastavi posodobitev samo ko se prebere vrednost ter visoko locljivost
 8000d0c:	2288      	movs	r2, #136	; 0x88
 8000d0e:	2123      	movs	r1, #35	; 0x23
 8000d10:	2019      	movs	r0, #25
 8000d12:	f7ff ff99 	bl	8000c48 <i2c1_pisiRegister>
  i2c1_pisiRegister(0x19, 0x20, 0x47);	//odzivnost
 8000d16:	2247      	movs	r2, #71	; 0x47
 8000d18:	2120      	movs	r1, #32
 8000d1a:	2019      	movs	r0, #25
 8000d1c:	f7ff ff94 	bl	8000c48 <i2c1_pisiRegister>
  i2c1_pisiRegister(0x19, 0x23, 0x10);	//obcutljivost
 8000d20:	2210      	movs	r2, #16
 8000d22:	2123      	movs	r1, #35	; 0x23
 8000d24:	2019      	movs	r0, #25
 8000d26:	f7ff ff8f 	bl	8000c48 <i2c1_pisiRegister>
}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}
	...

08000d30 <getAxis.10267>:
  MX_SPI1_Init();
  MX_TIM3_Init();
  MX_USB_DEVICE_Init();
  /* USER CODE BEGIN 2 */

  float getAxis(float X, float Y, float Z) {
 8000d30:	b480      	push	{r7}
 8000d32:	b085      	sub	sp, #20
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	ed87 0a03 	vstr	s0, [r7, #12]
 8000d3a:	edc7 0a02 	vstr	s1, [r7, #8]
 8000d3e:	ed87 1a01 	vstr	s2, [r7, #4]
 8000d42:	f8c7 c000 	str.w	ip, [r7]
      X = abs(X);
 8000d46:	edd7 7a03 	vldr	s15, [r7, #12]
 8000d4a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d4e:	ee17 3a90 	vmov	r3, s15
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	bfb8      	it	lt
 8000d56:	425b      	neglt	r3, r3
 8000d58:	ee07 3a90 	vmov	s15, r3
 8000d5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d60:	edc7 7a03 	vstr	s15, [r7, #12]
      Y = abs(Y);
 8000d64:	edd7 7a02 	vldr	s15, [r7, #8]
 8000d68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d6c:	ee17 3a90 	vmov	r3, s15
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	bfb8      	it	lt
 8000d74:	425b      	neglt	r3, r3
 8000d76:	ee07 3a90 	vmov	s15, r3
 8000d7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d7e:	edc7 7a02 	vstr	s15, [r7, #8]
      Z = abs(Z);
 8000d82:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d8a:	ee17 3a90 	vmov	r3, s15
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	bfb8      	it	lt
 8000d92:	425b      	neglt	r3, r3
 8000d94:	ee07 3a90 	vmov	s15, r3
 8000d98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d9c:	edc7 7a01 	vstr	s15, [r7, #4]
      if (X > Y) {
 8000da0:	ed97 7a03 	vldr	s14, [r7, #12]
 8000da4:	edd7 7a02 	vldr	s15, [r7, #8]
 8000da8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000dac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000db0:	dd0b      	ble.n	8000dca <getAxis.10267+0x9a>
          if (X > Z){
 8000db2:	ed97 7a03 	vldr	s14, [r7, #12]
 8000db6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000dba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000dbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dc2:	dd11      	ble.n	8000de8 <getAxis.10267+0xb8>
        	  return 0;
 8000dc4:	f04f 0300 	mov.w	r3, #0
 8000dc8:	e00f      	b.n	8000dea <getAxis.10267+0xba>
          }
      }
      else if (Y > Z){
 8000dca:	ed97 7a02 	vldr	s14, [r7, #8]
 8000dce:	edd7 7a01 	vldr	s15, [r7, #4]
 8000dd2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000dd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dda:	dd02      	ble.n	8000de2 <getAxis.10267+0xb2>
    	  return 1;
 8000ddc:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000de0:	e003      	b.n	8000dea <getAxis.10267+0xba>
      }
      else{
    	  return 2;
 8000de2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000de6:	e000      	b.n	8000dea <getAxis.10267+0xba>
      }

      return -1;
 8000de8:	4b04      	ldr	r3, [pc, #16]	; (8000dfc <getAxis.10267+0xcc>)
 8000dea:	ee07 3a90 	vmov	s15, r3
  }
 8000dee:	eeb0 0a67 	vmov.f32	s0, s15
 8000df2:	3714      	adds	r7, #20
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr
 8000dfc:	bf800000 	.word	0xbf800000

08000e00 <main>:
{
 8000e00:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000e04:	b0e2      	sub	sp, #392	; 0x188
 8000e06:	af06      	add	r7, sp, #24
int main(void)
 8000e08:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8000e0c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  HAL_Init();
 8000e10:	f000 fe4e 	bl	8001ab0 <HAL_Init>
  SystemClock_Config();
 8000e14:	f000 fa9c 	bl	8001350 <SystemClock_Config>
  MX_GPIO_Init();
 8000e18:	f000 fbc6 	bl	80015a8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000e1c:	f000 faf8 	bl	8001410 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000e20:	f000 fb34 	bl	800148c <MX_SPI1_Init>
  MX_TIM3_Init();
 8000e24:	f000 fb70 	bl	8001508 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 8000e28:	f008 fe50 	bl	8009acc <MX_USB_DEVICE_Init>

  // zazenemo casovnik ter cakamo do preliva vrednosti
  HAL_TIM_Base_Start(&htim3);
 8000e2c:	48da      	ldr	r0, [pc, #872]	; (8001198 <main+0x398>)
 8000e2e:	f004 ff91 	bl	8005d54 <HAL_TIM_Base_Start>

  // pocistimo zastavico za preliv vrednosti
  __HAL_TIM_CLEAR_FLAG(&htim3, TIM_FLAG_UPDATE);
 8000e32:	4bd9      	ldr	r3, [pc, #868]	; (8001198 <main+0x398>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f06f 0201 	mvn.w	r2, #1
 8000e3a:	611a      	str	r2, [r3, #16]

  __HAL_I2C_ENABLE(&hi2c1);
 8000e3c:	4bd7      	ldr	r3, [pc, #860]	; (800119c <main+0x39c>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	4bd6      	ldr	r3, [pc, #856]	; (800119c <main+0x39c>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f042 0201 	orr.w	r2, r2, #1
 8000e4a:	601a      	str	r2, [r3, #0]

  initLSM303DLHC(); //zazeni init posp.
 8000e4c:	f7ff ff4c 	bl	8000ce8 <initLSM303DLHC>

  int16_t meritev[6];
  meritev[0] = 0xaaab;// glava za zaznamek zacetek paketa
 8000e50:	f64a 23ab 	movw	r3, #43691	; 0xaaab
 8000e54:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c

  int8_t cordZLow;
  int8_t cordZHigh;
  float cordZ;

  int bumpsX = 0;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
  int bumpsY = 0;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  int bumpsZ = 0;
 8000e64:	2300      	movs	r3, #0
 8000e66:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  int bumps = 0;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
  int counter = 0;
 8000e70:	2300      	movs	r3, #0
 8000e72:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  int paket = -1;
 8000e76:	f04f 33ff 	mov.w	r3, #4294967295
 8000e7a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  float currentAccel = 0.0;
 8000e7e:	f04f 0300 	mov.w	r3, #0
 8000e82:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
  float lastAccel = 0.0;
 8000e86:	f04f 0300 	mov.w	r3, #0
 8000e8a:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  int secondCounter = 0;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  int axis = 0;
 8000e94:	2300      	movs	r3, #0
 8000e96:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  int once = 0;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
  int once2 = 0;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
  int once3 = 0;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(10);
 8000eac:	200a      	movs	r0, #10
 8000eae:	f000 fe65 	bl	8001b7c <HAL_Delay>
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)){
 8000eb2:	2101      	movs	r1, #1
 8000eb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eb8:	f001 f910 	bl	80020dc <HAL_GPIO_ReadPin>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d048      	beq.n	8000f54 <main+0x154>
		  counter++;
 8000ec2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8000ec6:	3301      	adds	r3, #1
 8000ec8:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
		 if(counter > 4){
 8000ecc:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8000ed0:	2b04      	cmp	r3, #4
 8000ed2:	dd3f      	ble.n	8000f54 <main+0x154>
			 counter = 0;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
			 once = 0;
 8000eda:	2300      	movs	r3, #0
 8000edc:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
			 once2 = 0;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
			 once3 = 0;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
			 bumps = 0;
 8000eec:	2300      	movs	r3, #0
 8000eee:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
			 bumpsX = 0;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
			 bumpsY = 0;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
			 bumpsZ = 0;
 8000efe:	2300      	movs	r3, #0
 8000f00:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
			 paket = -1;
 8000f04:	f04f 33ff 	mov.w	r3, #4294967295
 8000f08:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
			    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f12:	48a3      	ldr	r0, [pc, #652]	; (80011a0 <main+0x3a0>)
 8000f14:	f001 f8fa 	bl	800210c <HAL_GPIO_WritePin>
			    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 8000f18:	2200      	movs	r2, #0
 8000f1a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f1e:	48a0      	ldr	r0, [pc, #640]	; (80011a0 <main+0x3a0>)
 8000f20:	f001 f8f4 	bl	800210c <HAL_GPIO_WritePin>
			    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_RESET);
 8000f24:	2200      	movs	r2, #0
 8000f26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f2a:	489d      	ldr	r0, [pc, #628]	; (80011a0 <main+0x3a0>)
 8000f2c:	f001 f8ee 	bl	800210c <HAL_GPIO_WritePin>
			    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 8000f30:	2200      	movs	r2, #0
 8000f32:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f36:	489a      	ldr	r0, [pc, #616]	; (80011a0 <main+0x3a0>)
 8000f38:	f001 f8e8 	bl	800210c <HAL_GPIO_WritePin>
			    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f42:	4897      	ldr	r0, [pc, #604]	; (80011a0 <main+0x3a0>)
 8000f44:	f001 f8e2 	bl	800210c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 8000f48:	2200      	movs	r2, #0
 8000f4a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f4e:	4894      	ldr	r0, [pc, #592]	; (80011a0 <main+0x3a0>)
 8000f50:	f001 f8dc 	bl	800210c <HAL_GPIO_WritePin>
		__HAL_TIM_CLEAR_FLAG(&htim3, TIM_FLAG_UPDATE);
		//stanje LED lucke
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_10);
		*/

		if(counter == 1){	//ZBIRANJE PODATKOV
 8000f54:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	f040 8162 	bne.w	8001222 <main+0x422>

		    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 8000f5e:	2201      	movs	r2, #1
 8000f60:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f64:	488e      	ldr	r0, [pc, #568]	; (80011a0 <main+0x3a0>)
 8000f66:	f001 f8d1 	bl	800210c <HAL_GPIO_WritePin>

			//PAKET
			paket = paket + 1;
 8000f6a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8000f6e:	3301      	adds	r3, #1
 8000f70:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
			meritev[1] = paket;
 8000f74:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8000f78:	b21b      	sxth	r3, r3
 8000f7a:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

			//X-os
			i2c1_beriRegistre(0x19, 0x29, (uint8_t *)&cordXHigh, 1);
 8000f7e:	f507 7285 	add.w	r2, r7, #266	; 0x10a
 8000f82:	2301      	movs	r3, #1
 8000f84:	2129      	movs	r1, #41	; 0x29
 8000f86:	2019      	movs	r0, #25
 8000f88:	f7ff fe80 	bl	8000c8c <i2c1_beriRegistre>
			i2c1_beriRegistre(0x19, 0x28, (uint8_t *)&cordXLow, 1);
 8000f8c:	f207 120b 	addw	r2, r7, #267	; 0x10b
 8000f90:	2301      	movs	r3, #1
 8000f92:	2128      	movs	r1, #40	; 0x28
 8000f94:	2019      	movs	r0, #25
 8000f96:	f7ff fe79 	bl	8000c8c <i2c1_beriRegistre>
			meritev[1] = (cordXHigh << 8) | (cordXLow & 0xff);
 8000f9a:	f997 310a 	ldrsb.w	r3, [r7, #266]	; 0x10a
 8000f9e:	021b      	lsls	r3, r3, #8
 8000fa0:	b21a      	sxth	r2, r3
 8000fa2:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8000fa6:	b21b      	sxth	r3, r3
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	b21b      	sxth	r3, r3
 8000fac:	4313      	orrs	r3, r2
 8000fae:	b21b      	sxth	r3, r3
 8000fb0:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
			cordX = (meritev[1] >> 3) / 1000.0f;
 8000fb4:	f9b7 310e 	ldrsh.w	r3, [r7, #270]	; 0x10e
 8000fb8:	10db      	asrs	r3, r3, #3
 8000fba:	b21b      	sxth	r3, r3
 8000fbc:	ee07 3a90 	vmov	s15, r3
 8000fc0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fc4:	eddf 6a77 	vldr	s13, [pc, #476]	; 80011a4 <main+0x3a4>
 8000fc8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fcc:	edc7 7a4a 	vstr	s15, [r7, #296]	; 0x128

			//Y-os
			i2c1_beriRegistre(0x19, 0x2B, (uint8_t *)&cordYHigh, 1);
 8000fd0:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	212b      	movs	r1, #43	; 0x2b
 8000fd8:	2019      	movs	r0, #25
 8000fda:	f7ff fe57 	bl	8000c8c <i2c1_beriRegistre>
			i2c1_beriRegistre(0x19, 0x2A, (uint8_t *)&cordYLow, 1);
 8000fde:	f207 1209 	addw	r2, r7, #265	; 0x109
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	212a      	movs	r1, #42	; 0x2a
 8000fe6:	2019      	movs	r0, #25
 8000fe8:	f7ff fe50 	bl	8000c8c <i2c1_beriRegistre>
			meritev[2] = (cordYHigh << 8) | (cordYLow & 0xff);
 8000fec:	f997 3108 	ldrsb.w	r3, [r7, #264]	; 0x108
 8000ff0:	021b      	lsls	r3, r3, #8
 8000ff2:	b21a      	sxth	r2, r3
 8000ff4:	f997 3109 	ldrsb.w	r3, [r7, #265]	; 0x109
 8000ff8:	b21b      	sxth	r3, r3
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	b21b      	sxth	r3, r3
 8000ffe:	4313      	orrs	r3, r2
 8001000:	b21b      	sxth	r3, r3
 8001002:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
			cordY = (meritev[2] >> 3) / 1000.0f;
 8001006:	f9b7 3110 	ldrsh.w	r3, [r7, #272]	; 0x110
 800100a:	10db      	asrs	r3, r3, #3
 800100c:	b21b      	sxth	r3, r3
 800100e:	ee07 3a90 	vmov	s15, r3
 8001012:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001016:	eddf 6a63 	vldr	s13, [pc, #396]	; 80011a4 <main+0x3a4>
 800101a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800101e:	edc7 7a49 	vstr	s15, [r7, #292]	; 0x124

			//Z-os
			i2c1_beriRegistre(0x19, 0x2D, (uint8_t *)&cordZHigh, 1);
 8001022:	f507 7283 	add.w	r2, r7, #262	; 0x106
 8001026:	2301      	movs	r3, #1
 8001028:	212d      	movs	r1, #45	; 0x2d
 800102a:	2019      	movs	r0, #25
 800102c:	f7ff fe2e 	bl	8000c8c <i2c1_beriRegistre>
			i2c1_beriRegistre(0x19, 0x2C, (uint8_t *)&cordZLow, 1);
 8001030:	f207 1207 	addw	r2, r7, #263	; 0x107
 8001034:	2301      	movs	r3, #1
 8001036:	212c      	movs	r1, #44	; 0x2c
 8001038:	2019      	movs	r0, #25
 800103a:	f7ff fe27 	bl	8000c8c <i2c1_beriRegistre>
			meritev[3] = (cordZHigh << 8) | (cordZLow & 0xff);
 800103e:	f997 3106 	ldrsb.w	r3, [r7, #262]	; 0x106
 8001042:	021b      	lsls	r3, r3, #8
 8001044:	b21a      	sxth	r2, r3
 8001046:	f997 3107 	ldrsb.w	r3, [r7, #263]	; 0x107
 800104a:	b21b      	sxth	r3, r3
 800104c:	b2db      	uxtb	r3, r3
 800104e:	b21b      	sxth	r3, r3
 8001050:	4313      	orrs	r3, r2
 8001052:	b21b      	sxth	r3, r3
 8001054:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
			cordZ = (meritev[3] >> 3) / 1000.0f;
 8001058:	f9b7 3112 	ldrsh.w	r3, [r7, #274]	; 0x112
 800105c:	10db      	asrs	r3, r3, #3
 800105e:	b21b      	sxth	r3, r3
 8001060:	ee07 3a90 	vmov	s15, r3
 8001064:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001068:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80011a4 <main+0x3a4>
 800106c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001070:	edc7 7a48 	vstr	s15, [r7, #288]	; 0x120

			lastAccel = currentAccel;
 8001074:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001078:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
			currentAccel = sqrt(pow(cordX, 2) + pow(cordY, 2) + pow(cordZ, 2));
 800107c:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 8001080:	f7ff fa62 	bl	8000548 <__aeabi_f2d>
 8001084:	4602      	mov	r2, r0
 8001086:	460b      	mov	r3, r1
 8001088:	ed9f 1b41 	vldr	d1, [pc, #260]	; 8001190 <main+0x390>
 800108c:	ec43 2b10 	vmov	d0, r2, r3
 8001090:	f00c f8ac 	bl	800d1ec <pow>
 8001094:	ec55 4b10 	vmov	r4, r5, d0
 8001098:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800109c:	f7ff fa54 	bl	8000548 <__aeabi_f2d>
 80010a0:	4602      	mov	r2, r0
 80010a2:	460b      	mov	r3, r1
 80010a4:	ed9f 1b3a 	vldr	d1, [pc, #232]	; 8001190 <main+0x390>
 80010a8:	ec43 2b10 	vmov	d0, r2, r3
 80010ac:	f00c f89e 	bl	800d1ec <pow>
 80010b0:	ec53 2b10 	vmov	r2, r3, d0
 80010b4:	4620      	mov	r0, r4
 80010b6:	4629      	mov	r1, r5
 80010b8:	f7ff f8e8 	bl	800028c <__adddf3>
 80010bc:	4602      	mov	r2, r0
 80010be:	460b      	mov	r3, r1
 80010c0:	4614      	mov	r4, r2
 80010c2:	461d      	mov	r5, r3
 80010c4:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 80010c8:	f7ff fa3e 	bl	8000548 <__aeabi_f2d>
 80010cc:	4602      	mov	r2, r0
 80010ce:	460b      	mov	r3, r1
 80010d0:	ed9f 1b2f 	vldr	d1, [pc, #188]	; 8001190 <main+0x390>
 80010d4:	ec43 2b10 	vmov	d0, r2, r3
 80010d8:	f00c f888 	bl	800d1ec <pow>
 80010dc:	ec53 2b10 	vmov	r2, r3, d0
 80010e0:	4620      	mov	r0, r4
 80010e2:	4629      	mov	r1, r5
 80010e4:	f7ff f8d2 	bl	800028c <__adddf3>
 80010e8:	4602      	mov	r2, r0
 80010ea:	460b      	mov	r3, r1
 80010ec:	ec43 2b17 	vmov	d7, r2, r3
 80010f0:	eeb0 0a47 	vmov.f32	s0, s14
 80010f4:	eef0 0a67 	vmov.f32	s1, s15
 80010f8:	f00c f926 	bl	800d348 <sqrt>
 80010fc:	ec53 2b10 	vmov	r2, r3, d0
 8001100:	4610      	mov	r0, r2
 8001102:	4619      	mov	r1, r3
 8001104:	f7ff fd50 	bl	8000ba8 <__aeabi_d2f>
 8001108:	4603      	mov	r3, r0
 800110a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
			axis = getAxis(cordX, cordY, cordZ);
 800110e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001112:	469c      	mov	ip, r3
 8001114:	ed97 1a48 	vldr	s2, [r7, #288]	; 0x120
 8001118:	edd7 0a49 	vldr	s1, [r7, #292]	; 0x124
 800111c:	ed97 0a4a 	vldr	s0, [r7, #296]	; 0x128
 8001120:	f7ff fe06 	bl	8000d30 <getAxis.10267>
 8001124:	eef0 7a40 	vmov.f32	s15, s0
 8001128:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800112c:	ee17 3a90 	vmov	r3, s15
 8001130:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138

			if (axis == 0) {
 8001134:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001138:	2b00      	cmp	r3, #0
 800113a:	d112      	bne.n	8001162 <main+0x362>
				if ((lastAccel - currentAccel) > 0.50) {
 800113c:	ed97 7a50 	vldr	s14, [r7, #320]	; 0x140
 8001140:	edd7 7a56 	vldr	s15, [r7, #344]	; 0x158
 8001144:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001148:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800114c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001154:	dd3e      	ble.n	80011d4 <main+0x3d4>
					bumpsX++;
 8001156:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800115a:	3301      	adds	r3, #1
 800115c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8001160:	e038      	b.n	80011d4 <main+0x3d4>
				}
			}
			else if (axis == 1) {
 8001162:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001166:	2b01      	cmp	r3, #1
 8001168:	d11e      	bne.n	80011a8 <main+0x3a8>
				if ((lastAccel - currentAccel) > 0.50) {
 800116a:	ed97 7a50 	vldr	s14, [r7, #320]	; 0x140
 800116e:	edd7 7a56 	vldr	s15, [r7, #344]	; 0x158
 8001172:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001176:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800117a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800117e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001182:	dd27      	ble.n	80011d4 <main+0x3d4>
					bumpsY++;
 8001184:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001188:	3301      	adds	r3, #1
 800118a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 800118e:	e021      	b.n	80011d4 <main+0x3d4>
 8001190:	00000000 	.word	0x00000000
 8001194:	40000000 	.word	0x40000000
 8001198:	200005e8 	.word	0x200005e8
 800119c:	2000059c 	.word	0x2000059c
 80011a0:	48001000 	.word	0x48001000
 80011a4:	447a0000 	.word	0x447a0000
				}
			}
			else if (axis == 2) {
 80011a8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80011ac:	2b02      	cmp	r3, #2
 80011ae:	d111      	bne.n	80011d4 <main+0x3d4>
				if ((lastAccel - currentAccel) > 0.50) {
 80011b0:	ed97 7a50 	vldr	s14, [r7, #320]	; 0x140
 80011b4:	edd7 7a56 	vldr	s15, [r7, #344]	; 0x158
 80011b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011bc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80011c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011c8:	dd04      	ble.n	80011d4 <main+0x3d4>
					bumpsZ++;
 80011ca:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80011ce:	3301      	adds	r3, #1
 80011d0:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
				}
			}

			int len = sprintf(buff, "{Pospeskometer[%i]-> \"X\":[%.3f],  \"Y\":[%.3f], \"Z\":[%.3f]}\n\r", paket, cordX, cordY, cordZ);
 80011d4:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 80011d8:	f7ff f9b6 	bl	8000548 <__aeabi_f2d>
 80011dc:	4604      	mov	r4, r0
 80011de:	460d      	mov	r5, r1
 80011e0:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 80011e4:	f7ff f9b0 	bl	8000548 <__aeabi_f2d>
 80011e8:	4680      	mov	r8, r0
 80011ea:	4689      	mov	r9, r1
 80011ec:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 80011f0:	f7ff f9aa 	bl	8000548 <__aeabi_f2d>
 80011f4:	4602      	mov	r2, r0
 80011f6:	460b      	mov	r3, r1
 80011f8:	1d38      	adds	r0, r7, #4
 80011fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80011fe:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001202:	e9cd 4500 	strd	r4, r5, [sp]
 8001206:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 800120a:	494c      	ldr	r1, [pc, #304]	; (800133c <main+0x53c>)
 800120c:	f009 fdc4 	bl	800ad98 <siprintf>
 8001210:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
			CDC_Transmit_FS((uint8_t*)&buff, len);
 8001214:	1d3b      	adds	r3, r7, #4
 8001216:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800121a:	4618      	mov	r0, r3
 800121c:	f008 fd14 	bl	8009c48 <CDC_Transmit_FS>
 8001220:	e082      	b.n	8001328 <main+0x528>

		}

		else if(counter == 2){
 8001222:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001226:	2b02      	cmp	r3, #2
 8001228:	d122      	bne.n	8001270 <main+0x470>
			if(once2 < 1){
 800122a:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800122e:	2b00      	cmp	r3, #0
 8001230:	dc7a      	bgt.n	8001328 <main+0x528>
			    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_SET);
 8001232:	2201      	movs	r2, #1
 8001234:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001238:	4841      	ldr	r0, [pc, #260]	; (8001340 <main+0x540>)
 800123a:	f000 ff67 	bl	800210c <HAL_GPIO_WritePin>
				int len = sprintf(buff, "{\"Bumps X\":[%i],  \"Bumps Y\":[%i], \"Bumps Z\":[%i]}\n\r}", bumpsX, bumpsY, bumpsZ);
 800123e:	1d38      	adds	r0, r7, #4
 8001240:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001244:	9300      	str	r3, [sp, #0]
 8001246:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800124a:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 800124e:	493d      	ldr	r1, [pc, #244]	; (8001344 <main+0x544>)
 8001250:	f009 fda2 	bl	800ad98 <siprintf>
 8001254:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
				CDC_Transmit_FS((uint8_t*)&buff, len);
 8001258:	1d3b      	adds	r3, r7, #4
 800125a:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 800125e:	4618      	mov	r0, r3
 8001260:	f008 fcf2 	bl	8009c48 <CDC_Transmit_FS>
				once2++;
 8001264:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001268:	3301      	adds	r3, #1
 800126a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800126e:	e05b      	b.n	8001328 <main+0x528>
			}
		}

		else if(counter == 3){
 8001270:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001274:	2b03      	cmp	r3, #3
 8001276:	d11c      	bne.n	80012b2 <main+0x4b2>
		    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 8001278:	2201      	movs	r2, #1
 800127a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800127e:	4830      	ldr	r0, [pc, #192]	; (8001340 <main+0x540>)
 8001280:	f000 ff44 	bl	800210c <HAL_GPIO_WritePin>

			if(once < 1){
 8001284:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001288:	2b00      	cmp	r3, #0
 800128a:	dc4d      	bgt.n	8001328 <main+0x528>
				int len = sprintf(buff, "{STOP}\n\r");
 800128c:	1d3b      	adds	r3, r7, #4
 800128e:	492e      	ldr	r1, [pc, #184]	; (8001348 <main+0x548>)
 8001290:	4618      	mov	r0, r3
 8001292:	f009 fd81 	bl	800ad98 <siprintf>
 8001296:	f8c7 0130 	str.w	r0, [r7, #304]	; 0x130
				CDC_Transmit_FS((uint8_t*)&buff, len);
 800129a:	1d3b      	adds	r3, r7, #4
 800129c:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 80012a0:	4618      	mov	r0, r3
 80012a2:	f008 fcd1 	bl	8009c48 <CDC_Transmit_FS>
				once++;
 80012a6:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80012aa:	3301      	adds	r3, #1
 80012ac:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80012b0:	e03a      	b.n	8001328 <main+0x528>
			}

		}

		else if(counter == 4){
 80012b2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80012b6:	2b04      	cmp	r3, #4
 80012b8:	d136      	bne.n	8001328 <main+0x528>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);
 80012ba:	2201      	movs	r2, #1
 80012bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012c0:	481f      	ldr	r0, [pc, #124]	; (8001340 <main+0x540>)
 80012c2:	f000 ff23 	bl	800210c <HAL_GPIO_WritePin>
			//if(once3 < 1){
				bumps = bumpsX + bumpsY + bumpsZ;
 80012c6:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 80012ca:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80012ce:	4413      	add	r3, r2
 80012d0:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 80012d4:	4413      	add	r3, r2
 80012d6:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
				for(int i = 0; i < 256; i++){
 80012da:	2300      	movs	r3, #0
 80012dc:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 80012e0:	e00a      	b.n	80012f8 <main+0x4f8>
					buff[i] = 0;
 80012e2:	1d3a      	adds	r2, r7, #4
 80012e4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80012e8:	4413      	add	r3, r2
 80012ea:	2200      	movs	r2, #0
 80012ec:	701a      	strb	r2, [r3, #0]
				for(int i = 0; i < 256; i++){
 80012ee:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80012f2:	3301      	adds	r3, #1
 80012f4:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 80012f8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80012fc:	2bff      	cmp	r3, #255	; 0xff
 80012fe:	ddf0      	ble.n	80012e2 <main+0x4e2>
				}
				int len = sprintf(buff, "%i\n\r",bumps);
 8001300:	1d3b      	adds	r3, r7, #4
 8001302:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001306:	4911      	ldr	r1, [pc, #68]	; (800134c <main+0x54c>)
 8001308:	4618      	mov	r0, r3
 800130a:	f009 fd45 	bl	800ad98 <siprintf>
 800130e:	f8c7 0134 	str.w	r0, [r7, #308]	; 0x134
				CDC_Transmit_FS((uint8_t*)&buff, len);
 8001312:	1d3b      	adds	r3, r7, #4
 8001314:	f8d7 1134 	ldr.w	r1, [r7, #308]	; 0x134
 8001318:	4618      	mov	r0, r3
 800131a:	f008 fc95 	bl	8009c48 <CDC_Transmit_FS>
				once3++;
 800131e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001322:	3301      	adds	r3, #1
 8001324:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
			//}

		}

		while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)){};
 8001328:	bf00      	nop
 800132a:	2101      	movs	r1, #1
 800132c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001330:	f000 fed4 	bl	80020dc <HAL_GPIO_ReadPin>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d1f7      	bne.n	800132a <main+0x52a>
	  HAL_Delay(10);
 800133a:	e5b7      	b.n	8000eac <main+0xac>
 800133c:	0800e1d8 	.word	0x0800e1d8
 8001340:	48001000 	.word	0x48001000
 8001344:	0800e214 	.word	0x0800e214
 8001348:	0800e24c 	.word	0x0800e24c
 800134c:	0800e258 	.word	0x0800e258

08001350 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b09e      	sub	sp, #120	; 0x78
 8001354:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001356:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800135a:	2228      	movs	r2, #40	; 0x28
 800135c:	2100      	movs	r1, #0
 800135e:	4618      	mov	r0, r3
 8001360:	f009 f8a8 	bl	800a4b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001364:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	605a      	str	r2, [r3, #4]
 800136e:	609a      	str	r2, [r3, #8]
 8001370:	60da      	str	r2, [r3, #12]
 8001372:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001374:	463b      	mov	r3, r7
 8001376:	223c      	movs	r2, #60	; 0x3c
 8001378:	2100      	movs	r1, #0
 800137a:	4618      	mov	r0, r3
 800137c:	f009 f89a 	bl	800a4b4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001380:	2303      	movs	r3, #3
 8001382:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001384:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001388:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800138a:	2300      	movs	r3, #0
 800138c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800138e:	2301      	movs	r3, #1
 8001390:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001392:	2310      	movs	r3, #16
 8001394:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001396:	2302      	movs	r3, #2
 8001398:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800139a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800139e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80013a0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80013a4:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013a6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80013aa:	4618      	mov	r0, r3
 80013ac:	f003 f932 	bl	8004614 <HAL_RCC_OscConfig>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80013b6:	f000 f975 	bl	80016a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013ba:	230f      	movs	r3, #15
 80013bc:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013be:	2302      	movs	r3, #2
 80013c0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013c2:	2300      	movs	r3, #0
 80013c4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013cc:	2300      	movs	r3, #0
 80013ce:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013d0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80013d4:	2102      	movs	r1, #2
 80013d6:	4618      	mov	r0, r3
 80013d8:	f004 f824 	bl	8005424 <HAL_RCC_ClockConfig>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80013e2:	f000 f95f 	bl	80016a4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 80013e6:	4b09      	ldr	r3, [pc, #36]	; (800140c <SystemClock_Config+0xbc>)
 80013e8:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80013ea:	2300      	movs	r3, #0
 80013ec:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80013ee:	2300      	movs	r3, #0
 80013f0:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013f2:	463b      	mov	r3, r7
 80013f4:	4618      	mov	r0, r3
 80013f6:	f004 f9fb 	bl	80057f0 <HAL_RCCEx_PeriphCLKConfig>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001400:	f000 f950 	bl	80016a4 <Error_Handler>
  }
}
 8001404:	bf00      	nop
 8001406:	3778      	adds	r7, #120	; 0x78
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	00020020 	.word	0x00020020

08001410 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001414:	4b1b      	ldr	r3, [pc, #108]	; (8001484 <MX_I2C1_Init+0x74>)
 8001416:	4a1c      	ldr	r2, [pc, #112]	; (8001488 <MX_I2C1_Init+0x78>)
 8001418:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 800141a:	4b1a      	ldr	r3, [pc, #104]	; (8001484 <MX_I2C1_Init+0x74>)
 800141c:	f240 220b 	movw	r2, #523	; 0x20b
 8001420:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001422:	4b18      	ldr	r3, [pc, #96]	; (8001484 <MX_I2C1_Init+0x74>)
 8001424:	2200      	movs	r2, #0
 8001426:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001428:	4b16      	ldr	r3, [pc, #88]	; (8001484 <MX_I2C1_Init+0x74>)
 800142a:	2201      	movs	r2, #1
 800142c:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800142e:	4b15      	ldr	r3, [pc, #84]	; (8001484 <MX_I2C1_Init+0x74>)
 8001430:	2200      	movs	r2, #0
 8001432:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001434:	4b13      	ldr	r3, [pc, #76]	; (8001484 <MX_I2C1_Init+0x74>)
 8001436:	2200      	movs	r2, #0
 8001438:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800143a:	4b12      	ldr	r3, [pc, #72]	; (8001484 <MX_I2C1_Init+0x74>)
 800143c:	2200      	movs	r2, #0
 800143e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001440:	4b10      	ldr	r3, [pc, #64]	; (8001484 <MX_I2C1_Init+0x74>)
 8001442:	2200      	movs	r2, #0
 8001444:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001446:	4b0f      	ldr	r3, [pc, #60]	; (8001484 <MX_I2C1_Init+0x74>)
 8001448:	2200      	movs	r2, #0
 800144a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800144c:	480d      	ldr	r0, [pc, #52]	; (8001484 <MX_I2C1_Init+0x74>)
 800144e:	f000 fe75 	bl	800213c <HAL_I2C_Init>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001458:	f000 f924 	bl	80016a4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800145c:	2100      	movs	r1, #0
 800145e:	4809      	ldr	r0, [pc, #36]	; (8001484 <MX_I2C1_Init+0x74>)
 8001460:	f001 fb56 	bl	8002b10 <HAL_I2CEx_ConfigAnalogFilter>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800146a:	f000 f91b 	bl	80016a4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800146e:	2100      	movs	r1, #0
 8001470:	4804      	ldr	r0, [pc, #16]	; (8001484 <MX_I2C1_Init+0x74>)
 8001472:	f001 fb98 	bl	8002ba6 <HAL_I2CEx_ConfigDigitalFilter>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 800147c:	f000 f912 	bl	80016a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001480:	bf00      	nop
 8001482:	bd80      	pop	{r7, pc}
 8001484:	2000059c 	.word	0x2000059c
 8001488:	40005400 	.word	0x40005400

0800148c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001490:	4b1b      	ldr	r3, [pc, #108]	; (8001500 <MX_SPI1_Init+0x74>)
 8001492:	4a1c      	ldr	r2, [pc, #112]	; (8001504 <MX_SPI1_Init+0x78>)
 8001494:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001496:	4b1a      	ldr	r3, [pc, #104]	; (8001500 <MX_SPI1_Init+0x74>)
 8001498:	f44f 7282 	mov.w	r2, #260	; 0x104
 800149c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800149e:	4b18      	ldr	r3, [pc, #96]	; (8001500 <MX_SPI1_Init+0x74>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80014a4:	4b16      	ldr	r3, [pc, #88]	; (8001500 <MX_SPI1_Init+0x74>)
 80014a6:	f44f 7240 	mov.w	r2, #768	; 0x300
 80014aa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014ac:	4b14      	ldr	r3, [pc, #80]	; (8001500 <MX_SPI1_Init+0x74>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014b2:	4b13      	ldr	r3, [pc, #76]	; (8001500 <MX_SPI1_Init+0x74>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80014b8:	4b11      	ldr	r3, [pc, #68]	; (8001500 <MX_SPI1_Init+0x74>)
 80014ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014be:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80014c0:	4b0f      	ldr	r3, [pc, #60]	; (8001500 <MX_SPI1_Init+0x74>)
 80014c2:	2208      	movs	r2, #8
 80014c4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014c6:	4b0e      	ldr	r3, [pc, #56]	; (8001500 <MX_SPI1_Init+0x74>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80014cc:	4b0c      	ldr	r3, [pc, #48]	; (8001500 <MX_SPI1_Init+0x74>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014d2:	4b0b      	ldr	r3, [pc, #44]	; (8001500 <MX_SPI1_Init+0x74>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80014d8:	4b09      	ldr	r3, [pc, #36]	; (8001500 <MX_SPI1_Init+0x74>)
 80014da:	2207      	movs	r2, #7
 80014dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80014de:	4b08      	ldr	r3, [pc, #32]	; (8001500 <MX_SPI1_Init+0x74>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80014e4:	4b06      	ldr	r3, [pc, #24]	; (8001500 <MX_SPI1_Init+0x74>)
 80014e6:	2208      	movs	r2, #8
 80014e8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80014ea:	4805      	ldr	r0, [pc, #20]	; (8001500 <MX_SPI1_Init+0x74>)
 80014ec:	f004 fb30 	bl	8005b50 <HAL_SPI_Init>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80014f6:	f000 f8d5 	bl	80016a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80014fa:	bf00      	nop
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	20000634 	.word	0x20000634
 8001504:	40013000 	.word	0x40013000

08001508 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b088      	sub	sp, #32
 800150c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800150e:	f107 0310 	add.w	r3, r7, #16
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	605a      	str	r2, [r3, #4]
 8001518:	609a      	str	r2, [r3, #8]
 800151a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800151c:	1d3b      	adds	r3, r7, #4
 800151e:	2200      	movs	r2, #0
 8001520:	601a      	str	r2, [r3, #0]
 8001522:	605a      	str	r2, [r3, #4]
 8001524:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001526:	4b1e      	ldr	r3, [pc, #120]	; (80015a0 <MX_TIM3_Init+0x98>)
 8001528:	4a1e      	ldr	r2, [pc, #120]	; (80015a4 <MX_TIM3_Init+0x9c>)
 800152a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 59999;
 800152c:	4b1c      	ldr	r3, [pc, #112]	; (80015a0 <MX_TIM3_Init+0x98>)
 800152e:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8001532:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001534:	4b1a      	ldr	r3, [pc, #104]	; (80015a0 <MX_TIM3_Init+0x98>)
 8001536:	2200      	movs	r2, #0
 8001538:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800153a:	4b19      	ldr	r3, [pc, #100]	; (80015a0 <MX_TIM3_Init+0x98>)
 800153c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001540:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001542:	4b17      	ldr	r3, [pc, #92]	; (80015a0 <MX_TIM3_Init+0x98>)
 8001544:	2200      	movs	r2, #0
 8001546:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001548:	4b15      	ldr	r3, [pc, #84]	; (80015a0 <MX_TIM3_Init+0x98>)
 800154a:	2200      	movs	r2, #0
 800154c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800154e:	4814      	ldr	r0, [pc, #80]	; (80015a0 <MX_TIM3_Init+0x98>)
 8001550:	f004 fba9 	bl	8005ca6 <HAL_TIM_Base_Init>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 800155a:	f000 f8a3 	bl	80016a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800155e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001562:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001564:	f107 0310 	add.w	r3, r7, #16
 8001568:	4619      	mov	r1, r3
 800156a:	480d      	ldr	r0, [pc, #52]	; (80015a0 <MX_TIM3_Init+0x98>)
 800156c:	f004 fc54 	bl	8005e18 <HAL_TIM_ConfigClockSource>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8001576:	f000 f895 	bl	80016a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800157a:	2300      	movs	r3, #0
 800157c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800157e:	2300      	movs	r3, #0
 8001580:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001582:	1d3b      	adds	r3, r7, #4
 8001584:	4619      	mov	r1, r3
 8001586:	4806      	ldr	r0, [pc, #24]	; (80015a0 <MX_TIM3_Init+0x98>)
 8001588:	f004 fe3a 	bl	8006200 <HAL_TIMEx_MasterConfigSynchronization>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8001592:	f000 f887 	bl	80016a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001596:	bf00      	nop
 8001598:	3720      	adds	r7, #32
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	200005e8 	.word	0x200005e8
 80015a4:	40000400 	.word	0x40000400

080015a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b08a      	sub	sp, #40	; 0x28
 80015ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ae:	f107 0314 	add.w	r3, r7, #20
 80015b2:	2200      	movs	r2, #0
 80015b4:	601a      	str	r2, [r3, #0]
 80015b6:	605a      	str	r2, [r3, #4]
 80015b8:	609a      	str	r2, [r3, #8]
 80015ba:	60da      	str	r2, [r3, #12]
 80015bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015be:	4b37      	ldr	r3, [pc, #220]	; (800169c <MX_GPIO_Init+0xf4>)
 80015c0:	695b      	ldr	r3, [r3, #20]
 80015c2:	4a36      	ldr	r2, [pc, #216]	; (800169c <MX_GPIO_Init+0xf4>)
 80015c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015c8:	6153      	str	r3, [r2, #20]
 80015ca:	4b34      	ldr	r3, [pc, #208]	; (800169c <MX_GPIO_Init+0xf4>)
 80015cc:	695b      	ldr	r3, [r3, #20]
 80015ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015d2:	613b      	str	r3, [r7, #16]
 80015d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015d6:	4b31      	ldr	r3, [pc, #196]	; (800169c <MX_GPIO_Init+0xf4>)
 80015d8:	695b      	ldr	r3, [r3, #20]
 80015da:	4a30      	ldr	r2, [pc, #192]	; (800169c <MX_GPIO_Init+0xf4>)
 80015dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80015e0:	6153      	str	r3, [r2, #20]
 80015e2:	4b2e      	ldr	r3, [pc, #184]	; (800169c <MX_GPIO_Init+0xf4>)
 80015e4:	695b      	ldr	r3, [r3, #20]
 80015e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015ea:	60fb      	str	r3, [r7, #12]
 80015ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80015ee:	4b2b      	ldr	r3, [pc, #172]	; (800169c <MX_GPIO_Init+0xf4>)
 80015f0:	695b      	ldr	r3, [r3, #20]
 80015f2:	4a2a      	ldr	r2, [pc, #168]	; (800169c <MX_GPIO_Init+0xf4>)
 80015f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80015f8:	6153      	str	r3, [r2, #20]
 80015fa:	4b28      	ldr	r3, [pc, #160]	; (800169c <MX_GPIO_Init+0xf4>)
 80015fc:	695b      	ldr	r3, [r3, #20]
 80015fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001602:	60bb      	str	r3, [r7, #8]
 8001604:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001606:	4b25      	ldr	r3, [pc, #148]	; (800169c <MX_GPIO_Init+0xf4>)
 8001608:	695b      	ldr	r3, [r3, #20]
 800160a:	4a24      	ldr	r2, [pc, #144]	; (800169c <MX_GPIO_Init+0xf4>)
 800160c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001610:	6153      	str	r3, [r2, #20]
 8001612:	4b22      	ldr	r3, [pc, #136]	; (800169c <MX_GPIO_Init+0xf4>)
 8001614:	695b      	ldr	r3, [r3, #20]
 8001616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161a:	607b      	str	r3, [r7, #4]
 800161c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800161e:	4b1f      	ldr	r3, [pc, #124]	; (800169c <MX_GPIO_Init+0xf4>)
 8001620:	695b      	ldr	r3, [r3, #20]
 8001622:	4a1e      	ldr	r2, [pc, #120]	; (800169c <MX_GPIO_Init+0xf4>)
 8001624:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001628:	6153      	str	r3, [r2, #20]
 800162a:	4b1c      	ldr	r3, [pc, #112]	; (800169c <MX_GPIO_Init+0xf4>)
 800162c:	695b      	ldr	r3, [r3, #20]
 800162e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001632:	603b      	str	r3, [r7, #0]
 8001634:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8001636:	2200      	movs	r2, #0
 8001638:	f64f 7108 	movw	r1, #65288	; 0xff08
 800163c:	4818      	ldr	r0, [pc, #96]	; (80016a0 <MX_GPIO_Init+0xf8>)
 800163e:	f000 fd65 	bl	800210c <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8001642:	2337      	movs	r3, #55	; 0x37
 8001644:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001646:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800164a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164c:	2300      	movs	r3, #0
 800164e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001650:	f107 0314 	add.w	r3, r7, #20
 8001654:	4619      	mov	r1, r3
 8001656:	4812      	ldr	r0, [pc, #72]	; (80016a0 <MX_GPIO_Init+0xf8>)
 8001658:	f000 fbc6 	bl	8001de8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800165c:	f64f 7308 	movw	r3, #65288	; 0xff08
 8001660:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001662:	2301      	movs	r3, #1
 8001664:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001666:	2300      	movs	r3, #0
 8001668:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800166a:	2300      	movs	r3, #0
 800166c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800166e:	f107 0314 	add.w	r3, r7, #20
 8001672:	4619      	mov	r1, r3
 8001674:	480a      	ldr	r0, [pc, #40]	; (80016a0 <MX_GPIO_Init+0xf8>)
 8001676:	f000 fbb7 	bl	8001de8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800167a:	2301      	movs	r3, #1
 800167c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800167e:	2300      	movs	r3, #0
 8001680:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001682:	2300      	movs	r3, #0
 8001684:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001686:	f107 0314 	add.w	r3, r7, #20
 800168a:	4619      	mov	r1, r3
 800168c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001690:	f000 fbaa 	bl	8001de8 <HAL_GPIO_Init>

}
 8001694:	bf00      	nop
 8001696:	3728      	adds	r7, #40	; 0x28
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	40021000 	.word	0x40021000
 80016a0:	48001000 	.word	0x48001000

080016a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016a8:	b672      	cpsid	i
}
 80016aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016ac:	e7fe      	b.n	80016ac <Error_Handler+0x8>
	...

080016b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016b6:	4b0f      	ldr	r3, [pc, #60]	; (80016f4 <HAL_MspInit+0x44>)
 80016b8:	699b      	ldr	r3, [r3, #24]
 80016ba:	4a0e      	ldr	r2, [pc, #56]	; (80016f4 <HAL_MspInit+0x44>)
 80016bc:	f043 0301 	orr.w	r3, r3, #1
 80016c0:	6193      	str	r3, [r2, #24]
 80016c2:	4b0c      	ldr	r3, [pc, #48]	; (80016f4 <HAL_MspInit+0x44>)
 80016c4:	699b      	ldr	r3, [r3, #24]
 80016c6:	f003 0301 	and.w	r3, r3, #1
 80016ca:	607b      	str	r3, [r7, #4]
 80016cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ce:	4b09      	ldr	r3, [pc, #36]	; (80016f4 <HAL_MspInit+0x44>)
 80016d0:	69db      	ldr	r3, [r3, #28]
 80016d2:	4a08      	ldr	r2, [pc, #32]	; (80016f4 <HAL_MspInit+0x44>)
 80016d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016d8:	61d3      	str	r3, [r2, #28]
 80016da:	4b06      	ldr	r3, [pc, #24]	; (80016f4 <HAL_MspInit+0x44>)
 80016dc:	69db      	ldr	r3, [r3, #28]
 80016de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016e2:	603b      	str	r3, [r7, #0]
 80016e4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80016e6:	2007      	movs	r0, #7
 80016e8:	f000 fb3c 	bl	8001d64 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016ec:	bf00      	nop
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	40021000 	.word	0x40021000

080016f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b08a      	sub	sp, #40	; 0x28
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001700:	f107 0314 	add.w	r3, r7, #20
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	605a      	str	r2, [r3, #4]
 800170a:	609a      	str	r2, [r3, #8]
 800170c:	60da      	str	r2, [r3, #12]
 800170e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a17      	ldr	r2, [pc, #92]	; (8001774 <HAL_I2C_MspInit+0x7c>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d127      	bne.n	800176a <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800171a:	4b17      	ldr	r3, [pc, #92]	; (8001778 <HAL_I2C_MspInit+0x80>)
 800171c:	695b      	ldr	r3, [r3, #20]
 800171e:	4a16      	ldr	r2, [pc, #88]	; (8001778 <HAL_I2C_MspInit+0x80>)
 8001720:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001724:	6153      	str	r3, [r2, #20]
 8001726:	4b14      	ldr	r3, [pc, #80]	; (8001778 <HAL_I2C_MspInit+0x80>)
 8001728:	695b      	ldr	r3, [r3, #20]
 800172a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800172e:	613b      	str	r3, [r7, #16]
 8001730:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001732:	23c0      	movs	r3, #192	; 0xc0
 8001734:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001736:	2312      	movs	r3, #18
 8001738:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800173a:	2301      	movs	r3, #1
 800173c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800173e:	2303      	movs	r3, #3
 8001740:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001742:	2304      	movs	r3, #4
 8001744:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001746:	f107 0314 	add.w	r3, r7, #20
 800174a:	4619      	mov	r1, r3
 800174c:	480b      	ldr	r0, [pc, #44]	; (800177c <HAL_I2C_MspInit+0x84>)
 800174e:	f000 fb4b 	bl	8001de8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001752:	4b09      	ldr	r3, [pc, #36]	; (8001778 <HAL_I2C_MspInit+0x80>)
 8001754:	69db      	ldr	r3, [r3, #28]
 8001756:	4a08      	ldr	r2, [pc, #32]	; (8001778 <HAL_I2C_MspInit+0x80>)
 8001758:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800175c:	61d3      	str	r3, [r2, #28]
 800175e:	4b06      	ldr	r3, [pc, #24]	; (8001778 <HAL_I2C_MspInit+0x80>)
 8001760:	69db      	ldr	r3, [r3, #28]
 8001762:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001766:	60fb      	str	r3, [r7, #12]
 8001768:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800176a:	bf00      	nop
 800176c:	3728      	adds	r7, #40	; 0x28
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	40005400 	.word	0x40005400
 8001778:	40021000 	.word	0x40021000
 800177c:	48000400 	.word	0x48000400

08001780 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b08a      	sub	sp, #40	; 0x28
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001788:	f107 0314 	add.w	r3, r7, #20
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	605a      	str	r2, [r3, #4]
 8001792:	609a      	str	r2, [r3, #8]
 8001794:	60da      	str	r2, [r3, #12]
 8001796:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a17      	ldr	r2, [pc, #92]	; (80017fc <HAL_SPI_MspInit+0x7c>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d128      	bne.n	80017f4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80017a2:	4b17      	ldr	r3, [pc, #92]	; (8001800 <HAL_SPI_MspInit+0x80>)
 80017a4:	699b      	ldr	r3, [r3, #24]
 80017a6:	4a16      	ldr	r2, [pc, #88]	; (8001800 <HAL_SPI_MspInit+0x80>)
 80017a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017ac:	6193      	str	r3, [r2, #24]
 80017ae:	4b14      	ldr	r3, [pc, #80]	; (8001800 <HAL_SPI_MspInit+0x80>)
 80017b0:	699b      	ldr	r3, [r3, #24]
 80017b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017b6:	613b      	str	r3, [r7, #16]
 80017b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ba:	4b11      	ldr	r3, [pc, #68]	; (8001800 <HAL_SPI_MspInit+0x80>)
 80017bc:	695b      	ldr	r3, [r3, #20]
 80017be:	4a10      	ldr	r2, [pc, #64]	; (8001800 <HAL_SPI_MspInit+0x80>)
 80017c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017c4:	6153      	str	r3, [r2, #20]
 80017c6:	4b0e      	ldr	r3, [pc, #56]	; (8001800 <HAL_SPI_MspInit+0x80>)
 80017c8:	695b      	ldr	r3, [r3, #20]
 80017ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ce:	60fb      	str	r3, [r7, #12]
 80017d0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 80017d2:	23e0      	movs	r3, #224	; 0xe0
 80017d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d6:	2302      	movs	r3, #2
 80017d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017da:	2300      	movs	r3, #0
 80017dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017de:	2303      	movs	r3, #3
 80017e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80017e2:	2305      	movs	r3, #5
 80017e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e6:	f107 0314 	add.w	r3, r7, #20
 80017ea:	4619      	mov	r1, r3
 80017ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017f0:	f000 fafa 	bl	8001de8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80017f4:	bf00      	nop
 80017f6:	3728      	adds	r7, #40	; 0x28
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	40013000 	.word	0x40013000
 8001800:	40021000 	.word	0x40021000

08001804 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001804:	b480      	push	{r7}
 8001806:	b085      	sub	sp, #20
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a0a      	ldr	r2, [pc, #40]	; (800183c <HAL_TIM_Base_MspInit+0x38>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d10b      	bne.n	800182e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001816:	4b0a      	ldr	r3, [pc, #40]	; (8001840 <HAL_TIM_Base_MspInit+0x3c>)
 8001818:	69db      	ldr	r3, [r3, #28]
 800181a:	4a09      	ldr	r2, [pc, #36]	; (8001840 <HAL_TIM_Base_MspInit+0x3c>)
 800181c:	f043 0302 	orr.w	r3, r3, #2
 8001820:	61d3      	str	r3, [r2, #28]
 8001822:	4b07      	ldr	r3, [pc, #28]	; (8001840 <HAL_TIM_Base_MspInit+0x3c>)
 8001824:	69db      	ldr	r3, [r3, #28]
 8001826:	f003 0302 	and.w	r3, r3, #2
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800182e:	bf00      	nop
 8001830:	3714      	adds	r7, #20
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	40000400 	.word	0x40000400
 8001840:	40021000 	.word	0x40021000

08001844 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001848:	e7fe      	b.n	8001848 <NMI_Handler+0x4>

0800184a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800184a:	b480      	push	{r7}
 800184c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800184e:	e7fe      	b.n	800184e <HardFault_Handler+0x4>

08001850 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001854:	e7fe      	b.n	8001854 <MemManage_Handler+0x4>

08001856 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001856:	b480      	push	{r7}
 8001858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800185a:	e7fe      	b.n	800185a <BusFault_Handler+0x4>

0800185c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001860:	e7fe      	b.n	8001860 <UsageFault_Handler+0x4>

08001862 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001862:	b480      	push	{r7}
 8001864:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001866:	bf00      	nop
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr

08001870 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001874:	bf00      	nop
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr

0800187e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800187e:	b480      	push	{r7}
 8001880:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001882:	bf00      	nop
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001890:	f000 f954 	bl	8001b3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001894:	bf00      	nop
 8001896:	bd80      	pop	{r7, pc}

08001898 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800189c:	4802      	ldr	r0, [pc, #8]	; (80018a8 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 800189e:	f001 fad2 	bl	8002e46 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 80018a2:	bf00      	nop
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	20001330 	.word	0x20001330

080018ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
	return 1;
 80018b0:	2301      	movs	r3, #1
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr

080018bc <_kill>:

int _kill(int pid, int sig)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80018c6:	f008 fdcb 	bl	800a460 <__errno>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2216      	movs	r2, #22
 80018ce:	601a      	str	r2, [r3, #0]
	return -1;
 80018d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3708      	adds	r7, #8
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}

080018dc <_exit>:

void _exit (int status)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80018e4:	f04f 31ff 	mov.w	r1, #4294967295
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f7ff ffe7 	bl	80018bc <_kill>
	while (1) {}		/* Make sure we hang here */
 80018ee:	e7fe      	b.n	80018ee <_exit+0x12>

080018f0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b086      	sub	sp, #24
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	60f8      	str	r0, [r7, #12]
 80018f8:	60b9      	str	r1, [r7, #8]
 80018fa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018fc:	2300      	movs	r3, #0
 80018fe:	617b      	str	r3, [r7, #20]
 8001900:	e00a      	b.n	8001918 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001902:	f3af 8000 	nop.w
 8001906:	4601      	mov	r1, r0
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	1c5a      	adds	r2, r3, #1
 800190c:	60ba      	str	r2, [r7, #8]
 800190e:	b2ca      	uxtb	r2, r1
 8001910:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	3301      	adds	r3, #1
 8001916:	617b      	str	r3, [r7, #20]
 8001918:	697a      	ldr	r2, [r7, #20]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	429a      	cmp	r2, r3
 800191e:	dbf0      	blt.n	8001902 <_read+0x12>
	}

return len;
 8001920:	687b      	ldr	r3, [r7, #4]
}
 8001922:	4618      	mov	r0, r3
 8001924:	3718      	adds	r7, #24
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}

0800192a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800192a:	b580      	push	{r7, lr}
 800192c:	b086      	sub	sp, #24
 800192e:	af00      	add	r7, sp, #0
 8001930:	60f8      	str	r0, [r7, #12]
 8001932:	60b9      	str	r1, [r7, #8]
 8001934:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001936:	2300      	movs	r3, #0
 8001938:	617b      	str	r3, [r7, #20]
 800193a:	e009      	b.n	8001950 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	1c5a      	adds	r2, r3, #1
 8001940:	60ba      	str	r2, [r7, #8]
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	4618      	mov	r0, r3
 8001946:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	3301      	adds	r3, #1
 800194e:	617b      	str	r3, [r7, #20]
 8001950:	697a      	ldr	r2, [r7, #20]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	429a      	cmp	r2, r3
 8001956:	dbf1      	blt.n	800193c <_write+0x12>
	}
	return len;
 8001958:	687b      	ldr	r3, [r7, #4]
}
 800195a:	4618      	mov	r0, r3
 800195c:	3718      	adds	r7, #24
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <_close>:

int _close(int file)
{
 8001962:	b480      	push	{r7}
 8001964:	b083      	sub	sp, #12
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
	return -1;
 800196a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800196e:	4618      	mov	r0, r3
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr

0800197a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800197a:	b480      	push	{r7}
 800197c:	b083      	sub	sp, #12
 800197e:	af00      	add	r7, sp, #0
 8001980:	6078      	str	r0, [r7, #4]
 8001982:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800198a:	605a      	str	r2, [r3, #4]
	return 0;
 800198c:	2300      	movs	r3, #0
}
 800198e:	4618      	mov	r0, r3
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr

0800199a <_isatty>:

int _isatty(int file)
{
 800199a:	b480      	push	{r7}
 800199c:	b083      	sub	sp, #12
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
	return 1;
 80019a2:	2301      	movs	r3, #1
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b085      	sub	sp, #20
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	60b9      	str	r1, [r7, #8]
 80019ba:	607a      	str	r2, [r7, #4]
	return 0;
 80019bc:	2300      	movs	r3, #0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3714      	adds	r7, #20
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
	...

080019cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b086      	sub	sp, #24
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019d4:	4a14      	ldr	r2, [pc, #80]	; (8001a28 <_sbrk+0x5c>)
 80019d6:	4b15      	ldr	r3, [pc, #84]	; (8001a2c <_sbrk+0x60>)
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019e0:	4b13      	ldr	r3, [pc, #76]	; (8001a30 <_sbrk+0x64>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d102      	bne.n	80019ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019e8:	4b11      	ldr	r3, [pc, #68]	; (8001a30 <_sbrk+0x64>)
 80019ea:	4a12      	ldr	r2, [pc, #72]	; (8001a34 <_sbrk+0x68>)
 80019ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019ee:	4b10      	ldr	r3, [pc, #64]	; (8001a30 <_sbrk+0x64>)
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4413      	add	r3, r2
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d207      	bcs.n	8001a0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019fc:	f008 fd30 	bl	800a460 <__errno>
 8001a00:	4603      	mov	r3, r0
 8001a02:	220c      	movs	r2, #12
 8001a04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a06:	f04f 33ff 	mov.w	r3, #4294967295
 8001a0a:	e009      	b.n	8001a20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a0c:	4b08      	ldr	r3, [pc, #32]	; (8001a30 <_sbrk+0x64>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a12:	4b07      	ldr	r3, [pc, #28]	; (8001a30 <_sbrk+0x64>)
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4413      	add	r3, r2
 8001a1a:	4a05      	ldr	r2, [pc, #20]	; (8001a30 <_sbrk+0x64>)
 8001a1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3718      	adds	r7, #24
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	2000a000 	.word	0x2000a000
 8001a2c:	00000400 	.word	0x00000400
 8001a30:	2000036c 	.word	0x2000036c
 8001a34:	20001630 	.word	0x20001630

08001a38 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a3c:	4b06      	ldr	r3, [pc, #24]	; (8001a58 <SystemInit+0x20>)
 8001a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a42:	4a05      	ldr	r2, [pc, #20]	; (8001a58 <SystemInit+0x20>)
 8001a44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a4c:	bf00      	nop
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	e000ed00 	.word	0xe000ed00

08001a5c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001a5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a94 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a60:	480d      	ldr	r0, [pc, #52]	; (8001a98 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a62:	490e      	ldr	r1, [pc, #56]	; (8001a9c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a64:	4a0e      	ldr	r2, [pc, #56]	; (8001aa0 <LoopForever+0xe>)
  movs r3, #0
 8001a66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a68:	e002      	b.n	8001a70 <LoopCopyDataInit>

08001a6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a6e:	3304      	adds	r3, #4

08001a70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a74:	d3f9      	bcc.n	8001a6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a76:	4a0b      	ldr	r2, [pc, #44]	; (8001aa4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a78:	4c0b      	ldr	r4, [pc, #44]	; (8001aa8 <LoopForever+0x16>)
  movs r3, #0
 8001a7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a7c:	e001      	b.n	8001a82 <LoopFillZerobss>

08001a7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a80:	3204      	adds	r2, #4

08001a82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a84:	d3fb      	bcc.n	8001a7e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001a86:	f7ff ffd7 	bl	8001a38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a8a:	f008 fcef 	bl	800a46c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a8e:	f7ff f9b7 	bl	8000e00 <main>

08001a92 <LoopForever>:

LoopForever:
    b LoopForever
 8001a92:	e7fe      	b.n	8001a92 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001a94:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001a98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a9c:	20000350 	.word	0x20000350
  ldr r2, =_sidata
 8001aa0:	0800e6f8 	.word	0x0800e6f8
  ldr r2, =_sbss
 8001aa4:	20000350 	.word	0x20000350
  ldr r4, =_ebss
 8001aa8:	2000162c 	.word	0x2000162c

08001aac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001aac:	e7fe      	b.n	8001aac <ADC1_2_IRQHandler>
	...

08001ab0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ab4:	4b08      	ldr	r3, [pc, #32]	; (8001ad8 <HAL_Init+0x28>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a07      	ldr	r2, [pc, #28]	; (8001ad8 <HAL_Init+0x28>)
 8001aba:	f043 0310 	orr.w	r3, r3, #16
 8001abe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ac0:	2003      	movs	r0, #3
 8001ac2:	f000 f94f 	bl	8001d64 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ac6:	2000      	movs	r0, #0
 8001ac8:	f000 f808 	bl	8001adc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001acc:	f7ff fdf0 	bl	80016b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	40022000 	.word	0x40022000

08001adc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ae4:	4b12      	ldr	r3, [pc, #72]	; (8001b30 <HAL_InitTick+0x54>)
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	4b12      	ldr	r3, [pc, #72]	; (8001b34 <HAL_InitTick+0x58>)
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	4619      	mov	r1, r3
 8001aee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001af2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001af6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001afa:	4618      	mov	r0, r3
 8001afc:	f000 f967 	bl	8001dce <HAL_SYSTICK_Config>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e00e      	b.n	8001b28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2b0f      	cmp	r3, #15
 8001b0e:	d80a      	bhi.n	8001b26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b10:	2200      	movs	r2, #0
 8001b12:	6879      	ldr	r1, [r7, #4]
 8001b14:	f04f 30ff 	mov.w	r0, #4294967295
 8001b18:	f000 f92f 	bl	8001d7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b1c:	4a06      	ldr	r2, [pc, #24]	; (8001b38 <HAL_InitTick+0x5c>)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001b22:	2300      	movs	r3, #0
 8001b24:	e000      	b.n	8001b28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3708      	adds	r7, #8
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	20000000 	.word	0x20000000
 8001b34:	20000008 	.word	0x20000008
 8001b38:	20000004 	.word	0x20000004

08001b3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b40:	4b06      	ldr	r3, [pc, #24]	; (8001b5c <HAL_IncTick+0x20>)
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	461a      	mov	r2, r3
 8001b46:	4b06      	ldr	r3, [pc, #24]	; (8001b60 <HAL_IncTick+0x24>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4413      	add	r3, r2
 8001b4c:	4a04      	ldr	r2, [pc, #16]	; (8001b60 <HAL_IncTick+0x24>)
 8001b4e:	6013      	str	r3, [r2, #0]
}
 8001b50:	bf00      	nop
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	20000008 	.word	0x20000008
 8001b60:	20000698 	.word	0x20000698

08001b64 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  return uwTick;  
 8001b68:	4b03      	ldr	r3, [pc, #12]	; (8001b78 <HAL_GetTick+0x14>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	20000698 	.word	0x20000698

08001b7c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b84:	f7ff ffee 	bl	8001b64 <HAL_GetTick>
 8001b88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b94:	d005      	beq.n	8001ba2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b96:	4b0a      	ldr	r3, [pc, #40]	; (8001bc0 <HAL_Delay+0x44>)
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	4413      	add	r3, r2
 8001ba0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001ba2:	bf00      	nop
 8001ba4:	f7ff ffde 	bl	8001b64 <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	68fa      	ldr	r2, [r7, #12]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d8f7      	bhi.n	8001ba4 <HAL_Delay+0x28>
  {
  }
}
 8001bb4:	bf00      	nop
 8001bb6:	bf00      	nop
 8001bb8:	3710      	adds	r7, #16
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	20000008 	.word	0x20000008

08001bc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b085      	sub	sp, #20
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f003 0307 	and.w	r3, r3, #7
 8001bd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bd4:	4b0c      	ldr	r3, [pc, #48]	; (8001c08 <__NVIC_SetPriorityGrouping+0x44>)
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bda:	68ba      	ldr	r2, [r7, #8]
 8001bdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001be0:	4013      	ands	r3, r2
 8001be2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bf6:	4a04      	ldr	r2, [pc, #16]	; (8001c08 <__NVIC_SetPriorityGrouping+0x44>)
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	60d3      	str	r3, [r2, #12]
}
 8001bfc:	bf00      	nop
 8001bfe:	3714      	adds	r7, #20
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr
 8001c08:	e000ed00 	.word	0xe000ed00

08001c0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c10:	4b04      	ldr	r3, [pc, #16]	; (8001c24 <__NVIC_GetPriorityGrouping+0x18>)
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	0a1b      	lsrs	r3, r3, #8
 8001c16:	f003 0307 	and.w	r3, r3, #7
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr
 8001c24:	e000ed00 	.word	0xe000ed00

08001c28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	4603      	mov	r3, r0
 8001c30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	db0b      	blt.n	8001c52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c3a:	79fb      	ldrb	r3, [r7, #7]
 8001c3c:	f003 021f 	and.w	r2, r3, #31
 8001c40:	4907      	ldr	r1, [pc, #28]	; (8001c60 <__NVIC_EnableIRQ+0x38>)
 8001c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c46:	095b      	lsrs	r3, r3, #5
 8001c48:	2001      	movs	r0, #1
 8001c4a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c52:	bf00      	nop
 8001c54:	370c      	adds	r7, #12
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	e000e100 	.word	0xe000e100

08001c64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	6039      	str	r1, [r7, #0]
 8001c6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	db0a      	blt.n	8001c8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	b2da      	uxtb	r2, r3
 8001c7c:	490c      	ldr	r1, [pc, #48]	; (8001cb0 <__NVIC_SetPriority+0x4c>)
 8001c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c82:	0112      	lsls	r2, r2, #4
 8001c84:	b2d2      	uxtb	r2, r2
 8001c86:	440b      	add	r3, r1
 8001c88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c8c:	e00a      	b.n	8001ca4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	b2da      	uxtb	r2, r3
 8001c92:	4908      	ldr	r1, [pc, #32]	; (8001cb4 <__NVIC_SetPriority+0x50>)
 8001c94:	79fb      	ldrb	r3, [r7, #7]
 8001c96:	f003 030f 	and.w	r3, r3, #15
 8001c9a:	3b04      	subs	r3, #4
 8001c9c:	0112      	lsls	r2, r2, #4
 8001c9e:	b2d2      	uxtb	r2, r2
 8001ca0:	440b      	add	r3, r1
 8001ca2:	761a      	strb	r2, [r3, #24]
}
 8001ca4:	bf00      	nop
 8001ca6:	370c      	adds	r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr
 8001cb0:	e000e100 	.word	0xe000e100
 8001cb4:	e000ed00 	.word	0xe000ed00

08001cb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b089      	sub	sp, #36	; 0x24
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	60f8      	str	r0, [r7, #12]
 8001cc0:	60b9      	str	r1, [r7, #8]
 8001cc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	f003 0307 	and.w	r3, r3, #7
 8001cca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	f1c3 0307 	rsb	r3, r3, #7
 8001cd2:	2b04      	cmp	r3, #4
 8001cd4:	bf28      	it	cs
 8001cd6:	2304      	movcs	r3, #4
 8001cd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	3304      	adds	r3, #4
 8001cde:	2b06      	cmp	r3, #6
 8001ce0:	d902      	bls.n	8001ce8 <NVIC_EncodePriority+0x30>
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	3b03      	subs	r3, #3
 8001ce6:	e000      	b.n	8001cea <NVIC_EncodePriority+0x32>
 8001ce8:	2300      	movs	r3, #0
 8001cea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cec:	f04f 32ff 	mov.w	r2, #4294967295
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf6:	43da      	mvns	r2, r3
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	401a      	ands	r2, r3
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d00:	f04f 31ff 	mov.w	r1, #4294967295
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	fa01 f303 	lsl.w	r3, r1, r3
 8001d0a:	43d9      	mvns	r1, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d10:	4313      	orrs	r3, r2
         );
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3724      	adds	r7, #36	; 0x24
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
	...

08001d20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	3b01      	subs	r3, #1
 8001d2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d30:	d301      	bcc.n	8001d36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d32:	2301      	movs	r3, #1
 8001d34:	e00f      	b.n	8001d56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d36:	4a0a      	ldr	r2, [pc, #40]	; (8001d60 <SysTick_Config+0x40>)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	3b01      	subs	r3, #1
 8001d3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d3e:	210f      	movs	r1, #15
 8001d40:	f04f 30ff 	mov.w	r0, #4294967295
 8001d44:	f7ff ff8e 	bl	8001c64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d48:	4b05      	ldr	r3, [pc, #20]	; (8001d60 <SysTick_Config+0x40>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d4e:	4b04      	ldr	r3, [pc, #16]	; (8001d60 <SysTick_Config+0x40>)
 8001d50:	2207      	movs	r2, #7
 8001d52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d54:	2300      	movs	r3, #0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	e000e010 	.word	0xe000e010

08001d64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f7ff ff29 	bl	8001bc4 <__NVIC_SetPriorityGrouping>
}
 8001d72:	bf00      	nop
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b086      	sub	sp, #24
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	4603      	mov	r3, r0
 8001d82:	60b9      	str	r1, [r7, #8]
 8001d84:	607a      	str	r2, [r7, #4]
 8001d86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d8c:	f7ff ff3e 	bl	8001c0c <__NVIC_GetPriorityGrouping>
 8001d90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	68b9      	ldr	r1, [r7, #8]
 8001d96:	6978      	ldr	r0, [r7, #20]
 8001d98:	f7ff ff8e 	bl	8001cb8 <NVIC_EncodePriority>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001da2:	4611      	mov	r1, r2
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7ff ff5d 	bl	8001c64 <__NVIC_SetPriority>
}
 8001daa:	bf00      	nop
 8001dac:	3718      	adds	r7, #24
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}

08001db2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001db2:	b580      	push	{r7, lr}
 8001db4:	b082      	sub	sp, #8
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	4603      	mov	r3, r0
 8001dba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7ff ff31 	bl	8001c28 <__NVIC_EnableIRQ>
}
 8001dc6:	bf00      	nop
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	b082      	sub	sp, #8
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f7ff ffa2 	bl	8001d20 <SysTick_Config>
 8001ddc:	4603      	mov	r3, r0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
	...

08001de8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b087      	sub	sp, #28
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001df2:	2300      	movs	r3, #0
 8001df4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001df6:	e154      	b.n	80020a2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	2101      	movs	r1, #1
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	fa01 f303 	lsl.w	r3, r1, r3
 8001e04:	4013      	ands	r3, r2
 8001e06:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	f000 8146 	beq.w	800209c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f003 0303 	and.w	r3, r3, #3
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d005      	beq.n	8001e28 <HAL_GPIO_Init+0x40>
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f003 0303 	and.w	r3, r3, #3
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d130      	bne.n	8001e8a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	2203      	movs	r2, #3
 8001e34:	fa02 f303 	lsl.w	r3, r2, r3
 8001e38:	43db      	mvns	r3, r3
 8001e3a:	693a      	ldr	r2, [r7, #16]
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	68da      	ldr	r2, [r3, #12]
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	005b      	lsls	r3, r3, #1
 8001e48:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4c:	693a      	ldr	r2, [r7, #16]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	693a      	ldr	r2, [r7, #16]
 8001e56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e5e:	2201      	movs	r2, #1
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	fa02 f303 	lsl.w	r3, r2, r3
 8001e66:	43db      	mvns	r3, r3
 8001e68:	693a      	ldr	r2, [r7, #16]
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	091b      	lsrs	r3, r3, #4
 8001e74:	f003 0201 	and.w	r2, r3, #1
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7e:	693a      	ldr	r2, [r7, #16]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	693a      	ldr	r2, [r7, #16]
 8001e88:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f003 0303 	and.w	r3, r3, #3
 8001e92:	2b03      	cmp	r3, #3
 8001e94:	d017      	beq.n	8001ec6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	68db      	ldr	r3, [r3, #12]
 8001e9a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	2203      	movs	r2, #3
 8001ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea6:	43db      	mvns	r3, r3
 8001ea8:	693a      	ldr	r2, [r7, #16]
 8001eaa:	4013      	ands	r3, r2
 8001eac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	689a      	ldr	r2, [r3, #8]
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	005b      	lsls	r3, r3, #1
 8001eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eba:	693a      	ldr	r2, [r7, #16]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	693a      	ldr	r2, [r7, #16]
 8001ec4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f003 0303 	and.w	r3, r3, #3
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d123      	bne.n	8001f1a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	08da      	lsrs	r2, r3, #3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	3208      	adds	r2, #8
 8001eda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ede:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	f003 0307 	and.w	r3, r3, #7
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	220f      	movs	r2, #15
 8001eea:	fa02 f303 	lsl.w	r3, r2, r3
 8001eee:	43db      	mvns	r3, r3
 8001ef0:	693a      	ldr	r2, [r7, #16]
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	691a      	ldr	r2, [r3, #16]
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	f003 0307 	and.w	r3, r3, #7
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	fa02 f303 	lsl.w	r3, r2, r3
 8001f06:	693a      	ldr	r2, [r7, #16]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	08da      	lsrs	r2, r3, #3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	3208      	adds	r2, #8
 8001f14:	6939      	ldr	r1, [r7, #16]
 8001f16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	005b      	lsls	r3, r3, #1
 8001f24:	2203      	movs	r2, #3
 8001f26:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2a:	43db      	mvns	r3, r3
 8001f2c:	693a      	ldr	r2, [r7, #16]
 8001f2e:	4013      	ands	r3, r2
 8001f30:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f003 0203 	and.w	r2, r3, #3
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f42:	693a      	ldr	r2, [r7, #16]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	693a      	ldr	r2, [r7, #16]
 8001f4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	f000 80a0 	beq.w	800209c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f5c:	4b58      	ldr	r3, [pc, #352]	; (80020c0 <HAL_GPIO_Init+0x2d8>)
 8001f5e:	699b      	ldr	r3, [r3, #24]
 8001f60:	4a57      	ldr	r2, [pc, #348]	; (80020c0 <HAL_GPIO_Init+0x2d8>)
 8001f62:	f043 0301 	orr.w	r3, r3, #1
 8001f66:	6193      	str	r3, [r2, #24]
 8001f68:	4b55      	ldr	r3, [pc, #340]	; (80020c0 <HAL_GPIO_Init+0x2d8>)
 8001f6a:	699b      	ldr	r3, [r3, #24]
 8001f6c:	f003 0301 	and.w	r3, r3, #1
 8001f70:	60bb      	str	r3, [r7, #8]
 8001f72:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f74:	4a53      	ldr	r2, [pc, #332]	; (80020c4 <HAL_GPIO_Init+0x2dc>)
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	089b      	lsrs	r3, r3, #2
 8001f7a:	3302      	adds	r3, #2
 8001f7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f80:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	f003 0303 	and.w	r3, r3, #3
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	220f      	movs	r2, #15
 8001f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f90:	43db      	mvns	r3, r3
 8001f92:	693a      	ldr	r2, [r7, #16]
 8001f94:	4013      	ands	r3, r2
 8001f96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001f9e:	d019      	beq.n	8001fd4 <HAL_GPIO_Init+0x1ec>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	4a49      	ldr	r2, [pc, #292]	; (80020c8 <HAL_GPIO_Init+0x2e0>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d013      	beq.n	8001fd0 <HAL_GPIO_Init+0x1e8>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	4a48      	ldr	r2, [pc, #288]	; (80020cc <HAL_GPIO_Init+0x2e4>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d00d      	beq.n	8001fcc <HAL_GPIO_Init+0x1e4>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	4a47      	ldr	r2, [pc, #284]	; (80020d0 <HAL_GPIO_Init+0x2e8>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d007      	beq.n	8001fc8 <HAL_GPIO_Init+0x1e0>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	4a46      	ldr	r2, [pc, #280]	; (80020d4 <HAL_GPIO_Init+0x2ec>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d101      	bne.n	8001fc4 <HAL_GPIO_Init+0x1dc>
 8001fc0:	2304      	movs	r3, #4
 8001fc2:	e008      	b.n	8001fd6 <HAL_GPIO_Init+0x1ee>
 8001fc4:	2305      	movs	r3, #5
 8001fc6:	e006      	b.n	8001fd6 <HAL_GPIO_Init+0x1ee>
 8001fc8:	2303      	movs	r3, #3
 8001fca:	e004      	b.n	8001fd6 <HAL_GPIO_Init+0x1ee>
 8001fcc:	2302      	movs	r3, #2
 8001fce:	e002      	b.n	8001fd6 <HAL_GPIO_Init+0x1ee>
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e000      	b.n	8001fd6 <HAL_GPIO_Init+0x1ee>
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	697a      	ldr	r2, [r7, #20]
 8001fd8:	f002 0203 	and.w	r2, r2, #3
 8001fdc:	0092      	lsls	r2, r2, #2
 8001fde:	4093      	lsls	r3, r2
 8001fe0:	693a      	ldr	r2, [r7, #16]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001fe6:	4937      	ldr	r1, [pc, #220]	; (80020c4 <HAL_GPIO_Init+0x2dc>)
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	089b      	lsrs	r3, r3, #2
 8001fec:	3302      	adds	r3, #2
 8001fee:	693a      	ldr	r2, [r7, #16]
 8001ff0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ff4:	4b38      	ldr	r3, [pc, #224]	; (80020d8 <HAL_GPIO_Init+0x2f0>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	43db      	mvns	r3, r3
 8001ffe:	693a      	ldr	r2, [r7, #16]
 8002000:	4013      	ands	r3, r2
 8002002:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d003      	beq.n	8002018 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002010:	693a      	ldr	r2, [r7, #16]
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	4313      	orrs	r3, r2
 8002016:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002018:	4a2f      	ldr	r2, [pc, #188]	; (80020d8 <HAL_GPIO_Init+0x2f0>)
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800201e:	4b2e      	ldr	r3, [pc, #184]	; (80020d8 <HAL_GPIO_Init+0x2f0>)
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	43db      	mvns	r3, r3
 8002028:	693a      	ldr	r2, [r7, #16]
 800202a:	4013      	ands	r3, r2
 800202c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d003      	beq.n	8002042 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800203a:	693a      	ldr	r2, [r7, #16]
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	4313      	orrs	r3, r2
 8002040:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002042:	4a25      	ldr	r2, [pc, #148]	; (80020d8 <HAL_GPIO_Init+0x2f0>)
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002048:	4b23      	ldr	r3, [pc, #140]	; (80020d8 <HAL_GPIO_Init+0x2f0>)
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	43db      	mvns	r3, r3
 8002052:	693a      	ldr	r2, [r7, #16]
 8002054:	4013      	ands	r3, r2
 8002056:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d003      	beq.n	800206c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002064:	693a      	ldr	r2, [r7, #16]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	4313      	orrs	r3, r2
 800206a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800206c:	4a1a      	ldr	r2, [pc, #104]	; (80020d8 <HAL_GPIO_Init+0x2f0>)
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002072:	4b19      	ldr	r3, [pc, #100]	; (80020d8 <HAL_GPIO_Init+0x2f0>)
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	43db      	mvns	r3, r3
 800207c:	693a      	ldr	r2, [r7, #16]
 800207e:	4013      	ands	r3, r2
 8002080:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d003      	beq.n	8002096 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800208e:	693a      	ldr	r2, [r7, #16]
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	4313      	orrs	r3, r2
 8002094:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002096:	4a10      	ldr	r2, [pc, #64]	; (80020d8 <HAL_GPIO_Init+0x2f0>)
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	3301      	adds	r3, #1
 80020a0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	fa22 f303 	lsr.w	r3, r2, r3
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	f47f aea3 	bne.w	8001df8 <HAL_GPIO_Init+0x10>
  }
}
 80020b2:	bf00      	nop
 80020b4:	bf00      	nop
 80020b6:	371c      	adds	r7, #28
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr
 80020c0:	40021000 	.word	0x40021000
 80020c4:	40010000 	.word	0x40010000
 80020c8:	48000400 	.word	0x48000400
 80020cc:	48000800 	.word	0x48000800
 80020d0:	48000c00 	.word	0x48000c00
 80020d4:	48001000 	.word	0x48001000
 80020d8:	40010400 	.word	0x40010400

080020dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80020dc:	b480      	push	{r7}
 80020de:	b085      	sub	sp, #20
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	460b      	mov	r3, r1
 80020e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	691a      	ldr	r2, [r3, #16]
 80020ec:	887b      	ldrh	r3, [r7, #2]
 80020ee:	4013      	ands	r3, r2
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d002      	beq.n	80020fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020f4:	2301      	movs	r3, #1
 80020f6:	73fb      	strb	r3, [r7, #15]
 80020f8:	e001      	b.n	80020fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020fa:	2300      	movs	r3, #0
 80020fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002100:	4618      	mov	r0, r3
 8002102:	3714      	adds	r7, #20
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	460b      	mov	r3, r1
 8002116:	807b      	strh	r3, [r7, #2]
 8002118:	4613      	mov	r3, r2
 800211a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800211c:	787b      	ldrb	r3, [r7, #1]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d003      	beq.n	800212a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002122:	887a      	ldrh	r2, [r7, #2]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002128:	e002      	b.n	8002130 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800212a:	887a      	ldrh	r2, [r7, #2]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002130:	bf00      	nop
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d101      	bne.n	800214e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e081      	b.n	8002252 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002154:	b2db      	uxtb	r3, r3
 8002156:	2b00      	cmp	r3, #0
 8002158:	d106      	bne.n	8002168 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f7ff fac8 	bl	80016f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2224      	movs	r2, #36	; 0x24
 800216c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f022 0201 	bic.w	r2, r2, #1
 800217e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	685a      	ldr	r2, [r3, #4]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800218c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	689a      	ldr	r2, [r3, #8]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800219c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d107      	bne.n	80021b6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	689a      	ldr	r2, [r3, #8]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021b2:	609a      	str	r2, [r3, #8]
 80021b4:	e006      	b.n	80021c4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	689a      	ldr	r2, [r3, #8]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80021c2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	2b02      	cmp	r3, #2
 80021ca:	d104      	bne.n	80021d6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80021d4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	687a      	ldr	r2, [r7, #4]
 80021de:	6812      	ldr	r2, [r2, #0]
 80021e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80021e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021e8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	68da      	ldr	r2, [r3, #12]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021f8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	691a      	ldr	r2, [r3, #16]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	695b      	ldr	r3, [r3, #20]
 8002202:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	699b      	ldr	r3, [r3, #24]
 800220a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	430a      	orrs	r2, r1
 8002212:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	69d9      	ldr	r1, [r3, #28]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6a1a      	ldr	r2, [r3, #32]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	430a      	orrs	r2, r1
 8002222:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f042 0201 	orr.w	r2, r2, #1
 8002232:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2200      	movs	r2, #0
 8002238:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2220      	movs	r2, #32
 800223e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2200      	movs	r2, #0
 8002246:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2200      	movs	r2, #0
 800224c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	3708      	adds	r7, #8
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
	...

0800225c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b088      	sub	sp, #32
 8002260:	af02      	add	r7, sp, #8
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	4608      	mov	r0, r1
 8002266:	4611      	mov	r1, r2
 8002268:	461a      	mov	r2, r3
 800226a:	4603      	mov	r3, r0
 800226c:	817b      	strh	r3, [r7, #10]
 800226e:	460b      	mov	r3, r1
 8002270:	813b      	strh	r3, [r7, #8]
 8002272:	4613      	mov	r3, r2
 8002274:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800227c:	b2db      	uxtb	r3, r3
 800227e:	2b20      	cmp	r3, #32
 8002280:	f040 80f9 	bne.w	8002476 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002284:	6a3b      	ldr	r3, [r7, #32]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d002      	beq.n	8002290 <HAL_I2C_Mem_Write+0x34>
 800228a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800228c:	2b00      	cmp	r3, #0
 800228e:	d105      	bne.n	800229c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002296:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e0ed      	b.n	8002478 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d101      	bne.n	80022aa <HAL_I2C_Mem_Write+0x4e>
 80022a6:	2302      	movs	r3, #2
 80022a8:	e0e6      	b.n	8002478 <HAL_I2C_Mem_Write+0x21c>
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2201      	movs	r2, #1
 80022ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80022b2:	f7ff fc57 	bl	8001b64 <HAL_GetTick>
 80022b6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	9300      	str	r3, [sp, #0]
 80022bc:	2319      	movs	r3, #25
 80022be:	2201      	movs	r2, #1
 80022c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80022c4:	68f8      	ldr	r0, [r7, #12]
 80022c6:	f000 fac3 	bl	8002850 <I2C_WaitOnFlagUntilTimeout>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d001      	beq.n	80022d4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e0d1      	b.n	8002478 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2221      	movs	r2, #33	; 0x21
 80022d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2240      	movs	r2, #64	; 0x40
 80022e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2200      	movs	r2, #0
 80022e8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	6a3a      	ldr	r2, [r7, #32]
 80022ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80022f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2200      	movs	r2, #0
 80022fa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80022fc:	88f8      	ldrh	r0, [r7, #6]
 80022fe:	893a      	ldrh	r2, [r7, #8]
 8002300:	8979      	ldrh	r1, [r7, #10]
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	9301      	str	r3, [sp, #4]
 8002306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002308:	9300      	str	r3, [sp, #0]
 800230a:	4603      	mov	r3, r0
 800230c:	68f8      	ldr	r0, [r7, #12]
 800230e:	f000 f9d3 	bl	80026b8 <I2C_RequestMemoryWrite>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d005      	beq.n	8002324 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2200      	movs	r2, #0
 800231c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e0a9      	b.n	8002478 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002328:	b29b      	uxth	r3, r3
 800232a:	2bff      	cmp	r3, #255	; 0xff
 800232c:	d90e      	bls.n	800234c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	22ff      	movs	r2, #255	; 0xff
 8002332:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002338:	b2da      	uxtb	r2, r3
 800233a:	8979      	ldrh	r1, [r7, #10]
 800233c:	2300      	movs	r3, #0
 800233e:	9300      	str	r3, [sp, #0]
 8002340:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002344:	68f8      	ldr	r0, [r7, #12]
 8002346:	f000 fbb5 	bl	8002ab4 <I2C_TransferConfig>
 800234a:	e00f      	b.n	800236c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002350:	b29a      	uxth	r2, r3
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800235a:	b2da      	uxtb	r2, r3
 800235c:	8979      	ldrh	r1, [r7, #10]
 800235e:	2300      	movs	r3, #0
 8002360:	9300      	str	r3, [sp, #0]
 8002362:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002366:	68f8      	ldr	r0, [r7, #12]
 8002368:	f000 fba4 	bl	8002ab4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800236c:	697a      	ldr	r2, [r7, #20]
 800236e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002370:	68f8      	ldr	r0, [r7, #12]
 8002372:	f000 faad 	bl	80028d0 <I2C_WaitOnTXISFlagUntilTimeout>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d001      	beq.n	8002380 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e07b      	b.n	8002478 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002384:	781a      	ldrb	r2, [r3, #0]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002390:	1c5a      	adds	r2, r3, #1
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800239a:	b29b      	uxth	r3, r3
 800239c:	3b01      	subs	r3, #1
 800239e:	b29a      	uxth	r2, r3
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023a8:	3b01      	subs	r3, #1
 80023aa:	b29a      	uxth	r2, r3
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d034      	beq.n	8002424 <HAL_I2C_Mem_Write+0x1c8>
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d130      	bne.n	8002424 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	9300      	str	r3, [sp, #0]
 80023c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023c8:	2200      	movs	r2, #0
 80023ca:	2180      	movs	r1, #128	; 0x80
 80023cc:	68f8      	ldr	r0, [r7, #12]
 80023ce:	f000 fa3f 	bl	8002850 <I2C_WaitOnFlagUntilTimeout>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d001      	beq.n	80023dc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e04d      	b.n	8002478 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	2bff      	cmp	r3, #255	; 0xff
 80023e4:	d90e      	bls.n	8002404 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	22ff      	movs	r2, #255	; 0xff
 80023ea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023f0:	b2da      	uxtb	r2, r3
 80023f2:	8979      	ldrh	r1, [r7, #10]
 80023f4:	2300      	movs	r3, #0
 80023f6:	9300      	str	r3, [sp, #0]
 80023f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80023fc:	68f8      	ldr	r0, [r7, #12]
 80023fe:	f000 fb59 	bl	8002ab4 <I2C_TransferConfig>
 8002402:	e00f      	b.n	8002424 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002408:	b29a      	uxth	r2, r3
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002412:	b2da      	uxtb	r2, r3
 8002414:	8979      	ldrh	r1, [r7, #10]
 8002416:	2300      	movs	r3, #0
 8002418:	9300      	str	r3, [sp, #0]
 800241a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800241e:	68f8      	ldr	r0, [r7, #12]
 8002420:	f000 fb48 	bl	8002ab4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002428:	b29b      	uxth	r3, r3
 800242a:	2b00      	cmp	r3, #0
 800242c:	d19e      	bne.n	800236c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800242e:	697a      	ldr	r2, [r7, #20]
 8002430:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002432:	68f8      	ldr	r0, [r7, #12]
 8002434:	f000 fa8c 	bl	8002950 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e01a      	b.n	8002478 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	2220      	movs	r2, #32
 8002448:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	6859      	ldr	r1, [r3, #4]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	4b0a      	ldr	r3, [pc, #40]	; (8002480 <HAL_I2C_Mem_Write+0x224>)
 8002456:	400b      	ands	r3, r1
 8002458:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2220      	movs	r2, #32
 800245e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2200      	movs	r2, #0
 8002466:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2200      	movs	r2, #0
 800246e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002472:	2300      	movs	r3, #0
 8002474:	e000      	b.n	8002478 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002476:	2302      	movs	r3, #2
  }
}
 8002478:	4618      	mov	r0, r3
 800247a:	3718      	adds	r7, #24
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	fe00e800 	.word	0xfe00e800

08002484 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b088      	sub	sp, #32
 8002488:	af02      	add	r7, sp, #8
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	4608      	mov	r0, r1
 800248e:	4611      	mov	r1, r2
 8002490:	461a      	mov	r2, r3
 8002492:	4603      	mov	r3, r0
 8002494:	817b      	strh	r3, [r7, #10]
 8002496:	460b      	mov	r3, r1
 8002498:	813b      	strh	r3, [r7, #8]
 800249a:	4613      	mov	r3, r2
 800249c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	2b20      	cmp	r3, #32
 80024a8:	f040 80fd 	bne.w	80026a6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80024ac:	6a3b      	ldr	r3, [r7, #32]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d002      	beq.n	80024b8 <HAL_I2C_Mem_Read+0x34>
 80024b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d105      	bne.n	80024c4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024be:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e0f1      	b.n	80026a8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d101      	bne.n	80024d2 <HAL_I2C_Mem_Read+0x4e>
 80024ce:	2302      	movs	r3, #2
 80024d0:	e0ea      	b.n	80026a8 <HAL_I2C_Mem_Read+0x224>
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2201      	movs	r2, #1
 80024d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80024da:	f7ff fb43 	bl	8001b64 <HAL_GetTick>
 80024de:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	9300      	str	r3, [sp, #0]
 80024e4:	2319      	movs	r3, #25
 80024e6:	2201      	movs	r2, #1
 80024e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80024ec:	68f8      	ldr	r0, [r7, #12]
 80024ee:	f000 f9af 	bl	8002850 <I2C_WaitOnFlagUntilTimeout>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d001      	beq.n	80024fc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e0d5      	b.n	80026a8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2222      	movs	r2, #34	; 0x22
 8002500:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2240      	movs	r2, #64	; 0x40
 8002508:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2200      	movs	r2, #0
 8002510:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	6a3a      	ldr	r2, [r7, #32]
 8002516:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800251c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2200      	movs	r2, #0
 8002522:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002524:	88f8      	ldrh	r0, [r7, #6]
 8002526:	893a      	ldrh	r2, [r7, #8]
 8002528:	8979      	ldrh	r1, [r7, #10]
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	9301      	str	r3, [sp, #4]
 800252e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002530:	9300      	str	r3, [sp, #0]
 8002532:	4603      	mov	r3, r0
 8002534:	68f8      	ldr	r0, [r7, #12]
 8002536:	f000 f913 	bl	8002760 <I2C_RequestMemoryRead>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d005      	beq.n	800254c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2200      	movs	r2, #0
 8002544:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e0ad      	b.n	80026a8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002550:	b29b      	uxth	r3, r3
 8002552:	2bff      	cmp	r3, #255	; 0xff
 8002554:	d90e      	bls.n	8002574 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	22ff      	movs	r2, #255	; 0xff
 800255a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002560:	b2da      	uxtb	r2, r3
 8002562:	8979      	ldrh	r1, [r7, #10]
 8002564:	4b52      	ldr	r3, [pc, #328]	; (80026b0 <HAL_I2C_Mem_Read+0x22c>)
 8002566:	9300      	str	r3, [sp, #0]
 8002568:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800256c:	68f8      	ldr	r0, [r7, #12]
 800256e:	f000 faa1 	bl	8002ab4 <I2C_TransferConfig>
 8002572:	e00f      	b.n	8002594 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002578:	b29a      	uxth	r2, r3
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002582:	b2da      	uxtb	r2, r3
 8002584:	8979      	ldrh	r1, [r7, #10]
 8002586:	4b4a      	ldr	r3, [pc, #296]	; (80026b0 <HAL_I2C_Mem_Read+0x22c>)
 8002588:	9300      	str	r3, [sp, #0]
 800258a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800258e:	68f8      	ldr	r0, [r7, #12]
 8002590:	f000 fa90 	bl	8002ab4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	9300      	str	r3, [sp, #0]
 8002598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800259a:	2200      	movs	r2, #0
 800259c:	2104      	movs	r1, #4
 800259e:	68f8      	ldr	r0, [r7, #12]
 80025a0:	f000 f956 	bl	8002850 <I2C_WaitOnFlagUntilTimeout>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d001      	beq.n	80025ae <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e07c      	b.n	80026a8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b8:	b2d2      	uxtb	r2, r2
 80025ba:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c0:	1c5a      	adds	r2, r3, #1
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ca:	3b01      	subs	r3, #1
 80025cc:	b29a      	uxth	r2, r3
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	3b01      	subs	r3, #1
 80025da:	b29a      	uxth	r2, r3
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d034      	beq.n	8002654 <HAL_I2C_Mem_Read+0x1d0>
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d130      	bne.n	8002654 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	9300      	str	r3, [sp, #0]
 80025f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025f8:	2200      	movs	r2, #0
 80025fa:	2180      	movs	r1, #128	; 0x80
 80025fc:	68f8      	ldr	r0, [r7, #12]
 80025fe:	f000 f927 	bl	8002850 <I2C_WaitOnFlagUntilTimeout>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d001      	beq.n	800260c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e04d      	b.n	80026a8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002610:	b29b      	uxth	r3, r3
 8002612:	2bff      	cmp	r3, #255	; 0xff
 8002614:	d90e      	bls.n	8002634 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	22ff      	movs	r2, #255	; 0xff
 800261a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002620:	b2da      	uxtb	r2, r3
 8002622:	8979      	ldrh	r1, [r7, #10]
 8002624:	2300      	movs	r3, #0
 8002626:	9300      	str	r3, [sp, #0]
 8002628:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800262c:	68f8      	ldr	r0, [r7, #12]
 800262e:	f000 fa41 	bl	8002ab4 <I2C_TransferConfig>
 8002632:	e00f      	b.n	8002654 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002638:	b29a      	uxth	r2, r3
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002642:	b2da      	uxtb	r2, r3
 8002644:	8979      	ldrh	r1, [r7, #10]
 8002646:	2300      	movs	r3, #0
 8002648:	9300      	str	r3, [sp, #0]
 800264a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800264e:	68f8      	ldr	r0, [r7, #12]
 8002650:	f000 fa30 	bl	8002ab4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002658:	b29b      	uxth	r3, r3
 800265a:	2b00      	cmp	r3, #0
 800265c:	d19a      	bne.n	8002594 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800265e:	697a      	ldr	r2, [r7, #20]
 8002660:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002662:	68f8      	ldr	r0, [r7, #12]
 8002664:	f000 f974 	bl	8002950 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d001      	beq.n	8002672 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e01a      	b.n	80026a8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	2220      	movs	r2, #32
 8002678:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	6859      	ldr	r1, [r3, #4]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	4b0b      	ldr	r3, [pc, #44]	; (80026b4 <HAL_I2C_Mem_Read+0x230>)
 8002686:	400b      	ands	r3, r1
 8002688:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2220      	movs	r2, #32
 800268e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2200      	movs	r2, #0
 8002696:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2200      	movs	r2, #0
 800269e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80026a2:	2300      	movs	r3, #0
 80026a4:	e000      	b.n	80026a8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80026a6:	2302      	movs	r3, #2
  }
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3718      	adds	r7, #24
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	80002400 	.word	0x80002400
 80026b4:	fe00e800 	.word	0xfe00e800

080026b8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b086      	sub	sp, #24
 80026bc:	af02      	add	r7, sp, #8
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	4608      	mov	r0, r1
 80026c2:	4611      	mov	r1, r2
 80026c4:	461a      	mov	r2, r3
 80026c6:	4603      	mov	r3, r0
 80026c8:	817b      	strh	r3, [r7, #10]
 80026ca:	460b      	mov	r3, r1
 80026cc:	813b      	strh	r3, [r7, #8]
 80026ce:	4613      	mov	r3, r2
 80026d0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80026d2:	88fb      	ldrh	r3, [r7, #6]
 80026d4:	b2da      	uxtb	r2, r3
 80026d6:	8979      	ldrh	r1, [r7, #10]
 80026d8:	4b20      	ldr	r3, [pc, #128]	; (800275c <I2C_RequestMemoryWrite+0xa4>)
 80026da:	9300      	str	r3, [sp, #0]
 80026dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026e0:	68f8      	ldr	r0, [r7, #12]
 80026e2:	f000 f9e7 	bl	8002ab4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026e6:	69fa      	ldr	r2, [r7, #28]
 80026e8:	69b9      	ldr	r1, [r7, #24]
 80026ea:	68f8      	ldr	r0, [r7, #12]
 80026ec:	f000 f8f0 	bl	80028d0 <I2C_WaitOnTXISFlagUntilTimeout>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d001      	beq.n	80026fa <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e02c      	b.n	8002754 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80026fa:	88fb      	ldrh	r3, [r7, #6]
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d105      	bne.n	800270c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002700:	893b      	ldrh	r3, [r7, #8]
 8002702:	b2da      	uxtb	r2, r3
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	629a      	str	r2, [r3, #40]	; 0x28
 800270a:	e015      	b.n	8002738 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800270c:	893b      	ldrh	r3, [r7, #8]
 800270e:	0a1b      	lsrs	r3, r3, #8
 8002710:	b29b      	uxth	r3, r3
 8002712:	b2da      	uxtb	r2, r3
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800271a:	69fa      	ldr	r2, [r7, #28]
 800271c:	69b9      	ldr	r1, [r7, #24]
 800271e:	68f8      	ldr	r0, [r7, #12]
 8002720:	f000 f8d6 	bl	80028d0 <I2C_WaitOnTXISFlagUntilTimeout>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d001      	beq.n	800272e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e012      	b.n	8002754 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800272e:	893b      	ldrh	r3, [r7, #8]
 8002730:	b2da      	uxtb	r2, r3
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	9300      	str	r3, [sp, #0]
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	2200      	movs	r2, #0
 8002740:	2180      	movs	r1, #128	; 0x80
 8002742:	68f8      	ldr	r0, [r7, #12]
 8002744:	f000 f884 	bl	8002850 <I2C_WaitOnFlagUntilTimeout>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e000      	b.n	8002754 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002752:	2300      	movs	r3, #0
}
 8002754:	4618      	mov	r0, r3
 8002756:	3710      	adds	r7, #16
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}
 800275c:	80002000 	.word	0x80002000

08002760 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b086      	sub	sp, #24
 8002764:	af02      	add	r7, sp, #8
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	4608      	mov	r0, r1
 800276a:	4611      	mov	r1, r2
 800276c:	461a      	mov	r2, r3
 800276e:	4603      	mov	r3, r0
 8002770:	817b      	strh	r3, [r7, #10]
 8002772:	460b      	mov	r3, r1
 8002774:	813b      	strh	r3, [r7, #8]
 8002776:	4613      	mov	r3, r2
 8002778:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800277a:	88fb      	ldrh	r3, [r7, #6]
 800277c:	b2da      	uxtb	r2, r3
 800277e:	8979      	ldrh	r1, [r7, #10]
 8002780:	4b20      	ldr	r3, [pc, #128]	; (8002804 <I2C_RequestMemoryRead+0xa4>)
 8002782:	9300      	str	r3, [sp, #0]
 8002784:	2300      	movs	r3, #0
 8002786:	68f8      	ldr	r0, [r7, #12]
 8002788:	f000 f994 	bl	8002ab4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800278c:	69fa      	ldr	r2, [r7, #28]
 800278e:	69b9      	ldr	r1, [r7, #24]
 8002790:	68f8      	ldr	r0, [r7, #12]
 8002792:	f000 f89d 	bl	80028d0 <I2C_WaitOnTXISFlagUntilTimeout>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d001      	beq.n	80027a0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e02c      	b.n	80027fa <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80027a0:	88fb      	ldrh	r3, [r7, #6]
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d105      	bne.n	80027b2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80027a6:	893b      	ldrh	r3, [r7, #8]
 80027a8:	b2da      	uxtb	r2, r3
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	629a      	str	r2, [r3, #40]	; 0x28
 80027b0:	e015      	b.n	80027de <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80027b2:	893b      	ldrh	r3, [r7, #8]
 80027b4:	0a1b      	lsrs	r3, r3, #8
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	b2da      	uxtb	r2, r3
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027c0:	69fa      	ldr	r2, [r7, #28]
 80027c2:	69b9      	ldr	r1, [r7, #24]
 80027c4:	68f8      	ldr	r0, [r7, #12]
 80027c6:	f000 f883 	bl	80028d0 <I2C_WaitOnTXISFlagUntilTimeout>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d001      	beq.n	80027d4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e012      	b.n	80027fa <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80027d4:	893b      	ldrh	r3, [r7, #8]
 80027d6:	b2da      	uxtb	r2, r3
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	9300      	str	r3, [sp, #0]
 80027e2:	69bb      	ldr	r3, [r7, #24]
 80027e4:	2200      	movs	r2, #0
 80027e6:	2140      	movs	r1, #64	; 0x40
 80027e8:	68f8      	ldr	r0, [r7, #12]
 80027ea:	f000 f831 	bl	8002850 <I2C_WaitOnFlagUntilTimeout>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e000      	b.n	80027fa <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80027f8:	2300      	movs	r3, #0
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3710      	adds	r7, #16
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	80002000 	.word	0x80002000

08002808 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	699b      	ldr	r3, [r3, #24]
 8002816:	f003 0302 	and.w	r3, r3, #2
 800281a:	2b02      	cmp	r3, #2
 800281c:	d103      	bne.n	8002826 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	2200      	movs	r2, #0
 8002824:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	699b      	ldr	r3, [r3, #24]
 800282c:	f003 0301 	and.w	r3, r3, #1
 8002830:	2b01      	cmp	r3, #1
 8002832:	d007      	beq.n	8002844 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	699a      	ldr	r2, [r3, #24]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f042 0201 	orr.w	r2, r2, #1
 8002842:	619a      	str	r2, [r3, #24]
  }
}
 8002844:	bf00      	nop
 8002846:	370c      	adds	r7, #12
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr

08002850 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	af00      	add	r7, sp, #0
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	60b9      	str	r1, [r7, #8]
 800285a:	603b      	str	r3, [r7, #0]
 800285c:	4613      	mov	r3, r2
 800285e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002860:	e022      	b.n	80028a8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002868:	d01e      	beq.n	80028a8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800286a:	f7ff f97b 	bl	8001b64 <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	69bb      	ldr	r3, [r7, #24]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	683a      	ldr	r2, [r7, #0]
 8002876:	429a      	cmp	r2, r3
 8002878:	d302      	bcc.n	8002880 <I2C_WaitOnFlagUntilTimeout+0x30>
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d113      	bne.n	80028a8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002884:	f043 0220 	orr.w	r2, r3, #32
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2220      	movs	r2, #32
 8002890:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2200      	movs	r2, #0
 8002898:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e00f      	b.n	80028c8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	699a      	ldr	r2, [r3, #24]
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	4013      	ands	r3, r2
 80028b2:	68ba      	ldr	r2, [r7, #8]
 80028b4:	429a      	cmp	r2, r3
 80028b6:	bf0c      	ite	eq
 80028b8:	2301      	moveq	r3, #1
 80028ba:	2300      	movne	r3, #0
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	461a      	mov	r2, r3
 80028c0:	79fb      	ldrb	r3, [r7, #7]
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d0cd      	beq.n	8002862 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80028c6:	2300      	movs	r3, #0
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3710      	adds	r7, #16
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	60f8      	str	r0, [r7, #12]
 80028d8:	60b9      	str	r1, [r7, #8]
 80028da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80028dc:	e02c      	b.n	8002938 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	68b9      	ldr	r1, [r7, #8]
 80028e2:	68f8      	ldr	r0, [r7, #12]
 80028e4:	f000 f870 	bl	80029c8 <I2C_IsAcknowledgeFailed>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d001      	beq.n	80028f2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e02a      	b.n	8002948 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028f8:	d01e      	beq.n	8002938 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028fa:	f7ff f933 	bl	8001b64 <HAL_GetTick>
 80028fe:	4602      	mov	r2, r0
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	68ba      	ldr	r2, [r7, #8]
 8002906:	429a      	cmp	r2, r3
 8002908:	d302      	bcc.n	8002910 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d113      	bne.n	8002938 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002914:	f043 0220 	orr.w	r2, r3, #32
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2220      	movs	r2, #32
 8002920:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2200      	movs	r2, #0
 8002928:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2200      	movs	r2, #0
 8002930:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e007      	b.n	8002948 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	699b      	ldr	r3, [r3, #24]
 800293e:	f003 0302 	and.w	r3, r3, #2
 8002942:	2b02      	cmp	r3, #2
 8002944:	d1cb      	bne.n	80028de <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002946:	2300      	movs	r3, #0
}
 8002948:	4618      	mov	r0, r3
 800294a:	3710      	adds	r7, #16
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}

08002950 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	60b9      	str	r1, [r7, #8]
 800295a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800295c:	e028      	b.n	80029b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	68b9      	ldr	r1, [r7, #8]
 8002962:	68f8      	ldr	r0, [r7, #12]
 8002964:	f000 f830 	bl	80029c8 <I2C_IsAcknowledgeFailed>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d001      	beq.n	8002972 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e026      	b.n	80029c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002972:	f7ff f8f7 	bl	8001b64 <HAL_GetTick>
 8002976:	4602      	mov	r2, r0
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	68ba      	ldr	r2, [r7, #8]
 800297e:	429a      	cmp	r2, r3
 8002980:	d302      	bcc.n	8002988 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d113      	bne.n	80029b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800298c:	f043 0220 	orr.w	r2, r3, #32
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2220      	movs	r2, #32
 8002998:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2200      	movs	r2, #0
 80029a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e007      	b.n	80029c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	699b      	ldr	r3, [r3, #24]
 80029b6:	f003 0320 	and.w	r3, r3, #32
 80029ba:	2b20      	cmp	r3, #32
 80029bc:	d1cf      	bne.n	800295e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80029be:	2300      	movs	r3, #0
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3710      	adds	r7, #16
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	60b9      	str	r1, [r7, #8]
 80029d2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	699b      	ldr	r3, [r3, #24]
 80029da:	f003 0310 	and.w	r3, r3, #16
 80029de:	2b10      	cmp	r3, #16
 80029e0:	d161      	bne.n	8002aa6 <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80029f0:	d02b      	beq.n	8002a4a <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	685a      	ldr	r2, [r3, #4]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a00:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a02:	e022      	b.n	8002a4a <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a0a:	d01e      	beq.n	8002a4a <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a0c:	f7ff f8aa 	bl	8001b64 <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	68ba      	ldr	r2, [r7, #8]
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d302      	bcc.n	8002a22 <I2C_IsAcknowledgeFailed+0x5a>
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d113      	bne.n	8002a4a <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a26:	f043 0220 	orr.w	r2, r3, #32
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2220      	movs	r2, #32
 8002a32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e02e      	b.n	8002aa8 <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	699b      	ldr	r3, [r3, #24]
 8002a50:	f003 0320 	and.w	r3, r3, #32
 8002a54:	2b20      	cmp	r3, #32
 8002a56:	d1d5      	bne.n	8002a04 <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2210      	movs	r2, #16
 8002a5e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2220      	movs	r2, #32
 8002a66:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002a68:	68f8      	ldr	r0, [r7, #12]
 8002a6a:	f7ff fecd 	bl	8002808 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	6859      	ldr	r1, [r3, #4]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	4b0d      	ldr	r3, [pc, #52]	; (8002ab0 <I2C_IsAcknowledgeFailed+0xe8>)
 8002a7a:	400b      	ands	r3, r1
 8002a7c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a82:	f043 0204 	orr.w	r2, r3, #4
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2220      	movs	r2, #32
 8002a8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2200      	movs	r2, #0
 8002a96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e000      	b.n	8002aa8 <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 8002aa6:	2300      	movs	r3, #0
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3710      	adds	r7, #16
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	fe00e800 	.word	0xfe00e800

08002ab4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b085      	sub	sp, #20
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	607b      	str	r3, [r7, #4]
 8002abe:	460b      	mov	r3, r1
 8002ac0:	817b      	strh	r3, [r7, #10]
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	685a      	ldr	r2, [r3, #4]
 8002acc:	69bb      	ldr	r3, [r7, #24]
 8002ace:	0d5b      	lsrs	r3, r3, #21
 8002ad0:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002ad4:	4b0d      	ldr	r3, [pc, #52]	; (8002b0c <I2C_TransferConfig+0x58>)
 8002ad6:	430b      	orrs	r3, r1
 8002ad8:	43db      	mvns	r3, r3
 8002ada:	ea02 0103 	and.w	r1, r2, r3
 8002ade:	897b      	ldrh	r3, [r7, #10]
 8002ae0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002ae4:	7a7b      	ldrb	r3, [r7, #9]
 8002ae6:	041b      	lsls	r3, r3, #16
 8002ae8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002aec:	431a      	orrs	r2, r3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	431a      	orrs	r2, r3
 8002af2:	69bb      	ldr	r3, [r7, #24]
 8002af4:	431a      	orrs	r2, r3
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	430a      	orrs	r2, r1
 8002afc:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8002afe:	bf00      	nop
 8002b00:	3714      	adds	r7, #20
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr
 8002b0a:	bf00      	nop
 8002b0c:	03ff63ff 	.word	0x03ff63ff

08002b10 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	2b20      	cmp	r3, #32
 8002b24:	d138      	bne.n	8002b98 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d101      	bne.n	8002b34 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002b30:	2302      	movs	r3, #2
 8002b32:	e032      	b.n	8002b9a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2224      	movs	r2, #36	; 0x24
 8002b40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f022 0201 	bic.w	r2, r2, #1
 8002b52:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002b62:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	6819      	ldr	r1, [r3, #0]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	683a      	ldr	r2, [r7, #0]
 8002b70:	430a      	orrs	r2, r1
 8002b72:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f042 0201 	orr.w	r2, r2, #1
 8002b82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2220      	movs	r2, #32
 8002b88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b94:	2300      	movs	r3, #0
 8002b96:	e000      	b.n	8002b9a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002b98:	2302      	movs	r3, #2
  }
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	370c      	adds	r7, #12
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr

08002ba6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002ba6:	b480      	push	{r7}
 8002ba8:	b085      	sub	sp, #20
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
 8002bae:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	2b20      	cmp	r3, #32
 8002bba:	d139      	bne.n	8002c30 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d101      	bne.n	8002bca <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	e033      	b.n	8002c32 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2201      	movs	r2, #1
 8002bce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2224      	movs	r2, #36	; 0x24
 8002bd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f022 0201 	bic.w	r2, r2, #1
 8002be8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002bf8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	021b      	lsls	r3, r3, #8
 8002bfe:	68fa      	ldr	r2, [r7, #12]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	68fa      	ldr	r2, [r7, #12]
 8002c0a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f042 0201 	orr.w	r2, r2, #1
 8002c1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2220      	movs	r2, #32
 8002c20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2200      	movs	r2, #0
 8002c28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	e000      	b.n	8002c32 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002c30:	2302      	movs	r3, #2
  }
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3714      	adds	r7, #20
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr

08002c3e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002c3e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c40:	b08b      	sub	sp, #44	; 0x2c
 8002c42:	af06      	add	r7, sp, #24
 8002c44:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d101      	bne.n	8002c50 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e0d0      	b.n	8002df2 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d106      	bne.n	8002c6a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f007 f925 	bl	8009eb4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2203      	movs	r2, #3
 8002c6e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f003 fb59 	bl	800632e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	73fb      	strb	r3, [r7, #15]
 8002c80:	e04c      	b.n	8002d1c <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002c82:	7bfb      	ldrb	r3, [r7, #15]
 8002c84:	6879      	ldr	r1, [r7, #4]
 8002c86:	1c5a      	adds	r2, r3, #1
 8002c88:	4613      	mov	r3, r2
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	4413      	add	r3, r2
 8002c8e:	00db      	lsls	r3, r3, #3
 8002c90:	440b      	add	r3, r1
 8002c92:	3301      	adds	r3, #1
 8002c94:	2201      	movs	r2, #1
 8002c96:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002c98:	7bfb      	ldrb	r3, [r7, #15]
 8002c9a:	6879      	ldr	r1, [r7, #4]
 8002c9c:	1c5a      	adds	r2, r3, #1
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	4413      	add	r3, r2
 8002ca4:	00db      	lsls	r3, r3, #3
 8002ca6:	440b      	add	r3, r1
 8002ca8:	7bfa      	ldrb	r2, [r7, #15]
 8002caa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002cac:	7bfa      	ldrb	r2, [r7, #15]
 8002cae:	7bfb      	ldrb	r3, [r7, #15]
 8002cb0:	b298      	uxth	r0, r3
 8002cb2:	6879      	ldr	r1, [r7, #4]
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	4413      	add	r3, r2
 8002cba:	00db      	lsls	r3, r3, #3
 8002cbc:	440b      	add	r3, r1
 8002cbe:	3336      	adds	r3, #54	; 0x36
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002cc4:	7bfb      	ldrb	r3, [r7, #15]
 8002cc6:	6879      	ldr	r1, [r7, #4]
 8002cc8:	1c5a      	adds	r2, r3, #1
 8002cca:	4613      	mov	r3, r2
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	4413      	add	r3, r2
 8002cd0:	00db      	lsls	r3, r3, #3
 8002cd2:	440b      	add	r3, r1
 8002cd4:	3303      	adds	r3, #3
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002cda:	7bfa      	ldrb	r2, [r7, #15]
 8002cdc:	6879      	ldr	r1, [r7, #4]
 8002cde:	4613      	mov	r3, r2
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	4413      	add	r3, r2
 8002ce4:	00db      	lsls	r3, r3, #3
 8002ce6:	440b      	add	r3, r1
 8002ce8:	3338      	adds	r3, #56	; 0x38
 8002cea:	2200      	movs	r2, #0
 8002cec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002cee:	7bfa      	ldrb	r2, [r7, #15]
 8002cf0:	6879      	ldr	r1, [r7, #4]
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	4413      	add	r3, r2
 8002cf8:	00db      	lsls	r3, r3, #3
 8002cfa:	440b      	add	r3, r1
 8002cfc:	333c      	adds	r3, #60	; 0x3c
 8002cfe:	2200      	movs	r2, #0
 8002d00:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002d02:	7bfa      	ldrb	r2, [r7, #15]
 8002d04:	6879      	ldr	r1, [r7, #4]
 8002d06:	4613      	mov	r3, r2
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	4413      	add	r3, r2
 8002d0c:	00db      	lsls	r3, r3, #3
 8002d0e:	440b      	add	r3, r1
 8002d10:	3340      	adds	r3, #64	; 0x40
 8002d12:	2200      	movs	r2, #0
 8002d14:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d16:	7bfb      	ldrb	r3, [r7, #15]
 8002d18:	3301      	adds	r3, #1
 8002d1a:	73fb      	strb	r3, [r7, #15]
 8002d1c:	7bfa      	ldrb	r2, [r7, #15]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d3ad      	bcc.n	8002c82 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d26:	2300      	movs	r3, #0
 8002d28:	73fb      	strb	r3, [r7, #15]
 8002d2a:	e044      	b.n	8002db6 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002d2c:	7bfa      	ldrb	r2, [r7, #15]
 8002d2e:	6879      	ldr	r1, [r7, #4]
 8002d30:	4613      	mov	r3, r2
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	4413      	add	r3, r2
 8002d36:	00db      	lsls	r3, r3, #3
 8002d38:	440b      	add	r3, r1
 8002d3a:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002d3e:	2200      	movs	r2, #0
 8002d40:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002d42:	7bfa      	ldrb	r2, [r7, #15]
 8002d44:	6879      	ldr	r1, [r7, #4]
 8002d46:	4613      	mov	r3, r2
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	4413      	add	r3, r2
 8002d4c:	00db      	lsls	r3, r3, #3
 8002d4e:	440b      	add	r3, r1
 8002d50:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002d54:	7bfa      	ldrb	r2, [r7, #15]
 8002d56:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002d58:	7bfa      	ldrb	r2, [r7, #15]
 8002d5a:	6879      	ldr	r1, [r7, #4]
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	4413      	add	r3, r2
 8002d62:	00db      	lsls	r3, r3, #3
 8002d64:	440b      	add	r3, r1
 8002d66:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002d6e:	7bfa      	ldrb	r2, [r7, #15]
 8002d70:	6879      	ldr	r1, [r7, #4]
 8002d72:	4613      	mov	r3, r2
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	4413      	add	r3, r2
 8002d78:	00db      	lsls	r3, r3, #3
 8002d7a:	440b      	add	r3, r1
 8002d7c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002d80:	2200      	movs	r2, #0
 8002d82:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002d84:	7bfa      	ldrb	r2, [r7, #15]
 8002d86:	6879      	ldr	r1, [r7, #4]
 8002d88:	4613      	mov	r3, r2
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	4413      	add	r3, r2
 8002d8e:	00db      	lsls	r3, r3, #3
 8002d90:	440b      	add	r3, r1
 8002d92:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002d96:	2200      	movs	r2, #0
 8002d98:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002d9a:	7bfa      	ldrb	r2, [r7, #15]
 8002d9c:	6879      	ldr	r1, [r7, #4]
 8002d9e:	4613      	mov	r3, r2
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	4413      	add	r3, r2
 8002da4:	00db      	lsls	r3, r3, #3
 8002da6:	440b      	add	r3, r1
 8002da8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002dac:	2200      	movs	r2, #0
 8002dae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002db0:	7bfb      	ldrb	r3, [r7, #15]
 8002db2:	3301      	adds	r3, #1
 8002db4:	73fb      	strb	r3, [r7, #15]
 8002db6:	7bfa      	ldrb	r2, [r7, #15]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d3b5      	bcc.n	8002d2c <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	603b      	str	r3, [r7, #0]
 8002dc6:	687e      	ldr	r6, [r7, #4]
 8002dc8:	466d      	mov	r5, sp
 8002dca:	f106 0410 	add.w	r4, r6, #16
 8002dce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002dd0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002dd2:	6823      	ldr	r3, [r4, #0]
 8002dd4:	602b      	str	r3, [r5, #0]
 8002dd6:	1d33      	adds	r3, r6, #4
 8002dd8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002dda:	6838      	ldr	r0, [r7, #0]
 8002ddc:	f003 fac2 	bl	8006364 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8002df0:	2300      	movs	r3, #0
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3714      	adds	r7, #20
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002dfa <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002dfa:	b580      	push	{r7, lr}
 8002dfc:	b082      	sub	sp, #8
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d101      	bne.n	8002e10 <HAL_PCD_Start+0x16>
 8002e0c:	2302      	movs	r3, #2
 8002e0e:	e016      	b.n	8002e3e <HAL_PCD_Start+0x44>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f003 fa6f 	bl	8006300 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002e22:	2101      	movs	r1, #1
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f007 fae3 	bl	800a3f0 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f005 fa20 	bl	8008274 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3708      	adds	r7, #8
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}

08002e46 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002e46:	b580      	push	{r7, lr}
 8002e48:	b082      	sub	sp, #8
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4618      	mov	r0, r3
 8002e54:	f005 fa19 	bl	800828a <USB_ReadInterrupts>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e62:	d102      	bne.n	8002e6a <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f000 faf6 	bl	8003456 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f005 fa0b 	bl	800828a <USB_ReadInterrupts>
 8002e74:	4603      	mov	r3, r0
 8002e76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e7e:	d112      	bne.n	8002ea6 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e88:	b29a      	uxth	r2, r3
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e92:	b292      	uxth	r2, r2
 8002e94:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	f007 f8ac 	bl	8009ff6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002e9e:	2100      	movs	r1, #0
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f000 f8c7 	bl	8003034 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f005 f9ed 	bl	800828a <USB_ReadInterrupts>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002eb6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002eba:	d10b      	bne.n	8002ed4 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ec4:	b29a      	uxth	r2, r3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002ece:	b292      	uxth	r2, r2
 8002ed0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f005 f9d6 	bl	800828a <USB_ReadInterrupts>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ee4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ee8:	d10b      	bne.n	8002f02 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ef2:	b29a      	uxth	r2, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002efc:	b292      	uxth	r2, r2
 8002efe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4618      	mov	r0, r3
 8002f08:	f005 f9bf 	bl	800828a <USB_ReadInterrupts>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f16:	d126      	bne.n	8002f66 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002f20:	b29a      	uxth	r2, r3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f022 0204 	bic.w	r2, r2, #4
 8002f2a:	b292      	uxth	r2, r2
 8002f2c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002f38:	b29a      	uxth	r2, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f022 0208 	bic.w	r2, r2, #8
 8002f42:	b292      	uxth	r2, r2
 8002f44:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f007 f88d 	bl	800a068 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f56:	b29a      	uxth	r2, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002f60:	b292      	uxth	r2, r2
 8002f62:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f005 f98d 	bl	800828a <USB_ReadInterrupts>
 8002f70:	4603      	mov	r3, r0
 8002f72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f7a:	d126      	bne.n	8002fca <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002f84:	b29a      	uxth	r2, r3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f042 0208 	orr.w	r2, r2, #8
 8002f8e:	b292      	uxth	r2, r2
 8002f90:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f9c:	b29a      	uxth	r2, r3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fa6:	b292      	uxth	r2, r2
 8002fa8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002fb4:	b29a      	uxth	r2, r3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f042 0204 	orr.w	r2, r2, #4
 8002fbe:	b292      	uxth	r2, r2
 8002fc0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f007 f835 	bl	800a034 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f005 f95b 	bl	800828a <USB_ReadInterrupts>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fde:	d10e      	bne.n	8002ffe <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002fe8:	b29a      	uxth	r2, r3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002ff2:	b292      	uxth	r2, r2
 8002ff4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f006 ffee 	bl	8009fda <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4618      	mov	r0, r3
 8003004:	f005 f941 	bl	800828a <USB_ReadInterrupts>
 8003008:	4603      	mov	r3, r0
 800300a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800300e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003012:	d10b      	bne.n	800302c <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800301c:	b29a      	uxth	r2, r3
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003026:	b292      	uxth	r2, r2
 8003028:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800302c:	bf00      	nop
 800302e:	3708      	adds	r7, #8
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}

08003034 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	460b      	mov	r3, r1
 800303e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003046:	2b01      	cmp	r3, #1
 8003048:	d101      	bne.n	800304e <HAL_PCD_SetAddress+0x1a>
 800304a:	2302      	movs	r3, #2
 800304c:	e013      	b.n	8003076 <HAL_PCD_SetAddress+0x42>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2201      	movs	r2, #1
 8003052:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	78fa      	ldrb	r2, [r7, #3]
 800305a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	78fa      	ldrb	r2, [r7, #3]
 8003064:	4611      	mov	r1, r2
 8003066:	4618      	mov	r0, r3
 8003068:	f005 f8f0 	bl	800824c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003074:	2300      	movs	r3, #0
}
 8003076:	4618      	mov	r0, r3
 8003078:	3708      	adds	r7, #8
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}

0800307e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800307e:	b580      	push	{r7, lr}
 8003080:	b084      	sub	sp, #16
 8003082:	af00      	add	r7, sp, #0
 8003084:	6078      	str	r0, [r7, #4]
 8003086:	4608      	mov	r0, r1
 8003088:	4611      	mov	r1, r2
 800308a:	461a      	mov	r2, r3
 800308c:	4603      	mov	r3, r0
 800308e:	70fb      	strb	r3, [r7, #3]
 8003090:	460b      	mov	r3, r1
 8003092:	803b      	strh	r3, [r7, #0]
 8003094:	4613      	mov	r3, r2
 8003096:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003098:	2300      	movs	r3, #0
 800309a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800309c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	da0e      	bge.n	80030c2 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030a4:	78fb      	ldrb	r3, [r7, #3]
 80030a6:	f003 0307 	and.w	r3, r3, #7
 80030aa:	1c5a      	adds	r2, r3, #1
 80030ac:	4613      	mov	r3, r2
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	4413      	add	r3, r2
 80030b2:	00db      	lsls	r3, r3, #3
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	4413      	add	r3, r2
 80030b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2201      	movs	r2, #1
 80030be:	705a      	strb	r2, [r3, #1]
 80030c0:	e00e      	b.n	80030e0 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030c2:	78fb      	ldrb	r3, [r7, #3]
 80030c4:	f003 0207 	and.w	r2, r3, #7
 80030c8:	4613      	mov	r3, r2
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	4413      	add	r3, r2
 80030ce:	00db      	lsls	r3, r3, #3
 80030d0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	4413      	add	r3, r2
 80030d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2200      	movs	r2, #0
 80030de:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80030e0:	78fb      	ldrb	r3, [r7, #3]
 80030e2:	f003 0307 	and.w	r3, r3, #7
 80030e6:	b2da      	uxtb	r2, r3
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80030ec:	883a      	ldrh	r2, [r7, #0]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	78ba      	ldrb	r2, [r7, #2]
 80030f6:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	785b      	ldrb	r3, [r3, #1]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d004      	beq.n	800310a <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	b29a      	uxth	r2, r3
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800310a:	78bb      	ldrb	r3, [r7, #2]
 800310c:	2b02      	cmp	r3, #2
 800310e:	d102      	bne.n	8003116 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2200      	movs	r2, #0
 8003114:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800311c:	2b01      	cmp	r3, #1
 800311e:	d101      	bne.n	8003124 <HAL_PCD_EP_Open+0xa6>
 8003120:	2302      	movs	r3, #2
 8003122:	e00e      	b.n	8003142 <HAL_PCD_EP_Open+0xc4>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2201      	movs	r2, #1
 8003128:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	68f9      	ldr	r1, [r7, #12]
 8003132:	4618      	mov	r0, r3
 8003134:	f003 f938 	bl	80063a8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8003140:	7afb      	ldrb	r3, [r7, #11]
}
 8003142:	4618      	mov	r0, r3
 8003144:	3710      	adds	r7, #16
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}

0800314a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800314a:	b580      	push	{r7, lr}
 800314c:	b084      	sub	sp, #16
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
 8003152:	460b      	mov	r3, r1
 8003154:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003156:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800315a:	2b00      	cmp	r3, #0
 800315c:	da0e      	bge.n	800317c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800315e:	78fb      	ldrb	r3, [r7, #3]
 8003160:	f003 0307 	and.w	r3, r3, #7
 8003164:	1c5a      	adds	r2, r3, #1
 8003166:	4613      	mov	r3, r2
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	4413      	add	r3, r2
 800316c:	00db      	lsls	r3, r3, #3
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	4413      	add	r3, r2
 8003172:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2201      	movs	r2, #1
 8003178:	705a      	strb	r2, [r3, #1]
 800317a:	e00e      	b.n	800319a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800317c:	78fb      	ldrb	r3, [r7, #3]
 800317e:	f003 0207 	and.w	r2, r3, #7
 8003182:	4613      	mov	r3, r2
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	4413      	add	r3, r2
 8003188:	00db      	lsls	r3, r3, #3
 800318a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	4413      	add	r3, r2
 8003192:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2200      	movs	r2, #0
 8003198:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800319a:	78fb      	ldrb	r3, [r7, #3]
 800319c:	f003 0307 	and.w	r3, r3, #7
 80031a0:	b2da      	uxtb	r2, r3
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d101      	bne.n	80031b4 <HAL_PCD_EP_Close+0x6a>
 80031b0:	2302      	movs	r3, #2
 80031b2:	e00e      	b.n	80031d2 <HAL_PCD_EP_Close+0x88>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2201      	movs	r2, #1
 80031b8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	68f9      	ldr	r1, [r7, #12]
 80031c2:	4618      	mov	r0, r3
 80031c4:	f003 fc84 	bl	8006ad0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3710      	adds	r7, #16
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}

080031da <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80031da:	b580      	push	{r7, lr}
 80031dc:	b086      	sub	sp, #24
 80031de:	af00      	add	r7, sp, #0
 80031e0:	60f8      	str	r0, [r7, #12]
 80031e2:	607a      	str	r2, [r7, #4]
 80031e4:	603b      	str	r3, [r7, #0]
 80031e6:	460b      	mov	r3, r1
 80031e8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031ea:	7afb      	ldrb	r3, [r7, #11]
 80031ec:	f003 0207 	and.w	r2, r3, #7
 80031f0:	4613      	mov	r3, r2
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	4413      	add	r3, r2
 80031f6:	00db      	lsls	r3, r3, #3
 80031f8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80031fc:	68fa      	ldr	r2, [r7, #12]
 80031fe:	4413      	add	r3, r2
 8003200:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	683a      	ldr	r2, [r7, #0]
 800320c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	2200      	movs	r2, #0
 8003212:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	2200      	movs	r2, #0
 8003218:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800321a:	7afb      	ldrb	r3, [r7, #11]
 800321c:	f003 0307 	and.w	r3, r3, #7
 8003220:	b2da      	uxtb	r2, r3
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003226:	7afb      	ldrb	r3, [r7, #11]
 8003228:	f003 0307 	and.w	r3, r3, #7
 800322c:	2b00      	cmp	r3, #0
 800322e:	d106      	bne.n	800323e <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	6979      	ldr	r1, [r7, #20]
 8003236:	4618      	mov	r0, r3
 8003238:	f003 fe37 	bl	8006eaa <USB_EPStartXfer>
 800323c:	e005      	b.n	800324a <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	6979      	ldr	r1, [r7, #20]
 8003244:	4618      	mov	r0, r3
 8003246:	f003 fe30 	bl	8006eaa <USB_EPStartXfer>
  }

  return HAL_OK;
 800324a:	2300      	movs	r3, #0
}
 800324c:	4618      	mov	r0, r3
 800324e:	3718      	adds	r7, #24
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}

08003254 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	460b      	mov	r3, r1
 800325e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003260:	78fb      	ldrb	r3, [r7, #3]
 8003262:	f003 0207 	and.w	r2, r3, #7
 8003266:	6879      	ldr	r1, [r7, #4]
 8003268:	4613      	mov	r3, r2
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	4413      	add	r3, r2
 800326e:	00db      	lsls	r3, r3, #3
 8003270:	440b      	add	r3, r1
 8003272:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8003276:	681b      	ldr	r3, [r3, #0]
}
 8003278:	4618      	mov	r0, r3
 800327a:	370c      	adds	r7, #12
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr

08003284 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b086      	sub	sp, #24
 8003288:	af00      	add	r7, sp, #0
 800328a:	60f8      	str	r0, [r7, #12]
 800328c:	607a      	str	r2, [r7, #4]
 800328e:	603b      	str	r3, [r7, #0]
 8003290:	460b      	mov	r3, r1
 8003292:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003294:	7afb      	ldrb	r3, [r7, #11]
 8003296:	f003 0307 	and.w	r3, r3, #7
 800329a:	1c5a      	adds	r2, r3, #1
 800329c:	4613      	mov	r3, r2
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	4413      	add	r3, r2
 80032a2:	00db      	lsls	r3, r3, #3
 80032a4:	68fa      	ldr	r2, [r7, #12]
 80032a6:	4413      	add	r3, r2
 80032a8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	683a      	ldr	r2, [r7, #0]
 80032b4:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	2201      	movs	r2, #1
 80032ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	683a      	ldr	r2, [r7, #0]
 80032c2:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	2200      	movs	r2, #0
 80032c8:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	2201      	movs	r2, #1
 80032ce:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032d0:	7afb      	ldrb	r3, [r7, #11]
 80032d2:	f003 0307 	and.w	r3, r3, #7
 80032d6:	b2da      	uxtb	r2, r3
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80032dc:	7afb      	ldrb	r3, [r7, #11]
 80032de:	f003 0307 	and.w	r3, r3, #7
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d106      	bne.n	80032f4 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	6979      	ldr	r1, [r7, #20]
 80032ec:	4618      	mov	r0, r3
 80032ee:	f003 fddc 	bl	8006eaa <USB_EPStartXfer>
 80032f2:	e005      	b.n	8003300 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	6979      	ldr	r1, [r7, #20]
 80032fa:	4618      	mov	r0, r3
 80032fc:	f003 fdd5 	bl	8006eaa <USB_EPStartXfer>
  }

  return HAL_OK;
 8003300:	2300      	movs	r3, #0
}
 8003302:	4618      	mov	r0, r3
 8003304:	3718      	adds	r7, #24
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}

0800330a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800330a:	b580      	push	{r7, lr}
 800330c:	b084      	sub	sp, #16
 800330e:	af00      	add	r7, sp, #0
 8003310:	6078      	str	r0, [r7, #4]
 8003312:	460b      	mov	r3, r1
 8003314:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003316:	78fb      	ldrb	r3, [r7, #3]
 8003318:	f003 0207 	and.w	r2, r3, #7
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	429a      	cmp	r2, r3
 8003322:	d901      	bls.n	8003328 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e03e      	b.n	80033a6 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003328:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800332c:	2b00      	cmp	r3, #0
 800332e:	da0e      	bge.n	800334e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003330:	78fb      	ldrb	r3, [r7, #3]
 8003332:	f003 0307 	and.w	r3, r3, #7
 8003336:	1c5a      	adds	r2, r3, #1
 8003338:	4613      	mov	r3, r2
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	4413      	add	r3, r2
 800333e:	00db      	lsls	r3, r3, #3
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	4413      	add	r3, r2
 8003344:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2201      	movs	r2, #1
 800334a:	705a      	strb	r2, [r3, #1]
 800334c:	e00c      	b.n	8003368 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800334e:	78fa      	ldrb	r2, [r7, #3]
 8003350:	4613      	mov	r3, r2
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	4413      	add	r3, r2
 8003356:	00db      	lsls	r3, r3, #3
 8003358:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800335c:	687a      	ldr	r2, [r7, #4]
 800335e:	4413      	add	r3, r2
 8003360:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2200      	movs	r2, #0
 8003366:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2201      	movs	r2, #1
 800336c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800336e:	78fb      	ldrb	r3, [r7, #3]
 8003370:	f003 0307 	and.w	r3, r3, #7
 8003374:	b2da      	uxtb	r2, r3
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003380:	2b01      	cmp	r3, #1
 8003382:	d101      	bne.n	8003388 <HAL_PCD_EP_SetStall+0x7e>
 8003384:	2302      	movs	r3, #2
 8003386:	e00e      	b.n	80033a6 <HAL_PCD_EP_SetStall+0x9c>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	68f9      	ldr	r1, [r7, #12]
 8003396:	4618      	mov	r0, r3
 8003398:	f004 fe59 	bl	800804e <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2200      	movs	r2, #0
 80033a0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80033a4:	2300      	movs	r3, #0
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3710      	adds	r7, #16
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}

080033ae <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033ae:	b580      	push	{r7, lr}
 80033b0:	b084      	sub	sp, #16
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	6078      	str	r0, [r7, #4]
 80033b6:	460b      	mov	r3, r1
 80033b8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80033ba:	78fb      	ldrb	r3, [r7, #3]
 80033bc:	f003 020f 	and.w	r2, r3, #15
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d901      	bls.n	80033cc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e040      	b.n	800344e <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80033cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	da0e      	bge.n	80033f2 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033d4:	78fb      	ldrb	r3, [r7, #3]
 80033d6:	f003 0307 	and.w	r3, r3, #7
 80033da:	1c5a      	adds	r2, r3, #1
 80033dc:	4613      	mov	r3, r2
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	4413      	add	r3, r2
 80033e2:	00db      	lsls	r3, r3, #3
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	4413      	add	r3, r2
 80033e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2201      	movs	r2, #1
 80033ee:	705a      	strb	r2, [r3, #1]
 80033f0:	e00e      	b.n	8003410 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033f2:	78fb      	ldrb	r3, [r7, #3]
 80033f4:	f003 0207 	and.w	r2, r3, #7
 80033f8:	4613      	mov	r3, r2
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	4413      	add	r3, r2
 80033fe:	00db      	lsls	r3, r3, #3
 8003400:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	4413      	add	r3, r2
 8003408:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2200      	movs	r2, #0
 800340e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2200      	movs	r2, #0
 8003414:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003416:	78fb      	ldrb	r3, [r7, #3]
 8003418:	f003 0307 	and.w	r3, r3, #7
 800341c:	b2da      	uxtb	r2, r3
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003428:	2b01      	cmp	r3, #1
 800342a:	d101      	bne.n	8003430 <HAL_PCD_EP_ClrStall+0x82>
 800342c:	2302      	movs	r3, #2
 800342e:	e00e      	b.n	800344e <HAL_PCD_EP_ClrStall+0xa0>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2201      	movs	r2, #1
 8003434:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	68f9      	ldr	r1, [r7, #12]
 800343e:	4618      	mov	r0, r3
 8003440:	f004 fe56 	bl	80080f0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800344c:	2300      	movs	r3, #0
}
 800344e:	4618      	mov	r0, r3
 8003450:	3710      	adds	r7, #16
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}

08003456 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003456:	b580      	push	{r7, lr}
 8003458:	b096      	sub	sp, #88	; 0x58
 800345a:	af00      	add	r7, sp, #0
 800345c:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800345e:	e3a9      	b.n	8003bb4 <PCD_EP_ISR_Handler+0x75e>
  {
    wIstr = hpcd->Instance->ISTR;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003468:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800346c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003470:	b2db      	uxtb	r3, r3
 8003472:	f003 030f 	and.w	r3, r3, #15
 8003476:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 800347a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800347e:	2b00      	cmp	r3, #0
 8003480:	f040 8164 	bne.w	800374c <PCD_EP_ISR_Handler+0x2f6>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003484:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003488:	f003 0310 	and.w	r3, r3, #16
 800348c:	2b00      	cmp	r3, #0
 800348e:	d152      	bne.n	8003536 <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	881b      	ldrh	r3, [r3, #0]
 8003496:	b29b      	uxth	r3, r3
 8003498:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800349c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034a0:	81fb      	strh	r3, [r7, #14]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	89fb      	ldrh	r3, [r7, #14]
 80034a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	3328      	adds	r3, #40	; 0x28
 80034b8:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	461a      	mov	r2, r3
 80034c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	00db      	lsls	r3, r3, #3
 80034cc:	4413      	add	r3, r2
 80034ce:	3302      	adds	r3, #2
 80034d0:	005b      	lsls	r3, r3, #1
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	6812      	ldr	r2, [r2, #0]
 80034d6:	4413      	add	r3, r2
 80034d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80034dc:	881b      	ldrh	r3, [r3, #0]
 80034de:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80034e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034e4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80034e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034e8:	695a      	ldr	r2, [r3, #20]
 80034ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034ec:	69db      	ldr	r3, [r3, #28]
 80034ee:	441a      	add	r2, r3
 80034f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034f2:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80034f4:	2100      	movs	r1, #0
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f006 fd55 	bl	8009fa6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003502:	b2db      	uxtb	r3, r3
 8003504:	2b00      	cmp	r3, #0
 8003506:	f000 8355 	beq.w	8003bb4 <PCD_EP_ISR_Handler+0x75e>
 800350a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800350c:	699b      	ldr	r3, [r3, #24]
 800350e:	2b00      	cmp	r3, #0
 8003510:	f040 8350 	bne.w	8003bb4 <PCD_EP_ISR_Handler+0x75e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800351a:	b2db      	uxtb	r3, r3
 800351c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003520:	b2da      	uxtb	r2, r3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	b292      	uxth	r2, r2
 8003528:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003534:	e33e      	b.n	8003bb4 <PCD_EP_ISR_Handler+0x75e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800353c:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	881b      	ldrh	r3, [r3, #0]
 8003544:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003548:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800354c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003550:	2b00      	cmp	r3, #0
 8003552:	d034      	beq.n	80035be <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800355c:	b29b      	uxth	r3, r3
 800355e:	461a      	mov	r2, r3
 8003560:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003562:	781b      	ldrb	r3, [r3, #0]
 8003564:	00db      	lsls	r3, r3, #3
 8003566:	4413      	add	r3, r2
 8003568:	3306      	adds	r3, #6
 800356a:	005b      	lsls	r3, r3, #1
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	6812      	ldr	r2, [r2, #0]
 8003570:	4413      	add	r3, r2
 8003572:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003576:	881b      	ldrh	r3, [r3, #0]
 8003578:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800357c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800357e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6818      	ldr	r0, [r3, #0]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800358a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800358c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800358e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003590:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003592:	b29b      	uxth	r3, r3
 8003594:	f004 fecf 	bl	8008336 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	881b      	ldrh	r3, [r3, #0]
 800359e:	b29a      	uxth	r2, r3
 80035a0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80035a4:	4013      	ands	r3, r2
 80035a6:	823b      	strh	r3, [r7, #16]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	8a3a      	ldrh	r2, [r7, #16]
 80035ae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80035b2:	b292      	uxth	r2, r2
 80035b4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f006 fcc8 	bl	8009f4c <HAL_PCD_SetupStageCallback>
 80035bc:	e2fa      	b.n	8003bb4 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80035be:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	f280 82f6 	bge.w	8003bb4 <PCD_EP_ISR_Handler+0x75e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	881b      	ldrh	r3, [r3, #0]
 80035ce:	b29a      	uxth	r2, r3
 80035d0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80035d4:	4013      	ands	r3, r2
 80035d6:	83fb      	strh	r3, [r7, #30]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	8bfa      	ldrh	r2, [r7, #30]
 80035de:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80035e2:	b292      	uxth	r2, r2
 80035e4:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	461a      	mov	r2, r3
 80035f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	00db      	lsls	r3, r3, #3
 80035f8:	4413      	add	r3, r2
 80035fa:	3306      	adds	r3, #6
 80035fc:	005b      	lsls	r3, r3, #1
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	6812      	ldr	r2, [r2, #0]
 8003602:	4413      	add	r3, r2
 8003604:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003608:	881b      	ldrh	r3, [r3, #0]
 800360a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800360e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003610:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003612:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003614:	69db      	ldr	r3, [r3, #28]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d019      	beq.n	800364e <PCD_EP_ISR_Handler+0x1f8>
 800361a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800361c:	695b      	ldr	r3, [r3, #20]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d015      	beq.n	800364e <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6818      	ldr	r0, [r3, #0]
 8003626:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003628:	6959      	ldr	r1, [r3, #20]
 800362a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800362c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800362e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003630:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003632:	b29b      	uxth	r3, r3
 8003634:	f004 fe7f 	bl	8008336 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003638:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800363a:	695a      	ldr	r2, [r3, #20]
 800363c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800363e:	69db      	ldr	r3, [r3, #28]
 8003640:	441a      	add	r2, r3
 8003642:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003644:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003646:	2100      	movs	r1, #0
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f006 fc91 	bl	8009f70 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	881b      	ldrh	r3, [r3, #0]
 8003654:	b29b      	uxth	r3, r3
 8003656:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800365a:	2b00      	cmp	r3, #0
 800365c:	f040 82aa 	bne.w	8003bb4 <PCD_EP_ISR_Handler+0x75e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	61bb      	str	r3, [r7, #24]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800366e:	b29b      	uxth	r3, r3
 8003670:	461a      	mov	r2, r3
 8003672:	69bb      	ldr	r3, [r7, #24]
 8003674:	4413      	add	r3, r2
 8003676:	61bb      	str	r3, [r7, #24]
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800367e:	617b      	str	r3, [r7, #20]
 8003680:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003682:	691b      	ldr	r3, [r3, #16]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d112      	bne.n	80036ae <PCD_EP_ISR_Handler+0x258>
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	881b      	ldrh	r3, [r3, #0]
 800368c:	b29b      	uxth	r3, r3
 800368e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003692:	b29a      	uxth	r2, r3
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	801a      	strh	r2, [r3, #0]
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	881b      	ldrh	r3, [r3, #0]
 800369c:	b29b      	uxth	r3, r3
 800369e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036a6:	b29a      	uxth	r2, r3
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	801a      	strh	r2, [r3, #0]
 80036ac:	e02f      	b.n	800370e <PCD_EP_ISR_Handler+0x2b8>
 80036ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036b0:	691b      	ldr	r3, [r3, #16]
 80036b2:	2b3e      	cmp	r3, #62	; 0x3e
 80036b4:	d813      	bhi.n	80036de <PCD_EP_ISR_Handler+0x288>
 80036b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036b8:	691b      	ldr	r3, [r3, #16]
 80036ba:	085b      	lsrs	r3, r3, #1
 80036bc:	647b      	str	r3, [r7, #68]	; 0x44
 80036be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036c0:	691b      	ldr	r3, [r3, #16]
 80036c2:	f003 0301 	and.w	r3, r3, #1
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d002      	beq.n	80036d0 <PCD_EP_ISR_Handler+0x27a>
 80036ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036cc:	3301      	adds	r3, #1
 80036ce:	647b      	str	r3, [r7, #68]	; 0x44
 80036d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036d2:	b29b      	uxth	r3, r3
 80036d4:	029b      	lsls	r3, r3, #10
 80036d6:	b29a      	uxth	r2, r3
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	801a      	strh	r2, [r3, #0]
 80036dc:	e017      	b.n	800370e <PCD_EP_ISR_Handler+0x2b8>
 80036de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036e0:	691b      	ldr	r3, [r3, #16]
 80036e2:	095b      	lsrs	r3, r3, #5
 80036e4:	647b      	str	r3, [r7, #68]	; 0x44
 80036e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036e8:	691b      	ldr	r3, [r3, #16]
 80036ea:	f003 031f 	and.w	r3, r3, #31
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d102      	bne.n	80036f8 <PCD_EP_ISR_Handler+0x2a2>
 80036f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036f4:	3b01      	subs	r3, #1
 80036f6:	647b      	str	r3, [r7, #68]	; 0x44
 80036f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	029b      	lsls	r3, r3, #10
 80036fe:	b29b      	uxth	r3, r3
 8003700:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003704:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003708:	b29a      	uxth	r2, r3
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	881b      	ldrh	r3, [r3, #0]
 8003714:	b29b      	uxth	r3, r3
 8003716:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800371a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800371e:	827b      	strh	r3, [r7, #18]
 8003720:	8a7b      	ldrh	r3, [r7, #18]
 8003722:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003726:	827b      	strh	r3, [r7, #18]
 8003728:	8a7b      	ldrh	r3, [r7, #18]
 800372a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800372e:	827b      	strh	r3, [r7, #18]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	8a7b      	ldrh	r3, [r7, #18]
 8003736:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800373a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800373e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003742:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003746:	b29b      	uxth	r3, r3
 8003748:	8013      	strh	r3, [r2, #0]
 800374a:	e233      	b.n	8003bb4 <PCD_EP_ISR_Handler+0x75e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	461a      	mov	r2, r3
 8003752:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	4413      	add	r3, r2
 800375a:	881b      	ldrh	r3, [r3, #0]
 800375c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003760:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8003764:	2b00      	cmp	r3, #0
 8003766:	f280 80fc 	bge.w	8003962 <PCD_EP_ISR_Handler+0x50c>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	461a      	mov	r2, r3
 8003770:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	4413      	add	r3, r2
 8003778:	881b      	ldrh	r3, [r3, #0]
 800377a:	b29a      	uxth	r2, r3
 800377c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003780:	4013      	ands	r3, r2
 8003782:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	461a      	mov	r2, r3
 800378c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	4413      	add	r3, r2
 8003794:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8003798:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800379c:	b292      	uxth	r2, r2
 800379e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80037a0:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 80037a4:	4613      	mov	r3, r2
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	4413      	add	r3, r2
 80037aa:	00db      	lsls	r3, r3, #3
 80037ac:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80037b0:	687a      	ldr	r2, [r7, #4]
 80037b2:	4413      	add	r3, r2
 80037b4:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80037b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037b8:	7b1b      	ldrb	r3, [r3, #12]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d125      	bne.n	800380a <PCD_EP_ISR_Handler+0x3b4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	461a      	mov	r2, r3
 80037ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037cc:	781b      	ldrb	r3, [r3, #0]
 80037ce:	00db      	lsls	r3, r3, #3
 80037d0:	4413      	add	r3, r2
 80037d2:	3306      	adds	r3, #6
 80037d4:	005b      	lsls	r3, r3, #1
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	6812      	ldr	r2, [r2, #0]
 80037da:	4413      	add	r3, r2
 80037dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80037e0:	881b      	ldrh	r3, [r3, #0]
 80037e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037e6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 80037ea:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	f000 8092 	beq.w	8003918 <PCD_EP_ISR_Handler+0x4c2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6818      	ldr	r0, [r3, #0]
 80037f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037fa:	6959      	ldr	r1, [r3, #20]
 80037fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037fe:	88da      	ldrh	r2, [r3, #6]
 8003800:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003804:	f004 fd97 	bl	8008336 <USB_ReadPMA>
 8003808:	e086      	b.n	8003918 <PCD_EP_ISR_Handler+0x4c2>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800380a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800380c:	78db      	ldrb	r3, [r3, #3]
 800380e:	2b02      	cmp	r3, #2
 8003810:	d10a      	bne.n	8003828 <PCD_EP_ISR_Handler+0x3d2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003812:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003816:	461a      	mov	r2, r3
 8003818:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f000 f9d8 	bl	8003bd0 <HAL_PCD_EP_DB_Receive>
 8003820:	4603      	mov	r3, r0
 8003822:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003826:	e077      	b.n	8003918 <PCD_EP_ISR_Handler+0x4c2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	461a      	mov	r2, r3
 800382e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003830:	781b      	ldrb	r3, [r3, #0]
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	4413      	add	r3, r2
 8003836:	881b      	ldrh	r3, [r3, #0]
 8003838:	b29b      	uxth	r3, r3
 800383a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800383e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003842:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	461a      	mov	r2, r3
 800384c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800384e:	781b      	ldrb	r3, [r3, #0]
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	441a      	add	r2, r3
 8003854:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003858:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800385c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003860:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003864:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003868:	b29b      	uxth	r3, r3
 800386a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	461a      	mov	r2, r3
 8003872:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	4413      	add	r3, r2
 800387a:	881b      	ldrh	r3, [r3, #0]
 800387c:	b29b      	uxth	r3, r3
 800387e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d024      	beq.n	80038d0 <PCD_EP_ISR_Handler+0x47a>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800388e:	b29b      	uxth	r3, r3
 8003890:	461a      	mov	r2, r3
 8003892:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003894:	781b      	ldrb	r3, [r3, #0]
 8003896:	00db      	lsls	r3, r3, #3
 8003898:	4413      	add	r3, r2
 800389a:	3302      	adds	r3, #2
 800389c:	005b      	lsls	r3, r3, #1
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	6812      	ldr	r2, [r2, #0]
 80038a2:	4413      	add	r3, r2
 80038a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80038a8:	881b      	ldrh	r3, [r3, #0]
 80038aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038ae:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 80038b2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d02e      	beq.n	8003918 <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6818      	ldr	r0, [r3, #0]
 80038be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038c0:	6959      	ldr	r1, [r3, #20]
 80038c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038c4:	891a      	ldrh	r2, [r3, #8]
 80038c6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80038ca:	f004 fd34 	bl	8008336 <USB_ReadPMA>
 80038ce:	e023      	b.n	8003918 <PCD_EP_ISR_Handler+0x4c2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038d8:	b29b      	uxth	r3, r3
 80038da:	461a      	mov	r2, r3
 80038dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038de:	781b      	ldrb	r3, [r3, #0]
 80038e0:	00db      	lsls	r3, r3, #3
 80038e2:	4413      	add	r3, r2
 80038e4:	3306      	adds	r3, #6
 80038e6:	005b      	lsls	r3, r3, #1
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	6812      	ldr	r2, [r2, #0]
 80038ec:	4413      	add	r3, r2
 80038ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80038f2:	881b      	ldrh	r3, [r3, #0]
 80038f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038f8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 80038fc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003900:	2b00      	cmp	r3, #0
 8003902:	d009      	beq.n	8003918 <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6818      	ldr	r0, [r3, #0]
 8003908:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800390a:	6959      	ldr	r1, [r3, #20]
 800390c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800390e:	895a      	ldrh	r2, [r3, #10]
 8003910:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003914:	f004 fd0f 	bl	8008336 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003918:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800391a:	69da      	ldr	r2, [r3, #28]
 800391c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003920:	441a      	add	r2, r3
 8003922:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003924:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003926:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003928:	695a      	ldr	r2, [r3, #20]
 800392a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800392e:	441a      	add	r2, r3
 8003930:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003932:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003934:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003936:	699b      	ldr	r3, [r3, #24]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d005      	beq.n	8003948 <PCD_EP_ISR_Handler+0x4f2>
 800393c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003940:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003942:	691b      	ldr	r3, [r3, #16]
 8003944:	429a      	cmp	r2, r3
 8003946:	d206      	bcs.n	8003956 <PCD_EP_ISR_Handler+0x500>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003948:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	4619      	mov	r1, r3
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f006 fb0e 	bl	8009f70 <HAL_PCD_DataOutStageCallback>
 8003954:	e005      	b.n	8003962 <PCD_EP_ISR_Handler+0x50c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800395c:	4618      	mov	r0, r3
 800395e:	f003 faa4 	bl	8006eaa <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003962:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800396a:	2b00      	cmp	r3, #0
 800396c:	f000 8122 	beq.w	8003bb4 <PCD_EP_ISR_Handler+0x75e>
      {
        ep = &hpcd->IN_ep[epindex];
 8003970:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003974:	1c5a      	adds	r2, r3, #1
 8003976:	4613      	mov	r3, r2
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	4413      	add	r3, r2
 800397c:	00db      	lsls	r3, r3, #3
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	4413      	add	r3, r2
 8003982:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	461a      	mov	r2, r3
 800398a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	4413      	add	r3, r2
 8003992:	881b      	ldrh	r3, [r3, #0]
 8003994:	b29b      	uxth	r3, r3
 8003996:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800399a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800399e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	461a      	mov	r2, r3
 80039a8:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80039ac:	009b      	lsls	r3, r3, #2
 80039ae:	441a      	add	r2, r3
 80039b0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80039b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039bc:	b29b      	uxth	r3, r3
 80039be:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 80039c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039c2:	78db      	ldrb	r3, [r3, #3]
 80039c4:	2b02      	cmp	r3, #2
 80039c6:	f000 809d 	beq.w	8003b04 <PCD_EP_ISR_Handler+0x6ae>
        {
          ep->xfer_len = 0U;
 80039ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039cc:	2200      	movs	r2, #0
 80039ce:	619a      	str	r2, [r3, #24]

          if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80039d0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80039d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d046      	beq.n	8003a6a <PCD_EP_ISR_Handler+0x614>
          {
            PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80039dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039de:	785b      	ldrb	r3, [r3, #1]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d126      	bne.n	8003a32 <PCD_EP_ISR_Handler+0x5dc>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	627b      	str	r3, [r7, #36]	; 0x24
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039f2:	b29b      	uxth	r3, r3
 80039f4:	461a      	mov	r2, r3
 80039f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f8:	4413      	add	r3, r2
 80039fa:	627b      	str	r3, [r7, #36]	; 0x24
 80039fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039fe:	781b      	ldrb	r3, [r3, #0]
 8003a00:	011a      	lsls	r2, r3, #4
 8003a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a04:	4413      	add	r3, r2
 8003a06:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003a0a:	623b      	str	r3, [r7, #32]
 8003a0c:	6a3b      	ldr	r3, [r7, #32]
 8003a0e:	881b      	ldrh	r3, [r3, #0]
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003a16:	b29a      	uxth	r2, r3
 8003a18:	6a3b      	ldr	r3, [r7, #32]
 8003a1a:	801a      	strh	r2, [r3, #0]
 8003a1c:	6a3b      	ldr	r3, [r7, #32]
 8003a1e:	881b      	ldrh	r3, [r3, #0]
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a2a:	b29a      	uxth	r2, r3
 8003a2c:	6a3b      	ldr	r3, [r7, #32]
 8003a2e:	801a      	strh	r2, [r3, #0]
 8003a30:	e061      	b.n	8003af6 <PCD_EP_ISR_Handler+0x6a0>
 8003a32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a34:	785b      	ldrb	r3, [r3, #1]
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d15d      	bne.n	8003af6 <PCD_EP_ISR_Handler+0x6a0>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a4e:	4413      	add	r3, r2
 8003a50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	011a      	lsls	r2, r3, #4
 8003a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a5a:	4413      	add	r3, r2
 8003a5c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003a60:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a64:	2200      	movs	r2, #0
 8003a66:	801a      	strh	r2, [r3, #0]
 8003a68:	e045      	b.n	8003af6 <PCD_EP_ISR_Handler+0x6a0>
          }
          else
          {
            PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a72:	785b      	ldrb	r3, [r3, #1]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d126      	bne.n	8003ac6 <PCD_EP_ISR_Handler+0x670>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	637b      	str	r3, [r7, #52]	; 0x34
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	461a      	mov	r2, r3
 8003a8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a8c:	4413      	add	r3, r2
 8003a8e:	637b      	str	r3, [r7, #52]	; 0x34
 8003a90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a92:	781b      	ldrb	r3, [r3, #0]
 8003a94:	011a      	lsls	r2, r3, #4
 8003a96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a98:	4413      	add	r3, r2
 8003a9a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003a9e:	633b      	str	r3, [r7, #48]	; 0x30
 8003aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aa2:	881b      	ldrh	r3, [r3, #0]
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003aaa:	b29a      	uxth	r2, r3
 8003aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aae:	801a      	strh	r2, [r3, #0]
 8003ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ab2:	881b      	ldrh	r3, [r3, #0]
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003aba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003abe:	b29a      	uxth	r2, r3
 8003ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac2:	801a      	strh	r2, [r3, #0]
 8003ac4:	e017      	b.n	8003af6 <PCD_EP_ISR_Handler+0x6a0>
 8003ac6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ac8:	785b      	ldrb	r3, [r3, #1]
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d113      	bne.n	8003af6 <PCD_EP_ISR_Handler+0x6a0>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	461a      	mov	r2, r3
 8003ada:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003adc:	4413      	add	r3, r2
 8003ade:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ae0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	011a      	lsls	r2, r3, #4
 8003ae6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ae8:	4413      	add	r3, r2
 8003aea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003aee:	63bb      	str	r3, [r7, #56]	; 0x38
 8003af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003af2:	2200      	movs	r2, #0
 8003af4:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003af6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003af8:	781b      	ldrb	r3, [r3, #0]
 8003afa:	4619      	mov	r1, r3
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f006 fa52 	bl	8009fa6 <HAL_PCD_DataInStageCallback>
 8003b02:	e057      	b.n	8003bb4 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        /* Manage Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U))
 8003b04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b06:	78db      	ldrb	r3, [r3, #3]
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d14c      	bne.n	8003ba6 <PCD_EP_ISR_Handler+0x750>
 8003b0c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d146      	bne.n	8003ba6 <PCD_EP_ISR_Handler+0x750>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	461a      	mov	r2, r3
 8003b24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b26:	781b      	ldrb	r3, [r3, #0]
 8003b28:	00db      	lsls	r3, r3, #3
 8003b2a:	4413      	add	r3, r2
 8003b2c:	3302      	adds	r3, #2
 8003b2e:	005b      	lsls	r3, r3, #1
 8003b30:	687a      	ldr	r2, [r7, #4]
 8003b32:	6812      	ldr	r2, [r2, #0]
 8003b34:	4413      	add	r3, r2
 8003b36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b3a:	881b      	ldrh	r3, [r3, #0]
 8003b3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b40:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

          if (ep->xfer_len > TxByteNbre)
 8003b44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b46:	699a      	ldr	r2, [r3, #24]
 8003b48:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d907      	bls.n	8003b60 <PCD_EP_ISR_Handler+0x70a>
          {
            ep->xfer_len -= TxByteNbre;
 8003b50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b52:	699a      	ldr	r2, [r3, #24]
 8003b54:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003b58:	1ad2      	subs	r2, r2, r3
 8003b5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b5c:	619a      	str	r2, [r3, #24]
 8003b5e:	e002      	b.n	8003b66 <PCD_EP_ISR_Handler+0x710>
          }
          else
          {
            ep->xfer_len = 0U;
 8003b60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b62:	2200      	movs	r2, #0
 8003b64:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8003b66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b68:	699b      	ldr	r3, [r3, #24]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d106      	bne.n	8003b7c <PCD_EP_ISR_Handler+0x726>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003b6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	4619      	mov	r1, r3
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f006 fa16 	bl	8009fa6 <HAL_PCD_DataInStageCallback>
 8003b7a:	e01b      	b.n	8003bb4 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8003b7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b7e:	695a      	ldr	r2, [r3, #20]
 8003b80:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003b84:	441a      	add	r2, r3
 8003b86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b88:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8003b8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b8c:	69da      	ldr	r2, [r3, #28]
 8003b8e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003b92:	441a      	add	r2, r3
 8003b94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b96:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f003 f983 	bl	8006eaa <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8003ba4:	e006      	b.n	8003bb4 <PCD_EP_ISR_Handler+0x75e>
          }
        }
        /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003ba6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003baa:	461a      	mov	r2, r3
 8003bac:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f000 f91b 	bl	8003dea <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	b21b      	sxth	r3, r3
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	f6ff ac4d 	blt.w	8003460 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003bc6:	2300      	movs	r3, #0
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3758      	adds	r7, #88	; 0x58
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}

08003bd0 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b088      	sub	sp, #32
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	60f8      	str	r0, [r7, #12]
 8003bd8:	60b9      	str	r1, [r7, #8]
 8003bda:	4613      	mov	r3, r2
 8003bdc:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003bde:	88fb      	ldrh	r3, [r7, #6]
 8003be0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d07e      	beq.n	8003ce6 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	781b      	ldrb	r3, [r3, #0]
 8003bf8:	00db      	lsls	r3, r3, #3
 8003bfa:	4413      	add	r3, r2
 8003bfc:	3302      	adds	r3, #2
 8003bfe:	005b      	lsls	r3, r3, #1
 8003c00:	68fa      	ldr	r2, [r7, #12]
 8003c02:	6812      	ldr	r2, [r2, #0]
 8003c04:	4413      	add	r3, r2
 8003c06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c0a:	881b      	ldrh	r3, [r3, #0]
 8003c0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c10:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	699a      	ldr	r2, [r3, #24]
 8003c16:	8b7b      	ldrh	r3, [r7, #26]
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d306      	bcc.n	8003c2a <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	699a      	ldr	r2, [r3, #24]
 8003c20:	8b7b      	ldrh	r3, [r7, #26]
 8003c22:	1ad2      	subs	r2, r2, r3
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	619a      	str	r2, [r3, #24]
 8003c28:	e002      	b.n	8003c30 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	699b      	ldr	r3, [r3, #24]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d123      	bne.n	8003c80 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	781b      	ldrb	r3, [r3, #0]
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	4413      	add	r3, r2
 8003c46:	881b      	ldrh	r3, [r3, #0]
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c52:	833b      	strh	r3, [r7, #24]
 8003c54:	8b3b      	ldrh	r3, [r7, #24]
 8003c56:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003c5a:	833b      	strh	r3, [r7, #24]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	461a      	mov	r2, r3
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	781b      	ldrb	r3, [r3, #0]
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	441a      	add	r2, r3
 8003c6a:	8b3b      	ldrh	r3, [r7, #24]
 8003c6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003c80:	88fb      	ldrh	r3, [r7, #6]
 8003c82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d01f      	beq.n	8003cca <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	461a      	mov	r2, r3
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	781b      	ldrb	r3, [r3, #0]
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	4413      	add	r3, r2
 8003c98:	881b      	ldrh	r3, [r3, #0]
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ca0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ca4:	82fb      	strh	r3, [r7, #22]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	461a      	mov	r2, r3
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	441a      	add	r2, r3
 8003cb4:	8afb      	ldrh	r3, [r7, #22]
 8003cb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cc2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003cca:	8b7b      	ldrh	r3, [r7, #26]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	f000 8087 	beq.w	8003de0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	6818      	ldr	r0, [r3, #0]
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	6959      	ldr	r1, [r3, #20]
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	891a      	ldrh	r2, [r3, #8]
 8003cde:	8b7b      	ldrh	r3, [r7, #26]
 8003ce0:	f004 fb29 	bl	8008336 <USB_ReadPMA>
 8003ce4:	e07c      	b.n	8003de0 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	781b      	ldrb	r3, [r3, #0]
 8003cf6:	00db      	lsls	r3, r3, #3
 8003cf8:	4413      	add	r3, r2
 8003cfa:	3306      	adds	r3, #6
 8003cfc:	005b      	lsls	r3, r3, #1
 8003cfe:	68fa      	ldr	r2, [r7, #12]
 8003d00:	6812      	ldr	r2, [r2, #0]
 8003d02:	4413      	add	r3, r2
 8003d04:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d08:	881b      	ldrh	r3, [r3, #0]
 8003d0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d0e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	699a      	ldr	r2, [r3, #24]
 8003d14:	8b7b      	ldrh	r3, [r7, #26]
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d306      	bcc.n	8003d28 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	699a      	ldr	r2, [r3, #24]
 8003d1e:	8b7b      	ldrh	r3, [r7, #26]
 8003d20:	1ad2      	subs	r2, r2, r3
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	619a      	str	r2, [r3, #24]
 8003d26:	e002      	b.n	8003d2e <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	699b      	ldr	r3, [r3, #24]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d123      	bne.n	8003d7e <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	781b      	ldrb	r3, [r3, #0]
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	4413      	add	r3, r2
 8003d44:	881b      	ldrh	r3, [r3, #0]
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d50:	83fb      	strh	r3, [r7, #30]
 8003d52:	8bfb      	ldrh	r3, [r7, #30]
 8003d54:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003d58:	83fb      	strh	r3, [r7, #30]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	461a      	mov	r2, r3
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	781b      	ldrb	r3, [r3, #0]
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	441a      	add	r2, r3
 8003d68:	8bfb      	ldrh	r3, [r7, #30]
 8003d6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003d7e:	88fb      	ldrh	r3, [r7, #6]
 8003d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d11f      	bne.n	8003dc8 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	781b      	ldrb	r3, [r3, #0]
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	4413      	add	r3, r2
 8003d96:	881b      	ldrh	r3, [r3, #0]
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003da2:	83bb      	strh	r3, [r7, #28]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	461a      	mov	r2, r3
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	781b      	ldrb	r3, [r3, #0]
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	441a      	add	r2, r3
 8003db2:	8bbb      	ldrh	r3, [r7, #28]
 8003db4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003db8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003dbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dc0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003dc8:	8b7b      	ldrh	r3, [r7, #26]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d008      	beq.n	8003de0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	6818      	ldr	r0, [r3, #0]
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	6959      	ldr	r1, [r3, #20]
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	895a      	ldrh	r2, [r3, #10]
 8003dda:	8b7b      	ldrh	r3, [r7, #26]
 8003ddc:	f004 faab 	bl	8008336 <USB_ReadPMA>
    }
  }

  return count;
 8003de0:	8b7b      	ldrh	r3, [r7, #26]
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3720      	adds	r7, #32
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}

08003dea <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003dea:	b580      	push	{r7, lr}
 8003dec:	b0a2      	sub	sp, #136	; 0x88
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	60f8      	str	r0, [r7, #12]
 8003df2:	60b9      	str	r1, [r7, #8]
 8003df4:	4613      	mov	r3, r2
 8003df6:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003df8:	88fb      	ldrh	r3, [r7, #6]
 8003dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	f000 81c7 	beq.w	8004192 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	461a      	mov	r2, r3
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	781b      	ldrb	r3, [r3, #0]
 8003e14:	00db      	lsls	r3, r3, #3
 8003e16:	4413      	add	r3, r2
 8003e18:	3302      	adds	r3, #2
 8003e1a:	005b      	lsls	r3, r3, #1
 8003e1c:	68fa      	ldr	r2, [r7, #12]
 8003e1e:	6812      	ldr	r2, [r2, #0]
 8003e20:	4413      	add	r3, r2
 8003e22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e26:	881b      	ldrh	r3, [r3, #0]
 8003e28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e2c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	699a      	ldr	r2, [r3, #24]
 8003e34:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d907      	bls.n	8003e4c <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	699a      	ldr	r2, [r3, #24]
 8003e40:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003e44:	1ad2      	subs	r2, r2, r3
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	619a      	str	r2, [r3, #24]
 8003e4a:	e002      	b.n	8003e52 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	699b      	ldr	r3, [r3, #24]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	f040 80b9 	bne.w	8003fce <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	785b      	ldrb	r3, [r3, #1]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d126      	bne.n	8003eb2 <HAL_PCD_EP_DB_Transmit+0xc8>
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	461a      	mov	r2, r3
 8003e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e78:	4413      	add	r3, r2
 8003e7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	781b      	ldrb	r3, [r3, #0]
 8003e80:	011a      	lsls	r2, r3, #4
 8003e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e84:	4413      	add	r3, r2
 8003e86:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003e8a:	627b      	str	r3, [r7, #36]	; 0x24
 8003e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8e:	881b      	ldrh	r3, [r3, #0]
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003e96:	b29a      	uxth	r2, r3
 8003e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9a:	801a      	strh	r2, [r3, #0]
 8003e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9e:	881b      	ldrh	r3, [r3, #0]
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ea6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003eaa:	b29a      	uxth	r2, r3
 8003eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eae:	801a      	strh	r2, [r3, #0]
 8003eb0:	e01a      	b.n	8003ee8 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	785b      	ldrb	r3, [r3, #1]
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d116      	bne.n	8003ee8 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	633b      	str	r3, [r7, #48]	; 0x30
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	461a      	mov	r2, r3
 8003ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ece:	4413      	add	r3, r2
 8003ed0:	633b      	str	r3, [r7, #48]	; 0x30
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	011a      	lsls	r2, r3, #4
 8003ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eda:	4413      	add	r3, r2
 8003edc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	623b      	str	r3, [r7, #32]
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	785b      	ldrb	r3, [r3, #1]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d126      	bne.n	8003f44 <HAL_PCD_EP_DB_Transmit+0x15a>
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	61bb      	str	r3, [r7, #24]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	461a      	mov	r2, r3
 8003f08:	69bb      	ldr	r3, [r7, #24]
 8003f0a:	4413      	add	r3, r2
 8003f0c:	61bb      	str	r3, [r7, #24]
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	011a      	lsls	r2, r3, #4
 8003f14:	69bb      	ldr	r3, [r7, #24]
 8003f16:	4413      	add	r3, r2
 8003f18:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003f1c:	617b      	str	r3, [r7, #20]
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	881b      	ldrh	r3, [r3, #0]
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003f28:	b29a      	uxth	r2, r3
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	801a      	strh	r2, [r3, #0]
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	881b      	ldrh	r3, [r3, #0]
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f3c:	b29a      	uxth	r2, r3
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	801a      	strh	r2, [r3, #0]
 8003f42:	e017      	b.n	8003f74 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	785b      	ldrb	r3, [r3, #1]
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d113      	bne.n	8003f74 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	461a      	mov	r2, r3
 8003f58:	6a3b      	ldr	r3, [r7, #32]
 8003f5a:	4413      	add	r3, r2
 8003f5c:	623b      	str	r3, [r7, #32]
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	011a      	lsls	r2, r3, #4
 8003f64:	6a3b      	ldr	r3, [r7, #32]
 8003f66:	4413      	add	r3, r2
 8003f68:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003f6c:	61fb      	str	r3, [r7, #28]
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	2200      	movs	r2, #0
 8003f72:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	781b      	ldrb	r3, [r3, #0]
 8003f78:	4619      	mov	r1, r3
 8003f7a:	68f8      	ldr	r0, [r7, #12]
 8003f7c:	f006 f813 	bl	8009fa6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003f80:	88fb      	ldrh	r3, [r7, #6]
 8003f82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	f000 82d4 	beq.w	8004534 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	461a      	mov	r2, r3
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	4413      	add	r3, r2
 8003f9a:	881b      	ldrh	r3, [r3, #0]
 8003f9c:	b29b      	uxth	r3, r3
 8003f9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fa6:	827b      	strh	r3, [r7, #18]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	461a      	mov	r2, r3
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	781b      	ldrb	r3, [r3, #0]
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	441a      	add	r2, r3
 8003fb6:	8a7b      	ldrh	r3, [r7, #18]
 8003fb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fc0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003fc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	8013      	strh	r3, [r2, #0]
 8003fcc:	e2b2      	b.n	8004534 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003fce:	88fb      	ldrh	r3, [r7, #6]
 8003fd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d021      	beq.n	800401c <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	461a      	mov	r2, r3
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	4413      	add	r3, r2
 8003fe6:	881b      	ldrh	r3, [r3, #0]
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ff2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	441a      	add	r2, r3
 8004004:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004008:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800400c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004010:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004014:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004018:	b29b      	uxth	r3, r3
 800401a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004022:	2b01      	cmp	r3, #1
 8004024:	f040 8286 	bne.w	8004534 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	695a      	ldr	r2, [r3, #20]
 800402c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004030:	441a      	add	r2, r3
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	69da      	ldr	r2, [r3, #28]
 800403a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800403e:	441a      	add	r2, r3
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	6a1a      	ldr	r2, [r3, #32]
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	691b      	ldr	r3, [r3, #16]
 800404c:	429a      	cmp	r2, r3
 800404e:	d309      	bcc.n	8004064 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	691b      	ldr	r3, [r3, #16]
 8004054:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	6a1a      	ldr	r2, [r3, #32]
 800405a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800405c:	1ad2      	subs	r2, r2, r3
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	621a      	str	r2, [r3, #32]
 8004062:	e015      	b.n	8004090 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	6a1b      	ldr	r3, [r3, #32]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d107      	bne.n	800407c <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 800406c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004070:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	2200      	movs	r2, #0
 8004076:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800407a:	e009      	b.n	8004090 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	2200      	movs	r2, #0
 8004080:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	6a1b      	ldr	r3, [r3, #32]
 8004088:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	2200      	movs	r2, #0
 800408e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	785b      	ldrb	r3, [r3, #1]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d155      	bne.n	8004144 <HAL_PCD_EP_DB_Transmit+0x35a>
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	63bb      	str	r3, [r7, #56]	; 0x38
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	461a      	mov	r2, r3
 80040aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ac:	4413      	add	r3, r2
 80040ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	781b      	ldrb	r3, [r3, #0]
 80040b4:	011a      	lsls	r2, r3, #4
 80040b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040b8:	4413      	add	r3, r2
 80040ba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80040be:	637b      	str	r3, [r7, #52]	; 0x34
 80040c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d112      	bne.n	80040ec <HAL_PCD_EP_DB_Transmit+0x302>
 80040c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040c8:	881b      	ldrh	r3, [r3, #0]
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80040d0:	b29a      	uxth	r2, r3
 80040d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040d4:	801a      	strh	r2, [r3, #0]
 80040d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040d8:	881b      	ldrh	r3, [r3, #0]
 80040da:	b29b      	uxth	r3, r3
 80040dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040e4:	b29a      	uxth	r2, r3
 80040e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040e8:	801a      	strh	r2, [r3, #0]
 80040ea:	e047      	b.n	800417c <HAL_PCD_EP_DB_Transmit+0x392>
 80040ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040ee:	2b3e      	cmp	r3, #62	; 0x3e
 80040f0:	d811      	bhi.n	8004116 <HAL_PCD_EP_DB_Transmit+0x32c>
 80040f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040f4:	085b      	lsrs	r3, r3, #1
 80040f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80040f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040fa:	f003 0301 	and.w	r3, r3, #1
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d002      	beq.n	8004108 <HAL_PCD_EP_DB_Transmit+0x31e>
 8004102:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004104:	3301      	adds	r3, #1
 8004106:	64bb      	str	r3, [r7, #72]	; 0x48
 8004108:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800410a:	b29b      	uxth	r3, r3
 800410c:	029b      	lsls	r3, r3, #10
 800410e:	b29a      	uxth	r2, r3
 8004110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004112:	801a      	strh	r2, [r3, #0]
 8004114:	e032      	b.n	800417c <HAL_PCD_EP_DB_Transmit+0x392>
 8004116:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004118:	095b      	lsrs	r3, r3, #5
 800411a:	64bb      	str	r3, [r7, #72]	; 0x48
 800411c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800411e:	f003 031f 	and.w	r3, r3, #31
 8004122:	2b00      	cmp	r3, #0
 8004124:	d102      	bne.n	800412c <HAL_PCD_EP_DB_Transmit+0x342>
 8004126:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004128:	3b01      	subs	r3, #1
 800412a:	64bb      	str	r3, [r7, #72]	; 0x48
 800412c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800412e:	b29b      	uxth	r3, r3
 8004130:	029b      	lsls	r3, r3, #10
 8004132:	b29b      	uxth	r3, r3
 8004134:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004138:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800413c:	b29a      	uxth	r2, r3
 800413e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004140:	801a      	strh	r2, [r3, #0]
 8004142:	e01b      	b.n	800417c <HAL_PCD_EP_DB_Transmit+0x392>
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	785b      	ldrb	r3, [r3, #1]
 8004148:	2b01      	cmp	r3, #1
 800414a:	d117      	bne.n	800417c <HAL_PCD_EP_DB_Transmit+0x392>
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	643b      	str	r3, [r7, #64]	; 0x40
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800415a:	b29b      	uxth	r3, r3
 800415c:	461a      	mov	r2, r3
 800415e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004160:	4413      	add	r3, r2
 8004162:	643b      	str	r3, [r7, #64]	; 0x40
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	011a      	lsls	r2, r3, #4
 800416a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800416c:	4413      	add	r3, r2
 800416e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004172:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004174:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004176:	b29a      	uxth	r2, r3
 8004178:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800417a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6818      	ldr	r0, [r3, #0]
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	6959      	ldr	r1, [r3, #20]
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	891a      	ldrh	r2, [r3, #8]
 8004188:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800418a:	b29b      	uxth	r3, r3
 800418c:	f004 f88d 	bl	80082aa <USB_WritePMA>
 8004190:	e1d0      	b.n	8004534 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800419a:	b29b      	uxth	r3, r3
 800419c:	461a      	mov	r2, r3
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	781b      	ldrb	r3, [r3, #0]
 80041a2:	00db      	lsls	r3, r3, #3
 80041a4:	4413      	add	r3, r2
 80041a6:	3306      	adds	r3, #6
 80041a8:	005b      	lsls	r3, r3, #1
 80041aa:	68fa      	ldr	r2, [r7, #12]
 80041ac:	6812      	ldr	r2, [r2, #0]
 80041ae:	4413      	add	r3, r2
 80041b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80041b4:	881b      	ldrh	r3, [r3, #0]
 80041b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041ba:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	699a      	ldr	r2, [r3, #24]
 80041c2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d307      	bcc.n	80041da <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	699a      	ldr	r2, [r3, #24]
 80041ce:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80041d2:	1ad2      	subs	r2, r2, r3
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	619a      	str	r2, [r3, #24]
 80041d8:	e002      	b.n	80041e0 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	2200      	movs	r2, #0
 80041de:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	699b      	ldr	r3, [r3, #24]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	f040 80c4 	bne.w	8004372 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	785b      	ldrb	r3, [r3, #1]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d126      	bne.n	8004240 <HAL_PCD_EP_DB_Transmit+0x456>
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004200:	b29b      	uxth	r3, r3
 8004202:	461a      	mov	r2, r3
 8004204:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004206:	4413      	add	r3, r2
 8004208:	66fb      	str	r3, [r7, #108]	; 0x6c
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	781b      	ldrb	r3, [r3, #0]
 800420e:	011a      	lsls	r2, r3, #4
 8004210:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004212:	4413      	add	r3, r2
 8004214:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004218:	66bb      	str	r3, [r7, #104]	; 0x68
 800421a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800421c:	881b      	ldrh	r3, [r3, #0]
 800421e:	b29b      	uxth	r3, r3
 8004220:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004224:	b29a      	uxth	r2, r3
 8004226:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004228:	801a      	strh	r2, [r3, #0]
 800422a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800422c:	881b      	ldrh	r3, [r3, #0]
 800422e:	b29b      	uxth	r3, r3
 8004230:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004234:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004238:	b29a      	uxth	r2, r3
 800423a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800423c:	801a      	strh	r2, [r3, #0]
 800423e:	e01a      	b.n	8004276 <HAL_PCD_EP_DB_Transmit+0x48c>
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	785b      	ldrb	r3, [r3, #1]
 8004244:	2b01      	cmp	r3, #1
 8004246:	d116      	bne.n	8004276 <HAL_PCD_EP_DB_Transmit+0x48c>
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	677b      	str	r3, [r7, #116]	; 0x74
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004256:	b29b      	uxth	r3, r3
 8004258:	461a      	mov	r2, r3
 800425a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800425c:	4413      	add	r3, r2
 800425e:	677b      	str	r3, [r7, #116]	; 0x74
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	781b      	ldrb	r3, [r3, #0]
 8004264:	011a      	lsls	r2, r3, #4
 8004266:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004268:	4413      	add	r3, r2
 800426a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800426e:	673b      	str	r3, [r7, #112]	; 0x70
 8004270:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004272:	2200      	movs	r2, #0
 8004274:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	67bb      	str	r3, [r7, #120]	; 0x78
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	785b      	ldrb	r3, [r3, #1]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d12f      	bne.n	80042e4 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004294:	b29b      	uxth	r3, r3
 8004296:	461a      	mov	r2, r3
 8004298:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800429c:	4413      	add	r3, r2
 800429e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	781b      	ldrb	r3, [r3, #0]
 80042a6:	011a      	lsls	r2, r3, #4
 80042a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80042ac:	4413      	add	r3, r2
 80042ae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80042b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80042b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80042ba:	881b      	ldrh	r3, [r3, #0]
 80042bc:	b29b      	uxth	r3, r3
 80042be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80042c2:	b29a      	uxth	r2, r3
 80042c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80042c8:	801a      	strh	r2, [r3, #0]
 80042ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80042ce:	881b      	ldrh	r3, [r3, #0]
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042da:	b29a      	uxth	r2, r3
 80042dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80042e0:	801a      	strh	r2, [r3, #0]
 80042e2:	e017      	b.n	8004314 <HAL_PCD_EP_DB_Transmit+0x52a>
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	785b      	ldrb	r3, [r3, #1]
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d113      	bne.n	8004314 <HAL_PCD_EP_DB_Transmit+0x52a>
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	461a      	mov	r2, r3
 80042f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80042fa:	4413      	add	r3, r2
 80042fc:	67bb      	str	r3, [r7, #120]	; 0x78
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	781b      	ldrb	r3, [r3, #0]
 8004302:	011a      	lsls	r2, r3, #4
 8004304:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004306:	4413      	add	r3, r2
 8004308:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800430c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800430e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004310:	2200      	movs	r2, #0
 8004312:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	781b      	ldrb	r3, [r3, #0]
 8004318:	4619      	mov	r1, r3
 800431a:	68f8      	ldr	r0, [r7, #12]
 800431c:	f005 fe43 	bl	8009fa6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004320:	88fb      	ldrh	r3, [r7, #6]
 8004322:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004326:	2b00      	cmp	r3, #0
 8004328:	f040 8104 	bne.w	8004534 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	461a      	mov	r2, r3
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	4413      	add	r3, r2
 800433a:	881b      	ldrh	r3, [r3, #0]
 800433c:	b29b      	uxth	r3, r3
 800433e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004342:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004346:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	461a      	mov	r2, r3
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	781b      	ldrb	r3, [r3, #0]
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	441a      	add	r2, r3
 8004358:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800435c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004360:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004364:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004368:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800436c:	b29b      	uxth	r3, r3
 800436e:	8013      	strh	r3, [r2, #0]
 8004370:	e0e0      	b.n	8004534 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004372:	88fb      	ldrh	r3, [r7, #6]
 8004374:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004378:	2b00      	cmp	r3, #0
 800437a:	d121      	bne.n	80043c0 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	461a      	mov	r2, r3
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	781b      	ldrb	r3, [r3, #0]
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	4413      	add	r3, r2
 800438a:	881b      	ldrh	r3, [r3, #0]
 800438c:	b29b      	uxth	r3, r3
 800438e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004392:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004396:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	461a      	mov	r2, r3
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	781b      	ldrb	r3, [r3, #0]
 80043a4:	009b      	lsls	r3, r3, #2
 80043a6:	441a      	add	r2, r3
 80043a8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80043ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80043b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043bc:	b29b      	uxth	r3, r3
 80043be:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	f040 80b4 	bne.w	8004534 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	695a      	ldr	r2, [r3, #20]
 80043d0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80043d4:	441a      	add	r2, r3
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	69da      	ldr	r2, [r3, #28]
 80043de:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80043e2:	441a      	add	r2, r3
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	6a1a      	ldr	r2, [r3, #32]
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	691b      	ldr	r3, [r3, #16]
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d309      	bcc.n	8004408 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	691b      	ldr	r3, [r3, #16]
 80043f8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	6a1a      	ldr	r2, [r3, #32]
 80043fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004400:	1ad2      	subs	r2, r2, r3
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	621a      	str	r2, [r3, #32]
 8004406:	e015      	b.n	8004434 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	6a1b      	ldr	r3, [r3, #32]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d107      	bne.n	8004420 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8004410:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004414:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800441e:	e009      	b.n	8004434 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	6a1b      	ldr	r3, [r3, #32]
 8004424:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	2200      	movs	r2, #0
 800442a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	2200      	movs	r2, #0
 8004430:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	667b      	str	r3, [r7, #100]	; 0x64
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	785b      	ldrb	r3, [r3, #1]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d155      	bne.n	80044ee <HAL_PCD_EP_DB_Transmit+0x704>
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004450:	b29b      	uxth	r3, r3
 8004452:	461a      	mov	r2, r3
 8004454:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004456:	4413      	add	r3, r2
 8004458:	65fb      	str	r3, [r7, #92]	; 0x5c
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	781b      	ldrb	r3, [r3, #0]
 800445e:	011a      	lsls	r2, r3, #4
 8004460:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004462:	4413      	add	r3, r2
 8004464:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004468:	65bb      	str	r3, [r7, #88]	; 0x58
 800446a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800446c:	2b00      	cmp	r3, #0
 800446e:	d112      	bne.n	8004496 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8004470:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004472:	881b      	ldrh	r3, [r3, #0]
 8004474:	b29b      	uxth	r3, r3
 8004476:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800447a:	b29a      	uxth	r2, r3
 800447c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800447e:	801a      	strh	r2, [r3, #0]
 8004480:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004482:	881b      	ldrh	r3, [r3, #0]
 8004484:	b29b      	uxth	r3, r3
 8004486:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800448a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800448e:	b29a      	uxth	r2, r3
 8004490:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004492:	801a      	strh	r2, [r3, #0]
 8004494:	e044      	b.n	8004520 <HAL_PCD_EP_DB_Transmit+0x736>
 8004496:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004498:	2b3e      	cmp	r3, #62	; 0x3e
 800449a:	d811      	bhi.n	80044c0 <HAL_PCD_EP_DB_Transmit+0x6d6>
 800449c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800449e:	085b      	lsrs	r3, r3, #1
 80044a0:	657b      	str	r3, [r7, #84]	; 0x54
 80044a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044a4:	f003 0301 	and.w	r3, r3, #1
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d002      	beq.n	80044b2 <HAL_PCD_EP_DB_Transmit+0x6c8>
 80044ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044ae:	3301      	adds	r3, #1
 80044b0:	657b      	str	r3, [r7, #84]	; 0x54
 80044b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	029b      	lsls	r3, r3, #10
 80044b8:	b29a      	uxth	r2, r3
 80044ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044bc:	801a      	strh	r2, [r3, #0]
 80044be:	e02f      	b.n	8004520 <HAL_PCD_EP_DB_Transmit+0x736>
 80044c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044c2:	095b      	lsrs	r3, r3, #5
 80044c4:	657b      	str	r3, [r7, #84]	; 0x54
 80044c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044c8:	f003 031f 	and.w	r3, r3, #31
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d102      	bne.n	80044d6 <HAL_PCD_EP_DB_Transmit+0x6ec>
 80044d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044d2:	3b01      	subs	r3, #1
 80044d4:	657b      	str	r3, [r7, #84]	; 0x54
 80044d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044d8:	b29b      	uxth	r3, r3
 80044da:	029b      	lsls	r3, r3, #10
 80044dc:	b29b      	uxth	r3, r3
 80044de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044e6:	b29a      	uxth	r2, r3
 80044e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044ea:	801a      	strh	r2, [r3, #0]
 80044ec:	e018      	b.n	8004520 <HAL_PCD_EP_DB_Transmit+0x736>
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	785b      	ldrb	r3, [r3, #1]
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d114      	bne.n	8004520 <HAL_PCD_EP_DB_Transmit+0x736>
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044fe:	b29b      	uxth	r3, r3
 8004500:	461a      	mov	r2, r3
 8004502:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004504:	4413      	add	r3, r2
 8004506:	667b      	str	r3, [r7, #100]	; 0x64
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	781b      	ldrb	r3, [r3, #0]
 800450c:	011a      	lsls	r2, r3, #4
 800450e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004510:	4413      	add	r3, r2
 8004512:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004516:	663b      	str	r3, [r7, #96]	; 0x60
 8004518:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800451a:	b29a      	uxth	r2, r3
 800451c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800451e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6818      	ldr	r0, [r3, #0]
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	6959      	ldr	r1, [r3, #20]
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	895a      	ldrh	r2, [r3, #10]
 800452c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800452e:	b29b      	uxth	r3, r3
 8004530:	f003 febb 	bl	80082aa <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	461a      	mov	r2, r3
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	781b      	ldrb	r3, [r3, #0]
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	4413      	add	r3, r2
 8004542:	881b      	ldrh	r3, [r3, #0]
 8004544:	b29b      	uxth	r3, r3
 8004546:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800454a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800454e:	823b      	strh	r3, [r7, #16]
 8004550:	8a3b      	ldrh	r3, [r7, #16]
 8004552:	f083 0310 	eor.w	r3, r3, #16
 8004556:	823b      	strh	r3, [r7, #16]
 8004558:	8a3b      	ldrh	r3, [r7, #16]
 800455a:	f083 0320 	eor.w	r3, r3, #32
 800455e:	823b      	strh	r3, [r7, #16]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	461a      	mov	r2, r3
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	781b      	ldrb	r3, [r3, #0]
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	441a      	add	r2, r3
 800456e:	8a3b      	ldrh	r3, [r7, #16]
 8004570:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004574:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004578:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800457c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004580:	b29b      	uxth	r3, r3
 8004582:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004584:	2300      	movs	r3, #0
}
 8004586:	4618      	mov	r0, r3
 8004588:	3788      	adds	r7, #136	; 0x88
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}

0800458e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800458e:	b480      	push	{r7}
 8004590:	b087      	sub	sp, #28
 8004592:	af00      	add	r7, sp, #0
 8004594:	60f8      	str	r0, [r7, #12]
 8004596:	607b      	str	r3, [r7, #4]
 8004598:	460b      	mov	r3, r1
 800459a:	817b      	strh	r3, [r7, #10]
 800459c:	4613      	mov	r3, r2
 800459e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80045a0:	897b      	ldrh	r3, [r7, #10]
 80045a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d00b      	beq.n	80045c4 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045ac:	897b      	ldrh	r3, [r7, #10]
 80045ae:	f003 0307 	and.w	r3, r3, #7
 80045b2:	1c5a      	adds	r2, r3, #1
 80045b4:	4613      	mov	r3, r2
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	4413      	add	r3, r2
 80045ba:	00db      	lsls	r3, r3, #3
 80045bc:	68fa      	ldr	r2, [r7, #12]
 80045be:	4413      	add	r3, r2
 80045c0:	617b      	str	r3, [r7, #20]
 80045c2:	e009      	b.n	80045d8 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80045c4:	897a      	ldrh	r2, [r7, #10]
 80045c6:	4613      	mov	r3, r2
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	4413      	add	r3, r2
 80045cc:	00db      	lsls	r3, r3, #3
 80045ce:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80045d2:	68fa      	ldr	r2, [r7, #12]
 80045d4:	4413      	add	r3, r2
 80045d6:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80045d8:	893b      	ldrh	r3, [r7, #8]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d107      	bne.n	80045ee <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	2200      	movs	r2, #0
 80045e2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	b29a      	uxth	r2, r3
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	80da      	strh	r2, [r3, #6]
 80045ec:	e00b      	b.n	8004606 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	2201      	movs	r2, #1
 80045f2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	b29a      	uxth	r2, r3
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	0c1b      	lsrs	r3, r3, #16
 8004600:	b29a      	uxth	r2, r3
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8004606:	2300      	movs	r3, #0
}
 8004608:	4618      	mov	r0, r3
 800460a:	371c      	adds	r7, #28
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr

08004614 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800461a:	af00      	add	r7, sp, #0
 800461c:	1d3b      	adds	r3, r7, #4
 800461e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004620:	1d3b      	adds	r3, r7, #4
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d102      	bne.n	800462e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	f000 bef4 	b.w	8005416 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800462e:	1d3b      	adds	r3, r7, #4
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 0301 	and.w	r3, r3, #1
 8004638:	2b00      	cmp	r3, #0
 800463a:	f000 816a 	beq.w	8004912 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800463e:	4bb3      	ldr	r3, [pc, #716]	; (800490c <HAL_RCC_OscConfig+0x2f8>)
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	f003 030c 	and.w	r3, r3, #12
 8004646:	2b04      	cmp	r3, #4
 8004648:	d00c      	beq.n	8004664 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800464a:	4bb0      	ldr	r3, [pc, #704]	; (800490c <HAL_RCC_OscConfig+0x2f8>)
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	f003 030c 	and.w	r3, r3, #12
 8004652:	2b08      	cmp	r3, #8
 8004654:	d159      	bne.n	800470a <HAL_RCC_OscConfig+0xf6>
 8004656:	4bad      	ldr	r3, [pc, #692]	; (800490c <HAL_RCC_OscConfig+0x2f8>)
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800465e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004662:	d152      	bne.n	800470a <HAL_RCC_OscConfig+0xf6>
 8004664:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004668:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800466c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8004670:	fa93 f3a3 	rbit	r3, r3
 8004674:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004678:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800467c:	fab3 f383 	clz	r3, r3
 8004680:	b2db      	uxtb	r3, r3
 8004682:	095b      	lsrs	r3, r3, #5
 8004684:	b2db      	uxtb	r3, r3
 8004686:	f043 0301 	orr.w	r3, r3, #1
 800468a:	b2db      	uxtb	r3, r3
 800468c:	2b01      	cmp	r3, #1
 800468e:	d102      	bne.n	8004696 <HAL_RCC_OscConfig+0x82>
 8004690:	4b9e      	ldr	r3, [pc, #632]	; (800490c <HAL_RCC_OscConfig+0x2f8>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	e015      	b.n	80046c2 <HAL_RCC_OscConfig+0xae>
 8004696:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800469a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800469e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80046a2:	fa93 f3a3 	rbit	r3, r3
 80046a6:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80046aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80046ae:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80046b2:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80046b6:	fa93 f3a3 	rbit	r3, r3
 80046ba:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80046be:	4b93      	ldr	r3, [pc, #588]	; (800490c <HAL_RCC_OscConfig+0x2f8>)
 80046c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80046c6:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80046ca:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80046ce:	fa92 f2a2 	rbit	r2, r2
 80046d2:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80046d6:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80046da:	fab2 f282 	clz	r2, r2
 80046de:	b2d2      	uxtb	r2, r2
 80046e0:	f042 0220 	orr.w	r2, r2, #32
 80046e4:	b2d2      	uxtb	r2, r2
 80046e6:	f002 021f 	and.w	r2, r2, #31
 80046ea:	2101      	movs	r1, #1
 80046ec:	fa01 f202 	lsl.w	r2, r1, r2
 80046f0:	4013      	ands	r3, r2
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	f000 810c 	beq.w	8004910 <HAL_RCC_OscConfig+0x2fc>
 80046f8:	1d3b      	adds	r3, r7, #4
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	f040 8106 	bne.w	8004910 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	f000 be86 	b.w	8005416 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800470a:	1d3b      	adds	r3, r7, #4
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004714:	d106      	bne.n	8004724 <HAL_RCC_OscConfig+0x110>
 8004716:	4b7d      	ldr	r3, [pc, #500]	; (800490c <HAL_RCC_OscConfig+0x2f8>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a7c      	ldr	r2, [pc, #496]	; (800490c <HAL_RCC_OscConfig+0x2f8>)
 800471c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004720:	6013      	str	r3, [r2, #0]
 8004722:	e030      	b.n	8004786 <HAL_RCC_OscConfig+0x172>
 8004724:	1d3b      	adds	r3, r7, #4
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d10c      	bne.n	8004748 <HAL_RCC_OscConfig+0x134>
 800472e:	4b77      	ldr	r3, [pc, #476]	; (800490c <HAL_RCC_OscConfig+0x2f8>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a76      	ldr	r2, [pc, #472]	; (800490c <HAL_RCC_OscConfig+0x2f8>)
 8004734:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004738:	6013      	str	r3, [r2, #0]
 800473a:	4b74      	ldr	r3, [pc, #464]	; (800490c <HAL_RCC_OscConfig+0x2f8>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a73      	ldr	r2, [pc, #460]	; (800490c <HAL_RCC_OscConfig+0x2f8>)
 8004740:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004744:	6013      	str	r3, [r2, #0]
 8004746:	e01e      	b.n	8004786 <HAL_RCC_OscConfig+0x172>
 8004748:	1d3b      	adds	r3, r7, #4
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004752:	d10c      	bne.n	800476e <HAL_RCC_OscConfig+0x15a>
 8004754:	4b6d      	ldr	r3, [pc, #436]	; (800490c <HAL_RCC_OscConfig+0x2f8>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a6c      	ldr	r2, [pc, #432]	; (800490c <HAL_RCC_OscConfig+0x2f8>)
 800475a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800475e:	6013      	str	r3, [r2, #0]
 8004760:	4b6a      	ldr	r3, [pc, #424]	; (800490c <HAL_RCC_OscConfig+0x2f8>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a69      	ldr	r2, [pc, #420]	; (800490c <HAL_RCC_OscConfig+0x2f8>)
 8004766:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800476a:	6013      	str	r3, [r2, #0]
 800476c:	e00b      	b.n	8004786 <HAL_RCC_OscConfig+0x172>
 800476e:	4b67      	ldr	r3, [pc, #412]	; (800490c <HAL_RCC_OscConfig+0x2f8>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a66      	ldr	r2, [pc, #408]	; (800490c <HAL_RCC_OscConfig+0x2f8>)
 8004774:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004778:	6013      	str	r3, [r2, #0]
 800477a:	4b64      	ldr	r3, [pc, #400]	; (800490c <HAL_RCC_OscConfig+0x2f8>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a63      	ldr	r2, [pc, #396]	; (800490c <HAL_RCC_OscConfig+0x2f8>)
 8004780:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004784:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004786:	4b61      	ldr	r3, [pc, #388]	; (800490c <HAL_RCC_OscConfig+0x2f8>)
 8004788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800478a:	f023 020f 	bic.w	r2, r3, #15
 800478e:	1d3b      	adds	r3, r7, #4
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	495d      	ldr	r1, [pc, #372]	; (800490c <HAL_RCC_OscConfig+0x2f8>)
 8004796:	4313      	orrs	r3, r2
 8004798:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800479a:	1d3b      	adds	r3, r7, #4
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d059      	beq.n	8004858 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047a4:	f7fd f9de 	bl	8001b64 <HAL_GetTick>
 80047a8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047ac:	e00a      	b.n	80047c4 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047ae:	f7fd f9d9 	bl	8001b64 <HAL_GetTick>
 80047b2:	4602      	mov	r2, r0
 80047b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	2b64      	cmp	r3, #100	; 0x64
 80047bc:	d902      	bls.n	80047c4 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80047be:	2303      	movs	r3, #3
 80047c0:	f000 be29 	b.w	8005416 <HAL_RCC_OscConfig+0xe02>
 80047c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80047c8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047cc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80047d0:	fa93 f3a3 	rbit	r3, r3
 80047d4:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80047d8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047dc:	fab3 f383 	clz	r3, r3
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	095b      	lsrs	r3, r3, #5
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	f043 0301 	orr.w	r3, r3, #1
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d102      	bne.n	80047f6 <HAL_RCC_OscConfig+0x1e2>
 80047f0:	4b46      	ldr	r3, [pc, #280]	; (800490c <HAL_RCC_OscConfig+0x2f8>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	e015      	b.n	8004822 <HAL_RCC_OscConfig+0x20e>
 80047f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80047fa:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047fe:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8004802:	fa93 f3a3 	rbit	r3, r3
 8004806:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800480a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800480e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004812:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8004816:	fa93 f3a3 	rbit	r3, r3
 800481a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800481e:	4b3b      	ldr	r3, [pc, #236]	; (800490c <HAL_RCC_OscConfig+0x2f8>)
 8004820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004822:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004826:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800482a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800482e:	fa92 f2a2 	rbit	r2, r2
 8004832:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8004836:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800483a:	fab2 f282 	clz	r2, r2
 800483e:	b2d2      	uxtb	r2, r2
 8004840:	f042 0220 	orr.w	r2, r2, #32
 8004844:	b2d2      	uxtb	r2, r2
 8004846:	f002 021f 	and.w	r2, r2, #31
 800484a:	2101      	movs	r1, #1
 800484c:	fa01 f202 	lsl.w	r2, r1, r2
 8004850:	4013      	ands	r3, r2
 8004852:	2b00      	cmp	r3, #0
 8004854:	d0ab      	beq.n	80047ae <HAL_RCC_OscConfig+0x19a>
 8004856:	e05c      	b.n	8004912 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004858:	f7fd f984 	bl	8001b64 <HAL_GetTick>
 800485c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004860:	e00a      	b.n	8004878 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004862:	f7fd f97f 	bl	8001b64 <HAL_GetTick>
 8004866:	4602      	mov	r2, r0
 8004868:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	2b64      	cmp	r3, #100	; 0x64
 8004870:	d902      	bls.n	8004878 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8004872:	2303      	movs	r3, #3
 8004874:	f000 bdcf 	b.w	8005416 <HAL_RCC_OscConfig+0xe02>
 8004878:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800487c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004880:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8004884:	fa93 f3a3 	rbit	r3, r3
 8004888:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800488c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004890:	fab3 f383 	clz	r3, r3
 8004894:	b2db      	uxtb	r3, r3
 8004896:	095b      	lsrs	r3, r3, #5
 8004898:	b2db      	uxtb	r3, r3
 800489a:	f043 0301 	orr.w	r3, r3, #1
 800489e:	b2db      	uxtb	r3, r3
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	d102      	bne.n	80048aa <HAL_RCC_OscConfig+0x296>
 80048a4:	4b19      	ldr	r3, [pc, #100]	; (800490c <HAL_RCC_OscConfig+0x2f8>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	e015      	b.n	80048d6 <HAL_RCC_OscConfig+0x2c2>
 80048aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80048ae:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048b2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80048b6:	fa93 f3a3 	rbit	r3, r3
 80048ba:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80048be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80048c2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80048c6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80048ca:	fa93 f3a3 	rbit	r3, r3
 80048ce:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80048d2:	4b0e      	ldr	r3, [pc, #56]	; (800490c <HAL_RCC_OscConfig+0x2f8>)
 80048d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80048da:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80048de:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80048e2:	fa92 f2a2 	rbit	r2, r2
 80048e6:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80048ea:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80048ee:	fab2 f282 	clz	r2, r2
 80048f2:	b2d2      	uxtb	r2, r2
 80048f4:	f042 0220 	orr.w	r2, r2, #32
 80048f8:	b2d2      	uxtb	r2, r2
 80048fa:	f002 021f 	and.w	r2, r2, #31
 80048fe:	2101      	movs	r1, #1
 8004900:	fa01 f202 	lsl.w	r2, r1, r2
 8004904:	4013      	ands	r3, r2
 8004906:	2b00      	cmp	r3, #0
 8004908:	d1ab      	bne.n	8004862 <HAL_RCC_OscConfig+0x24e>
 800490a:	e002      	b.n	8004912 <HAL_RCC_OscConfig+0x2fe>
 800490c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004910:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004912:	1d3b      	adds	r3, r7, #4
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 0302 	and.w	r3, r3, #2
 800491c:	2b00      	cmp	r3, #0
 800491e:	f000 816f 	beq.w	8004c00 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004922:	4bd0      	ldr	r3, [pc, #832]	; (8004c64 <HAL_RCC_OscConfig+0x650>)
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	f003 030c 	and.w	r3, r3, #12
 800492a:	2b00      	cmp	r3, #0
 800492c:	d00b      	beq.n	8004946 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800492e:	4bcd      	ldr	r3, [pc, #820]	; (8004c64 <HAL_RCC_OscConfig+0x650>)
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	f003 030c 	and.w	r3, r3, #12
 8004936:	2b08      	cmp	r3, #8
 8004938:	d16c      	bne.n	8004a14 <HAL_RCC_OscConfig+0x400>
 800493a:	4bca      	ldr	r3, [pc, #808]	; (8004c64 <HAL_RCC_OscConfig+0x650>)
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004942:	2b00      	cmp	r3, #0
 8004944:	d166      	bne.n	8004a14 <HAL_RCC_OscConfig+0x400>
 8004946:	2302      	movs	r3, #2
 8004948:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800494c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004950:	fa93 f3a3 	rbit	r3, r3
 8004954:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8004958:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800495c:	fab3 f383 	clz	r3, r3
 8004960:	b2db      	uxtb	r3, r3
 8004962:	095b      	lsrs	r3, r3, #5
 8004964:	b2db      	uxtb	r3, r3
 8004966:	f043 0301 	orr.w	r3, r3, #1
 800496a:	b2db      	uxtb	r3, r3
 800496c:	2b01      	cmp	r3, #1
 800496e:	d102      	bne.n	8004976 <HAL_RCC_OscConfig+0x362>
 8004970:	4bbc      	ldr	r3, [pc, #752]	; (8004c64 <HAL_RCC_OscConfig+0x650>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	e013      	b.n	800499e <HAL_RCC_OscConfig+0x38a>
 8004976:	2302      	movs	r3, #2
 8004978:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800497c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004980:	fa93 f3a3 	rbit	r3, r3
 8004984:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004988:	2302      	movs	r3, #2
 800498a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800498e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004992:	fa93 f3a3 	rbit	r3, r3
 8004996:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800499a:	4bb2      	ldr	r3, [pc, #712]	; (8004c64 <HAL_RCC_OscConfig+0x650>)
 800499c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499e:	2202      	movs	r2, #2
 80049a0:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80049a4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80049a8:	fa92 f2a2 	rbit	r2, r2
 80049ac:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80049b0:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80049b4:	fab2 f282 	clz	r2, r2
 80049b8:	b2d2      	uxtb	r2, r2
 80049ba:	f042 0220 	orr.w	r2, r2, #32
 80049be:	b2d2      	uxtb	r2, r2
 80049c0:	f002 021f 	and.w	r2, r2, #31
 80049c4:	2101      	movs	r1, #1
 80049c6:	fa01 f202 	lsl.w	r2, r1, r2
 80049ca:	4013      	ands	r3, r2
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d007      	beq.n	80049e0 <HAL_RCC_OscConfig+0x3cc>
 80049d0:	1d3b      	adds	r3, r7, #4
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	691b      	ldr	r3, [r3, #16]
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d002      	beq.n	80049e0 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	f000 bd1b 	b.w	8005416 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049e0:	4ba0      	ldr	r3, [pc, #640]	; (8004c64 <HAL_RCC_OscConfig+0x650>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049e8:	1d3b      	adds	r3, r7, #4
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	695b      	ldr	r3, [r3, #20]
 80049ee:	21f8      	movs	r1, #248	; 0xf8
 80049f0:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049f4:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80049f8:	fa91 f1a1 	rbit	r1, r1
 80049fc:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8004a00:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8004a04:	fab1 f181 	clz	r1, r1
 8004a08:	b2c9      	uxtb	r1, r1
 8004a0a:	408b      	lsls	r3, r1
 8004a0c:	4995      	ldr	r1, [pc, #596]	; (8004c64 <HAL_RCC_OscConfig+0x650>)
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a12:	e0f5      	b.n	8004c00 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004a14:	1d3b      	adds	r3, r7, #4
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	f000 8085 	beq.w	8004b2a <HAL_RCC_OscConfig+0x516>
 8004a20:	2301      	movs	r3, #1
 8004a22:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a26:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004a2a:	fa93 f3a3 	rbit	r3, r3
 8004a2e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8004a32:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a36:	fab3 f383 	clz	r3, r3
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004a40:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	461a      	mov	r2, r3
 8004a48:	2301      	movs	r3, #1
 8004a4a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a4c:	f7fd f88a 	bl	8001b64 <HAL_GetTick>
 8004a50:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a54:	e00a      	b.n	8004a6c <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a56:	f7fd f885 	bl	8001b64 <HAL_GetTick>
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004a60:	1ad3      	subs	r3, r2, r3
 8004a62:	2b02      	cmp	r3, #2
 8004a64:	d902      	bls.n	8004a6c <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8004a66:	2303      	movs	r3, #3
 8004a68:	f000 bcd5 	b.w	8005416 <HAL_RCC_OscConfig+0xe02>
 8004a6c:	2302      	movs	r3, #2
 8004a6e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a72:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004a76:	fa93 f3a3 	rbit	r3, r3
 8004a7a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8004a7e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a82:	fab3 f383 	clz	r3, r3
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	095b      	lsrs	r3, r3, #5
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	f043 0301 	orr.w	r3, r3, #1
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d102      	bne.n	8004a9c <HAL_RCC_OscConfig+0x488>
 8004a96:	4b73      	ldr	r3, [pc, #460]	; (8004c64 <HAL_RCC_OscConfig+0x650>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	e013      	b.n	8004ac4 <HAL_RCC_OscConfig+0x4b0>
 8004a9c:	2302      	movs	r3, #2
 8004a9e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aa2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004aa6:	fa93 f3a3 	rbit	r3, r3
 8004aaa:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004aae:	2302      	movs	r3, #2
 8004ab0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004ab4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004ab8:	fa93 f3a3 	rbit	r3, r3
 8004abc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004ac0:	4b68      	ldr	r3, [pc, #416]	; (8004c64 <HAL_RCC_OscConfig+0x650>)
 8004ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac4:	2202      	movs	r2, #2
 8004ac6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8004aca:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004ace:	fa92 f2a2 	rbit	r2, r2
 8004ad2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8004ad6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8004ada:	fab2 f282 	clz	r2, r2
 8004ade:	b2d2      	uxtb	r2, r2
 8004ae0:	f042 0220 	orr.w	r2, r2, #32
 8004ae4:	b2d2      	uxtb	r2, r2
 8004ae6:	f002 021f 	and.w	r2, r2, #31
 8004aea:	2101      	movs	r1, #1
 8004aec:	fa01 f202 	lsl.w	r2, r1, r2
 8004af0:	4013      	ands	r3, r2
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d0af      	beq.n	8004a56 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004af6:	4b5b      	ldr	r3, [pc, #364]	; (8004c64 <HAL_RCC_OscConfig+0x650>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004afe:	1d3b      	adds	r3, r7, #4
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	695b      	ldr	r3, [r3, #20]
 8004b04:	21f8      	movs	r1, #248	; 0xf8
 8004b06:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b0a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004b0e:	fa91 f1a1 	rbit	r1, r1
 8004b12:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8004b16:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8004b1a:	fab1 f181 	clz	r1, r1
 8004b1e:	b2c9      	uxtb	r1, r1
 8004b20:	408b      	lsls	r3, r1
 8004b22:	4950      	ldr	r1, [pc, #320]	; (8004c64 <HAL_RCC_OscConfig+0x650>)
 8004b24:	4313      	orrs	r3, r2
 8004b26:	600b      	str	r3, [r1, #0]
 8004b28:	e06a      	b.n	8004c00 <HAL_RCC_OscConfig+0x5ec>
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b30:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004b34:	fa93 f3a3 	rbit	r3, r3
 8004b38:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8004b3c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b40:	fab3 f383 	clz	r3, r3
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004b4a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	461a      	mov	r2, r3
 8004b52:	2300      	movs	r3, #0
 8004b54:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b56:	f7fd f805 	bl	8001b64 <HAL_GetTick>
 8004b5a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b5e:	e00a      	b.n	8004b76 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b60:	f7fd f800 	bl	8001b64 <HAL_GetTick>
 8004b64:	4602      	mov	r2, r0
 8004b66:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004b6a:	1ad3      	subs	r3, r2, r3
 8004b6c:	2b02      	cmp	r3, #2
 8004b6e:	d902      	bls.n	8004b76 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8004b70:	2303      	movs	r3, #3
 8004b72:	f000 bc50 	b.w	8005416 <HAL_RCC_OscConfig+0xe02>
 8004b76:	2302      	movs	r3, #2
 8004b78:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b7c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004b80:	fa93 f3a3 	rbit	r3, r3
 8004b84:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8004b88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b8c:	fab3 f383 	clz	r3, r3
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	095b      	lsrs	r3, r3, #5
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	f043 0301 	orr.w	r3, r3, #1
 8004b9a:	b2db      	uxtb	r3, r3
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d102      	bne.n	8004ba6 <HAL_RCC_OscConfig+0x592>
 8004ba0:	4b30      	ldr	r3, [pc, #192]	; (8004c64 <HAL_RCC_OscConfig+0x650>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	e013      	b.n	8004bce <HAL_RCC_OscConfig+0x5ba>
 8004ba6:	2302      	movs	r3, #2
 8004ba8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004bb0:	fa93 f3a3 	rbit	r3, r3
 8004bb4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004bb8:	2302      	movs	r3, #2
 8004bba:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004bbe:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004bc2:	fa93 f3a3 	rbit	r3, r3
 8004bc6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004bca:	4b26      	ldr	r3, [pc, #152]	; (8004c64 <HAL_RCC_OscConfig+0x650>)
 8004bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bce:	2202      	movs	r2, #2
 8004bd0:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8004bd4:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004bd8:	fa92 f2a2 	rbit	r2, r2
 8004bdc:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8004be0:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004be4:	fab2 f282 	clz	r2, r2
 8004be8:	b2d2      	uxtb	r2, r2
 8004bea:	f042 0220 	orr.w	r2, r2, #32
 8004bee:	b2d2      	uxtb	r2, r2
 8004bf0:	f002 021f 	and.w	r2, r2, #31
 8004bf4:	2101      	movs	r1, #1
 8004bf6:	fa01 f202 	lsl.w	r2, r1, r2
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d1af      	bne.n	8004b60 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c00:	1d3b      	adds	r3, r7, #4
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 0308 	and.w	r3, r3, #8
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	f000 80da 	beq.w	8004dc4 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c10:	1d3b      	adds	r3, r7, #4
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	699b      	ldr	r3, [r3, #24]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d069      	beq.n	8004cee <HAL_RCC_OscConfig+0x6da>
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c20:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004c24:	fa93 f3a3 	rbit	r3, r3
 8004c28:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8004c2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c30:	fab3 f383 	clz	r3, r3
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	461a      	mov	r2, r3
 8004c38:	4b0b      	ldr	r3, [pc, #44]	; (8004c68 <HAL_RCC_OscConfig+0x654>)
 8004c3a:	4413      	add	r3, r2
 8004c3c:	009b      	lsls	r3, r3, #2
 8004c3e:	461a      	mov	r2, r3
 8004c40:	2301      	movs	r3, #1
 8004c42:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c44:	f7fc ff8e 	bl	8001b64 <HAL_GetTick>
 8004c48:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c4c:	e00e      	b.n	8004c6c <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c4e:	f7fc ff89 	bl	8001b64 <HAL_GetTick>
 8004c52:	4602      	mov	r2, r0
 8004c54:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004c58:	1ad3      	subs	r3, r2, r3
 8004c5a:	2b02      	cmp	r3, #2
 8004c5c:	d906      	bls.n	8004c6c <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	e3d9      	b.n	8005416 <HAL_RCC_OscConfig+0xe02>
 8004c62:	bf00      	nop
 8004c64:	40021000 	.word	0x40021000
 8004c68:	10908120 	.word	0x10908120
 8004c6c:	2302      	movs	r3, #2
 8004c6e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c72:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004c76:	fa93 f3a3 	rbit	r3, r3
 8004c7a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004c7e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8004c82:	2202      	movs	r2, #2
 8004c84:	601a      	str	r2, [r3, #0]
 8004c86:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	fa93 f2a3 	rbit	r2, r3
 8004c90:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8004c94:	601a      	str	r2, [r3, #0]
 8004c96:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8004c9a:	2202      	movs	r2, #2
 8004c9c:	601a      	str	r2, [r3, #0]
 8004c9e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	fa93 f2a3 	rbit	r2, r3
 8004ca8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8004cac:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cae:	4ba5      	ldr	r3, [pc, #660]	; (8004f44 <HAL_RCC_OscConfig+0x930>)
 8004cb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004cb2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8004cb6:	2102      	movs	r1, #2
 8004cb8:	6019      	str	r1, [r3, #0]
 8004cba:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	fa93 f1a3 	rbit	r1, r3
 8004cc4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004cc8:	6019      	str	r1, [r3, #0]
  return result;
 8004cca:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	fab3 f383 	clz	r3, r3
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004cda:	b2db      	uxtb	r3, r3
 8004cdc:	f003 031f 	and.w	r3, r3, #31
 8004ce0:	2101      	movs	r1, #1
 8004ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ce6:	4013      	ands	r3, r2
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d0b0      	beq.n	8004c4e <HAL_RCC_OscConfig+0x63a>
 8004cec:	e06a      	b.n	8004dc4 <HAL_RCC_OscConfig+0x7b0>
 8004cee:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cf6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	fa93 f2a3 	rbit	r2, r3
 8004d00:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004d04:	601a      	str	r2, [r3, #0]
  return result;
 8004d06:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004d0a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d0c:	fab3 f383 	clz	r3, r3
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	461a      	mov	r2, r3
 8004d14:	4b8c      	ldr	r3, [pc, #560]	; (8004f48 <HAL_RCC_OscConfig+0x934>)
 8004d16:	4413      	add	r3, r2
 8004d18:	009b      	lsls	r3, r3, #2
 8004d1a:	461a      	mov	r2, r3
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d20:	f7fc ff20 	bl	8001b64 <HAL_GetTick>
 8004d24:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d28:	e009      	b.n	8004d3e <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d2a:	f7fc ff1b 	bl	8001b64 <HAL_GetTick>
 8004d2e:	4602      	mov	r2, r0
 8004d30:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004d34:	1ad3      	subs	r3, r2, r3
 8004d36:	2b02      	cmp	r3, #2
 8004d38:	d901      	bls.n	8004d3e <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	e36b      	b.n	8005416 <HAL_RCC_OscConfig+0xe02>
 8004d3e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8004d42:	2202      	movs	r2, #2
 8004d44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d46:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	fa93 f2a3 	rbit	r2, r3
 8004d50:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004d54:	601a      	str	r2, [r3, #0]
 8004d56:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8004d5a:	2202      	movs	r2, #2
 8004d5c:	601a      	str	r2, [r3, #0]
 8004d5e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	fa93 f2a3 	rbit	r2, r3
 8004d68:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004d6c:	601a      	str	r2, [r3, #0]
 8004d6e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8004d72:	2202      	movs	r2, #2
 8004d74:	601a      	str	r2, [r3, #0]
 8004d76:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	fa93 f2a3 	rbit	r2, r3
 8004d80:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004d84:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d86:	4b6f      	ldr	r3, [pc, #444]	; (8004f44 <HAL_RCC_OscConfig+0x930>)
 8004d88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d8a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004d8e:	2102      	movs	r1, #2
 8004d90:	6019      	str	r1, [r3, #0]
 8004d92:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	fa93 f1a3 	rbit	r1, r3
 8004d9c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004da0:	6019      	str	r1, [r3, #0]
  return result;
 8004da2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	fab3 f383 	clz	r3, r3
 8004dac:	b2db      	uxtb	r3, r3
 8004dae:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	f003 031f 	and.w	r3, r3, #31
 8004db8:	2101      	movs	r1, #1
 8004dba:	fa01 f303 	lsl.w	r3, r1, r3
 8004dbe:	4013      	ands	r3, r2
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d1b2      	bne.n	8004d2a <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004dc4:	1d3b      	adds	r3, r7, #4
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 0304 	and.w	r3, r3, #4
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	f000 8158 	beq.w	8005084 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004dda:	4b5a      	ldr	r3, [pc, #360]	; (8004f44 <HAL_RCC_OscConfig+0x930>)
 8004ddc:	69db      	ldr	r3, [r3, #28]
 8004dde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d112      	bne.n	8004e0c <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004de6:	4b57      	ldr	r3, [pc, #348]	; (8004f44 <HAL_RCC_OscConfig+0x930>)
 8004de8:	69db      	ldr	r3, [r3, #28]
 8004dea:	4a56      	ldr	r2, [pc, #344]	; (8004f44 <HAL_RCC_OscConfig+0x930>)
 8004dec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004df0:	61d3      	str	r3, [r2, #28]
 8004df2:	4b54      	ldr	r3, [pc, #336]	; (8004f44 <HAL_RCC_OscConfig+0x930>)
 8004df4:	69db      	ldr	r3, [r3, #28]
 8004df6:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004dfa:	f107 0308 	add.w	r3, r7, #8
 8004dfe:	601a      	str	r2, [r3, #0]
 8004e00:	f107 0308 	add.w	r3, r7, #8
 8004e04:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004e06:	2301      	movs	r3, #1
 8004e08:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e0c:	4b4f      	ldr	r3, [pc, #316]	; (8004f4c <HAL_RCC_OscConfig+0x938>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d11a      	bne.n	8004e4e <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e18:	4b4c      	ldr	r3, [pc, #304]	; (8004f4c <HAL_RCC_OscConfig+0x938>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a4b      	ldr	r2, [pc, #300]	; (8004f4c <HAL_RCC_OscConfig+0x938>)
 8004e1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e22:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e24:	f7fc fe9e 	bl	8001b64 <HAL_GetTick>
 8004e28:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e2c:	e009      	b.n	8004e42 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e2e:	f7fc fe99 	bl	8001b64 <HAL_GetTick>
 8004e32:	4602      	mov	r2, r0
 8004e34:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004e38:	1ad3      	subs	r3, r2, r3
 8004e3a:	2b64      	cmp	r3, #100	; 0x64
 8004e3c:	d901      	bls.n	8004e42 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	e2e9      	b.n	8005416 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e42:	4b42      	ldr	r3, [pc, #264]	; (8004f4c <HAL_RCC_OscConfig+0x938>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d0ef      	beq.n	8004e2e <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e4e:	1d3b      	adds	r3, r7, #4
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d106      	bne.n	8004e66 <HAL_RCC_OscConfig+0x852>
 8004e58:	4b3a      	ldr	r3, [pc, #232]	; (8004f44 <HAL_RCC_OscConfig+0x930>)
 8004e5a:	6a1b      	ldr	r3, [r3, #32]
 8004e5c:	4a39      	ldr	r2, [pc, #228]	; (8004f44 <HAL_RCC_OscConfig+0x930>)
 8004e5e:	f043 0301 	orr.w	r3, r3, #1
 8004e62:	6213      	str	r3, [r2, #32]
 8004e64:	e02f      	b.n	8004ec6 <HAL_RCC_OscConfig+0x8b2>
 8004e66:	1d3b      	adds	r3, r7, #4
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d10c      	bne.n	8004e8a <HAL_RCC_OscConfig+0x876>
 8004e70:	4b34      	ldr	r3, [pc, #208]	; (8004f44 <HAL_RCC_OscConfig+0x930>)
 8004e72:	6a1b      	ldr	r3, [r3, #32]
 8004e74:	4a33      	ldr	r2, [pc, #204]	; (8004f44 <HAL_RCC_OscConfig+0x930>)
 8004e76:	f023 0301 	bic.w	r3, r3, #1
 8004e7a:	6213      	str	r3, [r2, #32]
 8004e7c:	4b31      	ldr	r3, [pc, #196]	; (8004f44 <HAL_RCC_OscConfig+0x930>)
 8004e7e:	6a1b      	ldr	r3, [r3, #32]
 8004e80:	4a30      	ldr	r2, [pc, #192]	; (8004f44 <HAL_RCC_OscConfig+0x930>)
 8004e82:	f023 0304 	bic.w	r3, r3, #4
 8004e86:	6213      	str	r3, [r2, #32]
 8004e88:	e01d      	b.n	8004ec6 <HAL_RCC_OscConfig+0x8b2>
 8004e8a:	1d3b      	adds	r3, r7, #4
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	2b05      	cmp	r3, #5
 8004e92:	d10c      	bne.n	8004eae <HAL_RCC_OscConfig+0x89a>
 8004e94:	4b2b      	ldr	r3, [pc, #172]	; (8004f44 <HAL_RCC_OscConfig+0x930>)
 8004e96:	6a1b      	ldr	r3, [r3, #32]
 8004e98:	4a2a      	ldr	r2, [pc, #168]	; (8004f44 <HAL_RCC_OscConfig+0x930>)
 8004e9a:	f043 0304 	orr.w	r3, r3, #4
 8004e9e:	6213      	str	r3, [r2, #32]
 8004ea0:	4b28      	ldr	r3, [pc, #160]	; (8004f44 <HAL_RCC_OscConfig+0x930>)
 8004ea2:	6a1b      	ldr	r3, [r3, #32]
 8004ea4:	4a27      	ldr	r2, [pc, #156]	; (8004f44 <HAL_RCC_OscConfig+0x930>)
 8004ea6:	f043 0301 	orr.w	r3, r3, #1
 8004eaa:	6213      	str	r3, [r2, #32]
 8004eac:	e00b      	b.n	8004ec6 <HAL_RCC_OscConfig+0x8b2>
 8004eae:	4b25      	ldr	r3, [pc, #148]	; (8004f44 <HAL_RCC_OscConfig+0x930>)
 8004eb0:	6a1b      	ldr	r3, [r3, #32]
 8004eb2:	4a24      	ldr	r2, [pc, #144]	; (8004f44 <HAL_RCC_OscConfig+0x930>)
 8004eb4:	f023 0301 	bic.w	r3, r3, #1
 8004eb8:	6213      	str	r3, [r2, #32]
 8004eba:	4b22      	ldr	r3, [pc, #136]	; (8004f44 <HAL_RCC_OscConfig+0x930>)
 8004ebc:	6a1b      	ldr	r3, [r3, #32]
 8004ebe:	4a21      	ldr	r2, [pc, #132]	; (8004f44 <HAL_RCC_OscConfig+0x930>)
 8004ec0:	f023 0304 	bic.w	r3, r3, #4
 8004ec4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ec6:	1d3b      	adds	r3, r7, #4
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d06b      	beq.n	8004fa8 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ed0:	f7fc fe48 	bl	8001b64 <HAL_GetTick>
 8004ed4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ed8:	e00b      	b.n	8004ef2 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004eda:	f7fc fe43 	bl	8001b64 <HAL_GetTick>
 8004ede:	4602      	mov	r2, r0
 8004ee0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004ee4:	1ad3      	subs	r3, r2, r3
 8004ee6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d901      	bls.n	8004ef2 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8004eee:	2303      	movs	r3, #3
 8004ef0:	e291      	b.n	8005416 <HAL_RCC_OscConfig+0xe02>
 8004ef2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8004ef6:	2202      	movs	r2, #2
 8004ef8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004efa:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	fa93 f2a3 	rbit	r2, r3
 8004f04:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004f08:	601a      	str	r2, [r3, #0]
 8004f0a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004f0e:	2202      	movs	r2, #2
 8004f10:	601a      	str	r2, [r3, #0]
 8004f12:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	fa93 f2a3 	rbit	r2, r3
 8004f1c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004f20:	601a      	str	r2, [r3, #0]
  return result;
 8004f22:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004f26:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f28:	fab3 f383 	clz	r3, r3
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	095b      	lsrs	r3, r3, #5
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	f043 0302 	orr.w	r3, r3, #2
 8004f36:	b2db      	uxtb	r3, r3
 8004f38:	2b02      	cmp	r3, #2
 8004f3a:	d109      	bne.n	8004f50 <HAL_RCC_OscConfig+0x93c>
 8004f3c:	4b01      	ldr	r3, [pc, #4]	; (8004f44 <HAL_RCC_OscConfig+0x930>)
 8004f3e:	6a1b      	ldr	r3, [r3, #32]
 8004f40:	e014      	b.n	8004f6c <HAL_RCC_OscConfig+0x958>
 8004f42:	bf00      	nop
 8004f44:	40021000 	.word	0x40021000
 8004f48:	10908120 	.word	0x10908120
 8004f4c:	40007000 	.word	0x40007000
 8004f50:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004f54:	2202      	movs	r2, #2
 8004f56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f58:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	fa93 f2a3 	rbit	r2, r3
 8004f62:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004f66:	601a      	str	r2, [r3, #0]
 8004f68:	4bbb      	ldr	r3, [pc, #748]	; (8005258 <HAL_RCC_OscConfig+0xc44>)
 8004f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8004f70:	2102      	movs	r1, #2
 8004f72:	6011      	str	r1, [r2, #0]
 8004f74:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8004f78:	6812      	ldr	r2, [r2, #0]
 8004f7a:	fa92 f1a2 	rbit	r1, r2
 8004f7e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8004f82:	6011      	str	r1, [r2, #0]
  return result;
 8004f84:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8004f88:	6812      	ldr	r2, [r2, #0]
 8004f8a:	fab2 f282 	clz	r2, r2
 8004f8e:	b2d2      	uxtb	r2, r2
 8004f90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f94:	b2d2      	uxtb	r2, r2
 8004f96:	f002 021f 	and.w	r2, r2, #31
 8004f9a:	2101      	movs	r1, #1
 8004f9c:	fa01 f202 	lsl.w	r2, r1, r2
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d099      	beq.n	8004eda <HAL_RCC_OscConfig+0x8c6>
 8004fa6:	e063      	b.n	8005070 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fa8:	f7fc fddc 	bl	8001b64 <HAL_GetTick>
 8004fac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fb0:	e00b      	b.n	8004fca <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fb2:	f7fc fdd7 	bl	8001b64 <HAL_GetTick>
 8004fb6:	4602      	mov	r2, r0
 8004fb8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004fbc:	1ad3      	subs	r3, r2, r3
 8004fbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d901      	bls.n	8004fca <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8004fc6:	2303      	movs	r3, #3
 8004fc8:	e225      	b.n	8005416 <HAL_RCC_OscConfig+0xe02>
 8004fca:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004fce:	2202      	movs	r2, #2
 8004fd0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fd2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	fa93 f2a3 	rbit	r2, r3
 8004fdc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004fe0:	601a      	str	r2, [r3, #0]
 8004fe2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004fe6:	2202      	movs	r2, #2
 8004fe8:	601a      	str	r2, [r3, #0]
 8004fea:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	fa93 f2a3 	rbit	r2, r3
 8004ff4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004ff8:	601a      	str	r2, [r3, #0]
  return result;
 8004ffa:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004ffe:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005000:	fab3 f383 	clz	r3, r3
 8005004:	b2db      	uxtb	r3, r3
 8005006:	095b      	lsrs	r3, r3, #5
 8005008:	b2db      	uxtb	r3, r3
 800500a:	f043 0302 	orr.w	r3, r3, #2
 800500e:	b2db      	uxtb	r3, r3
 8005010:	2b02      	cmp	r3, #2
 8005012:	d102      	bne.n	800501a <HAL_RCC_OscConfig+0xa06>
 8005014:	4b90      	ldr	r3, [pc, #576]	; (8005258 <HAL_RCC_OscConfig+0xc44>)
 8005016:	6a1b      	ldr	r3, [r3, #32]
 8005018:	e00d      	b.n	8005036 <HAL_RCC_OscConfig+0xa22>
 800501a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800501e:	2202      	movs	r2, #2
 8005020:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005022:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	fa93 f2a3 	rbit	r2, r3
 800502c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8005030:	601a      	str	r2, [r3, #0]
 8005032:	4b89      	ldr	r3, [pc, #548]	; (8005258 <HAL_RCC_OscConfig+0xc44>)
 8005034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005036:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800503a:	2102      	movs	r1, #2
 800503c:	6011      	str	r1, [r2, #0]
 800503e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8005042:	6812      	ldr	r2, [r2, #0]
 8005044:	fa92 f1a2 	rbit	r1, r2
 8005048:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800504c:	6011      	str	r1, [r2, #0]
  return result;
 800504e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8005052:	6812      	ldr	r2, [r2, #0]
 8005054:	fab2 f282 	clz	r2, r2
 8005058:	b2d2      	uxtb	r2, r2
 800505a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800505e:	b2d2      	uxtb	r2, r2
 8005060:	f002 021f 	and.w	r2, r2, #31
 8005064:	2101      	movs	r1, #1
 8005066:	fa01 f202 	lsl.w	r2, r1, r2
 800506a:	4013      	ands	r3, r2
 800506c:	2b00      	cmp	r3, #0
 800506e:	d1a0      	bne.n	8004fb2 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005070:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8005074:	2b01      	cmp	r3, #1
 8005076:	d105      	bne.n	8005084 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005078:	4b77      	ldr	r3, [pc, #476]	; (8005258 <HAL_RCC_OscConfig+0xc44>)
 800507a:	69db      	ldr	r3, [r3, #28]
 800507c:	4a76      	ldr	r2, [pc, #472]	; (8005258 <HAL_RCC_OscConfig+0xc44>)
 800507e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005082:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005084:	1d3b      	adds	r3, r7, #4
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	69db      	ldr	r3, [r3, #28]
 800508a:	2b00      	cmp	r3, #0
 800508c:	f000 81c2 	beq.w	8005414 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005090:	4b71      	ldr	r3, [pc, #452]	; (8005258 <HAL_RCC_OscConfig+0xc44>)
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	f003 030c 	and.w	r3, r3, #12
 8005098:	2b08      	cmp	r3, #8
 800509a:	f000 819c 	beq.w	80053d6 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800509e:	1d3b      	adds	r3, r7, #4
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	69db      	ldr	r3, [r3, #28]
 80050a4:	2b02      	cmp	r3, #2
 80050a6:	f040 8114 	bne.w	80052d2 <HAL_RCC_OscConfig+0xcbe>
 80050aa:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80050ae:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80050b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050b4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	fa93 f2a3 	rbit	r2, r3
 80050be:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80050c2:	601a      	str	r2, [r3, #0]
  return result;
 80050c4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80050c8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050ca:	fab3 f383 	clz	r3, r3
 80050ce:	b2db      	uxtb	r3, r3
 80050d0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80050d4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80050d8:	009b      	lsls	r3, r3, #2
 80050da:	461a      	mov	r2, r3
 80050dc:	2300      	movs	r3, #0
 80050de:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050e0:	f7fc fd40 	bl	8001b64 <HAL_GetTick>
 80050e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80050e8:	e009      	b.n	80050fe <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050ea:	f7fc fd3b 	bl	8001b64 <HAL_GetTick>
 80050ee:	4602      	mov	r2, r0
 80050f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	2b02      	cmp	r3, #2
 80050f8:	d901      	bls.n	80050fe <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	e18b      	b.n	8005416 <HAL_RCC_OscConfig+0xe02>
 80050fe:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005102:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005106:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005108:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	fa93 f2a3 	rbit	r2, r3
 8005112:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005116:	601a      	str	r2, [r3, #0]
  return result;
 8005118:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800511c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800511e:	fab3 f383 	clz	r3, r3
 8005122:	b2db      	uxtb	r3, r3
 8005124:	095b      	lsrs	r3, r3, #5
 8005126:	b2db      	uxtb	r3, r3
 8005128:	f043 0301 	orr.w	r3, r3, #1
 800512c:	b2db      	uxtb	r3, r3
 800512e:	2b01      	cmp	r3, #1
 8005130:	d102      	bne.n	8005138 <HAL_RCC_OscConfig+0xb24>
 8005132:	4b49      	ldr	r3, [pc, #292]	; (8005258 <HAL_RCC_OscConfig+0xc44>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	e01b      	b.n	8005170 <HAL_RCC_OscConfig+0xb5c>
 8005138:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800513c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005140:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005142:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	fa93 f2a3 	rbit	r2, r3
 800514c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005150:	601a      	str	r2, [r3, #0]
 8005152:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005156:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800515a:	601a      	str	r2, [r3, #0]
 800515c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	fa93 f2a3 	rbit	r2, r3
 8005166:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800516a:	601a      	str	r2, [r3, #0]
 800516c:	4b3a      	ldr	r3, [pc, #232]	; (8005258 <HAL_RCC_OscConfig+0xc44>)
 800516e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005170:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005174:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005178:	6011      	str	r1, [r2, #0]
 800517a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800517e:	6812      	ldr	r2, [r2, #0]
 8005180:	fa92 f1a2 	rbit	r1, r2
 8005184:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8005188:	6011      	str	r1, [r2, #0]
  return result;
 800518a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800518e:	6812      	ldr	r2, [r2, #0]
 8005190:	fab2 f282 	clz	r2, r2
 8005194:	b2d2      	uxtb	r2, r2
 8005196:	f042 0220 	orr.w	r2, r2, #32
 800519a:	b2d2      	uxtb	r2, r2
 800519c:	f002 021f 	and.w	r2, r2, #31
 80051a0:	2101      	movs	r1, #1
 80051a2:	fa01 f202 	lsl.w	r2, r1, r2
 80051a6:	4013      	ands	r3, r2
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d19e      	bne.n	80050ea <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80051ac:	4b2a      	ldr	r3, [pc, #168]	; (8005258 <HAL_RCC_OscConfig+0xc44>)
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80051b4:	1d3b      	adds	r3, r7, #4
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80051ba:	1d3b      	adds	r3, r7, #4
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	6a1b      	ldr	r3, [r3, #32]
 80051c0:	430b      	orrs	r3, r1
 80051c2:	4925      	ldr	r1, [pc, #148]	; (8005258 <HAL_RCC_OscConfig+0xc44>)
 80051c4:	4313      	orrs	r3, r2
 80051c6:	604b      	str	r3, [r1, #4]
 80051c8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80051cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80051d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051d2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	fa93 f2a3 	rbit	r2, r3
 80051dc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80051e0:	601a      	str	r2, [r3, #0]
  return result;
 80051e2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80051e6:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051e8:	fab3 f383 	clz	r3, r3
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80051f2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80051f6:	009b      	lsls	r3, r3, #2
 80051f8:	461a      	mov	r2, r3
 80051fa:	2301      	movs	r3, #1
 80051fc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051fe:	f7fc fcb1 	bl	8001b64 <HAL_GetTick>
 8005202:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005206:	e009      	b.n	800521c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005208:	f7fc fcac 	bl	8001b64 <HAL_GetTick>
 800520c:	4602      	mov	r2, r0
 800520e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005212:	1ad3      	subs	r3, r2, r3
 8005214:	2b02      	cmp	r3, #2
 8005216:	d901      	bls.n	800521c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8005218:	2303      	movs	r3, #3
 800521a:	e0fc      	b.n	8005416 <HAL_RCC_OscConfig+0xe02>
 800521c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005220:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005224:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005226:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	fa93 f2a3 	rbit	r2, r3
 8005230:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005234:	601a      	str	r2, [r3, #0]
  return result;
 8005236:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800523a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800523c:	fab3 f383 	clz	r3, r3
 8005240:	b2db      	uxtb	r3, r3
 8005242:	095b      	lsrs	r3, r3, #5
 8005244:	b2db      	uxtb	r3, r3
 8005246:	f043 0301 	orr.w	r3, r3, #1
 800524a:	b2db      	uxtb	r3, r3
 800524c:	2b01      	cmp	r3, #1
 800524e:	d105      	bne.n	800525c <HAL_RCC_OscConfig+0xc48>
 8005250:	4b01      	ldr	r3, [pc, #4]	; (8005258 <HAL_RCC_OscConfig+0xc44>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	e01e      	b.n	8005294 <HAL_RCC_OscConfig+0xc80>
 8005256:	bf00      	nop
 8005258:	40021000 	.word	0x40021000
 800525c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005260:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005264:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005266:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	fa93 f2a3 	rbit	r2, r3
 8005270:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005274:	601a      	str	r2, [r3, #0]
 8005276:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800527a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800527e:	601a      	str	r2, [r3, #0]
 8005280:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	fa93 f2a3 	rbit	r2, r3
 800528a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800528e:	601a      	str	r2, [r3, #0]
 8005290:	4b63      	ldr	r3, [pc, #396]	; (8005420 <HAL_RCC_OscConfig+0xe0c>)
 8005292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005294:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005298:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800529c:	6011      	str	r1, [r2, #0]
 800529e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80052a2:	6812      	ldr	r2, [r2, #0]
 80052a4:	fa92 f1a2 	rbit	r1, r2
 80052a8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80052ac:	6011      	str	r1, [r2, #0]
  return result;
 80052ae:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80052b2:	6812      	ldr	r2, [r2, #0]
 80052b4:	fab2 f282 	clz	r2, r2
 80052b8:	b2d2      	uxtb	r2, r2
 80052ba:	f042 0220 	orr.w	r2, r2, #32
 80052be:	b2d2      	uxtb	r2, r2
 80052c0:	f002 021f 	and.w	r2, r2, #31
 80052c4:	2101      	movs	r1, #1
 80052c6:	fa01 f202 	lsl.w	r2, r1, r2
 80052ca:	4013      	ands	r3, r2
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d09b      	beq.n	8005208 <HAL_RCC_OscConfig+0xbf4>
 80052d0:	e0a0      	b.n	8005414 <HAL_RCC_OscConfig+0xe00>
 80052d2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80052d6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80052da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	fa93 f2a3 	rbit	r2, r3
 80052e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80052ea:	601a      	str	r2, [r3, #0]
  return result;
 80052ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80052f0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052f2:	fab3 f383 	clz	r3, r3
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80052fc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005300:	009b      	lsls	r3, r3, #2
 8005302:	461a      	mov	r2, r3
 8005304:	2300      	movs	r3, #0
 8005306:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005308:	f7fc fc2c 	bl	8001b64 <HAL_GetTick>
 800530c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005310:	e009      	b.n	8005326 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005312:	f7fc fc27 	bl	8001b64 <HAL_GetTick>
 8005316:	4602      	mov	r2, r0
 8005318:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800531c:	1ad3      	subs	r3, r2, r3
 800531e:	2b02      	cmp	r3, #2
 8005320:	d901      	bls.n	8005326 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8005322:	2303      	movs	r3, #3
 8005324:	e077      	b.n	8005416 <HAL_RCC_OscConfig+0xe02>
 8005326:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800532a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800532e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005330:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	fa93 f2a3 	rbit	r2, r3
 800533a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800533e:	601a      	str	r2, [r3, #0]
  return result;
 8005340:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005344:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005346:	fab3 f383 	clz	r3, r3
 800534a:	b2db      	uxtb	r3, r3
 800534c:	095b      	lsrs	r3, r3, #5
 800534e:	b2db      	uxtb	r3, r3
 8005350:	f043 0301 	orr.w	r3, r3, #1
 8005354:	b2db      	uxtb	r3, r3
 8005356:	2b01      	cmp	r3, #1
 8005358:	d102      	bne.n	8005360 <HAL_RCC_OscConfig+0xd4c>
 800535a:	4b31      	ldr	r3, [pc, #196]	; (8005420 <HAL_RCC_OscConfig+0xe0c>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	e01b      	b.n	8005398 <HAL_RCC_OscConfig+0xd84>
 8005360:	f107 0320 	add.w	r3, r7, #32
 8005364:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005368:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800536a:	f107 0320 	add.w	r3, r7, #32
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	fa93 f2a3 	rbit	r2, r3
 8005374:	f107 031c 	add.w	r3, r7, #28
 8005378:	601a      	str	r2, [r3, #0]
 800537a:	f107 0318 	add.w	r3, r7, #24
 800537e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005382:	601a      	str	r2, [r3, #0]
 8005384:	f107 0318 	add.w	r3, r7, #24
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	fa93 f2a3 	rbit	r2, r3
 800538e:	f107 0314 	add.w	r3, r7, #20
 8005392:	601a      	str	r2, [r3, #0]
 8005394:	4b22      	ldr	r3, [pc, #136]	; (8005420 <HAL_RCC_OscConfig+0xe0c>)
 8005396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005398:	f107 0210 	add.w	r2, r7, #16
 800539c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80053a0:	6011      	str	r1, [r2, #0]
 80053a2:	f107 0210 	add.w	r2, r7, #16
 80053a6:	6812      	ldr	r2, [r2, #0]
 80053a8:	fa92 f1a2 	rbit	r1, r2
 80053ac:	f107 020c 	add.w	r2, r7, #12
 80053b0:	6011      	str	r1, [r2, #0]
  return result;
 80053b2:	f107 020c 	add.w	r2, r7, #12
 80053b6:	6812      	ldr	r2, [r2, #0]
 80053b8:	fab2 f282 	clz	r2, r2
 80053bc:	b2d2      	uxtb	r2, r2
 80053be:	f042 0220 	orr.w	r2, r2, #32
 80053c2:	b2d2      	uxtb	r2, r2
 80053c4:	f002 021f 	and.w	r2, r2, #31
 80053c8:	2101      	movs	r1, #1
 80053ca:	fa01 f202 	lsl.w	r2, r1, r2
 80053ce:	4013      	ands	r3, r2
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d19e      	bne.n	8005312 <HAL_RCC_OscConfig+0xcfe>
 80053d4:	e01e      	b.n	8005414 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80053d6:	1d3b      	adds	r3, r7, #4
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	69db      	ldr	r3, [r3, #28]
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d101      	bne.n	80053e4 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80053e0:	2301      	movs	r3, #1
 80053e2:	e018      	b.n	8005416 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80053e4:	4b0e      	ldr	r3, [pc, #56]	; (8005420 <HAL_RCC_OscConfig+0xe0c>)
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80053ec:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80053f0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80053f4:	1d3b      	adds	r3, r7, #4
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	6a1b      	ldr	r3, [r3, #32]
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d108      	bne.n	8005410 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80053fe:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005402:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005406:	1d3b      	adds	r3, r7, #4
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800540c:	429a      	cmp	r2, r3
 800540e:	d001      	beq.n	8005414 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	e000      	b.n	8005416 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8005414:	2300      	movs	r3, #0
}
 8005416:	4618      	mov	r0, r3
 8005418:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}
 8005420:	40021000 	.word	0x40021000

08005424 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b09e      	sub	sp, #120	; 0x78
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800542e:	2300      	movs	r3, #0
 8005430:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d101      	bne.n	800543c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005438:	2301      	movs	r3, #1
 800543a:	e162      	b.n	8005702 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800543c:	4b90      	ldr	r3, [pc, #576]	; (8005680 <HAL_RCC_ClockConfig+0x25c>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f003 0307 	and.w	r3, r3, #7
 8005444:	683a      	ldr	r2, [r7, #0]
 8005446:	429a      	cmp	r2, r3
 8005448:	d910      	bls.n	800546c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800544a:	4b8d      	ldr	r3, [pc, #564]	; (8005680 <HAL_RCC_ClockConfig+0x25c>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f023 0207 	bic.w	r2, r3, #7
 8005452:	498b      	ldr	r1, [pc, #556]	; (8005680 <HAL_RCC_ClockConfig+0x25c>)
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	4313      	orrs	r3, r2
 8005458:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800545a:	4b89      	ldr	r3, [pc, #548]	; (8005680 <HAL_RCC_ClockConfig+0x25c>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f003 0307 	and.w	r3, r3, #7
 8005462:	683a      	ldr	r2, [r7, #0]
 8005464:	429a      	cmp	r2, r3
 8005466:	d001      	beq.n	800546c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	e14a      	b.n	8005702 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f003 0302 	and.w	r3, r3, #2
 8005474:	2b00      	cmp	r3, #0
 8005476:	d008      	beq.n	800548a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005478:	4b82      	ldr	r3, [pc, #520]	; (8005684 <HAL_RCC_ClockConfig+0x260>)
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	497f      	ldr	r1, [pc, #508]	; (8005684 <HAL_RCC_ClockConfig+0x260>)
 8005486:	4313      	orrs	r3, r2
 8005488:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f003 0301 	and.w	r3, r3, #1
 8005492:	2b00      	cmp	r3, #0
 8005494:	f000 80dc 	beq.w	8005650 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	2b01      	cmp	r3, #1
 800549e:	d13c      	bne.n	800551a <HAL_RCC_ClockConfig+0xf6>
 80054a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80054a4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80054a8:	fa93 f3a3 	rbit	r3, r3
 80054ac:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80054ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054b0:	fab3 f383 	clz	r3, r3
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	095b      	lsrs	r3, r3, #5
 80054b8:	b2db      	uxtb	r3, r3
 80054ba:	f043 0301 	orr.w	r3, r3, #1
 80054be:	b2db      	uxtb	r3, r3
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d102      	bne.n	80054ca <HAL_RCC_ClockConfig+0xa6>
 80054c4:	4b6f      	ldr	r3, [pc, #444]	; (8005684 <HAL_RCC_ClockConfig+0x260>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	e00f      	b.n	80054ea <HAL_RCC_ClockConfig+0xc6>
 80054ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80054ce:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80054d2:	fa93 f3a3 	rbit	r3, r3
 80054d6:	667b      	str	r3, [r7, #100]	; 0x64
 80054d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80054dc:	663b      	str	r3, [r7, #96]	; 0x60
 80054de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80054e0:	fa93 f3a3 	rbit	r3, r3
 80054e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80054e6:	4b67      	ldr	r3, [pc, #412]	; (8005684 <HAL_RCC_ClockConfig+0x260>)
 80054e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80054ee:	65ba      	str	r2, [r7, #88]	; 0x58
 80054f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80054f2:	fa92 f2a2 	rbit	r2, r2
 80054f6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80054f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80054fa:	fab2 f282 	clz	r2, r2
 80054fe:	b2d2      	uxtb	r2, r2
 8005500:	f042 0220 	orr.w	r2, r2, #32
 8005504:	b2d2      	uxtb	r2, r2
 8005506:	f002 021f 	and.w	r2, r2, #31
 800550a:	2101      	movs	r1, #1
 800550c:	fa01 f202 	lsl.w	r2, r1, r2
 8005510:	4013      	ands	r3, r2
 8005512:	2b00      	cmp	r3, #0
 8005514:	d17b      	bne.n	800560e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	e0f3      	b.n	8005702 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	2b02      	cmp	r3, #2
 8005520:	d13c      	bne.n	800559c <HAL_RCC_ClockConfig+0x178>
 8005522:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005526:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005528:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800552a:	fa93 f3a3 	rbit	r3, r3
 800552e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005530:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005532:	fab3 f383 	clz	r3, r3
 8005536:	b2db      	uxtb	r3, r3
 8005538:	095b      	lsrs	r3, r3, #5
 800553a:	b2db      	uxtb	r3, r3
 800553c:	f043 0301 	orr.w	r3, r3, #1
 8005540:	b2db      	uxtb	r3, r3
 8005542:	2b01      	cmp	r3, #1
 8005544:	d102      	bne.n	800554c <HAL_RCC_ClockConfig+0x128>
 8005546:	4b4f      	ldr	r3, [pc, #316]	; (8005684 <HAL_RCC_ClockConfig+0x260>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	e00f      	b.n	800556c <HAL_RCC_ClockConfig+0x148>
 800554c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005550:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005552:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005554:	fa93 f3a3 	rbit	r3, r3
 8005558:	647b      	str	r3, [r7, #68]	; 0x44
 800555a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800555e:	643b      	str	r3, [r7, #64]	; 0x40
 8005560:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005562:	fa93 f3a3 	rbit	r3, r3
 8005566:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005568:	4b46      	ldr	r3, [pc, #280]	; (8005684 <HAL_RCC_ClockConfig+0x260>)
 800556a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800556c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005570:	63ba      	str	r2, [r7, #56]	; 0x38
 8005572:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005574:	fa92 f2a2 	rbit	r2, r2
 8005578:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800557a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800557c:	fab2 f282 	clz	r2, r2
 8005580:	b2d2      	uxtb	r2, r2
 8005582:	f042 0220 	orr.w	r2, r2, #32
 8005586:	b2d2      	uxtb	r2, r2
 8005588:	f002 021f 	and.w	r2, r2, #31
 800558c:	2101      	movs	r1, #1
 800558e:	fa01 f202 	lsl.w	r2, r1, r2
 8005592:	4013      	ands	r3, r2
 8005594:	2b00      	cmp	r3, #0
 8005596:	d13a      	bne.n	800560e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	e0b2      	b.n	8005702 <HAL_RCC_ClockConfig+0x2de>
 800559c:	2302      	movs	r3, #2
 800559e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a2:	fa93 f3a3 	rbit	r3, r3
 80055a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80055a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055aa:	fab3 f383 	clz	r3, r3
 80055ae:	b2db      	uxtb	r3, r3
 80055b0:	095b      	lsrs	r3, r3, #5
 80055b2:	b2db      	uxtb	r3, r3
 80055b4:	f043 0301 	orr.w	r3, r3, #1
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d102      	bne.n	80055c4 <HAL_RCC_ClockConfig+0x1a0>
 80055be:	4b31      	ldr	r3, [pc, #196]	; (8005684 <HAL_RCC_ClockConfig+0x260>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	e00d      	b.n	80055e0 <HAL_RCC_ClockConfig+0x1bc>
 80055c4:	2302      	movs	r3, #2
 80055c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ca:	fa93 f3a3 	rbit	r3, r3
 80055ce:	627b      	str	r3, [r7, #36]	; 0x24
 80055d0:	2302      	movs	r3, #2
 80055d2:	623b      	str	r3, [r7, #32]
 80055d4:	6a3b      	ldr	r3, [r7, #32]
 80055d6:	fa93 f3a3 	rbit	r3, r3
 80055da:	61fb      	str	r3, [r7, #28]
 80055dc:	4b29      	ldr	r3, [pc, #164]	; (8005684 <HAL_RCC_ClockConfig+0x260>)
 80055de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e0:	2202      	movs	r2, #2
 80055e2:	61ba      	str	r2, [r7, #24]
 80055e4:	69ba      	ldr	r2, [r7, #24]
 80055e6:	fa92 f2a2 	rbit	r2, r2
 80055ea:	617a      	str	r2, [r7, #20]
  return result;
 80055ec:	697a      	ldr	r2, [r7, #20]
 80055ee:	fab2 f282 	clz	r2, r2
 80055f2:	b2d2      	uxtb	r2, r2
 80055f4:	f042 0220 	orr.w	r2, r2, #32
 80055f8:	b2d2      	uxtb	r2, r2
 80055fa:	f002 021f 	and.w	r2, r2, #31
 80055fe:	2101      	movs	r1, #1
 8005600:	fa01 f202 	lsl.w	r2, r1, r2
 8005604:	4013      	ands	r3, r2
 8005606:	2b00      	cmp	r3, #0
 8005608:	d101      	bne.n	800560e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	e079      	b.n	8005702 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800560e:	4b1d      	ldr	r3, [pc, #116]	; (8005684 <HAL_RCC_ClockConfig+0x260>)
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	f023 0203 	bic.w	r2, r3, #3
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	491a      	ldr	r1, [pc, #104]	; (8005684 <HAL_RCC_ClockConfig+0x260>)
 800561c:	4313      	orrs	r3, r2
 800561e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005620:	f7fc faa0 	bl	8001b64 <HAL_GetTick>
 8005624:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005626:	e00a      	b.n	800563e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005628:	f7fc fa9c 	bl	8001b64 <HAL_GetTick>
 800562c:	4602      	mov	r2, r0
 800562e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005630:	1ad3      	subs	r3, r2, r3
 8005632:	f241 3288 	movw	r2, #5000	; 0x1388
 8005636:	4293      	cmp	r3, r2
 8005638:	d901      	bls.n	800563e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800563a:	2303      	movs	r3, #3
 800563c:	e061      	b.n	8005702 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800563e:	4b11      	ldr	r3, [pc, #68]	; (8005684 <HAL_RCC_ClockConfig+0x260>)
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	f003 020c 	and.w	r2, r3, #12
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	009b      	lsls	r3, r3, #2
 800564c:	429a      	cmp	r2, r3
 800564e:	d1eb      	bne.n	8005628 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005650:	4b0b      	ldr	r3, [pc, #44]	; (8005680 <HAL_RCC_ClockConfig+0x25c>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f003 0307 	and.w	r3, r3, #7
 8005658:	683a      	ldr	r2, [r7, #0]
 800565a:	429a      	cmp	r2, r3
 800565c:	d214      	bcs.n	8005688 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800565e:	4b08      	ldr	r3, [pc, #32]	; (8005680 <HAL_RCC_ClockConfig+0x25c>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f023 0207 	bic.w	r2, r3, #7
 8005666:	4906      	ldr	r1, [pc, #24]	; (8005680 <HAL_RCC_ClockConfig+0x25c>)
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	4313      	orrs	r3, r2
 800566c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800566e:	4b04      	ldr	r3, [pc, #16]	; (8005680 <HAL_RCC_ClockConfig+0x25c>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f003 0307 	and.w	r3, r3, #7
 8005676:	683a      	ldr	r2, [r7, #0]
 8005678:	429a      	cmp	r2, r3
 800567a:	d005      	beq.n	8005688 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	e040      	b.n	8005702 <HAL_RCC_ClockConfig+0x2de>
 8005680:	40022000 	.word	0x40022000
 8005684:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f003 0304 	and.w	r3, r3, #4
 8005690:	2b00      	cmp	r3, #0
 8005692:	d008      	beq.n	80056a6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005694:	4b1d      	ldr	r3, [pc, #116]	; (800570c <HAL_RCC_ClockConfig+0x2e8>)
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	68db      	ldr	r3, [r3, #12]
 80056a0:	491a      	ldr	r1, [pc, #104]	; (800570c <HAL_RCC_ClockConfig+0x2e8>)
 80056a2:	4313      	orrs	r3, r2
 80056a4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f003 0308 	and.w	r3, r3, #8
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d009      	beq.n	80056c6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80056b2:	4b16      	ldr	r3, [pc, #88]	; (800570c <HAL_RCC_ClockConfig+0x2e8>)
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	691b      	ldr	r3, [r3, #16]
 80056be:	00db      	lsls	r3, r3, #3
 80056c0:	4912      	ldr	r1, [pc, #72]	; (800570c <HAL_RCC_ClockConfig+0x2e8>)
 80056c2:	4313      	orrs	r3, r2
 80056c4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80056c6:	f000 f829 	bl	800571c <HAL_RCC_GetSysClockFreq>
 80056ca:	4601      	mov	r1, r0
 80056cc:	4b0f      	ldr	r3, [pc, #60]	; (800570c <HAL_RCC_ClockConfig+0x2e8>)
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80056d4:	22f0      	movs	r2, #240	; 0xf0
 80056d6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056d8:	693a      	ldr	r2, [r7, #16]
 80056da:	fa92 f2a2 	rbit	r2, r2
 80056de:	60fa      	str	r2, [r7, #12]
  return result;
 80056e0:	68fa      	ldr	r2, [r7, #12]
 80056e2:	fab2 f282 	clz	r2, r2
 80056e6:	b2d2      	uxtb	r2, r2
 80056e8:	40d3      	lsrs	r3, r2
 80056ea:	4a09      	ldr	r2, [pc, #36]	; (8005710 <HAL_RCC_ClockConfig+0x2ec>)
 80056ec:	5cd3      	ldrb	r3, [r2, r3]
 80056ee:	fa21 f303 	lsr.w	r3, r1, r3
 80056f2:	4a08      	ldr	r2, [pc, #32]	; (8005714 <HAL_RCC_ClockConfig+0x2f0>)
 80056f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80056f6:	4b08      	ldr	r3, [pc, #32]	; (8005718 <HAL_RCC_ClockConfig+0x2f4>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4618      	mov	r0, r3
 80056fc:	f7fc f9ee 	bl	8001adc <HAL_InitTick>
  
  return HAL_OK;
 8005700:	2300      	movs	r3, #0
}
 8005702:	4618      	mov	r0, r3
 8005704:	3778      	adds	r7, #120	; 0x78
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}
 800570a:	bf00      	nop
 800570c:	40021000 	.word	0x40021000
 8005710:	0800e298 	.word	0x0800e298
 8005714:	20000000 	.word	0x20000000
 8005718:	20000004 	.word	0x20000004

0800571c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800571c:	b480      	push	{r7}
 800571e:	b08b      	sub	sp, #44	; 0x2c
 8005720:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005722:	2300      	movs	r3, #0
 8005724:	61fb      	str	r3, [r7, #28]
 8005726:	2300      	movs	r3, #0
 8005728:	61bb      	str	r3, [r7, #24]
 800572a:	2300      	movs	r3, #0
 800572c:	627b      	str	r3, [r7, #36]	; 0x24
 800572e:	2300      	movs	r3, #0
 8005730:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005732:	2300      	movs	r3, #0
 8005734:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8005736:	4b29      	ldr	r3, [pc, #164]	; (80057dc <HAL_RCC_GetSysClockFreq+0xc0>)
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800573c:	69fb      	ldr	r3, [r7, #28]
 800573e:	f003 030c 	and.w	r3, r3, #12
 8005742:	2b04      	cmp	r3, #4
 8005744:	d002      	beq.n	800574c <HAL_RCC_GetSysClockFreq+0x30>
 8005746:	2b08      	cmp	r3, #8
 8005748:	d003      	beq.n	8005752 <HAL_RCC_GetSysClockFreq+0x36>
 800574a:	e03c      	b.n	80057c6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800574c:	4b24      	ldr	r3, [pc, #144]	; (80057e0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800574e:	623b      	str	r3, [r7, #32]
      break;
 8005750:	e03c      	b.n	80057cc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005752:	69fb      	ldr	r3, [r7, #28]
 8005754:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005758:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800575c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800575e:	68ba      	ldr	r2, [r7, #8]
 8005760:	fa92 f2a2 	rbit	r2, r2
 8005764:	607a      	str	r2, [r7, #4]
  return result;
 8005766:	687a      	ldr	r2, [r7, #4]
 8005768:	fab2 f282 	clz	r2, r2
 800576c:	b2d2      	uxtb	r2, r2
 800576e:	40d3      	lsrs	r3, r2
 8005770:	4a1c      	ldr	r2, [pc, #112]	; (80057e4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005772:	5cd3      	ldrb	r3, [r2, r3]
 8005774:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8005776:	4b19      	ldr	r3, [pc, #100]	; (80057dc <HAL_RCC_GetSysClockFreq+0xc0>)
 8005778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800577a:	f003 030f 	and.w	r3, r3, #15
 800577e:	220f      	movs	r2, #15
 8005780:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005782:	693a      	ldr	r2, [r7, #16]
 8005784:	fa92 f2a2 	rbit	r2, r2
 8005788:	60fa      	str	r2, [r7, #12]
  return result;
 800578a:	68fa      	ldr	r2, [r7, #12]
 800578c:	fab2 f282 	clz	r2, r2
 8005790:	b2d2      	uxtb	r2, r2
 8005792:	40d3      	lsrs	r3, r2
 8005794:	4a14      	ldr	r2, [pc, #80]	; (80057e8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005796:	5cd3      	ldrb	r3, [r2, r3]
 8005798:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800579a:	69fb      	ldr	r3, [r7, #28]
 800579c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d008      	beq.n	80057b6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80057a4:	4a0e      	ldr	r2, [pc, #56]	; (80057e0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80057a6:	69bb      	ldr	r3, [r7, #24]
 80057a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	fb02 f303 	mul.w	r3, r2, r3
 80057b2:	627b      	str	r3, [r7, #36]	; 0x24
 80057b4:	e004      	b.n	80057c0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	4a0c      	ldr	r2, [pc, #48]	; (80057ec <HAL_RCC_GetSysClockFreq+0xd0>)
 80057ba:	fb02 f303 	mul.w	r3, r2, r3
 80057be:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80057c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c2:	623b      	str	r3, [r7, #32]
      break;
 80057c4:	e002      	b.n	80057cc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80057c6:	4b06      	ldr	r3, [pc, #24]	; (80057e0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80057c8:	623b      	str	r3, [r7, #32]
      break;
 80057ca:	bf00      	nop
    }
  }
  return sysclockfreq;
 80057cc:	6a3b      	ldr	r3, [r7, #32]
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	372c      	adds	r7, #44	; 0x2c
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr
 80057da:	bf00      	nop
 80057dc:	40021000 	.word	0x40021000
 80057e0:	007a1200 	.word	0x007a1200
 80057e4:	0800e2a8 	.word	0x0800e2a8
 80057e8:	0800e2b8 	.word	0x0800e2b8
 80057ec:	003d0900 	.word	0x003d0900

080057f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b092      	sub	sp, #72	; 0x48
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80057f8:	2300      	movs	r3, #0
 80057fa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80057fc:	2300      	movs	r3, #0
 80057fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005800:	2300      	movs	r3, #0
 8005802:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800580e:	2b00      	cmp	r3, #0
 8005810:	f000 80d4 	beq.w	80059bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005814:	4b4e      	ldr	r3, [pc, #312]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005816:	69db      	ldr	r3, [r3, #28]
 8005818:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800581c:	2b00      	cmp	r3, #0
 800581e:	d10e      	bne.n	800583e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005820:	4b4b      	ldr	r3, [pc, #300]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005822:	69db      	ldr	r3, [r3, #28]
 8005824:	4a4a      	ldr	r2, [pc, #296]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005826:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800582a:	61d3      	str	r3, [r2, #28]
 800582c:	4b48      	ldr	r3, [pc, #288]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800582e:	69db      	ldr	r3, [r3, #28]
 8005830:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005834:	60bb      	str	r3, [r7, #8]
 8005836:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005838:	2301      	movs	r3, #1
 800583a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800583e:	4b45      	ldr	r3, [pc, #276]	; (8005954 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005846:	2b00      	cmp	r3, #0
 8005848:	d118      	bne.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800584a:	4b42      	ldr	r3, [pc, #264]	; (8005954 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a41      	ldr	r2, [pc, #260]	; (8005954 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005850:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005854:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005856:	f7fc f985 	bl	8001b64 <HAL_GetTick>
 800585a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800585c:	e008      	b.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800585e:	f7fc f981 	bl	8001b64 <HAL_GetTick>
 8005862:	4602      	mov	r2, r0
 8005864:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005866:	1ad3      	subs	r3, r2, r3
 8005868:	2b64      	cmp	r3, #100	; 0x64
 800586a:	d901      	bls.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800586c:	2303      	movs	r3, #3
 800586e:	e169      	b.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005870:	4b38      	ldr	r3, [pc, #224]	; (8005954 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005878:	2b00      	cmp	r3, #0
 800587a:	d0f0      	beq.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800587c:	4b34      	ldr	r3, [pc, #208]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800587e:	6a1b      	ldr	r3, [r3, #32]
 8005880:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005884:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005886:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005888:	2b00      	cmp	r3, #0
 800588a:	f000 8084 	beq.w	8005996 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005896:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005898:	429a      	cmp	r2, r3
 800589a:	d07c      	beq.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800589c:	4b2c      	ldr	r3, [pc, #176]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800589e:	6a1b      	ldr	r3, [r3, #32]
 80058a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80058aa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ae:	fa93 f3a3 	rbit	r3, r3
 80058b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80058b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80058b6:	fab3 f383 	clz	r3, r3
 80058ba:	b2db      	uxtb	r3, r3
 80058bc:	461a      	mov	r2, r3
 80058be:	4b26      	ldr	r3, [pc, #152]	; (8005958 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80058c0:	4413      	add	r3, r2
 80058c2:	009b      	lsls	r3, r3, #2
 80058c4:	461a      	mov	r2, r3
 80058c6:	2301      	movs	r3, #1
 80058c8:	6013      	str	r3, [r2, #0]
 80058ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80058ce:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058d2:	fa93 f3a3 	rbit	r3, r3
 80058d6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80058d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80058da:	fab3 f383 	clz	r3, r3
 80058de:	b2db      	uxtb	r3, r3
 80058e0:	461a      	mov	r2, r3
 80058e2:	4b1d      	ldr	r3, [pc, #116]	; (8005958 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80058e4:	4413      	add	r3, r2
 80058e6:	009b      	lsls	r3, r3, #2
 80058e8:	461a      	mov	r2, r3
 80058ea:	2300      	movs	r3, #0
 80058ec:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80058ee:	4a18      	ldr	r2, [pc, #96]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058f2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80058f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058f6:	f003 0301 	and.w	r3, r3, #1
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d04b      	beq.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058fe:	f7fc f931 	bl	8001b64 <HAL_GetTick>
 8005902:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005904:	e00a      	b.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005906:	f7fc f92d 	bl	8001b64 <HAL_GetTick>
 800590a:	4602      	mov	r2, r0
 800590c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800590e:	1ad3      	subs	r3, r2, r3
 8005910:	f241 3288 	movw	r2, #5000	; 0x1388
 8005914:	4293      	cmp	r3, r2
 8005916:	d901      	bls.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005918:	2303      	movs	r3, #3
 800591a:	e113      	b.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x354>
 800591c:	2302      	movs	r3, #2
 800591e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005922:	fa93 f3a3 	rbit	r3, r3
 8005926:	627b      	str	r3, [r7, #36]	; 0x24
 8005928:	2302      	movs	r3, #2
 800592a:	623b      	str	r3, [r7, #32]
 800592c:	6a3b      	ldr	r3, [r7, #32]
 800592e:	fa93 f3a3 	rbit	r3, r3
 8005932:	61fb      	str	r3, [r7, #28]
  return result;
 8005934:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005936:	fab3 f383 	clz	r3, r3
 800593a:	b2db      	uxtb	r3, r3
 800593c:	095b      	lsrs	r3, r3, #5
 800593e:	b2db      	uxtb	r3, r3
 8005940:	f043 0302 	orr.w	r3, r3, #2
 8005944:	b2db      	uxtb	r3, r3
 8005946:	2b02      	cmp	r3, #2
 8005948:	d108      	bne.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800594a:	4b01      	ldr	r3, [pc, #4]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800594c:	6a1b      	ldr	r3, [r3, #32]
 800594e:	e00d      	b.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005950:	40021000 	.word	0x40021000
 8005954:	40007000 	.word	0x40007000
 8005958:	10908100 	.word	0x10908100
 800595c:	2302      	movs	r3, #2
 800595e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005960:	69bb      	ldr	r3, [r7, #24]
 8005962:	fa93 f3a3 	rbit	r3, r3
 8005966:	617b      	str	r3, [r7, #20]
 8005968:	4b78      	ldr	r3, [pc, #480]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800596a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800596c:	2202      	movs	r2, #2
 800596e:	613a      	str	r2, [r7, #16]
 8005970:	693a      	ldr	r2, [r7, #16]
 8005972:	fa92 f2a2 	rbit	r2, r2
 8005976:	60fa      	str	r2, [r7, #12]
  return result;
 8005978:	68fa      	ldr	r2, [r7, #12]
 800597a:	fab2 f282 	clz	r2, r2
 800597e:	b2d2      	uxtb	r2, r2
 8005980:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005984:	b2d2      	uxtb	r2, r2
 8005986:	f002 021f 	and.w	r2, r2, #31
 800598a:	2101      	movs	r1, #1
 800598c:	fa01 f202 	lsl.w	r2, r1, r2
 8005990:	4013      	ands	r3, r2
 8005992:	2b00      	cmp	r3, #0
 8005994:	d0b7      	beq.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005996:	4b6d      	ldr	r3, [pc, #436]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005998:	6a1b      	ldr	r3, [r3, #32]
 800599a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	496a      	ldr	r1, [pc, #424]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059a4:	4313      	orrs	r3, r2
 80059a6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80059a8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d105      	bne.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059b0:	4b66      	ldr	r3, [pc, #408]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059b2:	69db      	ldr	r3, [r3, #28]
 80059b4:	4a65      	ldr	r2, [pc, #404]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059ba:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f003 0301 	and.w	r3, r3, #1
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d008      	beq.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80059c8:	4b60      	ldr	r3, [pc, #384]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059cc:	f023 0203 	bic.w	r2, r3, #3
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	495d      	ldr	r1, [pc, #372]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059d6:	4313      	orrs	r3, r2
 80059d8:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f003 0302 	and.w	r3, r3, #2
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d008      	beq.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80059e6:	4b59      	ldr	r3, [pc, #356]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ea:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	68db      	ldr	r3, [r3, #12]
 80059f2:	4956      	ldr	r1, [pc, #344]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059f4:	4313      	orrs	r3, r2
 80059f6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f003 0304 	and.w	r3, r3, #4
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d008      	beq.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005a04:	4b51      	ldr	r3, [pc, #324]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a08:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	691b      	ldr	r3, [r3, #16]
 8005a10:	494e      	ldr	r1, [pc, #312]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a12:	4313      	orrs	r3, r2
 8005a14:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f003 0320 	and.w	r3, r3, #32
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d008      	beq.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005a22:	4b4a      	ldr	r3, [pc, #296]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a26:	f023 0210 	bic.w	r2, r3, #16
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	69db      	ldr	r3, [r3, #28]
 8005a2e:	4947      	ldr	r1, [pc, #284]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a30:	4313      	orrs	r3, r2
 8005a32:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d008      	beq.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005a40:	4b42      	ldr	r3, [pc, #264]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a4c:	493f      	ldr	r1, [pc, #252]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d008      	beq.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005a5e:	4b3b      	ldr	r3, [pc, #236]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a62:	f023 0220 	bic.w	r2, r3, #32
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6a1b      	ldr	r3, [r3, #32]
 8005a6a:	4938      	ldr	r1, [pc, #224]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f003 0308 	and.w	r3, r3, #8
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d008      	beq.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005a7c:	4b33      	ldr	r3, [pc, #204]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a80:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	695b      	ldr	r3, [r3, #20]
 8005a88:	4930      	ldr	r1, [pc, #192]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f003 0310 	and.w	r3, r3, #16
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d008      	beq.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005a9a:	4b2c      	ldr	r3, [pc, #176]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a9e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	699b      	ldr	r3, [r3, #24]
 8005aa6:	4929      	ldr	r1, [pc, #164]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d008      	beq.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005ab8:	4b24      	ldr	r3, [pc, #144]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ac4:	4921      	ldr	r1, [pc, #132]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d008      	beq.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005ad6:	4b1d      	ldr	r3, [pc, #116]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ada:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae2:	491a      	ldr	r1, [pc, #104]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d008      	beq.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8005af4:	4b15      	ldr	r3, [pc, #84]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005af8:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b00:	4912      	ldr	r1, [pc, #72]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b02:	4313      	orrs	r3, r2
 8005b04:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d008      	beq.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005b12:	4b0e      	ldr	r3, [pc, #56]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b16:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b1e:	490b      	ldr	r1, [pc, #44]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b20:	4313      	orrs	r3, r2
 8005b22:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d008      	beq.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8005b30:	4b06      	ldr	r3, [pc, #24]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b34:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b3c:	4903      	ldr	r1, [pc, #12]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005b42:	2300      	movs	r3, #0
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3748      	adds	r7, #72	; 0x48
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}
 8005b4c:	40021000 	.word	0x40021000

08005b50 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b084      	sub	sp, #16
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d101      	bne.n	8005b62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	e09d      	b.n	8005c9e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d108      	bne.n	8005b7c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b72:	d009      	beq.n	8005b88 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2200      	movs	r2, #0
 8005b78:	61da      	str	r2, [r3, #28]
 8005b7a:	e005      	b.n	8005b88 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2200      	movs	r2, #0
 8005b86:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005b94:	b2db      	uxtb	r3, r3
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d106      	bne.n	8005ba8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f7fb fdec 	bl	8001780 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2202      	movs	r2, #2
 8005bac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	681a      	ldr	r2, [r3, #0]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005bbe:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	68db      	ldr	r3, [r3, #12]
 8005bc4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005bc8:	d902      	bls.n	8005bd0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	60fb      	str	r3, [r7, #12]
 8005bce:	e002      	b.n	8005bd6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005bd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005bd4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	68db      	ldr	r3, [r3, #12]
 8005bda:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005bde:	d007      	beq.n	8005bf0 <HAL_SPI_Init+0xa0>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	68db      	ldr	r3, [r3, #12]
 8005be4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005be8:	d002      	beq.n	8005bf0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2200      	movs	r2, #0
 8005bee:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005c00:	431a      	orrs	r2, r3
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	691b      	ldr	r3, [r3, #16]
 8005c06:	f003 0302 	and.w	r3, r3, #2
 8005c0a:	431a      	orrs	r2, r3
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	695b      	ldr	r3, [r3, #20]
 8005c10:	f003 0301 	and.w	r3, r3, #1
 8005c14:	431a      	orrs	r2, r3
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	699b      	ldr	r3, [r3, #24]
 8005c1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c1e:	431a      	orrs	r2, r3
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	69db      	ldr	r3, [r3, #28]
 8005c24:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c28:	431a      	orrs	r2, r3
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6a1b      	ldr	r3, [r3, #32]
 8005c2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c32:	ea42 0103 	orr.w	r1, r2, r3
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c3a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	430a      	orrs	r2, r1
 8005c44:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	699b      	ldr	r3, [r3, #24]
 8005c4a:	0c1b      	lsrs	r3, r3, #16
 8005c4c:	f003 0204 	and.w	r2, r3, #4
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c54:	f003 0310 	and.w	r3, r3, #16
 8005c58:	431a      	orrs	r2, r3
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c5e:	f003 0308 	and.w	r3, r3, #8
 8005c62:	431a      	orrs	r2, r3
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	68db      	ldr	r3, [r3, #12]
 8005c68:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005c6c:	ea42 0103 	orr.w	r1, r2, r3
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	430a      	orrs	r2, r1
 8005c7c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	69da      	ldr	r2, [r3, #28]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c8c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2200      	movs	r2, #0
 8005c92:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2201      	movs	r2, #1
 8005c98:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005c9c:	2300      	movs	r3, #0
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3710      	adds	r7, #16
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}

08005ca6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ca6:	b580      	push	{r7, lr}
 8005ca8:	b082      	sub	sp, #8
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d101      	bne.n	8005cb8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	e049      	b.n	8005d4c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cbe:	b2db      	uxtb	r3, r3
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d106      	bne.n	8005cd2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f7fb fd99 	bl	8001804 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2202      	movs	r2, #2
 8005cd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	3304      	adds	r3, #4
 8005ce2:	4619      	mov	r1, r3
 8005ce4:	4610      	mov	r0, r2
 8005ce6:	f000 f961 	bl	8005fac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2201      	movs	r2, #1
 8005cee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2201      	movs	r2, #1
 8005cfe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2201      	movs	r2, #1
 8005d06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2201      	movs	r2, #1
 8005d16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2201      	movs	r2, #1
 8005d26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2201      	movs	r2, #1
 8005d36:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2201      	movs	r2, #1
 8005d46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d4a:	2300      	movs	r3, #0
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3708      	adds	r7, #8
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}

08005d54 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b085      	sub	sp, #20
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d62:	b2db      	uxtb	r3, r3
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d001      	beq.n	8005d6c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	e042      	b.n	8005df2 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2202      	movs	r2, #2
 8005d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a21      	ldr	r2, [pc, #132]	; (8005e00 <HAL_TIM_Base_Start+0xac>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d018      	beq.n	8005db0 <HAL_TIM_Base_Start+0x5c>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d86:	d013      	beq.n	8005db0 <HAL_TIM_Base_Start+0x5c>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a1d      	ldr	r2, [pc, #116]	; (8005e04 <HAL_TIM_Base_Start+0xb0>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d00e      	beq.n	8005db0 <HAL_TIM_Base_Start+0x5c>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a1c      	ldr	r2, [pc, #112]	; (8005e08 <HAL_TIM_Base_Start+0xb4>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d009      	beq.n	8005db0 <HAL_TIM_Base_Start+0x5c>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a1a      	ldr	r2, [pc, #104]	; (8005e0c <HAL_TIM_Base_Start+0xb8>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d004      	beq.n	8005db0 <HAL_TIM_Base_Start+0x5c>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a19      	ldr	r2, [pc, #100]	; (8005e10 <HAL_TIM_Base_Start+0xbc>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d115      	bne.n	8005ddc <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	689a      	ldr	r2, [r3, #8]
 8005db6:	4b17      	ldr	r3, [pc, #92]	; (8005e14 <HAL_TIM_Base_Start+0xc0>)
 8005db8:	4013      	ands	r3, r2
 8005dba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2b06      	cmp	r3, #6
 8005dc0:	d015      	beq.n	8005dee <HAL_TIM_Base_Start+0x9a>
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dc8:	d011      	beq.n	8005dee <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f042 0201 	orr.w	r2, r2, #1
 8005dd8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dda:	e008      	b.n	8005dee <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	681a      	ldr	r2, [r3, #0]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f042 0201 	orr.w	r2, r2, #1
 8005dea:	601a      	str	r2, [r3, #0]
 8005dec:	e000      	b.n	8005df0 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005df0:	2300      	movs	r3, #0
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	3714      	adds	r7, #20
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr
 8005dfe:	bf00      	nop
 8005e00:	40012c00 	.word	0x40012c00
 8005e04:	40000400 	.word	0x40000400
 8005e08:	40000800 	.word	0x40000800
 8005e0c:	40013400 	.word	0x40013400
 8005e10:	40014000 	.word	0x40014000
 8005e14:	00010007 	.word	0x00010007

08005e18 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b084      	sub	sp, #16
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
 8005e20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e22:	2300      	movs	r3, #0
 8005e24:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d101      	bne.n	8005e34 <HAL_TIM_ConfigClockSource+0x1c>
 8005e30:	2302      	movs	r3, #2
 8005e32:	e0b6      	b.n	8005fa2 <HAL_TIM_ConfigClockSource+0x18a>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2201      	movs	r2, #1
 8005e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2202      	movs	r2, #2
 8005e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e52:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005e56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e5e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	68ba      	ldr	r2, [r7, #8]
 8005e66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e70:	d03e      	beq.n	8005ef0 <HAL_TIM_ConfigClockSource+0xd8>
 8005e72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e76:	f200 8087 	bhi.w	8005f88 <HAL_TIM_ConfigClockSource+0x170>
 8005e7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e7e:	f000 8086 	beq.w	8005f8e <HAL_TIM_ConfigClockSource+0x176>
 8005e82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e86:	d87f      	bhi.n	8005f88 <HAL_TIM_ConfigClockSource+0x170>
 8005e88:	2b70      	cmp	r3, #112	; 0x70
 8005e8a:	d01a      	beq.n	8005ec2 <HAL_TIM_ConfigClockSource+0xaa>
 8005e8c:	2b70      	cmp	r3, #112	; 0x70
 8005e8e:	d87b      	bhi.n	8005f88 <HAL_TIM_ConfigClockSource+0x170>
 8005e90:	2b60      	cmp	r3, #96	; 0x60
 8005e92:	d050      	beq.n	8005f36 <HAL_TIM_ConfigClockSource+0x11e>
 8005e94:	2b60      	cmp	r3, #96	; 0x60
 8005e96:	d877      	bhi.n	8005f88 <HAL_TIM_ConfigClockSource+0x170>
 8005e98:	2b50      	cmp	r3, #80	; 0x50
 8005e9a:	d03c      	beq.n	8005f16 <HAL_TIM_ConfigClockSource+0xfe>
 8005e9c:	2b50      	cmp	r3, #80	; 0x50
 8005e9e:	d873      	bhi.n	8005f88 <HAL_TIM_ConfigClockSource+0x170>
 8005ea0:	2b40      	cmp	r3, #64	; 0x40
 8005ea2:	d058      	beq.n	8005f56 <HAL_TIM_ConfigClockSource+0x13e>
 8005ea4:	2b40      	cmp	r3, #64	; 0x40
 8005ea6:	d86f      	bhi.n	8005f88 <HAL_TIM_ConfigClockSource+0x170>
 8005ea8:	2b30      	cmp	r3, #48	; 0x30
 8005eaa:	d064      	beq.n	8005f76 <HAL_TIM_ConfigClockSource+0x15e>
 8005eac:	2b30      	cmp	r3, #48	; 0x30
 8005eae:	d86b      	bhi.n	8005f88 <HAL_TIM_ConfigClockSource+0x170>
 8005eb0:	2b20      	cmp	r3, #32
 8005eb2:	d060      	beq.n	8005f76 <HAL_TIM_ConfigClockSource+0x15e>
 8005eb4:	2b20      	cmp	r3, #32
 8005eb6:	d867      	bhi.n	8005f88 <HAL_TIM_ConfigClockSource+0x170>
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d05c      	beq.n	8005f76 <HAL_TIM_ConfigClockSource+0x15e>
 8005ebc:	2b10      	cmp	r3, #16
 8005ebe:	d05a      	beq.n	8005f76 <HAL_TIM_ConfigClockSource+0x15e>
 8005ec0:	e062      	b.n	8005f88 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6818      	ldr	r0, [r3, #0]
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	6899      	ldr	r1, [r3, #8]
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	685a      	ldr	r2, [r3, #4]
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	68db      	ldr	r3, [r3, #12]
 8005ed2:	f000 f975 	bl	80061c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	689b      	ldr	r3, [r3, #8]
 8005edc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005ee4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	68ba      	ldr	r2, [r7, #8]
 8005eec:	609a      	str	r2, [r3, #8]
      break;
 8005eee:	e04f      	b.n	8005f90 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6818      	ldr	r0, [r3, #0]
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	6899      	ldr	r1, [r3, #8]
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	685a      	ldr	r2, [r3, #4]
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	68db      	ldr	r3, [r3, #12]
 8005f00:	f000 f95e 	bl	80061c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	689a      	ldr	r2, [r3, #8]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f12:	609a      	str	r2, [r3, #8]
      break;
 8005f14:	e03c      	b.n	8005f90 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6818      	ldr	r0, [r3, #0]
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	6859      	ldr	r1, [r3, #4]
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	68db      	ldr	r3, [r3, #12]
 8005f22:	461a      	mov	r2, r3
 8005f24:	f000 f8d2 	bl	80060cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	2150      	movs	r1, #80	; 0x50
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f000 f92b 	bl	800618a <TIM_ITRx_SetConfig>
      break;
 8005f34:	e02c      	b.n	8005f90 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6818      	ldr	r0, [r3, #0]
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	6859      	ldr	r1, [r3, #4]
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	68db      	ldr	r3, [r3, #12]
 8005f42:	461a      	mov	r2, r3
 8005f44:	f000 f8f1 	bl	800612a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	2160      	movs	r1, #96	; 0x60
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f000 f91b 	bl	800618a <TIM_ITRx_SetConfig>
      break;
 8005f54:	e01c      	b.n	8005f90 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6818      	ldr	r0, [r3, #0]
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	6859      	ldr	r1, [r3, #4]
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	68db      	ldr	r3, [r3, #12]
 8005f62:	461a      	mov	r2, r3
 8005f64:	f000 f8b2 	bl	80060cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	2140      	movs	r1, #64	; 0x40
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f000 f90b 	bl	800618a <TIM_ITRx_SetConfig>
      break;
 8005f74:	e00c      	b.n	8005f90 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681a      	ldr	r2, [r3, #0]
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4619      	mov	r1, r3
 8005f80:	4610      	mov	r0, r2
 8005f82:	f000 f902 	bl	800618a <TIM_ITRx_SetConfig>
      break;
 8005f86:	e003      	b.n	8005f90 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	73fb      	strb	r3, [r7, #15]
      break;
 8005f8c:	e000      	b.n	8005f90 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005f8e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2201      	movs	r2, #1
 8005f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3710      	adds	r7, #16
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}
	...

08005fac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b085      	sub	sp, #20
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
 8005fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	4a3c      	ldr	r2, [pc, #240]	; (80060b0 <TIM_Base_SetConfig+0x104>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d00f      	beq.n	8005fe4 <TIM_Base_SetConfig+0x38>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fca:	d00b      	beq.n	8005fe4 <TIM_Base_SetConfig+0x38>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	4a39      	ldr	r2, [pc, #228]	; (80060b4 <TIM_Base_SetConfig+0x108>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d007      	beq.n	8005fe4 <TIM_Base_SetConfig+0x38>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	4a38      	ldr	r2, [pc, #224]	; (80060b8 <TIM_Base_SetConfig+0x10c>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d003      	beq.n	8005fe4 <TIM_Base_SetConfig+0x38>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	4a37      	ldr	r2, [pc, #220]	; (80060bc <TIM_Base_SetConfig+0x110>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d108      	bne.n	8005ff6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	68fa      	ldr	r2, [r7, #12]
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	4a2d      	ldr	r2, [pc, #180]	; (80060b0 <TIM_Base_SetConfig+0x104>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d01b      	beq.n	8006036 <TIM_Base_SetConfig+0x8a>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006004:	d017      	beq.n	8006036 <TIM_Base_SetConfig+0x8a>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	4a2a      	ldr	r2, [pc, #168]	; (80060b4 <TIM_Base_SetConfig+0x108>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d013      	beq.n	8006036 <TIM_Base_SetConfig+0x8a>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	4a29      	ldr	r2, [pc, #164]	; (80060b8 <TIM_Base_SetConfig+0x10c>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d00f      	beq.n	8006036 <TIM_Base_SetConfig+0x8a>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	4a28      	ldr	r2, [pc, #160]	; (80060bc <TIM_Base_SetConfig+0x110>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d00b      	beq.n	8006036 <TIM_Base_SetConfig+0x8a>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	4a27      	ldr	r2, [pc, #156]	; (80060c0 <TIM_Base_SetConfig+0x114>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d007      	beq.n	8006036 <TIM_Base_SetConfig+0x8a>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	4a26      	ldr	r2, [pc, #152]	; (80060c4 <TIM_Base_SetConfig+0x118>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d003      	beq.n	8006036 <TIM_Base_SetConfig+0x8a>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	4a25      	ldr	r2, [pc, #148]	; (80060c8 <TIM_Base_SetConfig+0x11c>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d108      	bne.n	8006048 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800603c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	68db      	ldr	r3, [r3, #12]
 8006042:	68fa      	ldr	r2, [r7, #12]
 8006044:	4313      	orrs	r3, r2
 8006046:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	695b      	ldr	r3, [r3, #20]
 8006052:	4313      	orrs	r3, r2
 8006054:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	68fa      	ldr	r2, [r7, #12]
 800605a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	689a      	ldr	r2, [r3, #8]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	681a      	ldr	r2, [r3, #0]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	4a10      	ldr	r2, [pc, #64]	; (80060b0 <TIM_Base_SetConfig+0x104>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d00f      	beq.n	8006094 <TIM_Base_SetConfig+0xe8>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	4a11      	ldr	r2, [pc, #68]	; (80060bc <TIM_Base_SetConfig+0x110>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d00b      	beq.n	8006094 <TIM_Base_SetConfig+0xe8>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	4a10      	ldr	r2, [pc, #64]	; (80060c0 <TIM_Base_SetConfig+0x114>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d007      	beq.n	8006094 <TIM_Base_SetConfig+0xe8>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	4a0f      	ldr	r2, [pc, #60]	; (80060c4 <TIM_Base_SetConfig+0x118>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d003      	beq.n	8006094 <TIM_Base_SetConfig+0xe8>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	4a0e      	ldr	r2, [pc, #56]	; (80060c8 <TIM_Base_SetConfig+0x11c>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d103      	bne.n	800609c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	691a      	ldr	r2, [r3, #16]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2201      	movs	r2, #1
 80060a0:	615a      	str	r2, [r3, #20]
}
 80060a2:	bf00      	nop
 80060a4:	3714      	adds	r7, #20
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr
 80060ae:	bf00      	nop
 80060b0:	40012c00 	.word	0x40012c00
 80060b4:	40000400 	.word	0x40000400
 80060b8:	40000800 	.word	0x40000800
 80060bc:	40013400 	.word	0x40013400
 80060c0:	40014000 	.word	0x40014000
 80060c4:	40014400 	.word	0x40014400
 80060c8:	40014800 	.word	0x40014800

080060cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b087      	sub	sp, #28
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	60f8      	str	r0, [r7, #12]
 80060d4:	60b9      	str	r1, [r7, #8]
 80060d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	6a1b      	ldr	r3, [r3, #32]
 80060dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	6a1b      	ldr	r3, [r3, #32]
 80060e2:	f023 0201 	bic.w	r2, r3, #1
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	699b      	ldr	r3, [r3, #24]
 80060ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80060f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	011b      	lsls	r3, r3, #4
 80060fc:	693a      	ldr	r2, [r7, #16]
 80060fe:	4313      	orrs	r3, r2
 8006100:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	f023 030a 	bic.w	r3, r3, #10
 8006108:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800610a:	697a      	ldr	r2, [r7, #20]
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	4313      	orrs	r3, r2
 8006110:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	693a      	ldr	r2, [r7, #16]
 8006116:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	697a      	ldr	r2, [r7, #20]
 800611c:	621a      	str	r2, [r3, #32]
}
 800611e:	bf00      	nop
 8006120:	371c      	adds	r7, #28
 8006122:	46bd      	mov	sp, r7
 8006124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006128:	4770      	bx	lr

0800612a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800612a:	b480      	push	{r7}
 800612c:	b087      	sub	sp, #28
 800612e:	af00      	add	r7, sp, #0
 8006130:	60f8      	str	r0, [r7, #12]
 8006132:	60b9      	str	r1, [r7, #8]
 8006134:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	6a1b      	ldr	r3, [r3, #32]
 800613a:	f023 0210 	bic.w	r2, r3, #16
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	699b      	ldr	r3, [r3, #24]
 8006146:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	6a1b      	ldr	r3, [r3, #32]
 800614c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006154:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	031b      	lsls	r3, r3, #12
 800615a:	697a      	ldr	r2, [r7, #20]
 800615c:	4313      	orrs	r3, r2
 800615e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006166:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	011b      	lsls	r3, r3, #4
 800616c:	693a      	ldr	r2, [r7, #16]
 800616e:	4313      	orrs	r3, r2
 8006170:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	697a      	ldr	r2, [r7, #20]
 8006176:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	693a      	ldr	r2, [r7, #16]
 800617c:	621a      	str	r2, [r3, #32]
}
 800617e:	bf00      	nop
 8006180:	371c      	adds	r7, #28
 8006182:	46bd      	mov	sp, r7
 8006184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006188:	4770      	bx	lr

0800618a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800618a:	b480      	push	{r7}
 800618c:	b085      	sub	sp, #20
 800618e:	af00      	add	r7, sp, #0
 8006190:	6078      	str	r0, [r7, #4]
 8006192:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	689b      	ldr	r3, [r3, #8]
 8006198:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80061a2:	683a      	ldr	r2, [r7, #0]
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	4313      	orrs	r3, r2
 80061a8:	f043 0307 	orr.w	r3, r3, #7
 80061ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	68fa      	ldr	r2, [r7, #12]
 80061b2:	609a      	str	r2, [r3, #8]
}
 80061b4:	bf00      	nop
 80061b6:	3714      	adds	r7, #20
 80061b8:	46bd      	mov	sp, r7
 80061ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061be:	4770      	bx	lr

080061c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b087      	sub	sp, #28
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	60f8      	str	r0, [r7, #12]
 80061c8:	60b9      	str	r1, [r7, #8]
 80061ca:	607a      	str	r2, [r7, #4]
 80061cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	689b      	ldr	r3, [r3, #8]
 80061d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80061da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	021a      	lsls	r2, r3, #8
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	431a      	orrs	r2, r3
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	4313      	orrs	r3, r2
 80061e8:	697a      	ldr	r2, [r7, #20]
 80061ea:	4313      	orrs	r3, r2
 80061ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	697a      	ldr	r2, [r7, #20]
 80061f2:	609a      	str	r2, [r3, #8]
}
 80061f4:	bf00      	nop
 80061f6:	371c      	adds	r7, #28
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr

08006200 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006200:	b480      	push	{r7}
 8006202:	b085      	sub	sp, #20
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
 8006208:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006210:	2b01      	cmp	r3, #1
 8006212:	d101      	bne.n	8006218 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006214:	2302      	movs	r3, #2
 8006216:	e063      	b.n	80062e0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2201      	movs	r2, #1
 800621c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2202      	movs	r2, #2
 8006224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a2b      	ldr	r2, [pc, #172]	; (80062ec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d004      	beq.n	800624c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a2a      	ldr	r2, [pc, #168]	; (80062f0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d108      	bne.n	800625e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006252:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	68fa      	ldr	r2, [r7, #12]
 800625a:	4313      	orrs	r3, r2
 800625c:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006264:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	68fa      	ldr	r2, [r7, #12]
 800626c:	4313      	orrs	r3, r2
 800626e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	68fa      	ldr	r2, [r7, #12]
 8006276:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a1b      	ldr	r2, [pc, #108]	; (80062ec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d018      	beq.n	80062b4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800628a:	d013      	beq.n	80062b4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a18      	ldr	r2, [pc, #96]	; (80062f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d00e      	beq.n	80062b4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a17      	ldr	r2, [pc, #92]	; (80062f8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d009      	beq.n	80062b4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a12      	ldr	r2, [pc, #72]	; (80062f0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d004      	beq.n	80062b4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a13      	ldr	r2, [pc, #76]	; (80062fc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d10c      	bne.n	80062ce <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062ba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	68ba      	ldr	r2, [r7, #8]
 80062c2:	4313      	orrs	r3, r2
 80062c4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	68ba      	ldr	r2, [r7, #8]
 80062cc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2201      	movs	r2, #1
 80062d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2200      	movs	r2, #0
 80062da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062de:	2300      	movs	r3, #0
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	3714      	adds	r7, #20
 80062e4:	46bd      	mov	sp, r7
 80062e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ea:	4770      	bx	lr
 80062ec:	40012c00 	.word	0x40012c00
 80062f0:	40013400 	.word	0x40013400
 80062f4:	40000400 	.word	0x40000400
 80062f8:	40000800 	.word	0x40000800
 80062fc:	40014000 	.word	0x40014000

08006300 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006300:	b480      	push	{r7}
 8006302:	b085      	sub	sp, #20
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2200      	movs	r2, #0
 800630c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006310:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006314:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	b29a      	uxth	r2, r3
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006320:	2300      	movs	r3, #0
}
 8006322:	4618      	mov	r0, r3
 8006324:	3714      	adds	r7, #20
 8006326:	46bd      	mov	sp, r7
 8006328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632c:	4770      	bx	lr

0800632e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800632e:	b480      	push	{r7}
 8006330:	b085      	sub	sp, #20
 8006332:	af00      	add	r7, sp, #0
 8006334:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006336:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800633a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006342:	b29a      	uxth	r2, r3
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	b29b      	uxth	r3, r3
 8006348:	43db      	mvns	r3, r3
 800634a:	b29b      	uxth	r3, r3
 800634c:	4013      	ands	r3, r2
 800634e:	b29a      	uxth	r2, r3
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006356:	2300      	movs	r3, #0
}
 8006358:	4618      	mov	r0, r3
 800635a:	3714      	adds	r7, #20
 800635c:	46bd      	mov	sp, r7
 800635e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006362:	4770      	bx	lr

08006364 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006364:	b084      	sub	sp, #16
 8006366:	b480      	push	{r7}
 8006368:	b083      	sub	sp, #12
 800636a:	af00      	add	r7, sp, #0
 800636c:	6078      	str	r0, [r7, #4]
 800636e:	f107 0014 	add.w	r0, r7, #20
 8006372:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2201      	movs	r2, #1
 800637a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2200      	movs	r2, #0
 8006382:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2200      	movs	r2, #0
 800638a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2200      	movs	r2, #0
 8006392:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006396:	2300      	movs	r3, #0
}
 8006398:	4618      	mov	r0, r3
 800639a:	370c      	adds	r7, #12
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	b004      	add	sp, #16
 80063a4:	4770      	bx	lr
	...

080063a8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b09d      	sub	sp, #116	; 0x74
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
 80063b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80063b2:	2300      	movs	r3, #0
 80063b4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80063b8:	687a      	ldr	r2, [r7, #4]
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	781b      	ldrb	r3, [r3, #0]
 80063be:	009b      	lsls	r3, r3, #2
 80063c0:	4413      	add	r3, r2
 80063c2:	881b      	ldrh	r3, [r3, #0]
 80063c4:	b29b      	uxth	r3, r3
 80063c6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80063ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063ce:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	78db      	ldrb	r3, [r3, #3]
 80063d6:	2b03      	cmp	r3, #3
 80063d8:	d81f      	bhi.n	800641a <USB_ActivateEndpoint+0x72>
 80063da:	a201      	add	r2, pc, #4	; (adr r2, 80063e0 <USB_ActivateEndpoint+0x38>)
 80063dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063e0:	080063f1 	.word	0x080063f1
 80063e4:	0800640d 	.word	0x0800640d
 80063e8:	08006423 	.word	0x08006423
 80063ec:	080063ff 	.word	0x080063ff
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80063f0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80063f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80063f8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80063fc:	e012      	b.n	8006424 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80063fe:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006402:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8006406:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800640a:	e00b      	b.n	8006424 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800640c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006410:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006414:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006418:	e004      	b.n	8006424 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800641a:	2301      	movs	r3, #1
 800641c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8006420:	e000      	b.n	8006424 <USB_ActivateEndpoint+0x7c>
      break;
 8006422:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006424:	687a      	ldr	r2, [r7, #4]
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	781b      	ldrb	r3, [r3, #0]
 800642a:	009b      	lsls	r3, r3, #2
 800642c:	441a      	add	r2, r3
 800642e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006432:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006436:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800643a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800643e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006442:	b29b      	uxth	r3, r3
 8006444:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006446:	687a      	ldr	r2, [r7, #4]
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	781b      	ldrb	r3, [r3, #0]
 800644c:	009b      	lsls	r3, r3, #2
 800644e:	4413      	add	r3, r2
 8006450:	881b      	ldrh	r3, [r3, #0]
 8006452:	b29b      	uxth	r3, r3
 8006454:	b21b      	sxth	r3, r3
 8006456:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800645a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800645e:	b21a      	sxth	r2, r3
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	781b      	ldrb	r3, [r3, #0]
 8006464:	b21b      	sxth	r3, r3
 8006466:	4313      	orrs	r3, r2
 8006468:	b21b      	sxth	r3, r3
 800646a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800646e:	687a      	ldr	r2, [r7, #4]
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	781b      	ldrb	r3, [r3, #0]
 8006474:	009b      	lsls	r3, r3, #2
 8006476:	441a      	add	r2, r3
 8006478:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800647c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006480:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006484:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006488:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800648c:	b29b      	uxth	r3, r3
 800648e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	7b1b      	ldrb	r3, [r3, #12]
 8006494:	2b00      	cmp	r3, #0
 8006496:	f040 8149 	bne.w	800672c <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	785b      	ldrb	r3, [r3, #1]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	f000 8084 	beq.w	80065ac <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	61bb      	str	r3, [r7, #24]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	461a      	mov	r2, r3
 80064b2:	69bb      	ldr	r3, [r7, #24]
 80064b4:	4413      	add	r3, r2
 80064b6:	61bb      	str	r3, [r7, #24]
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	781b      	ldrb	r3, [r3, #0]
 80064bc:	011a      	lsls	r2, r3, #4
 80064be:	69bb      	ldr	r3, [r7, #24]
 80064c0:	4413      	add	r3, r2
 80064c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064c6:	617b      	str	r3, [r7, #20]
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	88db      	ldrh	r3, [r3, #6]
 80064cc:	085b      	lsrs	r3, r3, #1
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	005b      	lsls	r3, r3, #1
 80064d2:	b29a      	uxth	r2, r3
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80064d8:	687a      	ldr	r2, [r7, #4]
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	781b      	ldrb	r3, [r3, #0]
 80064de:	009b      	lsls	r3, r3, #2
 80064e0:	4413      	add	r3, r2
 80064e2:	881b      	ldrh	r3, [r3, #0]
 80064e4:	827b      	strh	r3, [r7, #18]
 80064e6:	8a7b      	ldrh	r3, [r7, #18]
 80064e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d01b      	beq.n	8006528 <USB_ActivateEndpoint+0x180>
 80064f0:	687a      	ldr	r2, [r7, #4]
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	781b      	ldrb	r3, [r3, #0]
 80064f6:	009b      	lsls	r3, r3, #2
 80064f8:	4413      	add	r3, r2
 80064fa:	881b      	ldrh	r3, [r3, #0]
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006502:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006506:	823b      	strh	r3, [r7, #16]
 8006508:	687a      	ldr	r2, [r7, #4]
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	781b      	ldrb	r3, [r3, #0]
 800650e:	009b      	lsls	r3, r3, #2
 8006510:	441a      	add	r2, r3
 8006512:	8a3b      	ldrh	r3, [r7, #16]
 8006514:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006518:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800651c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006520:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006524:	b29b      	uxth	r3, r3
 8006526:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	78db      	ldrb	r3, [r3, #3]
 800652c:	2b01      	cmp	r3, #1
 800652e:	d020      	beq.n	8006572 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006530:	687a      	ldr	r2, [r7, #4]
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	009b      	lsls	r3, r3, #2
 8006538:	4413      	add	r3, r2
 800653a:	881b      	ldrh	r3, [r3, #0]
 800653c:	b29b      	uxth	r3, r3
 800653e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006542:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006546:	81bb      	strh	r3, [r7, #12]
 8006548:	89bb      	ldrh	r3, [r7, #12]
 800654a:	f083 0320 	eor.w	r3, r3, #32
 800654e:	81bb      	strh	r3, [r7, #12]
 8006550:	687a      	ldr	r2, [r7, #4]
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	781b      	ldrb	r3, [r3, #0]
 8006556:	009b      	lsls	r3, r3, #2
 8006558:	441a      	add	r2, r3
 800655a:	89bb      	ldrh	r3, [r7, #12]
 800655c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006560:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006564:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006568:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800656c:	b29b      	uxth	r3, r3
 800656e:	8013      	strh	r3, [r2, #0]
 8006570:	e2a6      	b.n	8006ac0 <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006572:	687a      	ldr	r2, [r7, #4]
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	781b      	ldrb	r3, [r3, #0]
 8006578:	009b      	lsls	r3, r3, #2
 800657a:	4413      	add	r3, r2
 800657c:	881b      	ldrh	r3, [r3, #0]
 800657e:	b29b      	uxth	r3, r3
 8006580:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006584:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006588:	81fb      	strh	r3, [r7, #14]
 800658a:	687a      	ldr	r2, [r7, #4]
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	781b      	ldrb	r3, [r3, #0]
 8006590:	009b      	lsls	r3, r3, #2
 8006592:	441a      	add	r2, r3
 8006594:	89fb      	ldrh	r3, [r7, #14]
 8006596:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800659a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800659e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065a6:	b29b      	uxth	r3, r3
 80065a8:	8013      	strh	r3, [r2, #0]
 80065aa:	e289      	b.n	8006ac0 <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	633b      	str	r3, [r7, #48]	; 0x30
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065b6:	b29b      	uxth	r3, r3
 80065b8:	461a      	mov	r2, r3
 80065ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065bc:	4413      	add	r3, r2
 80065be:	633b      	str	r3, [r7, #48]	; 0x30
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	781b      	ldrb	r3, [r3, #0]
 80065c4:	011a      	lsls	r2, r3, #4
 80065c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065c8:	4413      	add	r3, r2
 80065ca:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80065ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	88db      	ldrh	r3, [r3, #6]
 80065d4:	085b      	lsrs	r3, r3, #1
 80065d6:	b29b      	uxth	r3, r3
 80065d8:	005b      	lsls	r3, r3, #1
 80065da:	b29a      	uxth	r2, r3
 80065dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065de:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065ea:	b29b      	uxth	r3, r3
 80065ec:	461a      	mov	r2, r3
 80065ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f0:	4413      	add	r3, r2
 80065f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	781b      	ldrb	r3, [r3, #0]
 80065f8:	011a      	lsls	r2, r3, #4
 80065fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065fc:	4413      	add	r3, r2
 80065fe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006602:	627b      	str	r3, [r7, #36]	; 0x24
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	691b      	ldr	r3, [r3, #16]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d112      	bne.n	8006632 <USB_ActivateEndpoint+0x28a>
 800660c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800660e:	881b      	ldrh	r3, [r3, #0]
 8006610:	b29b      	uxth	r3, r3
 8006612:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006616:	b29a      	uxth	r2, r3
 8006618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800661a:	801a      	strh	r2, [r3, #0]
 800661c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800661e:	881b      	ldrh	r3, [r3, #0]
 8006620:	b29b      	uxth	r3, r3
 8006622:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006626:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800662a:	b29a      	uxth	r2, r3
 800662c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800662e:	801a      	strh	r2, [r3, #0]
 8006630:	e02f      	b.n	8006692 <USB_ActivateEndpoint+0x2ea>
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	691b      	ldr	r3, [r3, #16]
 8006636:	2b3e      	cmp	r3, #62	; 0x3e
 8006638:	d813      	bhi.n	8006662 <USB_ActivateEndpoint+0x2ba>
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	691b      	ldr	r3, [r3, #16]
 800663e:	085b      	lsrs	r3, r3, #1
 8006640:	66bb      	str	r3, [r7, #104]	; 0x68
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	691b      	ldr	r3, [r3, #16]
 8006646:	f003 0301 	and.w	r3, r3, #1
 800664a:	2b00      	cmp	r3, #0
 800664c:	d002      	beq.n	8006654 <USB_ActivateEndpoint+0x2ac>
 800664e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006650:	3301      	adds	r3, #1
 8006652:	66bb      	str	r3, [r7, #104]	; 0x68
 8006654:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006656:	b29b      	uxth	r3, r3
 8006658:	029b      	lsls	r3, r3, #10
 800665a:	b29a      	uxth	r2, r3
 800665c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800665e:	801a      	strh	r2, [r3, #0]
 8006660:	e017      	b.n	8006692 <USB_ActivateEndpoint+0x2ea>
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	691b      	ldr	r3, [r3, #16]
 8006666:	095b      	lsrs	r3, r3, #5
 8006668:	66bb      	str	r3, [r7, #104]	; 0x68
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	691b      	ldr	r3, [r3, #16]
 800666e:	f003 031f 	and.w	r3, r3, #31
 8006672:	2b00      	cmp	r3, #0
 8006674:	d102      	bne.n	800667c <USB_ActivateEndpoint+0x2d4>
 8006676:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006678:	3b01      	subs	r3, #1
 800667a:	66bb      	str	r3, [r7, #104]	; 0x68
 800667c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800667e:	b29b      	uxth	r3, r3
 8006680:	029b      	lsls	r3, r3, #10
 8006682:	b29b      	uxth	r3, r3
 8006684:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006688:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800668c:	b29a      	uxth	r2, r3
 800668e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006690:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	781b      	ldrb	r3, [r3, #0]
 8006698:	009b      	lsls	r3, r3, #2
 800669a:	4413      	add	r3, r2
 800669c:	881b      	ldrh	r3, [r3, #0]
 800669e:	847b      	strh	r3, [r7, #34]	; 0x22
 80066a0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80066a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d01b      	beq.n	80066e2 <USB_ActivateEndpoint+0x33a>
 80066aa:	687a      	ldr	r2, [r7, #4]
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	781b      	ldrb	r3, [r3, #0]
 80066b0:	009b      	lsls	r3, r3, #2
 80066b2:	4413      	add	r3, r2
 80066b4:	881b      	ldrh	r3, [r3, #0]
 80066b6:	b29b      	uxth	r3, r3
 80066b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066c0:	843b      	strh	r3, [r7, #32]
 80066c2:	687a      	ldr	r2, [r7, #4]
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	781b      	ldrb	r3, [r3, #0]
 80066c8:	009b      	lsls	r3, r3, #2
 80066ca:	441a      	add	r2, r3
 80066cc:	8c3b      	ldrh	r3, [r7, #32]
 80066ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80066da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066de:	b29b      	uxth	r3, r3
 80066e0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80066e2:	687a      	ldr	r2, [r7, #4]
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	781b      	ldrb	r3, [r3, #0]
 80066e8:	009b      	lsls	r3, r3, #2
 80066ea:	4413      	add	r3, r2
 80066ec:	881b      	ldrh	r3, [r3, #0]
 80066ee:	b29b      	uxth	r3, r3
 80066f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066f8:	83fb      	strh	r3, [r7, #30]
 80066fa:	8bfb      	ldrh	r3, [r7, #30]
 80066fc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006700:	83fb      	strh	r3, [r7, #30]
 8006702:	8bfb      	ldrh	r3, [r7, #30]
 8006704:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006708:	83fb      	strh	r3, [r7, #30]
 800670a:	687a      	ldr	r2, [r7, #4]
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	781b      	ldrb	r3, [r3, #0]
 8006710:	009b      	lsls	r3, r3, #2
 8006712:	441a      	add	r2, r3
 8006714:	8bfb      	ldrh	r3, [r7, #30]
 8006716:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800671a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800671e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006722:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006726:	b29b      	uxth	r3, r3
 8006728:	8013      	strh	r3, [r2, #0]
 800672a:	e1c9      	b.n	8006ac0 <USB_ActivateEndpoint+0x718>
    }
  }
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	78db      	ldrb	r3, [r3, #3]
 8006730:	2b02      	cmp	r3, #2
 8006732:	d11e      	bne.n	8006772 <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006734:	687a      	ldr	r2, [r7, #4]
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	781b      	ldrb	r3, [r3, #0]
 800673a:	009b      	lsls	r3, r3, #2
 800673c:	4413      	add	r3, r2
 800673e:	881b      	ldrh	r3, [r3, #0]
 8006740:	b29b      	uxth	r3, r3
 8006742:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800674a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800674e:	687a      	ldr	r2, [r7, #4]
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	781b      	ldrb	r3, [r3, #0]
 8006754:	009b      	lsls	r3, r3, #2
 8006756:	441a      	add	r2, r3
 8006758:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800675c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006760:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006764:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006768:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800676c:	b29b      	uxth	r3, r3
 800676e:	8013      	strh	r3, [r2, #0]
 8006770:	e01d      	b.n	80067ae <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8006772:	687a      	ldr	r2, [r7, #4]
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	781b      	ldrb	r3, [r3, #0]
 8006778:	009b      	lsls	r3, r3, #2
 800677a:	4413      	add	r3, r2
 800677c:	881b      	ldrh	r3, [r3, #0]
 800677e:	b29b      	uxth	r3, r3
 8006780:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006784:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006788:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800678c:	687a      	ldr	r2, [r7, #4]
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	781b      	ldrb	r3, [r3, #0]
 8006792:	009b      	lsls	r3, r3, #2
 8006794:	441a      	add	r2, r3
 8006796:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800679a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800679e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067aa:	b29b      	uxth	r3, r3
 80067ac:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067b8:	b29b      	uxth	r3, r3
 80067ba:	461a      	mov	r2, r3
 80067bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067be:	4413      	add	r3, r2
 80067c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	781b      	ldrb	r3, [r3, #0]
 80067c6:	011a      	lsls	r2, r3, #4
 80067c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067ca:	4413      	add	r3, r2
 80067cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067d0:	65bb      	str	r3, [r7, #88]	; 0x58
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	891b      	ldrh	r3, [r3, #8]
 80067d6:	085b      	lsrs	r3, r3, #1
 80067d8:	b29b      	uxth	r3, r3
 80067da:	005b      	lsls	r3, r3, #1
 80067dc:	b29a      	uxth	r2, r3
 80067de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80067e0:	801a      	strh	r2, [r3, #0]
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	657b      	str	r3, [r7, #84]	; 0x54
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067ec:	b29b      	uxth	r3, r3
 80067ee:	461a      	mov	r2, r3
 80067f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067f2:	4413      	add	r3, r2
 80067f4:	657b      	str	r3, [r7, #84]	; 0x54
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	781b      	ldrb	r3, [r3, #0]
 80067fa:	011a      	lsls	r2, r3, #4
 80067fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067fe:	4413      	add	r3, r2
 8006800:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8006804:	653b      	str	r3, [r7, #80]	; 0x50
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	895b      	ldrh	r3, [r3, #10]
 800680a:	085b      	lsrs	r3, r3, #1
 800680c:	b29b      	uxth	r3, r3
 800680e:	005b      	lsls	r3, r3, #1
 8006810:	b29a      	uxth	r2, r3
 8006812:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006814:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	785b      	ldrb	r3, [r3, #1]
 800681a:	2b00      	cmp	r3, #0
 800681c:	f040 8093 	bne.w	8006946 <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006820:	687a      	ldr	r2, [r7, #4]
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	781b      	ldrb	r3, [r3, #0]
 8006826:	009b      	lsls	r3, r3, #2
 8006828:	4413      	add	r3, r2
 800682a:	881b      	ldrh	r3, [r3, #0]
 800682c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006830:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006834:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006838:	2b00      	cmp	r3, #0
 800683a:	d01b      	beq.n	8006874 <USB_ActivateEndpoint+0x4cc>
 800683c:	687a      	ldr	r2, [r7, #4]
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	781b      	ldrb	r3, [r3, #0]
 8006842:	009b      	lsls	r3, r3, #2
 8006844:	4413      	add	r3, r2
 8006846:	881b      	ldrh	r3, [r3, #0]
 8006848:	b29b      	uxth	r3, r3
 800684a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800684e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006852:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006854:	687a      	ldr	r2, [r7, #4]
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	781b      	ldrb	r3, [r3, #0]
 800685a:	009b      	lsls	r3, r3, #2
 800685c:	441a      	add	r2, r3
 800685e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006860:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006864:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006868:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800686c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006870:	b29b      	uxth	r3, r3
 8006872:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006874:	687a      	ldr	r2, [r7, #4]
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	781b      	ldrb	r3, [r3, #0]
 800687a:	009b      	lsls	r3, r3, #2
 800687c:	4413      	add	r3, r2
 800687e:	881b      	ldrh	r3, [r3, #0]
 8006880:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006882:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006884:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006888:	2b00      	cmp	r3, #0
 800688a:	d01b      	beq.n	80068c4 <USB_ActivateEndpoint+0x51c>
 800688c:	687a      	ldr	r2, [r7, #4]
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	781b      	ldrb	r3, [r3, #0]
 8006892:	009b      	lsls	r3, r3, #2
 8006894:	4413      	add	r3, r2
 8006896:	881b      	ldrh	r3, [r3, #0]
 8006898:	b29b      	uxth	r3, r3
 800689a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800689e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068a2:	877b      	strh	r3, [r7, #58]	; 0x3a
 80068a4:	687a      	ldr	r2, [r7, #4]
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	781b      	ldrb	r3, [r3, #0]
 80068aa:	009b      	lsls	r3, r3, #2
 80068ac:	441a      	add	r2, r3
 80068ae:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80068b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068bc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80068c4:	687a      	ldr	r2, [r7, #4]
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	781b      	ldrb	r3, [r3, #0]
 80068ca:	009b      	lsls	r3, r3, #2
 80068cc:	4413      	add	r3, r2
 80068ce:	881b      	ldrh	r3, [r3, #0]
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068da:	873b      	strh	r3, [r7, #56]	; 0x38
 80068dc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80068de:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80068e2:	873b      	strh	r3, [r7, #56]	; 0x38
 80068e4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80068e6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80068ea:	873b      	strh	r3, [r7, #56]	; 0x38
 80068ec:	687a      	ldr	r2, [r7, #4]
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	781b      	ldrb	r3, [r3, #0]
 80068f2:	009b      	lsls	r3, r3, #2
 80068f4:	441a      	add	r2, r3
 80068f6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80068f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006900:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006904:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006908:	b29b      	uxth	r3, r3
 800690a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800690c:	687a      	ldr	r2, [r7, #4]
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	781b      	ldrb	r3, [r3, #0]
 8006912:	009b      	lsls	r3, r3, #2
 8006914:	4413      	add	r3, r2
 8006916:	881b      	ldrh	r3, [r3, #0]
 8006918:	b29b      	uxth	r3, r3
 800691a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800691e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006922:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006924:	687a      	ldr	r2, [r7, #4]
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	781b      	ldrb	r3, [r3, #0]
 800692a:	009b      	lsls	r3, r3, #2
 800692c:	441a      	add	r2, r3
 800692e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006930:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006934:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006938:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800693c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006940:	b29b      	uxth	r3, r3
 8006942:	8013      	strh	r3, [r2, #0]
 8006944:	e0bc      	b.n	8006ac0 <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006946:	687a      	ldr	r2, [r7, #4]
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	781b      	ldrb	r3, [r3, #0]
 800694c:	009b      	lsls	r3, r3, #2
 800694e:	4413      	add	r3, r2
 8006950:	881b      	ldrh	r3, [r3, #0]
 8006952:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006956:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800695a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800695e:	2b00      	cmp	r3, #0
 8006960:	d01d      	beq.n	800699e <USB_ActivateEndpoint+0x5f6>
 8006962:	687a      	ldr	r2, [r7, #4]
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	781b      	ldrb	r3, [r3, #0]
 8006968:	009b      	lsls	r3, r3, #2
 800696a:	4413      	add	r3, r2
 800696c:	881b      	ldrh	r3, [r3, #0]
 800696e:	b29b      	uxth	r3, r3
 8006970:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006974:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006978:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800697c:	687a      	ldr	r2, [r7, #4]
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	781b      	ldrb	r3, [r3, #0]
 8006982:	009b      	lsls	r3, r3, #2
 8006984:	441a      	add	r2, r3
 8006986:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800698a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800698e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006992:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006996:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800699a:	b29b      	uxth	r3, r3
 800699c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800699e:	687a      	ldr	r2, [r7, #4]
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	781b      	ldrb	r3, [r3, #0]
 80069a4:	009b      	lsls	r3, r3, #2
 80069a6:	4413      	add	r3, r2
 80069a8:	881b      	ldrh	r3, [r3, #0]
 80069aa:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80069ae:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80069b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d01d      	beq.n	80069f6 <USB_ActivateEndpoint+0x64e>
 80069ba:	687a      	ldr	r2, [r7, #4]
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	781b      	ldrb	r3, [r3, #0]
 80069c0:	009b      	lsls	r3, r3, #2
 80069c2:	4413      	add	r3, r2
 80069c4:	881b      	ldrh	r3, [r3, #0]
 80069c6:	b29b      	uxth	r3, r3
 80069c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069d0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80069d4:	687a      	ldr	r2, [r7, #4]
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	781b      	ldrb	r3, [r3, #0]
 80069da:	009b      	lsls	r3, r3, #2
 80069dc:	441a      	add	r2, r3
 80069de:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80069e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069ee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80069f2:	b29b      	uxth	r3, r3
 80069f4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	78db      	ldrb	r3, [r3, #3]
 80069fa:	2b01      	cmp	r3, #1
 80069fc:	d024      	beq.n	8006a48 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80069fe:	687a      	ldr	r2, [r7, #4]
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	781b      	ldrb	r3, [r3, #0]
 8006a04:	009b      	lsls	r3, r3, #2
 8006a06:	4413      	add	r3, r2
 8006a08:	881b      	ldrh	r3, [r3, #0]
 8006a0a:	b29b      	uxth	r3, r3
 8006a0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a14:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006a18:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006a1c:	f083 0320 	eor.w	r3, r3, #32
 8006a20:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006a24:	687a      	ldr	r2, [r7, #4]
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	781b      	ldrb	r3, [r3, #0]
 8006a2a:	009b      	lsls	r3, r3, #2
 8006a2c:	441a      	add	r2, r3
 8006a2e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006a32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	8013      	strh	r3, [r2, #0]
 8006a46:	e01d      	b.n	8006a84 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006a48:	687a      	ldr	r2, [r7, #4]
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	781b      	ldrb	r3, [r3, #0]
 8006a4e:	009b      	lsls	r3, r3, #2
 8006a50:	4413      	add	r3, r2
 8006a52:	881b      	ldrh	r3, [r3, #0]
 8006a54:	b29b      	uxth	r3, r3
 8006a56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a5e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006a62:	687a      	ldr	r2, [r7, #4]
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	781b      	ldrb	r3, [r3, #0]
 8006a68:	009b      	lsls	r3, r3, #2
 8006a6a:	441a      	add	r2, r3
 8006a6c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006a70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a80:	b29b      	uxth	r3, r3
 8006a82:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006a84:	687a      	ldr	r2, [r7, #4]
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	781b      	ldrb	r3, [r3, #0]
 8006a8a:	009b      	lsls	r3, r3, #2
 8006a8c:	4413      	add	r3, r2
 8006a8e:	881b      	ldrh	r3, [r3, #0]
 8006a90:	b29b      	uxth	r3, r3
 8006a92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a9a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006a9e:	687a      	ldr	r2, [r7, #4]
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	781b      	ldrb	r3, [r3, #0]
 8006aa4:	009b      	lsls	r3, r3, #2
 8006aa6:	441a      	add	r2, r3
 8006aa8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006aac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ab0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ab4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ab8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006abc:	b29b      	uxth	r3, r3
 8006abe:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8006ac0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	3774      	adds	r7, #116	; 0x74
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ace:	4770      	bx	lr

08006ad0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b08d      	sub	sp, #52	; 0x34
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
 8006ad8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	7b1b      	ldrb	r3, [r3, #12]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	f040 808e 	bne.w	8006c00 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	785b      	ldrb	r3, [r3, #1]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d044      	beq.n	8006b76 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006aec:	687a      	ldr	r2, [r7, #4]
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	781b      	ldrb	r3, [r3, #0]
 8006af2:	009b      	lsls	r3, r3, #2
 8006af4:	4413      	add	r3, r2
 8006af6:	881b      	ldrh	r3, [r3, #0]
 8006af8:	81bb      	strh	r3, [r7, #12]
 8006afa:	89bb      	ldrh	r3, [r7, #12]
 8006afc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d01b      	beq.n	8006b3c <USB_DeactivateEndpoint+0x6c>
 8006b04:	687a      	ldr	r2, [r7, #4]
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	781b      	ldrb	r3, [r3, #0]
 8006b0a:	009b      	lsls	r3, r3, #2
 8006b0c:	4413      	add	r3, r2
 8006b0e:	881b      	ldrh	r3, [r3, #0]
 8006b10:	b29b      	uxth	r3, r3
 8006b12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b1a:	817b      	strh	r3, [r7, #10]
 8006b1c:	687a      	ldr	r2, [r7, #4]
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	781b      	ldrb	r3, [r3, #0]
 8006b22:	009b      	lsls	r3, r3, #2
 8006b24:	441a      	add	r2, r3
 8006b26:	897b      	ldrh	r3, [r7, #10]
 8006b28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b34:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006b38:	b29b      	uxth	r3, r3
 8006b3a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006b3c:	687a      	ldr	r2, [r7, #4]
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	781b      	ldrb	r3, [r3, #0]
 8006b42:	009b      	lsls	r3, r3, #2
 8006b44:	4413      	add	r3, r2
 8006b46:	881b      	ldrh	r3, [r3, #0]
 8006b48:	b29b      	uxth	r3, r3
 8006b4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b52:	813b      	strh	r3, [r7, #8]
 8006b54:	687a      	ldr	r2, [r7, #4]
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	781b      	ldrb	r3, [r3, #0]
 8006b5a:	009b      	lsls	r3, r3, #2
 8006b5c:	441a      	add	r2, r3
 8006b5e:	893b      	ldrh	r3, [r7, #8]
 8006b60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b70:	b29b      	uxth	r3, r3
 8006b72:	8013      	strh	r3, [r2, #0]
 8006b74:	e192      	b.n	8006e9c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006b76:	687a      	ldr	r2, [r7, #4]
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	781b      	ldrb	r3, [r3, #0]
 8006b7c:	009b      	lsls	r3, r3, #2
 8006b7e:	4413      	add	r3, r2
 8006b80:	881b      	ldrh	r3, [r3, #0]
 8006b82:	827b      	strh	r3, [r7, #18]
 8006b84:	8a7b      	ldrh	r3, [r7, #18]
 8006b86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d01b      	beq.n	8006bc6 <USB_DeactivateEndpoint+0xf6>
 8006b8e:	687a      	ldr	r2, [r7, #4]
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	781b      	ldrb	r3, [r3, #0]
 8006b94:	009b      	lsls	r3, r3, #2
 8006b96:	4413      	add	r3, r2
 8006b98:	881b      	ldrh	r3, [r3, #0]
 8006b9a:	b29b      	uxth	r3, r3
 8006b9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ba0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ba4:	823b      	strh	r3, [r7, #16]
 8006ba6:	687a      	ldr	r2, [r7, #4]
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	781b      	ldrb	r3, [r3, #0]
 8006bac:	009b      	lsls	r3, r3, #2
 8006bae:	441a      	add	r2, r3
 8006bb0:	8a3b      	ldrh	r3, [r7, #16]
 8006bb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006bbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bc2:	b29b      	uxth	r3, r3
 8006bc4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006bc6:	687a      	ldr	r2, [r7, #4]
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	781b      	ldrb	r3, [r3, #0]
 8006bcc:	009b      	lsls	r3, r3, #2
 8006bce:	4413      	add	r3, r2
 8006bd0:	881b      	ldrh	r3, [r3, #0]
 8006bd2:	b29b      	uxth	r3, r3
 8006bd4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006bd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bdc:	81fb      	strh	r3, [r7, #14]
 8006bde:	687a      	ldr	r2, [r7, #4]
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	781b      	ldrb	r3, [r3, #0]
 8006be4:	009b      	lsls	r3, r3, #2
 8006be6:	441a      	add	r2, r3
 8006be8:	89fb      	ldrh	r3, [r7, #14]
 8006bea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bf2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bfa:	b29b      	uxth	r3, r3
 8006bfc:	8013      	strh	r3, [r2, #0]
 8006bfe:	e14d      	b.n	8006e9c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	785b      	ldrb	r3, [r3, #1]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	f040 80a5 	bne.w	8006d54 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006c0a:	687a      	ldr	r2, [r7, #4]
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	781b      	ldrb	r3, [r3, #0]
 8006c10:	009b      	lsls	r3, r3, #2
 8006c12:	4413      	add	r3, r2
 8006c14:	881b      	ldrh	r3, [r3, #0]
 8006c16:	843b      	strh	r3, [r7, #32]
 8006c18:	8c3b      	ldrh	r3, [r7, #32]
 8006c1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d01b      	beq.n	8006c5a <USB_DeactivateEndpoint+0x18a>
 8006c22:	687a      	ldr	r2, [r7, #4]
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	781b      	ldrb	r3, [r3, #0]
 8006c28:	009b      	lsls	r3, r3, #2
 8006c2a:	4413      	add	r3, r2
 8006c2c:	881b      	ldrh	r3, [r3, #0]
 8006c2e:	b29b      	uxth	r3, r3
 8006c30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c38:	83fb      	strh	r3, [r7, #30]
 8006c3a:	687a      	ldr	r2, [r7, #4]
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	781b      	ldrb	r3, [r3, #0]
 8006c40:	009b      	lsls	r3, r3, #2
 8006c42:	441a      	add	r2, r3
 8006c44:	8bfb      	ldrh	r3, [r7, #30]
 8006c46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c4e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006c52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c56:	b29b      	uxth	r3, r3
 8006c58:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006c5a:	687a      	ldr	r2, [r7, #4]
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	781b      	ldrb	r3, [r3, #0]
 8006c60:	009b      	lsls	r3, r3, #2
 8006c62:	4413      	add	r3, r2
 8006c64:	881b      	ldrh	r3, [r3, #0]
 8006c66:	83bb      	strh	r3, [r7, #28]
 8006c68:	8bbb      	ldrh	r3, [r7, #28]
 8006c6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d01b      	beq.n	8006caa <USB_DeactivateEndpoint+0x1da>
 8006c72:	687a      	ldr	r2, [r7, #4]
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	781b      	ldrb	r3, [r3, #0]
 8006c78:	009b      	lsls	r3, r3, #2
 8006c7a:	4413      	add	r3, r2
 8006c7c:	881b      	ldrh	r3, [r3, #0]
 8006c7e:	b29b      	uxth	r3, r3
 8006c80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c88:	837b      	strh	r3, [r7, #26]
 8006c8a:	687a      	ldr	r2, [r7, #4]
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	781b      	ldrb	r3, [r3, #0]
 8006c90:	009b      	lsls	r3, r3, #2
 8006c92:	441a      	add	r2, r3
 8006c94:	8b7b      	ldrh	r3, [r7, #26]
 8006c96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ca2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006ca6:	b29b      	uxth	r3, r3
 8006ca8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006caa:	687a      	ldr	r2, [r7, #4]
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	781b      	ldrb	r3, [r3, #0]
 8006cb0:	009b      	lsls	r3, r3, #2
 8006cb2:	4413      	add	r3, r2
 8006cb4:	881b      	ldrh	r3, [r3, #0]
 8006cb6:	b29b      	uxth	r3, r3
 8006cb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cc0:	833b      	strh	r3, [r7, #24]
 8006cc2:	687a      	ldr	r2, [r7, #4]
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	781b      	ldrb	r3, [r3, #0]
 8006cc8:	009b      	lsls	r3, r3, #2
 8006cca:	441a      	add	r2, r3
 8006ccc:	8b3b      	ldrh	r3, [r7, #24]
 8006cce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cda:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006cde:	b29b      	uxth	r3, r3
 8006ce0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006ce2:	687a      	ldr	r2, [r7, #4]
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	781b      	ldrb	r3, [r3, #0]
 8006ce8:	009b      	lsls	r3, r3, #2
 8006cea:	4413      	add	r3, r2
 8006cec:	881b      	ldrh	r3, [r3, #0]
 8006cee:	b29b      	uxth	r3, r3
 8006cf0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006cf4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cf8:	82fb      	strh	r3, [r7, #22]
 8006cfa:	687a      	ldr	r2, [r7, #4]
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	781b      	ldrb	r3, [r3, #0]
 8006d00:	009b      	lsls	r3, r3, #2
 8006d02:	441a      	add	r2, r3
 8006d04:	8afb      	ldrh	r3, [r7, #22]
 8006d06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d16:	b29b      	uxth	r3, r3
 8006d18:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006d1a:	687a      	ldr	r2, [r7, #4]
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	781b      	ldrb	r3, [r3, #0]
 8006d20:	009b      	lsls	r3, r3, #2
 8006d22:	4413      	add	r3, r2
 8006d24:	881b      	ldrh	r3, [r3, #0]
 8006d26:	b29b      	uxth	r3, r3
 8006d28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d30:	82bb      	strh	r3, [r7, #20]
 8006d32:	687a      	ldr	r2, [r7, #4]
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	781b      	ldrb	r3, [r3, #0]
 8006d38:	009b      	lsls	r3, r3, #2
 8006d3a:	441a      	add	r2, r3
 8006d3c:	8abb      	ldrh	r3, [r7, #20]
 8006d3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d4e:	b29b      	uxth	r3, r3
 8006d50:	8013      	strh	r3, [r2, #0]
 8006d52:	e0a3      	b.n	8006e9c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006d54:	687a      	ldr	r2, [r7, #4]
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	781b      	ldrb	r3, [r3, #0]
 8006d5a:	009b      	lsls	r3, r3, #2
 8006d5c:	4413      	add	r3, r2
 8006d5e:	881b      	ldrh	r3, [r3, #0]
 8006d60:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006d62:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006d64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d01b      	beq.n	8006da4 <USB_DeactivateEndpoint+0x2d4>
 8006d6c:	687a      	ldr	r2, [r7, #4]
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	781b      	ldrb	r3, [r3, #0]
 8006d72:	009b      	lsls	r3, r3, #2
 8006d74:	4413      	add	r3, r2
 8006d76:	881b      	ldrh	r3, [r3, #0]
 8006d78:	b29b      	uxth	r3, r3
 8006d7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d82:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006d84:	687a      	ldr	r2, [r7, #4]
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	781b      	ldrb	r3, [r3, #0]
 8006d8a:	009b      	lsls	r3, r3, #2
 8006d8c:	441a      	add	r2, r3
 8006d8e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006d90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006d9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006da0:	b29b      	uxth	r3, r3
 8006da2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006da4:	687a      	ldr	r2, [r7, #4]
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	781b      	ldrb	r3, [r3, #0]
 8006daa:	009b      	lsls	r3, r3, #2
 8006dac:	4413      	add	r3, r2
 8006dae:	881b      	ldrh	r3, [r3, #0]
 8006db0:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006db2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006db4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d01b      	beq.n	8006df4 <USB_DeactivateEndpoint+0x324>
 8006dbc:	687a      	ldr	r2, [r7, #4]
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	781b      	ldrb	r3, [r3, #0]
 8006dc2:	009b      	lsls	r3, r3, #2
 8006dc4:	4413      	add	r3, r2
 8006dc6:	881b      	ldrh	r3, [r3, #0]
 8006dc8:	b29b      	uxth	r3, r3
 8006dca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dd2:	853b      	strh	r3, [r7, #40]	; 0x28
 8006dd4:	687a      	ldr	r2, [r7, #4]
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	781b      	ldrb	r3, [r3, #0]
 8006dda:	009b      	lsls	r3, r3, #2
 8006ddc:	441a      	add	r2, r3
 8006dde:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006de0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006de4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006de8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006df0:	b29b      	uxth	r3, r3
 8006df2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006df4:	687a      	ldr	r2, [r7, #4]
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	781b      	ldrb	r3, [r3, #0]
 8006dfa:	009b      	lsls	r3, r3, #2
 8006dfc:	4413      	add	r3, r2
 8006dfe:	881b      	ldrh	r3, [r3, #0]
 8006e00:	b29b      	uxth	r3, r3
 8006e02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e0a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006e0c:	687a      	ldr	r2, [r7, #4]
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	781b      	ldrb	r3, [r3, #0]
 8006e12:	009b      	lsls	r3, r3, #2
 8006e14:	441a      	add	r2, r3
 8006e16:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006e18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006e24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e28:	b29b      	uxth	r3, r3
 8006e2a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006e2c:	687a      	ldr	r2, [r7, #4]
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	781b      	ldrb	r3, [r3, #0]
 8006e32:	009b      	lsls	r3, r3, #2
 8006e34:	4413      	add	r3, r2
 8006e36:	881b      	ldrh	r3, [r3, #0]
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e42:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006e44:	687a      	ldr	r2, [r7, #4]
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	781b      	ldrb	r3, [r3, #0]
 8006e4a:	009b      	lsls	r3, r3, #2
 8006e4c:	441a      	add	r2, r3
 8006e4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006e50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e60:	b29b      	uxth	r3, r3
 8006e62:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006e64:	687a      	ldr	r2, [r7, #4]
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	781b      	ldrb	r3, [r3, #0]
 8006e6a:	009b      	lsls	r3, r3, #2
 8006e6c:	4413      	add	r3, r2
 8006e6e:	881b      	ldrh	r3, [r3, #0]
 8006e70:	b29b      	uxth	r3, r3
 8006e72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e7a:	847b      	strh	r3, [r7, #34]	; 0x22
 8006e7c:	687a      	ldr	r2, [r7, #4]
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	781b      	ldrb	r3, [r3, #0]
 8006e82:	009b      	lsls	r3, r3, #2
 8006e84:	441a      	add	r2, r3
 8006e86:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006e88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e98:	b29b      	uxth	r3, r3
 8006e9a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006e9c:	2300      	movs	r3, #0
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	3734      	adds	r7, #52	; 0x34
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea8:	4770      	bx	lr

08006eaa <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006eaa:	b580      	push	{r7, lr}
 8006eac:	b0c2      	sub	sp, #264	; 0x108
 8006eae:	af00      	add	r7, sp, #0
 8006eb0:	1d3b      	adds	r3, r7, #4
 8006eb2:	6018      	str	r0, [r3, #0]
 8006eb4:	463b      	mov	r3, r7
 8006eb6:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006eb8:	463b      	mov	r3, r7
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	785b      	ldrb	r3, [r3, #1]
 8006ebe:	2b01      	cmp	r3, #1
 8006ec0:	f040 8509 	bne.w	80078d6 <USB_EPStartXfer+0xa2c>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006ec4:	463b      	mov	r3, r7
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	699a      	ldr	r2, [r3, #24]
 8006eca:	463b      	mov	r3, r7
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	691b      	ldr	r3, [r3, #16]
 8006ed0:	429a      	cmp	r2, r3
 8006ed2:	d905      	bls.n	8006ee0 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8006ed4:	463b      	mov	r3, r7
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	691b      	ldr	r3, [r3, #16]
 8006eda:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006ede:	e004      	b.n	8006eea <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8006ee0:	463b      	mov	r3, r7
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	699b      	ldr	r3, [r3, #24]
 8006ee6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006eea:	463b      	mov	r3, r7
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	7b1b      	ldrb	r3, [r3, #12]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d128      	bne.n	8006f46 <USB_EPStartXfer+0x9c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006ef4:	463b      	mov	r3, r7
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	6959      	ldr	r1, [r3, #20]
 8006efa:	463b      	mov	r3, r7
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	88da      	ldrh	r2, [r3, #6]
 8006f00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f04:	b29b      	uxth	r3, r3
 8006f06:	1d38      	adds	r0, r7, #4
 8006f08:	6800      	ldr	r0, [r0, #0]
 8006f0a:	f001 f9ce 	bl	80082aa <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006f0e:	1d3b      	adds	r3, r7, #4
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	613b      	str	r3, [r7, #16]
 8006f14:	1d3b      	adds	r3, r7, #4
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f1c:	b29b      	uxth	r3, r3
 8006f1e:	461a      	mov	r2, r3
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	4413      	add	r3, r2
 8006f24:	613b      	str	r3, [r7, #16]
 8006f26:	463b      	mov	r3, r7
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	781b      	ldrb	r3, [r3, #0]
 8006f2c:	011a      	lsls	r2, r3, #4
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	4413      	add	r3, r2
 8006f32:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006f36:	60fb      	str	r3, [r7, #12]
 8006f38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f3c:	b29a      	uxth	r2, r3
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	801a      	strh	r2, [r3, #0]
 8006f42:	f000 bc9f 	b.w	8007884 <USB_EPStartXfer+0x9da>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006f46:	463b      	mov	r3, r7
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	78db      	ldrb	r3, [r3, #3]
 8006f4c:	2b02      	cmp	r3, #2
 8006f4e:	f040 8347 	bne.w	80075e0 <USB_EPStartXfer+0x736>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006f52:	463b      	mov	r3, r7
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	6a1a      	ldr	r2, [r3, #32]
 8006f58:	463b      	mov	r3, r7
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	691b      	ldr	r3, [r3, #16]
 8006f5e:	429a      	cmp	r2, r3
 8006f60:	f240 82eb 	bls.w	800753a <USB_EPStartXfer+0x690>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006f64:	1d3b      	adds	r3, r7, #4
 8006f66:	681a      	ldr	r2, [r3, #0]
 8006f68:	463b      	mov	r3, r7
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	781b      	ldrb	r3, [r3, #0]
 8006f6e:	009b      	lsls	r3, r3, #2
 8006f70:	4413      	add	r3, r2
 8006f72:	881b      	ldrh	r3, [r3, #0]
 8006f74:	b29b      	uxth	r3, r3
 8006f76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f7e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8006f82:	1d3b      	adds	r3, r7, #4
 8006f84:	681a      	ldr	r2, [r3, #0]
 8006f86:	463b      	mov	r3, r7
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	781b      	ldrb	r3, [r3, #0]
 8006f8c:	009b      	lsls	r3, r3, #2
 8006f8e:	441a      	add	r2, r3
 8006f90:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006f94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f9c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006fa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fa4:	b29b      	uxth	r3, r3
 8006fa6:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006fa8:	463b      	mov	r3, r7
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	6a1a      	ldr	r2, [r3, #32]
 8006fae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fb2:	1ad2      	subs	r2, r2, r3
 8006fb4:	463b      	mov	r3, r7
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006fba:	1d3b      	adds	r3, r7, #4
 8006fbc:	681a      	ldr	r2, [r3, #0]
 8006fbe:	463b      	mov	r3, r7
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	781b      	ldrb	r3, [r3, #0]
 8006fc4:	009b      	lsls	r3, r3, #2
 8006fc6:	4413      	add	r3, r2
 8006fc8:	881b      	ldrh	r3, [r3, #0]
 8006fca:	b29b      	uxth	r3, r3
 8006fcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	f000 8159 	beq.w	8007288 <USB_EPStartXfer+0x3de>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006fd6:	1d3b      	adds	r3, r7, #4
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	633b      	str	r3, [r7, #48]	; 0x30
 8006fdc:	463b      	mov	r3, r7
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	785b      	ldrb	r3, [r3, #1]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d164      	bne.n	80070b0 <USB_EPStartXfer+0x206>
 8006fe6:	1d3b      	adds	r3, r7, #4
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	62bb      	str	r3, [r7, #40]	; 0x28
 8006fec:	1d3b      	adds	r3, r7, #4
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ff4:	b29b      	uxth	r3, r3
 8006ff6:	461a      	mov	r2, r3
 8006ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ffa:	4413      	add	r3, r2
 8006ffc:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ffe:	463b      	mov	r3, r7
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	781b      	ldrb	r3, [r3, #0]
 8007004:	011a      	lsls	r2, r3, #4
 8007006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007008:	4413      	add	r3, r2
 800700a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800700e:	627b      	str	r3, [r7, #36]	; 0x24
 8007010:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007014:	2b00      	cmp	r3, #0
 8007016:	d112      	bne.n	800703e <USB_EPStartXfer+0x194>
 8007018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800701a:	881b      	ldrh	r3, [r3, #0]
 800701c:	b29b      	uxth	r3, r3
 800701e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007022:	b29a      	uxth	r2, r3
 8007024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007026:	801a      	strh	r2, [r3, #0]
 8007028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800702a:	881b      	ldrh	r3, [r3, #0]
 800702c:	b29b      	uxth	r3, r3
 800702e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007032:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007036:	b29a      	uxth	r2, r3
 8007038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800703a:	801a      	strh	r2, [r3, #0]
 800703c:	e054      	b.n	80070e8 <USB_EPStartXfer+0x23e>
 800703e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007042:	2b3e      	cmp	r3, #62	; 0x3e
 8007044:	d817      	bhi.n	8007076 <USB_EPStartXfer+0x1cc>
 8007046:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800704a:	085b      	lsrs	r3, r3, #1
 800704c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007050:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007054:	f003 0301 	and.w	r3, r3, #1
 8007058:	2b00      	cmp	r3, #0
 800705a:	d004      	beq.n	8007066 <USB_EPStartXfer+0x1bc>
 800705c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007060:	3301      	adds	r3, #1
 8007062:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007066:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800706a:	b29b      	uxth	r3, r3
 800706c:	029b      	lsls	r3, r3, #10
 800706e:	b29a      	uxth	r2, r3
 8007070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007072:	801a      	strh	r2, [r3, #0]
 8007074:	e038      	b.n	80070e8 <USB_EPStartXfer+0x23e>
 8007076:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800707a:	095b      	lsrs	r3, r3, #5
 800707c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007080:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007084:	f003 031f 	and.w	r3, r3, #31
 8007088:	2b00      	cmp	r3, #0
 800708a:	d104      	bne.n	8007096 <USB_EPStartXfer+0x1ec>
 800708c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007090:	3b01      	subs	r3, #1
 8007092:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007096:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800709a:	b29b      	uxth	r3, r3
 800709c:	029b      	lsls	r3, r3, #10
 800709e:	b29b      	uxth	r3, r3
 80070a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070a8:	b29a      	uxth	r2, r3
 80070aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ac:	801a      	strh	r2, [r3, #0]
 80070ae:	e01b      	b.n	80070e8 <USB_EPStartXfer+0x23e>
 80070b0:	463b      	mov	r3, r7
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	785b      	ldrb	r3, [r3, #1]
 80070b6:	2b01      	cmp	r3, #1
 80070b8:	d116      	bne.n	80070e8 <USB_EPStartXfer+0x23e>
 80070ba:	1d3b      	adds	r3, r7, #4
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070c2:	b29b      	uxth	r3, r3
 80070c4:	461a      	mov	r2, r3
 80070c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070c8:	4413      	add	r3, r2
 80070ca:	633b      	str	r3, [r7, #48]	; 0x30
 80070cc:	463b      	mov	r3, r7
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	781b      	ldrb	r3, [r3, #0]
 80070d2:	011a      	lsls	r2, r3, #4
 80070d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070d6:	4413      	add	r3, r2
 80070d8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80070dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80070de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070e2:	b29a      	uxth	r2, r3
 80070e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070e6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80070e8:	463b      	mov	r3, r7
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	895b      	ldrh	r3, [r3, #10]
 80070ee:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80070f2:	463b      	mov	r3, r7
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	6959      	ldr	r1, [r3, #20]
 80070f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070fc:	b29b      	uxth	r3, r3
 80070fe:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007102:	1d38      	adds	r0, r7, #4
 8007104:	6800      	ldr	r0, [r0, #0]
 8007106:	f001 f8d0 	bl	80082aa <USB_WritePMA>
            ep->xfer_buff += len;
 800710a:	463b      	mov	r3, r7
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	695a      	ldr	r2, [r3, #20]
 8007110:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007114:	441a      	add	r2, r3
 8007116:	463b      	mov	r3, r7
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800711c:	463b      	mov	r3, r7
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	6a1a      	ldr	r2, [r3, #32]
 8007122:	463b      	mov	r3, r7
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	691b      	ldr	r3, [r3, #16]
 8007128:	429a      	cmp	r2, r3
 800712a:	d909      	bls.n	8007140 <USB_EPStartXfer+0x296>
            {
              ep->xfer_len_db -= len;
 800712c:	463b      	mov	r3, r7
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	6a1a      	ldr	r2, [r3, #32]
 8007132:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007136:	1ad2      	subs	r2, r2, r3
 8007138:	463b      	mov	r3, r7
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	621a      	str	r2, [r3, #32]
 800713e:	e008      	b.n	8007152 <USB_EPStartXfer+0x2a8>
            }
            else
            {
              len = ep->xfer_len_db;
 8007140:	463b      	mov	r3, r7
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	6a1b      	ldr	r3, [r3, #32]
 8007146:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800714a:	463b      	mov	r3, r7
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	2200      	movs	r2, #0
 8007150:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007152:	463b      	mov	r3, r7
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	785b      	ldrb	r3, [r3, #1]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d164      	bne.n	8007226 <USB_EPStartXfer+0x37c>
 800715c:	1d3b      	adds	r3, r7, #4
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	61bb      	str	r3, [r7, #24]
 8007162:	1d3b      	adds	r3, r7, #4
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800716a:	b29b      	uxth	r3, r3
 800716c:	461a      	mov	r2, r3
 800716e:	69bb      	ldr	r3, [r7, #24]
 8007170:	4413      	add	r3, r2
 8007172:	61bb      	str	r3, [r7, #24]
 8007174:	463b      	mov	r3, r7
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	781b      	ldrb	r3, [r3, #0]
 800717a:	011a      	lsls	r2, r3, #4
 800717c:	69bb      	ldr	r3, [r7, #24]
 800717e:	4413      	add	r3, r2
 8007180:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007184:	617b      	str	r3, [r7, #20]
 8007186:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800718a:	2b00      	cmp	r3, #0
 800718c:	d112      	bne.n	80071b4 <USB_EPStartXfer+0x30a>
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	881b      	ldrh	r3, [r3, #0]
 8007192:	b29b      	uxth	r3, r3
 8007194:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007198:	b29a      	uxth	r2, r3
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	801a      	strh	r2, [r3, #0]
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	881b      	ldrh	r3, [r3, #0]
 80071a2:	b29b      	uxth	r3, r3
 80071a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071ac:	b29a      	uxth	r2, r3
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	801a      	strh	r2, [r3, #0]
 80071b2:	e057      	b.n	8007264 <USB_EPStartXfer+0x3ba>
 80071b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071b8:	2b3e      	cmp	r3, #62	; 0x3e
 80071ba:	d817      	bhi.n	80071ec <USB_EPStartXfer+0x342>
 80071bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071c0:	085b      	lsrs	r3, r3, #1
 80071c2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80071c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071ca:	f003 0301 	and.w	r3, r3, #1
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d004      	beq.n	80071dc <USB_EPStartXfer+0x332>
 80071d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80071d6:	3301      	adds	r3, #1
 80071d8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80071dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80071e0:	b29b      	uxth	r3, r3
 80071e2:	029b      	lsls	r3, r3, #10
 80071e4:	b29a      	uxth	r2, r3
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	801a      	strh	r2, [r3, #0]
 80071ea:	e03b      	b.n	8007264 <USB_EPStartXfer+0x3ba>
 80071ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071f0:	095b      	lsrs	r3, r3, #5
 80071f2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80071f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071fa:	f003 031f 	and.w	r3, r3, #31
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d104      	bne.n	800720c <USB_EPStartXfer+0x362>
 8007202:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007206:	3b01      	subs	r3, #1
 8007208:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800720c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007210:	b29b      	uxth	r3, r3
 8007212:	029b      	lsls	r3, r3, #10
 8007214:	b29b      	uxth	r3, r3
 8007216:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800721a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800721e:	b29a      	uxth	r2, r3
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	801a      	strh	r2, [r3, #0]
 8007224:	e01e      	b.n	8007264 <USB_EPStartXfer+0x3ba>
 8007226:	463b      	mov	r3, r7
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	785b      	ldrb	r3, [r3, #1]
 800722c:	2b01      	cmp	r3, #1
 800722e:	d119      	bne.n	8007264 <USB_EPStartXfer+0x3ba>
 8007230:	1d3b      	adds	r3, r7, #4
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	623b      	str	r3, [r7, #32]
 8007236:	1d3b      	adds	r3, r7, #4
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800723e:	b29b      	uxth	r3, r3
 8007240:	461a      	mov	r2, r3
 8007242:	6a3b      	ldr	r3, [r7, #32]
 8007244:	4413      	add	r3, r2
 8007246:	623b      	str	r3, [r7, #32]
 8007248:	463b      	mov	r3, r7
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	781b      	ldrb	r3, [r3, #0]
 800724e:	011a      	lsls	r2, r3, #4
 8007250:	6a3b      	ldr	r3, [r7, #32]
 8007252:	4413      	add	r3, r2
 8007254:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007258:	61fb      	str	r3, [r7, #28]
 800725a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800725e:	b29a      	uxth	r2, r3
 8007260:	69fb      	ldr	r3, [r7, #28]
 8007262:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007264:	463b      	mov	r3, r7
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	891b      	ldrh	r3, [r3, #8]
 800726a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800726e:	463b      	mov	r3, r7
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	6959      	ldr	r1, [r3, #20]
 8007274:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007278:	b29b      	uxth	r3, r3
 800727a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800727e:	1d38      	adds	r0, r7, #4
 8007280:	6800      	ldr	r0, [r0, #0]
 8007282:	f001 f812 	bl	80082aa <USB_WritePMA>
 8007286:	e2fd      	b.n	8007884 <USB_EPStartXfer+0x9da>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007288:	463b      	mov	r3, r7
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	785b      	ldrb	r3, [r3, #1]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d164      	bne.n	800735c <USB_EPStartXfer+0x4b2>
 8007292:	1d3b      	adds	r3, r7, #4
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	64bb      	str	r3, [r7, #72]	; 0x48
 8007298:	1d3b      	adds	r3, r7, #4
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072a0:	b29b      	uxth	r3, r3
 80072a2:	461a      	mov	r2, r3
 80072a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80072a6:	4413      	add	r3, r2
 80072a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80072aa:	463b      	mov	r3, r7
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	781b      	ldrb	r3, [r3, #0]
 80072b0:	011a      	lsls	r2, r3, #4
 80072b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80072b4:	4413      	add	r3, r2
 80072b6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80072ba:	647b      	str	r3, [r7, #68]	; 0x44
 80072bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d112      	bne.n	80072ea <USB_EPStartXfer+0x440>
 80072c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072c6:	881b      	ldrh	r3, [r3, #0]
 80072c8:	b29b      	uxth	r3, r3
 80072ca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80072ce:	b29a      	uxth	r2, r3
 80072d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072d2:	801a      	strh	r2, [r3, #0]
 80072d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072d6:	881b      	ldrh	r3, [r3, #0]
 80072d8:	b29b      	uxth	r3, r3
 80072da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072e2:	b29a      	uxth	r2, r3
 80072e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072e6:	801a      	strh	r2, [r3, #0]
 80072e8:	e057      	b.n	800739a <USB_EPStartXfer+0x4f0>
 80072ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072ee:	2b3e      	cmp	r3, #62	; 0x3e
 80072f0:	d817      	bhi.n	8007322 <USB_EPStartXfer+0x478>
 80072f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072f6:	085b      	lsrs	r3, r3, #1
 80072f8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80072fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007300:	f003 0301 	and.w	r3, r3, #1
 8007304:	2b00      	cmp	r3, #0
 8007306:	d004      	beq.n	8007312 <USB_EPStartXfer+0x468>
 8007308:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800730c:	3301      	adds	r3, #1
 800730e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007312:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007316:	b29b      	uxth	r3, r3
 8007318:	029b      	lsls	r3, r3, #10
 800731a:	b29a      	uxth	r2, r3
 800731c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800731e:	801a      	strh	r2, [r3, #0]
 8007320:	e03b      	b.n	800739a <USB_EPStartXfer+0x4f0>
 8007322:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007326:	095b      	lsrs	r3, r3, #5
 8007328:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800732c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007330:	f003 031f 	and.w	r3, r3, #31
 8007334:	2b00      	cmp	r3, #0
 8007336:	d104      	bne.n	8007342 <USB_EPStartXfer+0x498>
 8007338:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800733c:	3b01      	subs	r3, #1
 800733e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007342:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007346:	b29b      	uxth	r3, r3
 8007348:	029b      	lsls	r3, r3, #10
 800734a:	b29b      	uxth	r3, r3
 800734c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007350:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007354:	b29a      	uxth	r2, r3
 8007356:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007358:	801a      	strh	r2, [r3, #0]
 800735a:	e01e      	b.n	800739a <USB_EPStartXfer+0x4f0>
 800735c:	463b      	mov	r3, r7
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	785b      	ldrb	r3, [r3, #1]
 8007362:	2b01      	cmp	r3, #1
 8007364:	d119      	bne.n	800739a <USB_EPStartXfer+0x4f0>
 8007366:	1d3b      	adds	r3, r7, #4
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	653b      	str	r3, [r7, #80]	; 0x50
 800736c:	1d3b      	adds	r3, r7, #4
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007374:	b29b      	uxth	r3, r3
 8007376:	461a      	mov	r2, r3
 8007378:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800737a:	4413      	add	r3, r2
 800737c:	653b      	str	r3, [r7, #80]	; 0x50
 800737e:	463b      	mov	r3, r7
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	781b      	ldrb	r3, [r3, #0]
 8007384:	011a      	lsls	r2, r3, #4
 8007386:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007388:	4413      	add	r3, r2
 800738a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800738e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007390:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007394:	b29a      	uxth	r2, r3
 8007396:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007398:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800739a:	463b      	mov	r3, r7
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	891b      	ldrh	r3, [r3, #8]
 80073a0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80073a4:	463b      	mov	r3, r7
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	6959      	ldr	r1, [r3, #20]
 80073aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073ae:	b29b      	uxth	r3, r3
 80073b0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80073b4:	1d38      	adds	r0, r7, #4
 80073b6:	6800      	ldr	r0, [r0, #0]
 80073b8:	f000 ff77 	bl	80082aa <USB_WritePMA>
            ep->xfer_buff += len;
 80073bc:	463b      	mov	r3, r7
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	695a      	ldr	r2, [r3, #20]
 80073c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073c6:	441a      	add	r2, r3
 80073c8:	463b      	mov	r3, r7
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80073ce:	463b      	mov	r3, r7
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	6a1a      	ldr	r2, [r3, #32]
 80073d4:	463b      	mov	r3, r7
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	691b      	ldr	r3, [r3, #16]
 80073da:	429a      	cmp	r2, r3
 80073dc:	d909      	bls.n	80073f2 <USB_EPStartXfer+0x548>
            {
              ep->xfer_len_db -= len;
 80073de:	463b      	mov	r3, r7
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	6a1a      	ldr	r2, [r3, #32]
 80073e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073e8:	1ad2      	subs	r2, r2, r3
 80073ea:	463b      	mov	r3, r7
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	621a      	str	r2, [r3, #32]
 80073f0:	e008      	b.n	8007404 <USB_EPStartXfer+0x55a>
            }
            else
            {
              len = ep->xfer_len_db;
 80073f2:	463b      	mov	r3, r7
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	6a1b      	ldr	r3, [r3, #32]
 80073f8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80073fc:	463b      	mov	r3, r7
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	2200      	movs	r2, #0
 8007402:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007404:	1d3b      	adds	r3, r7, #4
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	643b      	str	r3, [r7, #64]	; 0x40
 800740a:	463b      	mov	r3, r7
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	785b      	ldrb	r3, [r3, #1]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d164      	bne.n	80074de <USB_EPStartXfer+0x634>
 8007414:	1d3b      	adds	r3, r7, #4
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	63bb      	str	r3, [r7, #56]	; 0x38
 800741a:	1d3b      	adds	r3, r7, #4
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007422:	b29b      	uxth	r3, r3
 8007424:	461a      	mov	r2, r3
 8007426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007428:	4413      	add	r3, r2
 800742a:	63bb      	str	r3, [r7, #56]	; 0x38
 800742c:	463b      	mov	r3, r7
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	781b      	ldrb	r3, [r3, #0]
 8007432:	011a      	lsls	r2, r3, #4
 8007434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007436:	4413      	add	r3, r2
 8007438:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800743c:	637b      	str	r3, [r7, #52]	; 0x34
 800743e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007442:	2b00      	cmp	r3, #0
 8007444:	d112      	bne.n	800746c <USB_EPStartXfer+0x5c2>
 8007446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007448:	881b      	ldrh	r3, [r3, #0]
 800744a:	b29b      	uxth	r3, r3
 800744c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007450:	b29a      	uxth	r2, r3
 8007452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007454:	801a      	strh	r2, [r3, #0]
 8007456:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007458:	881b      	ldrh	r3, [r3, #0]
 800745a:	b29b      	uxth	r3, r3
 800745c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007460:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007464:	b29a      	uxth	r2, r3
 8007466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007468:	801a      	strh	r2, [r3, #0]
 800746a:	e054      	b.n	8007516 <USB_EPStartXfer+0x66c>
 800746c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007470:	2b3e      	cmp	r3, #62	; 0x3e
 8007472:	d817      	bhi.n	80074a4 <USB_EPStartXfer+0x5fa>
 8007474:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007478:	085b      	lsrs	r3, r3, #1
 800747a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800747e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007482:	f003 0301 	and.w	r3, r3, #1
 8007486:	2b00      	cmp	r3, #0
 8007488:	d004      	beq.n	8007494 <USB_EPStartXfer+0x5ea>
 800748a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800748e:	3301      	adds	r3, #1
 8007490:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007498:	b29b      	uxth	r3, r3
 800749a:	029b      	lsls	r3, r3, #10
 800749c:	b29a      	uxth	r2, r3
 800749e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074a0:	801a      	strh	r2, [r3, #0]
 80074a2:	e038      	b.n	8007516 <USB_EPStartXfer+0x66c>
 80074a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074a8:	095b      	lsrs	r3, r3, #5
 80074aa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80074ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074b2:	f003 031f 	and.w	r3, r3, #31
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d104      	bne.n	80074c4 <USB_EPStartXfer+0x61a>
 80074ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074be:	3b01      	subs	r3, #1
 80074c0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80074c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074c8:	b29b      	uxth	r3, r3
 80074ca:	029b      	lsls	r3, r3, #10
 80074cc:	b29b      	uxth	r3, r3
 80074ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074d6:	b29a      	uxth	r2, r3
 80074d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074da:	801a      	strh	r2, [r3, #0]
 80074dc:	e01b      	b.n	8007516 <USB_EPStartXfer+0x66c>
 80074de:	463b      	mov	r3, r7
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	785b      	ldrb	r3, [r3, #1]
 80074e4:	2b01      	cmp	r3, #1
 80074e6:	d116      	bne.n	8007516 <USB_EPStartXfer+0x66c>
 80074e8:	1d3b      	adds	r3, r7, #4
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074f0:	b29b      	uxth	r3, r3
 80074f2:	461a      	mov	r2, r3
 80074f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074f6:	4413      	add	r3, r2
 80074f8:	643b      	str	r3, [r7, #64]	; 0x40
 80074fa:	463b      	mov	r3, r7
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	781b      	ldrb	r3, [r3, #0]
 8007500:	011a      	lsls	r2, r3, #4
 8007502:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007504:	4413      	add	r3, r2
 8007506:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800750a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800750c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007510:	b29a      	uxth	r2, r3
 8007512:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007514:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007516:	463b      	mov	r3, r7
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	895b      	ldrh	r3, [r3, #10]
 800751c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007520:	463b      	mov	r3, r7
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	6959      	ldr	r1, [r3, #20]
 8007526:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800752a:	b29b      	uxth	r3, r3
 800752c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007530:	1d38      	adds	r0, r7, #4
 8007532:	6800      	ldr	r0, [r0, #0]
 8007534:	f000 feb9 	bl	80082aa <USB_WritePMA>
 8007538:	e1a4      	b.n	8007884 <USB_EPStartXfer+0x9da>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800753a:	463b      	mov	r3, r7
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	6a1b      	ldr	r3, [r3, #32]
 8007540:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007544:	1d3b      	adds	r3, r7, #4
 8007546:	681a      	ldr	r2, [r3, #0]
 8007548:	463b      	mov	r3, r7
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	781b      	ldrb	r3, [r3, #0]
 800754e:	009b      	lsls	r3, r3, #2
 8007550:	4413      	add	r3, r2
 8007552:	881b      	ldrh	r3, [r3, #0]
 8007554:	b29b      	uxth	r3, r3
 8007556:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800755a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800755e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8007562:	1d3b      	adds	r3, r7, #4
 8007564:	681a      	ldr	r2, [r3, #0]
 8007566:	463b      	mov	r3, r7
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	781b      	ldrb	r3, [r3, #0]
 800756c:	009b      	lsls	r3, r3, #2
 800756e:	441a      	add	r2, r3
 8007570:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007574:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007578:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800757c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007580:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007584:	b29b      	uxth	r3, r3
 8007586:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007588:	1d3b      	adds	r3, r7, #4
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800758e:	1d3b      	adds	r3, r7, #4
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007596:	b29b      	uxth	r3, r3
 8007598:	461a      	mov	r2, r3
 800759a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800759c:	4413      	add	r3, r2
 800759e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80075a0:	463b      	mov	r3, r7
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	781b      	ldrb	r3, [r3, #0]
 80075a6:	011a      	lsls	r2, r3, #4
 80075a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80075aa:	4413      	add	r3, r2
 80075ac:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80075b0:	65bb      	str	r3, [r7, #88]	; 0x58
 80075b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075b6:	b29a      	uxth	r2, r3
 80075b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80075ba:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80075bc:	463b      	mov	r3, r7
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	891b      	ldrh	r3, [r3, #8]
 80075c2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80075c6:	463b      	mov	r3, r7
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	6959      	ldr	r1, [r3, #20]
 80075cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075d0:	b29b      	uxth	r3, r3
 80075d2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80075d6:	1d38      	adds	r0, r7, #4
 80075d8:	6800      	ldr	r0, [r0, #0]
 80075da:	f000 fe66 	bl	80082aa <USB_WritePMA>
 80075de:	e151      	b.n	8007884 <USB_EPStartXfer+0x9da>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80075e0:	463b      	mov	r3, r7
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	6a1a      	ldr	r2, [r3, #32]
 80075e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075ea:	1ad2      	subs	r2, r2, r3
 80075ec:	463b      	mov	r3, r7
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80075f2:	1d3b      	adds	r3, r7, #4
 80075f4:	681a      	ldr	r2, [r3, #0]
 80075f6:	463b      	mov	r3, r7
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	781b      	ldrb	r3, [r3, #0]
 80075fc:	009b      	lsls	r3, r3, #2
 80075fe:	4413      	add	r3, r2
 8007600:	881b      	ldrh	r3, [r3, #0]
 8007602:	b29b      	uxth	r3, r3
 8007604:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007608:	2b00      	cmp	r3, #0
 800760a:	f000 809b 	beq.w	8007744 <USB_EPStartXfer+0x89a>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800760e:	1d3b      	adds	r3, r7, #4
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	673b      	str	r3, [r7, #112]	; 0x70
 8007614:	463b      	mov	r3, r7
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	785b      	ldrb	r3, [r3, #1]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d164      	bne.n	80076e8 <USB_EPStartXfer+0x83e>
 800761e:	1d3b      	adds	r3, r7, #4
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	66bb      	str	r3, [r7, #104]	; 0x68
 8007624:	1d3b      	adds	r3, r7, #4
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800762c:	b29b      	uxth	r3, r3
 800762e:	461a      	mov	r2, r3
 8007630:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007632:	4413      	add	r3, r2
 8007634:	66bb      	str	r3, [r7, #104]	; 0x68
 8007636:	463b      	mov	r3, r7
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	781b      	ldrb	r3, [r3, #0]
 800763c:	011a      	lsls	r2, r3, #4
 800763e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007640:	4413      	add	r3, r2
 8007642:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007646:	667b      	str	r3, [r7, #100]	; 0x64
 8007648:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800764c:	2b00      	cmp	r3, #0
 800764e:	d112      	bne.n	8007676 <USB_EPStartXfer+0x7cc>
 8007650:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007652:	881b      	ldrh	r3, [r3, #0]
 8007654:	b29b      	uxth	r3, r3
 8007656:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800765a:	b29a      	uxth	r2, r3
 800765c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800765e:	801a      	strh	r2, [r3, #0]
 8007660:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007662:	881b      	ldrh	r3, [r3, #0]
 8007664:	b29b      	uxth	r3, r3
 8007666:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800766a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800766e:	b29a      	uxth	r2, r3
 8007670:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007672:	801a      	strh	r2, [r3, #0]
 8007674:	e054      	b.n	8007720 <USB_EPStartXfer+0x876>
 8007676:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800767a:	2b3e      	cmp	r3, #62	; 0x3e
 800767c:	d817      	bhi.n	80076ae <USB_EPStartXfer+0x804>
 800767e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007682:	085b      	lsrs	r3, r3, #1
 8007684:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007688:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800768c:	f003 0301 	and.w	r3, r3, #1
 8007690:	2b00      	cmp	r3, #0
 8007692:	d004      	beq.n	800769e <USB_EPStartXfer+0x7f4>
 8007694:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007698:	3301      	adds	r3, #1
 800769a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800769e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80076a2:	b29b      	uxth	r3, r3
 80076a4:	029b      	lsls	r3, r3, #10
 80076a6:	b29a      	uxth	r2, r3
 80076a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80076aa:	801a      	strh	r2, [r3, #0]
 80076ac:	e038      	b.n	8007720 <USB_EPStartXfer+0x876>
 80076ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076b2:	095b      	lsrs	r3, r3, #5
 80076b4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80076b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076bc:	f003 031f 	and.w	r3, r3, #31
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d104      	bne.n	80076ce <USB_EPStartXfer+0x824>
 80076c4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80076c8:	3b01      	subs	r3, #1
 80076ca:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80076ce:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80076d2:	b29b      	uxth	r3, r3
 80076d4:	029b      	lsls	r3, r3, #10
 80076d6:	b29b      	uxth	r3, r3
 80076d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076e0:	b29a      	uxth	r2, r3
 80076e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80076e4:	801a      	strh	r2, [r3, #0]
 80076e6:	e01b      	b.n	8007720 <USB_EPStartXfer+0x876>
 80076e8:	463b      	mov	r3, r7
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	785b      	ldrb	r3, [r3, #1]
 80076ee:	2b01      	cmp	r3, #1
 80076f0:	d116      	bne.n	8007720 <USB_EPStartXfer+0x876>
 80076f2:	1d3b      	adds	r3, r7, #4
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076fa:	b29b      	uxth	r3, r3
 80076fc:	461a      	mov	r2, r3
 80076fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007700:	4413      	add	r3, r2
 8007702:	673b      	str	r3, [r7, #112]	; 0x70
 8007704:	463b      	mov	r3, r7
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	781b      	ldrb	r3, [r3, #0]
 800770a:	011a      	lsls	r2, r3, #4
 800770c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800770e:	4413      	add	r3, r2
 8007710:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007714:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007716:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800771a:	b29a      	uxth	r2, r3
 800771c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800771e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007720:	463b      	mov	r3, r7
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	895b      	ldrh	r3, [r3, #10]
 8007726:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800772a:	463b      	mov	r3, r7
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	6959      	ldr	r1, [r3, #20]
 8007730:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007734:	b29b      	uxth	r3, r3
 8007736:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800773a:	1d38      	adds	r0, r7, #4
 800773c:	6800      	ldr	r0, [r0, #0]
 800773e:	f000 fdb4 	bl	80082aa <USB_WritePMA>
 8007742:	e09f      	b.n	8007884 <USB_EPStartXfer+0x9da>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007744:	463b      	mov	r3, r7
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	785b      	ldrb	r3, [r3, #1]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d164      	bne.n	8007818 <USB_EPStartXfer+0x96e>
 800774e:	1d3b      	adds	r3, r7, #4
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007754:	1d3b      	adds	r3, r7, #4
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800775c:	b29b      	uxth	r3, r3
 800775e:	461a      	mov	r2, r3
 8007760:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007762:	4413      	add	r3, r2
 8007764:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007766:	463b      	mov	r3, r7
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	781b      	ldrb	r3, [r3, #0]
 800776c:	011a      	lsls	r2, r3, #4
 800776e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007770:	4413      	add	r3, r2
 8007772:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007776:	67bb      	str	r3, [r7, #120]	; 0x78
 8007778:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800777c:	2b00      	cmp	r3, #0
 800777e:	d112      	bne.n	80077a6 <USB_EPStartXfer+0x8fc>
 8007780:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007782:	881b      	ldrh	r3, [r3, #0]
 8007784:	b29b      	uxth	r3, r3
 8007786:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800778a:	b29a      	uxth	r2, r3
 800778c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800778e:	801a      	strh	r2, [r3, #0]
 8007790:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007792:	881b      	ldrh	r3, [r3, #0]
 8007794:	b29b      	uxth	r3, r3
 8007796:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800779a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800779e:	b29a      	uxth	r2, r3
 80077a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80077a2:	801a      	strh	r2, [r3, #0]
 80077a4:	e05d      	b.n	8007862 <USB_EPStartXfer+0x9b8>
 80077a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077aa:	2b3e      	cmp	r3, #62	; 0x3e
 80077ac:	d817      	bhi.n	80077de <USB_EPStartXfer+0x934>
 80077ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077b2:	085b      	lsrs	r3, r3, #1
 80077b4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80077b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077bc:	f003 0301 	and.w	r3, r3, #1
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d004      	beq.n	80077ce <USB_EPStartXfer+0x924>
 80077c4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80077c8:	3301      	adds	r3, #1
 80077ca:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80077ce:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80077d2:	b29b      	uxth	r3, r3
 80077d4:	029b      	lsls	r3, r3, #10
 80077d6:	b29a      	uxth	r2, r3
 80077d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80077da:	801a      	strh	r2, [r3, #0]
 80077dc:	e041      	b.n	8007862 <USB_EPStartXfer+0x9b8>
 80077de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077e2:	095b      	lsrs	r3, r3, #5
 80077e4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80077e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077ec:	f003 031f 	and.w	r3, r3, #31
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d104      	bne.n	80077fe <USB_EPStartXfer+0x954>
 80077f4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80077f8:	3b01      	subs	r3, #1
 80077fa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80077fe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007802:	b29b      	uxth	r3, r3
 8007804:	029b      	lsls	r3, r3, #10
 8007806:	b29b      	uxth	r3, r3
 8007808:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800780c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007810:	b29a      	uxth	r2, r3
 8007812:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007814:	801a      	strh	r2, [r3, #0]
 8007816:	e024      	b.n	8007862 <USB_EPStartXfer+0x9b8>
 8007818:	463b      	mov	r3, r7
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	785b      	ldrb	r3, [r3, #1]
 800781e:	2b01      	cmp	r3, #1
 8007820:	d11f      	bne.n	8007862 <USB_EPStartXfer+0x9b8>
 8007822:	1d3b      	adds	r3, r7, #4
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800782a:	1d3b      	adds	r3, r7, #4
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007832:	b29b      	uxth	r3, r3
 8007834:	461a      	mov	r2, r3
 8007836:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800783a:	4413      	add	r3, r2
 800783c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007840:	463b      	mov	r3, r7
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	781b      	ldrb	r3, [r3, #0]
 8007846:	011a      	lsls	r2, r3, #4
 8007848:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800784c:	4413      	add	r3, r2
 800784e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007852:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007856:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800785a:	b29a      	uxth	r2, r3
 800785c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007860:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007862:	463b      	mov	r3, r7
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	891b      	ldrh	r3, [r3, #8]
 8007868:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800786c:	463b      	mov	r3, r7
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	6959      	ldr	r1, [r3, #20]
 8007872:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007876:	b29b      	uxth	r3, r3
 8007878:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800787c:	1d38      	adds	r0, r7, #4
 800787e:	6800      	ldr	r0, [r0, #0]
 8007880:	f000 fd13 	bl	80082aa <USB_WritePMA>
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007884:	1d3b      	adds	r3, r7, #4
 8007886:	681a      	ldr	r2, [r3, #0]
 8007888:	463b      	mov	r3, r7
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	781b      	ldrb	r3, [r3, #0]
 800788e:	009b      	lsls	r3, r3, #2
 8007890:	4413      	add	r3, r2
 8007892:	881b      	ldrh	r3, [r3, #0]
 8007894:	b29b      	uxth	r3, r3
 8007896:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800789a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800789e:	817b      	strh	r3, [r7, #10]
 80078a0:	897b      	ldrh	r3, [r7, #10]
 80078a2:	f083 0310 	eor.w	r3, r3, #16
 80078a6:	817b      	strh	r3, [r7, #10]
 80078a8:	897b      	ldrh	r3, [r7, #10]
 80078aa:	f083 0320 	eor.w	r3, r3, #32
 80078ae:	817b      	strh	r3, [r7, #10]
 80078b0:	1d3b      	adds	r3, r7, #4
 80078b2:	681a      	ldr	r2, [r3, #0]
 80078b4:	463b      	mov	r3, r7
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	781b      	ldrb	r3, [r3, #0]
 80078ba:	009b      	lsls	r3, r3, #2
 80078bc:	441a      	add	r2, r3
 80078be:	897b      	ldrh	r3, [r7, #10]
 80078c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078d0:	b29b      	uxth	r3, r3
 80078d2:	8013      	strh	r3, [r2, #0]
 80078d4:	e3b5      	b.n	8008042 <USB_EPStartXfer+0x1198>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80078d6:	463b      	mov	r3, r7
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	7b1b      	ldrb	r3, [r3, #12]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	f040 8090 	bne.w	8007a02 <USB_EPStartXfer+0xb58>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80078e2:	463b      	mov	r3, r7
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	699a      	ldr	r2, [r3, #24]
 80078e8:	463b      	mov	r3, r7
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	691b      	ldr	r3, [r3, #16]
 80078ee:	429a      	cmp	r2, r3
 80078f0:	d90e      	bls.n	8007910 <USB_EPStartXfer+0xa66>
      {
        len = ep->maxpacket;
 80078f2:	463b      	mov	r3, r7
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	691b      	ldr	r3, [r3, #16]
 80078f8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 80078fc:	463b      	mov	r3, r7
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	699a      	ldr	r2, [r3, #24]
 8007902:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007906:	1ad2      	subs	r2, r2, r3
 8007908:	463b      	mov	r3, r7
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	619a      	str	r2, [r3, #24]
 800790e:	e008      	b.n	8007922 <USB_EPStartXfer+0xa78>
      }
      else
      {
        len = ep->xfer_len;
 8007910:	463b      	mov	r3, r7
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	699b      	ldr	r3, [r3, #24]
 8007916:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800791a:	463b      	mov	r3, r7
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	2200      	movs	r2, #0
 8007920:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007922:	1d3b      	adds	r3, r7, #4
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800792a:	1d3b      	adds	r3, r7, #4
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007932:	b29b      	uxth	r3, r3
 8007934:	461a      	mov	r2, r3
 8007936:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800793a:	4413      	add	r3, r2
 800793c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007940:	463b      	mov	r3, r7
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	781b      	ldrb	r3, [r3, #0]
 8007946:	011a      	lsls	r2, r3, #4
 8007948:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800794c:	4413      	add	r3, r2
 800794e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007952:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007956:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800795a:	2b00      	cmp	r3, #0
 800795c:	d116      	bne.n	800798c <USB_EPStartXfer+0xae2>
 800795e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007962:	881b      	ldrh	r3, [r3, #0]
 8007964:	b29b      	uxth	r3, r3
 8007966:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800796a:	b29a      	uxth	r2, r3
 800796c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007970:	801a      	strh	r2, [r3, #0]
 8007972:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007976:	881b      	ldrh	r3, [r3, #0]
 8007978:	b29b      	uxth	r3, r3
 800797a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800797e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007982:	b29a      	uxth	r2, r3
 8007984:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007988:	801a      	strh	r2, [r3, #0]
 800798a:	e32c      	b.n	8007fe6 <USB_EPStartXfer+0x113c>
 800798c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007990:	2b3e      	cmp	r3, #62	; 0x3e
 8007992:	d818      	bhi.n	80079c6 <USB_EPStartXfer+0xb1c>
 8007994:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007998:	085b      	lsrs	r3, r3, #1
 800799a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800799e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079a2:	f003 0301 	and.w	r3, r3, #1
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d004      	beq.n	80079b4 <USB_EPStartXfer+0xb0a>
 80079aa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80079ae:	3301      	adds	r3, #1
 80079b0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80079b4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80079b8:	b29b      	uxth	r3, r3
 80079ba:	029b      	lsls	r3, r3, #10
 80079bc:	b29a      	uxth	r2, r3
 80079be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80079c2:	801a      	strh	r2, [r3, #0]
 80079c4:	e30f      	b.n	8007fe6 <USB_EPStartXfer+0x113c>
 80079c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079ca:	095b      	lsrs	r3, r3, #5
 80079cc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80079d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079d4:	f003 031f 	and.w	r3, r3, #31
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d104      	bne.n	80079e6 <USB_EPStartXfer+0xb3c>
 80079dc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80079e0:	3b01      	subs	r3, #1
 80079e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80079e6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80079ea:	b29b      	uxth	r3, r3
 80079ec:	029b      	lsls	r3, r3, #10
 80079ee:	b29b      	uxth	r3, r3
 80079f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079f8:	b29a      	uxth	r2, r3
 80079fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80079fe:	801a      	strh	r2, [r3, #0]
 8007a00:	e2f1      	b.n	8007fe6 <USB_EPStartXfer+0x113c>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007a02:	463b      	mov	r3, r7
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	78db      	ldrb	r3, [r3, #3]
 8007a08:	2b02      	cmp	r3, #2
 8007a0a:	f040 818f 	bne.w	8007d2c <USB_EPStartXfer+0xe82>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007a0e:	463b      	mov	r3, r7
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	785b      	ldrb	r3, [r3, #1]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d175      	bne.n	8007b04 <USB_EPStartXfer+0xc5a>
 8007a18:	1d3b      	adds	r3, r7, #4
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007a20:	1d3b      	adds	r3, r7, #4
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a28:	b29b      	uxth	r3, r3
 8007a2a:	461a      	mov	r2, r3
 8007a2c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007a30:	4413      	add	r3, r2
 8007a32:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007a36:	463b      	mov	r3, r7
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	781b      	ldrb	r3, [r3, #0]
 8007a3c:	011a      	lsls	r2, r3, #4
 8007a3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007a42:	4413      	add	r3, r2
 8007a44:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007a48:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007a4c:	463b      	mov	r3, r7
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	691b      	ldr	r3, [r3, #16]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d116      	bne.n	8007a84 <USB_EPStartXfer+0xbda>
 8007a56:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007a5a:	881b      	ldrh	r3, [r3, #0]
 8007a5c:	b29b      	uxth	r3, r3
 8007a5e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007a62:	b29a      	uxth	r2, r3
 8007a64:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007a68:	801a      	strh	r2, [r3, #0]
 8007a6a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007a6e:	881b      	ldrh	r3, [r3, #0]
 8007a70:	b29b      	uxth	r3, r3
 8007a72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a7a:	b29a      	uxth	r2, r3
 8007a7c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007a80:	801a      	strh	r2, [r3, #0]
 8007a82:	e065      	b.n	8007b50 <USB_EPStartXfer+0xca6>
 8007a84:	463b      	mov	r3, r7
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	691b      	ldr	r3, [r3, #16]
 8007a8a:	2b3e      	cmp	r3, #62	; 0x3e
 8007a8c:	d81a      	bhi.n	8007ac4 <USB_EPStartXfer+0xc1a>
 8007a8e:	463b      	mov	r3, r7
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	691b      	ldr	r3, [r3, #16]
 8007a94:	085b      	lsrs	r3, r3, #1
 8007a96:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007a9a:	463b      	mov	r3, r7
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	691b      	ldr	r3, [r3, #16]
 8007aa0:	f003 0301 	and.w	r3, r3, #1
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d004      	beq.n	8007ab2 <USB_EPStartXfer+0xc08>
 8007aa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007aac:	3301      	adds	r3, #1
 8007aae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007ab2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ab6:	b29b      	uxth	r3, r3
 8007ab8:	029b      	lsls	r3, r3, #10
 8007aba:	b29a      	uxth	r2, r3
 8007abc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007ac0:	801a      	strh	r2, [r3, #0]
 8007ac2:	e045      	b.n	8007b50 <USB_EPStartXfer+0xca6>
 8007ac4:	463b      	mov	r3, r7
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	691b      	ldr	r3, [r3, #16]
 8007aca:	095b      	lsrs	r3, r3, #5
 8007acc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007ad0:	463b      	mov	r3, r7
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	691b      	ldr	r3, [r3, #16]
 8007ad6:	f003 031f 	and.w	r3, r3, #31
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d104      	bne.n	8007ae8 <USB_EPStartXfer+0xc3e>
 8007ade:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ae2:	3b01      	subs	r3, #1
 8007ae4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007ae8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007aec:	b29b      	uxth	r3, r3
 8007aee:	029b      	lsls	r3, r3, #10
 8007af0:	b29b      	uxth	r3, r3
 8007af2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007af6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007afa:	b29a      	uxth	r2, r3
 8007afc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007b00:	801a      	strh	r2, [r3, #0]
 8007b02:	e025      	b.n	8007b50 <USB_EPStartXfer+0xca6>
 8007b04:	463b      	mov	r3, r7
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	785b      	ldrb	r3, [r3, #1]
 8007b0a:	2b01      	cmp	r3, #1
 8007b0c:	d120      	bne.n	8007b50 <USB_EPStartXfer+0xca6>
 8007b0e:	1d3b      	adds	r3, r7, #4
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007b16:	1d3b      	adds	r3, r7, #4
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b1e:	b29b      	uxth	r3, r3
 8007b20:	461a      	mov	r2, r3
 8007b22:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007b26:	4413      	add	r3, r2
 8007b28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007b2c:	463b      	mov	r3, r7
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	781b      	ldrb	r3, [r3, #0]
 8007b32:	011a      	lsls	r2, r3, #4
 8007b34:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007b38:	4413      	add	r3, r2
 8007b3a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007b3e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007b42:	463b      	mov	r3, r7
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	691b      	ldr	r3, [r3, #16]
 8007b48:	b29a      	uxth	r2, r3
 8007b4a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007b4e:	801a      	strh	r2, [r3, #0]
 8007b50:	1d3b      	adds	r3, r7, #4
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007b58:	463b      	mov	r3, r7
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	785b      	ldrb	r3, [r3, #1]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d175      	bne.n	8007c4e <USB_EPStartXfer+0xda4>
 8007b62:	1d3b      	adds	r3, r7, #4
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007b6a:	1d3b      	adds	r3, r7, #4
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b72:	b29b      	uxth	r3, r3
 8007b74:	461a      	mov	r2, r3
 8007b76:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007b7a:	4413      	add	r3, r2
 8007b7c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007b80:	463b      	mov	r3, r7
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	781b      	ldrb	r3, [r3, #0]
 8007b86:	011a      	lsls	r2, r3, #4
 8007b88:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007b8c:	4413      	add	r3, r2
 8007b8e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007b92:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007b96:	463b      	mov	r3, r7
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	691b      	ldr	r3, [r3, #16]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d116      	bne.n	8007bce <USB_EPStartXfer+0xd24>
 8007ba0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007ba4:	881b      	ldrh	r3, [r3, #0]
 8007ba6:	b29b      	uxth	r3, r3
 8007ba8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007bac:	b29a      	uxth	r2, r3
 8007bae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007bb2:	801a      	strh	r2, [r3, #0]
 8007bb4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007bb8:	881b      	ldrh	r3, [r3, #0]
 8007bba:	b29b      	uxth	r3, r3
 8007bbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bc4:	b29a      	uxth	r2, r3
 8007bc6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007bca:	801a      	strh	r2, [r3, #0]
 8007bcc:	e061      	b.n	8007c92 <USB_EPStartXfer+0xde8>
 8007bce:	463b      	mov	r3, r7
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	691b      	ldr	r3, [r3, #16]
 8007bd4:	2b3e      	cmp	r3, #62	; 0x3e
 8007bd6:	d81a      	bhi.n	8007c0e <USB_EPStartXfer+0xd64>
 8007bd8:	463b      	mov	r3, r7
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	691b      	ldr	r3, [r3, #16]
 8007bde:	085b      	lsrs	r3, r3, #1
 8007be0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007be4:	463b      	mov	r3, r7
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	691b      	ldr	r3, [r3, #16]
 8007bea:	f003 0301 	and.w	r3, r3, #1
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d004      	beq.n	8007bfc <USB_EPStartXfer+0xd52>
 8007bf2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bf6:	3301      	adds	r3, #1
 8007bf8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007bfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c00:	b29b      	uxth	r3, r3
 8007c02:	029b      	lsls	r3, r3, #10
 8007c04:	b29a      	uxth	r2, r3
 8007c06:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007c0a:	801a      	strh	r2, [r3, #0]
 8007c0c:	e041      	b.n	8007c92 <USB_EPStartXfer+0xde8>
 8007c0e:	463b      	mov	r3, r7
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	691b      	ldr	r3, [r3, #16]
 8007c14:	095b      	lsrs	r3, r3, #5
 8007c16:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007c1a:	463b      	mov	r3, r7
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	691b      	ldr	r3, [r3, #16]
 8007c20:	f003 031f 	and.w	r3, r3, #31
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d104      	bne.n	8007c32 <USB_EPStartXfer+0xd88>
 8007c28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c2c:	3b01      	subs	r3, #1
 8007c2e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007c32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c36:	b29b      	uxth	r3, r3
 8007c38:	029b      	lsls	r3, r3, #10
 8007c3a:	b29b      	uxth	r3, r3
 8007c3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c44:	b29a      	uxth	r2, r3
 8007c46:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007c4a:	801a      	strh	r2, [r3, #0]
 8007c4c:	e021      	b.n	8007c92 <USB_EPStartXfer+0xde8>
 8007c4e:	463b      	mov	r3, r7
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	785b      	ldrb	r3, [r3, #1]
 8007c54:	2b01      	cmp	r3, #1
 8007c56:	d11c      	bne.n	8007c92 <USB_EPStartXfer+0xde8>
 8007c58:	1d3b      	adds	r3, r7, #4
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c60:	b29b      	uxth	r3, r3
 8007c62:	461a      	mov	r2, r3
 8007c64:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007c68:	4413      	add	r3, r2
 8007c6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007c6e:	463b      	mov	r3, r7
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	781b      	ldrb	r3, [r3, #0]
 8007c74:	011a      	lsls	r2, r3, #4
 8007c76:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007c7a:	4413      	add	r3, r2
 8007c7c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007c80:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007c84:	463b      	mov	r3, r7
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	691b      	ldr	r3, [r3, #16]
 8007c8a:	b29a      	uxth	r2, r3
 8007c8c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007c90:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007c92:	463b      	mov	r3, r7
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	69db      	ldr	r3, [r3, #28]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	f000 81a4 	beq.w	8007fe6 <USB_EPStartXfer+0x113c>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007c9e:	1d3b      	adds	r3, r7, #4
 8007ca0:	681a      	ldr	r2, [r3, #0]
 8007ca2:	463b      	mov	r3, r7
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	781b      	ldrb	r3, [r3, #0]
 8007ca8:	009b      	lsls	r3, r3, #2
 8007caa:	4413      	add	r3, r2
 8007cac:	881b      	ldrh	r3, [r3, #0]
 8007cae:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007cb2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007cb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d005      	beq.n	8007cca <USB_EPStartXfer+0xe20>
 8007cbe:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007cc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d10d      	bne.n	8007ce6 <USB_EPStartXfer+0xe3c>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007cca:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007cce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	f040 8187 	bne.w	8007fe6 <USB_EPStartXfer+0x113c>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007cd8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007cdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	f040 8180 	bne.w	8007fe6 <USB_EPStartXfer+0x113c>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8007ce6:	1d3b      	adds	r3, r7, #4
 8007ce8:	681a      	ldr	r2, [r3, #0]
 8007cea:	463b      	mov	r3, r7
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	781b      	ldrb	r3, [r3, #0]
 8007cf0:	009b      	lsls	r3, r3, #2
 8007cf2:	4413      	add	r3, r2
 8007cf4:	881b      	ldrh	r3, [r3, #0]
 8007cf6:	b29b      	uxth	r3, r3
 8007cf8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d00:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8007d04:	1d3b      	adds	r3, r7, #4
 8007d06:	681a      	ldr	r2, [r3, #0]
 8007d08:	463b      	mov	r3, r7
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	781b      	ldrb	r3, [r3, #0]
 8007d0e:	009b      	lsls	r3, r3, #2
 8007d10:	441a      	add	r2, r3
 8007d12:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8007d16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d22:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007d26:	b29b      	uxth	r3, r3
 8007d28:	8013      	strh	r3, [r2, #0]
 8007d2a:	e15c      	b.n	8007fe6 <USB_EPStartXfer+0x113c>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007d2c:	463b      	mov	r3, r7
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	78db      	ldrb	r3, [r3, #3]
 8007d32:	2b01      	cmp	r3, #1
 8007d34:	f040 8155 	bne.w	8007fe2 <USB_EPStartXfer+0x1138>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007d38:	463b      	mov	r3, r7
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	699a      	ldr	r2, [r3, #24]
 8007d3e:	463b      	mov	r3, r7
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	691b      	ldr	r3, [r3, #16]
 8007d44:	429a      	cmp	r2, r3
 8007d46:	d90e      	bls.n	8007d66 <USB_EPStartXfer+0xebc>
        {
          len = ep->maxpacket;
 8007d48:	463b      	mov	r3, r7
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	691b      	ldr	r3, [r3, #16]
 8007d4e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8007d52:	463b      	mov	r3, r7
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	699a      	ldr	r2, [r3, #24]
 8007d58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d5c:	1ad2      	subs	r2, r2, r3
 8007d5e:	463b      	mov	r3, r7
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	619a      	str	r2, [r3, #24]
 8007d64:	e008      	b.n	8007d78 <USB_EPStartXfer+0xece>
        }
        else
        {
          len = ep->xfer_len;
 8007d66:	463b      	mov	r3, r7
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	699b      	ldr	r3, [r3, #24]
 8007d6c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8007d70:	463b      	mov	r3, r7
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	2200      	movs	r2, #0
 8007d76:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007d78:	463b      	mov	r3, r7
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	785b      	ldrb	r3, [r3, #1]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d16f      	bne.n	8007e62 <USB_EPStartXfer+0xfb8>
 8007d82:	1d3b      	adds	r3, r7, #4
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007d8a:	1d3b      	adds	r3, r7, #4
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d92:	b29b      	uxth	r3, r3
 8007d94:	461a      	mov	r2, r3
 8007d96:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007d9a:	4413      	add	r3, r2
 8007d9c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007da0:	463b      	mov	r3, r7
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	781b      	ldrb	r3, [r3, #0]
 8007da6:	011a      	lsls	r2, r3, #4
 8007da8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007dac:	4413      	add	r3, r2
 8007dae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007db2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007db6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d116      	bne.n	8007dec <USB_EPStartXfer+0xf42>
 8007dbe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007dc2:	881b      	ldrh	r3, [r3, #0]
 8007dc4:	b29b      	uxth	r3, r3
 8007dc6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007dca:	b29a      	uxth	r2, r3
 8007dcc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007dd0:	801a      	strh	r2, [r3, #0]
 8007dd2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007dd6:	881b      	ldrh	r3, [r3, #0]
 8007dd8:	b29b      	uxth	r3, r3
 8007dda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007dde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007de2:	b29a      	uxth	r2, r3
 8007de4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007de8:	801a      	strh	r2, [r3, #0]
 8007dea:	e05f      	b.n	8007eac <USB_EPStartXfer+0x1002>
 8007dec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007df0:	2b3e      	cmp	r3, #62	; 0x3e
 8007df2:	d818      	bhi.n	8007e26 <USB_EPStartXfer+0xf7c>
 8007df4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007df8:	085b      	lsrs	r3, r3, #1
 8007dfa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007dfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e02:	f003 0301 	and.w	r3, r3, #1
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d004      	beq.n	8007e14 <USB_EPStartXfer+0xf6a>
 8007e0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e0e:	3301      	adds	r3, #1
 8007e10:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007e14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e18:	b29b      	uxth	r3, r3
 8007e1a:	029b      	lsls	r3, r3, #10
 8007e1c:	b29a      	uxth	r2, r3
 8007e1e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007e22:	801a      	strh	r2, [r3, #0]
 8007e24:	e042      	b.n	8007eac <USB_EPStartXfer+0x1002>
 8007e26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e2a:	095b      	lsrs	r3, r3, #5
 8007e2c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007e30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e34:	f003 031f 	and.w	r3, r3, #31
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d104      	bne.n	8007e46 <USB_EPStartXfer+0xf9c>
 8007e3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e40:	3b01      	subs	r3, #1
 8007e42:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007e46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e4a:	b29b      	uxth	r3, r3
 8007e4c:	029b      	lsls	r3, r3, #10
 8007e4e:	b29b      	uxth	r3, r3
 8007e50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e58:	b29a      	uxth	r2, r3
 8007e5a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007e5e:	801a      	strh	r2, [r3, #0]
 8007e60:	e024      	b.n	8007eac <USB_EPStartXfer+0x1002>
 8007e62:	463b      	mov	r3, r7
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	785b      	ldrb	r3, [r3, #1]
 8007e68:	2b01      	cmp	r3, #1
 8007e6a:	d11f      	bne.n	8007eac <USB_EPStartXfer+0x1002>
 8007e6c:	1d3b      	adds	r3, r7, #4
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007e74:	1d3b      	adds	r3, r7, #4
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e7c:	b29b      	uxth	r3, r3
 8007e7e:	461a      	mov	r2, r3
 8007e80:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007e84:	4413      	add	r3, r2
 8007e86:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007e8a:	463b      	mov	r3, r7
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	781b      	ldrb	r3, [r3, #0]
 8007e90:	011a      	lsls	r2, r3, #4
 8007e92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007e96:	4413      	add	r3, r2
 8007e98:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007e9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007ea0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ea4:	b29a      	uxth	r2, r3
 8007ea6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007eaa:	801a      	strh	r2, [r3, #0]
 8007eac:	1d3b      	adds	r3, r7, #4
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007eb4:	463b      	mov	r3, r7
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	785b      	ldrb	r3, [r3, #1]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d16f      	bne.n	8007f9e <USB_EPStartXfer+0x10f4>
 8007ebe:	1d3b      	adds	r3, r7, #4
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007ec6:	1d3b      	adds	r3, r7, #4
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ece:	b29b      	uxth	r3, r3
 8007ed0:	461a      	mov	r2, r3
 8007ed2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007ed6:	4413      	add	r3, r2
 8007ed8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007edc:	463b      	mov	r3, r7
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	781b      	ldrb	r3, [r3, #0]
 8007ee2:	011a      	lsls	r2, r3, #4
 8007ee4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007ee8:	4413      	add	r3, r2
 8007eea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007eee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007ef2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d116      	bne.n	8007f28 <USB_EPStartXfer+0x107e>
 8007efa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007efe:	881b      	ldrh	r3, [r3, #0]
 8007f00:	b29b      	uxth	r3, r3
 8007f02:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007f06:	b29a      	uxth	r2, r3
 8007f08:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007f0c:	801a      	strh	r2, [r3, #0]
 8007f0e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007f12:	881b      	ldrh	r3, [r3, #0]
 8007f14:	b29b      	uxth	r3, r3
 8007f16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f1e:	b29a      	uxth	r2, r3
 8007f20:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007f24:	801a      	strh	r2, [r3, #0]
 8007f26:	e05e      	b.n	8007fe6 <USB_EPStartXfer+0x113c>
 8007f28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f2c:	2b3e      	cmp	r3, #62	; 0x3e
 8007f2e:	d818      	bhi.n	8007f62 <USB_EPStartXfer+0x10b8>
 8007f30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f34:	085b      	lsrs	r3, r3, #1
 8007f36:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007f3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f3e:	f003 0301 	and.w	r3, r3, #1
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d004      	beq.n	8007f50 <USB_EPStartXfer+0x10a6>
 8007f46:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007f4a:	3301      	adds	r3, #1
 8007f4c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007f50:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007f54:	b29b      	uxth	r3, r3
 8007f56:	029b      	lsls	r3, r3, #10
 8007f58:	b29a      	uxth	r2, r3
 8007f5a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007f5e:	801a      	strh	r2, [r3, #0]
 8007f60:	e041      	b.n	8007fe6 <USB_EPStartXfer+0x113c>
 8007f62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f66:	095b      	lsrs	r3, r3, #5
 8007f68:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007f6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f70:	f003 031f 	and.w	r3, r3, #31
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d104      	bne.n	8007f82 <USB_EPStartXfer+0x10d8>
 8007f78:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007f7c:	3b01      	subs	r3, #1
 8007f7e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007f82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007f86:	b29b      	uxth	r3, r3
 8007f88:	029b      	lsls	r3, r3, #10
 8007f8a:	b29b      	uxth	r3, r3
 8007f8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f94:	b29a      	uxth	r2, r3
 8007f96:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007f9a:	801a      	strh	r2, [r3, #0]
 8007f9c:	e023      	b.n	8007fe6 <USB_EPStartXfer+0x113c>
 8007f9e:	463b      	mov	r3, r7
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	785b      	ldrb	r3, [r3, #1]
 8007fa4:	2b01      	cmp	r3, #1
 8007fa6:	d11e      	bne.n	8007fe6 <USB_EPStartXfer+0x113c>
 8007fa8:	1d3b      	adds	r3, r7, #4
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007fb0:	b29b      	uxth	r3, r3
 8007fb2:	461a      	mov	r2, r3
 8007fb4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007fb8:	4413      	add	r3, r2
 8007fba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007fbe:	463b      	mov	r3, r7
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	781b      	ldrb	r3, [r3, #0]
 8007fc4:	011a      	lsls	r2, r3, #4
 8007fc6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007fca:	4413      	add	r3, r2
 8007fcc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007fd0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007fd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fd8:	b29a      	uxth	r2, r3
 8007fda:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007fde:	801a      	strh	r2, [r3, #0]
 8007fe0:	e001      	b.n	8007fe6 <USB_EPStartXfer+0x113c>
      }
      else
      {
        return HAL_ERROR;
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	e02e      	b.n	8008044 <USB_EPStartXfer+0x119a>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007fe6:	1d3b      	adds	r3, r7, #4
 8007fe8:	681a      	ldr	r2, [r3, #0]
 8007fea:	463b      	mov	r3, r7
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	781b      	ldrb	r3, [r3, #0]
 8007ff0:	009b      	lsls	r3, r3, #2
 8007ff2:	4413      	add	r3, r2
 8007ff4:	881b      	ldrh	r3, [r3, #0]
 8007ff6:	b29b      	uxth	r3, r3
 8007ff8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007ffc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008000:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008004:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008008:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800800c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008010:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008014:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008018:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800801c:	1d3b      	adds	r3, r7, #4
 800801e:	681a      	ldr	r2, [r3, #0]
 8008020:	463b      	mov	r3, r7
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	781b      	ldrb	r3, [r3, #0]
 8008026:	009b      	lsls	r3, r3, #2
 8008028:	441a      	add	r2, r3
 800802a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800802e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008032:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008036:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800803a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800803e:	b29b      	uxth	r3, r3
 8008040:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008042:	2300      	movs	r3, #0
}
 8008044:	4618      	mov	r0, r3
 8008046:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800804a:	46bd      	mov	sp, r7
 800804c:	bd80      	pop	{r7, pc}

0800804e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800804e:	b480      	push	{r7}
 8008050:	b085      	sub	sp, #20
 8008052:	af00      	add	r7, sp, #0
 8008054:	6078      	str	r0, [r7, #4]
 8008056:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	785b      	ldrb	r3, [r3, #1]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d020      	beq.n	80080a2 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008060:	687a      	ldr	r2, [r7, #4]
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	781b      	ldrb	r3, [r3, #0]
 8008066:	009b      	lsls	r3, r3, #2
 8008068:	4413      	add	r3, r2
 800806a:	881b      	ldrh	r3, [r3, #0]
 800806c:	b29b      	uxth	r3, r3
 800806e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008072:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008076:	81bb      	strh	r3, [r7, #12]
 8008078:	89bb      	ldrh	r3, [r7, #12]
 800807a:	f083 0310 	eor.w	r3, r3, #16
 800807e:	81bb      	strh	r3, [r7, #12]
 8008080:	687a      	ldr	r2, [r7, #4]
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	781b      	ldrb	r3, [r3, #0]
 8008086:	009b      	lsls	r3, r3, #2
 8008088:	441a      	add	r2, r3
 800808a:	89bb      	ldrh	r3, [r7, #12]
 800808c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008090:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008094:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008098:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800809c:	b29b      	uxth	r3, r3
 800809e:	8013      	strh	r3, [r2, #0]
 80080a0:	e01f      	b.n	80080e2 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80080a2:	687a      	ldr	r2, [r7, #4]
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	781b      	ldrb	r3, [r3, #0]
 80080a8:	009b      	lsls	r3, r3, #2
 80080aa:	4413      	add	r3, r2
 80080ac:	881b      	ldrh	r3, [r3, #0]
 80080ae:	b29b      	uxth	r3, r3
 80080b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80080b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080b8:	81fb      	strh	r3, [r7, #14]
 80080ba:	89fb      	ldrh	r3, [r7, #14]
 80080bc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80080c0:	81fb      	strh	r3, [r7, #14]
 80080c2:	687a      	ldr	r2, [r7, #4]
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	781b      	ldrb	r3, [r3, #0]
 80080c8:	009b      	lsls	r3, r3, #2
 80080ca:	441a      	add	r2, r3
 80080cc:	89fb      	ldrh	r3, [r7, #14]
 80080ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080de:	b29b      	uxth	r3, r3
 80080e0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80080e2:	2300      	movs	r3, #0
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	3714      	adds	r7, #20
 80080e8:	46bd      	mov	sp, r7
 80080ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ee:	4770      	bx	lr

080080f0 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80080f0:	b480      	push	{r7}
 80080f2:	b087      	sub	sp, #28
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
 80080f8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	7b1b      	ldrb	r3, [r3, #12]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	f040 809d 	bne.w	800823e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	785b      	ldrb	r3, [r3, #1]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d04c      	beq.n	80081a6 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800810c:	687a      	ldr	r2, [r7, #4]
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	781b      	ldrb	r3, [r3, #0]
 8008112:	009b      	lsls	r3, r3, #2
 8008114:	4413      	add	r3, r2
 8008116:	881b      	ldrh	r3, [r3, #0]
 8008118:	823b      	strh	r3, [r7, #16]
 800811a:	8a3b      	ldrh	r3, [r7, #16]
 800811c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008120:	2b00      	cmp	r3, #0
 8008122:	d01b      	beq.n	800815c <USB_EPClearStall+0x6c>
 8008124:	687a      	ldr	r2, [r7, #4]
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	781b      	ldrb	r3, [r3, #0]
 800812a:	009b      	lsls	r3, r3, #2
 800812c:	4413      	add	r3, r2
 800812e:	881b      	ldrh	r3, [r3, #0]
 8008130:	b29b      	uxth	r3, r3
 8008132:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008136:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800813a:	81fb      	strh	r3, [r7, #14]
 800813c:	687a      	ldr	r2, [r7, #4]
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	781b      	ldrb	r3, [r3, #0]
 8008142:	009b      	lsls	r3, r3, #2
 8008144:	441a      	add	r2, r3
 8008146:	89fb      	ldrh	r3, [r7, #14]
 8008148:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800814c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008150:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008154:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008158:	b29b      	uxth	r3, r3
 800815a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	78db      	ldrb	r3, [r3, #3]
 8008160:	2b01      	cmp	r3, #1
 8008162:	d06c      	beq.n	800823e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008164:	687a      	ldr	r2, [r7, #4]
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	781b      	ldrb	r3, [r3, #0]
 800816a:	009b      	lsls	r3, r3, #2
 800816c:	4413      	add	r3, r2
 800816e:	881b      	ldrh	r3, [r3, #0]
 8008170:	b29b      	uxth	r3, r3
 8008172:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008176:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800817a:	81bb      	strh	r3, [r7, #12]
 800817c:	89bb      	ldrh	r3, [r7, #12]
 800817e:	f083 0320 	eor.w	r3, r3, #32
 8008182:	81bb      	strh	r3, [r7, #12]
 8008184:	687a      	ldr	r2, [r7, #4]
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	781b      	ldrb	r3, [r3, #0]
 800818a:	009b      	lsls	r3, r3, #2
 800818c:	441a      	add	r2, r3
 800818e:	89bb      	ldrh	r3, [r7, #12]
 8008190:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008194:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008198:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800819c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081a0:	b29b      	uxth	r3, r3
 80081a2:	8013      	strh	r3, [r2, #0]
 80081a4:	e04b      	b.n	800823e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80081a6:	687a      	ldr	r2, [r7, #4]
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	781b      	ldrb	r3, [r3, #0]
 80081ac:	009b      	lsls	r3, r3, #2
 80081ae:	4413      	add	r3, r2
 80081b0:	881b      	ldrh	r3, [r3, #0]
 80081b2:	82fb      	strh	r3, [r7, #22]
 80081b4:	8afb      	ldrh	r3, [r7, #22]
 80081b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d01b      	beq.n	80081f6 <USB_EPClearStall+0x106>
 80081be:	687a      	ldr	r2, [r7, #4]
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	781b      	ldrb	r3, [r3, #0]
 80081c4:	009b      	lsls	r3, r3, #2
 80081c6:	4413      	add	r3, r2
 80081c8:	881b      	ldrh	r3, [r3, #0]
 80081ca:	b29b      	uxth	r3, r3
 80081cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081d4:	82bb      	strh	r3, [r7, #20]
 80081d6:	687a      	ldr	r2, [r7, #4]
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	781b      	ldrb	r3, [r3, #0]
 80081dc:	009b      	lsls	r3, r3, #2
 80081de:	441a      	add	r2, r3
 80081e0:	8abb      	ldrh	r3, [r7, #20]
 80081e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80081ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081f2:	b29b      	uxth	r3, r3
 80081f4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80081f6:	687a      	ldr	r2, [r7, #4]
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	781b      	ldrb	r3, [r3, #0]
 80081fc:	009b      	lsls	r3, r3, #2
 80081fe:	4413      	add	r3, r2
 8008200:	881b      	ldrh	r3, [r3, #0]
 8008202:	b29b      	uxth	r3, r3
 8008204:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008208:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800820c:	827b      	strh	r3, [r7, #18]
 800820e:	8a7b      	ldrh	r3, [r7, #18]
 8008210:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008214:	827b      	strh	r3, [r7, #18]
 8008216:	8a7b      	ldrh	r3, [r7, #18]
 8008218:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800821c:	827b      	strh	r3, [r7, #18]
 800821e:	687a      	ldr	r2, [r7, #4]
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	781b      	ldrb	r3, [r3, #0]
 8008224:	009b      	lsls	r3, r3, #2
 8008226:	441a      	add	r2, r3
 8008228:	8a7b      	ldrh	r3, [r7, #18]
 800822a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800822e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008232:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008236:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800823a:	b29b      	uxth	r3, r3
 800823c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800823e:	2300      	movs	r3, #0
}
 8008240:	4618      	mov	r0, r3
 8008242:	371c      	adds	r7, #28
 8008244:	46bd      	mov	sp, r7
 8008246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824a:	4770      	bx	lr

0800824c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800824c:	b480      	push	{r7}
 800824e:	b083      	sub	sp, #12
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
 8008254:	460b      	mov	r3, r1
 8008256:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008258:	78fb      	ldrb	r3, [r7, #3]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d103      	bne.n	8008266 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2280      	movs	r2, #128	; 0x80
 8008262:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008266:	2300      	movs	r3, #0
}
 8008268:	4618      	mov	r0, r3
 800826a:	370c      	adds	r7, #12
 800826c:	46bd      	mov	sp, r7
 800826e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008272:	4770      	bx	lr

08008274 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008274:	b480      	push	{r7}
 8008276:	b083      	sub	sp, #12
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800827c:	2300      	movs	r3, #0
}
 800827e:	4618      	mov	r0, r3
 8008280:	370c      	adds	r7, #12
 8008282:	46bd      	mov	sp, r7
 8008284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008288:	4770      	bx	lr

0800828a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800828a:	b480      	push	{r7}
 800828c:	b085      	sub	sp, #20
 800828e:	af00      	add	r7, sp, #0
 8008290:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008298:	b29b      	uxth	r3, r3
 800829a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800829c:	68fb      	ldr	r3, [r7, #12]
}
 800829e:	4618      	mov	r0, r3
 80082a0:	3714      	adds	r7, #20
 80082a2:	46bd      	mov	sp, r7
 80082a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a8:	4770      	bx	lr

080082aa <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80082aa:	b480      	push	{r7}
 80082ac:	b08d      	sub	sp, #52	; 0x34
 80082ae:	af00      	add	r7, sp, #0
 80082b0:	60f8      	str	r0, [r7, #12]
 80082b2:	60b9      	str	r1, [r7, #8]
 80082b4:	4611      	mov	r1, r2
 80082b6:	461a      	mov	r2, r3
 80082b8:	460b      	mov	r3, r1
 80082ba:	80fb      	strh	r3, [r7, #6]
 80082bc:	4613      	mov	r3, r2
 80082be:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80082c0:	88bb      	ldrh	r3, [r7, #4]
 80082c2:	3301      	adds	r3, #1
 80082c4:	085b      	lsrs	r3, r3, #1
 80082c6:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80082d0:	88fb      	ldrh	r3, [r7, #6]
 80082d2:	005a      	lsls	r2, r3, #1
 80082d4:	69fb      	ldr	r3, [r7, #28]
 80082d6:	4413      	add	r3, r2
 80082d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80082dc:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80082de:	6a3b      	ldr	r3, [r7, #32]
 80082e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80082e2:	e01e      	b.n	8008322 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80082e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e6:	781b      	ldrb	r3, [r3, #0]
 80082e8:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80082ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ec:	3301      	adds	r3, #1
 80082ee:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80082f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f2:	781b      	ldrb	r3, [r3, #0]
 80082f4:	b29b      	uxth	r3, r3
 80082f6:	021b      	lsls	r3, r3, #8
 80082f8:	b29b      	uxth	r3, r3
 80082fa:	461a      	mov	r2, r3
 80082fc:	69bb      	ldr	r3, [r7, #24]
 80082fe:	4313      	orrs	r3, r2
 8008300:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8008302:	697b      	ldr	r3, [r7, #20]
 8008304:	b29a      	uxth	r2, r3
 8008306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008308:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800830a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800830c:	3302      	adds	r3, #2
 800830e:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8008310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008312:	3302      	adds	r3, #2
 8008314:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8008316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008318:	3301      	adds	r3, #1
 800831a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800831c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800831e:	3b01      	subs	r3, #1
 8008320:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008324:	2b00      	cmp	r3, #0
 8008326:	d1dd      	bne.n	80082e4 <USB_WritePMA+0x3a>
  }
}
 8008328:	bf00      	nop
 800832a:	bf00      	nop
 800832c:	3734      	adds	r7, #52	; 0x34
 800832e:	46bd      	mov	sp, r7
 8008330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008334:	4770      	bx	lr

08008336 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008336:	b480      	push	{r7}
 8008338:	b08b      	sub	sp, #44	; 0x2c
 800833a:	af00      	add	r7, sp, #0
 800833c:	60f8      	str	r0, [r7, #12]
 800833e:	60b9      	str	r1, [r7, #8]
 8008340:	4611      	mov	r1, r2
 8008342:	461a      	mov	r2, r3
 8008344:	460b      	mov	r3, r1
 8008346:	80fb      	strh	r3, [r7, #6]
 8008348:	4613      	mov	r3, r2
 800834a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800834c:	88bb      	ldrh	r3, [r7, #4]
 800834e:	085b      	lsrs	r3, r3, #1
 8008350:	b29b      	uxth	r3, r3
 8008352:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800835c:	88fb      	ldrh	r3, [r7, #6]
 800835e:	005a      	lsls	r2, r3, #1
 8008360:	697b      	ldr	r3, [r7, #20]
 8008362:	4413      	add	r3, r2
 8008364:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008368:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800836a:	69bb      	ldr	r3, [r7, #24]
 800836c:	627b      	str	r3, [r7, #36]	; 0x24
 800836e:	e01b      	b.n	80083a8 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8008370:	6a3b      	ldr	r3, [r7, #32]
 8008372:	881b      	ldrh	r3, [r3, #0]
 8008374:	b29b      	uxth	r3, r3
 8008376:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008378:	6a3b      	ldr	r3, [r7, #32]
 800837a:	3302      	adds	r3, #2
 800837c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800837e:	693b      	ldr	r3, [r7, #16]
 8008380:	b2da      	uxtb	r2, r3
 8008382:	69fb      	ldr	r3, [r7, #28]
 8008384:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008386:	69fb      	ldr	r3, [r7, #28]
 8008388:	3301      	adds	r3, #1
 800838a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800838c:	693b      	ldr	r3, [r7, #16]
 800838e:	0a1b      	lsrs	r3, r3, #8
 8008390:	b2da      	uxtb	r2, r3
 8008392:	69fb      	ldr	r3, [r7, #28]
 8008394:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008396:	69fb      	ldr	r3, [r7, #28]
 8008398:	3301      	adds	r3, #1
 800839a:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800839c:	6a3b      	ldr	r3, [r7, #32]
 800839e:	3302      	adds	r3, #2
 80083a0:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80083a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a4:	3b01      	subs	r3, #1
 80083a6:	627b      	str	r3, [r7, #36]	; 0x24
 80083a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d1e0      	bne.n	8008370 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80083ae:	88bb      	ldrh	r3, [r7, #4]
 80083b0:	f003 0301 	and.w	r3, r3, #1
 80083b4:	b29b      	uxth	r3, r3
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d007      	beq.n	80083ca <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80083ba:	6a3b      	ldr	r3, [r7, #32]
 80083bc:	881b      	ldrh	r3, [r3, #0]
 80083be:	b29b      	uxth	r3, r3
 80083c0:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80083c2:	693b      	ldr	r3, [r7, #16]
 80083c4:	b2da      	uxtb	r2, r3
 80083c6:	69fb      	ldr	r3, [r7, #28]
 80083c8:	701a      	strb	r2, [r3, #0]
  }
}
 80083ca:	bf00      	nop
 80083cc:	372c      	adds	r7, #44	; 0x2c
 80083ce:	46bd      	mov	sp, r7
 80083d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d4:	4770      	bx	lr

080083d6 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80083d6:	b580      	push	{r7, lr}
 80083d8:	b084      	sub	sp, #16
 80083da:	af00      	add	r7, sp, #0
 80083dc:	6078      	str	r0, [r7, #4]
 80083de:	460b      	mov	r3, r1
 80083e0:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80083e2:	2300      	movs	r3, #0
 80083e4:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	7c1b      	ldrb	r3, [r3, #16]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d115      	bne.n	800841a <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80083ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80083f2:	2202      	movs	r2, #2
 80083f4:	2181      	movs	r1, #129	; 0x81
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f001 feb9 	bl	800a16e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2201      	movs	r2, #1
 8008400:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008402:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008406:	2202      	movs	r2, #2
 8008408:	2101      	movs	r1, #1
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f001 feaf 	bl	800a16e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2201      	movs	r2, #1
 8008414:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8008418:	e012      	b.n	8008440 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800841a:	2340      	movs	r3, #64	; 0x40
 800841c:	2202      	movs	r2, #2
 800841e:	2181      	movs	r1, #129	; 0x81
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f001 fea4 	bl	800a16e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2201      	movs	r2, #1
 800842a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800842c:	2340      	movs	r3, #64	; 0x40
 800842e:	2202      	movs	r2, #2
 8008430:	2101      	movs	r1, #1
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f001 fe9b 	bl	800a16e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2201      	movs	r2, #1
 800843c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008440:	2308      	movs	r3, #8
 8008442:	2203      	movs	r2, #3
 8008444:	2182      	movs	r1, #130	; 0x82
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f001 fe91 	bl	800a16e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2201      	movs	r2, #1
 8008450:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008452:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008456:	f001 ffb3 	bl	800a3c0 <USBD_static_malloc>
 800845a:	4602      	mov	r2, r0
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008468:	2b00      	cmp	r3, #0
 800846a:	d102      	bne.n	8008472 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800846c:	2301      	movs	r3, #1
 800846e:	73fb      	strb	r3, [r7, #15]
 8008470:	e026      	b.n	80084c0 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008478:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	2200      	movs	r2, #0
 8008488:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	2200      	movs	r2, #0
 8008490:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	7c1b      	ldrb	r3, [r3, #16]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d109      	bne.n	80084b0 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80084a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80084a6:	2101      	movs	r1, #1
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f001 ff52 	bl	800a352 <USBD_LL_PrepareReceive>
 80084ae:	e007      	b.n	80084c0 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80084b0:	68bb      	ldr	r3, [r7, #8]
 80084b2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80084b6:	2340      	movs	r3, #64	; 0x40
 80084b8:	2101      	movs	r1, #1
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f001 ff49 	bl	800a352 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80084c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80084c2:	4618      	mov	r0, r3
 80084c4:	3710      	adds	r7, #16
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bd80      	pop	{r7, pc}

080084ca <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80084ca:	b580      	push	{r7, lr}
 80084cc:	b084      	sub	sp, #16
 80084ce:	af00      	add	r7, sp, #0
 80084d0:	6078      	str	r0, [r7, #4]
 80084d2:	460b      	mov	r3, r1
 80084d4:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80084d6:	2300      	movs	r3, #0
 80084d8:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80084da:	2181      	movs	r1, #129	; 0x81
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	f001 fe6c 	bl	800a1ba <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2200      	movs	r2, #0
 80084e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80084e8:	2101      	movs	r1, #1
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f001 fe65 	bl	800a1ba <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2200      	movs	r2, #0
 80084f4:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80084f8:	2182      	movs	r1, #130	; 0x82
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f001 fe5d 	bl	800a1ba <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2200      	movs	r2, #0
 8008504:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800850c:	2b00      	cmp	r3, #0
 800850e:	d00e      	beq.n	800852e <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008516:	685b      	ldr	r3, [r3, #4]
 8008518:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008520:	4618      	mov	r0, r3
 8008522:	f001 ff5b 	bl	800a3dc <USBD_static_free>
    pdev->pClassData = NULL;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2200      	movs	r2, #0
 800852a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800852e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008530:	4618      	mov	r0, r3
 8008532:	3710      	adds	r7, #16
 8008534:	46bd      	mov	sp, r7
 8008536:	bd80      	pop	{r7, pc}

08008538 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b086      	sub	sp, #24
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
 8008540:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008548:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800854a:	2300      	movs	r3, #0
 800854c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800854e:	2300      	movs	r3, #0
 8008550:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8008552:	2300      	movs	r3, #0
 8008554:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	781b      	ldrb	r3, [r3, #0]
 800855a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800855e:	2b00      	cmp	r3, #0
 8008560:	d039      	beq.n	80085d6 <USBD_CDC_Setup+0x9e>
 8008562:	2b20      	cmp	r3, #32
 8008564:	d17f      	bne.n	8008666 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	88db      	ldrh	r3, [r3, #6]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d029      	beq.n	80085c2 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	781b      	ldrb	r3, [r3, #0]
 8008572:	b25b      	sxtb	r3, r3
 8008574:	2b00      	cmp	r3, #0
 8008576:	da11      	bge.n	800859c <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800857e:	689b      	ldr	r3, [r3, #8]
 8008580:	683a      	ldr	r2, [r7, #0]
 8008582:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8008584:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008586:	683a      	ldr	r2, [r7, #0]
 8008588:	88d2      	ldrh	r2, [r2, #6]
 800858a:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800858c:	6939      	ldr	r1, [r7, #16]
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	88db      	ldrh	r3, [r3, #6]
 8008592:	461a      	mov	r2, r3
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	f001 fa14 	bl	80099c2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800859a:	e06b      	b.n	8008674 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	785a      	ldrb	r2, [r3, #1]
 80085a0:	693b      	ldr	r3, [r7, #16]
 80085a2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	88db      	ldrh	r3, [r3, #6]
 80085aa:	b2da      	uxtb	r2, r3
 80085ac:	693b      	ldr	r3, [r7, #16]
 80085ae:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80085b2:	6939      	ldr	r1, [r7, #16]
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	88db      	ldrh	r3, [r3, #6]
 80085b8:	461a      	mov	r2, r3
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f001 fa2f 	bl	8009a1e <USBD_CtlPrepareRx>
      break;
 80085c0:	e058      	b.n	8008674 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80085c8:	689b      	ldr	r3, [r3, #8]
 80085ca:	683a      	ldr	r2, [r7, #0]
 80085cc:	7850      	ldrb	r0, [r2, #1]
 80085ce:	2200      	movs	r2, #0
 80085d0:	6839      	ldr	r1, [r7, #0]
 80085d2:	4798      	blx	r3
      break;
 80085d4:	e04e      	b.n	8008674 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	785b      	ldrb	r3, [r3, #1]
 80085da:	2b0b      	cmp	r3, #11
 80085dc:	d02e      	beq.n	800863c <USBD_CDC_Setup+0x104>
 80085de:	2b0b      	cmp	r3, #11
 80085e0:	dc38      	bgt.n	8008654 <USBD_CDC_Setup+0x11c>
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d002      	beq.n	80085ec <USBD_CDC_Setup+0xb4>
 80085e6:	2b0a      	cmp	r3, #10
 80085e8:	d014      	beq.n	8008614 <USBD_CDC_Setup+0xdc>
 80085ea:	e033      	b.n	8008654 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085f2:	2b03      	cmp	r3, #3
 80085f4:	d107      	bne.n	8008606 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80085f6:	f107 030c 	add.w	r3, r7, #12
 80085fa:	2202      	movs	r2, #2
 80085fc:	4619      	mov	r1, r3
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f001 f9df 	bl	80099c2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008604:	e02e      	b.n	8008664 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008606:	6839      	ldr	r1, [r7, #0]
 8008608:	6878      	ldr	r0, [r7, #4]
 800860a:	f001 f96f 	bl	80098ec <USBD_CtlError>
            ret = USBD_FAIL;
 800860e:	2302      	movs	r3, #2
 8008610:	75fb      	strb	r3, [r7, #23]
          break;
 8008612:	e027      	b.n	8008664 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800861a:	2b03      	cmp	r3, #3
 800861c:	d107      	bne.n	800862e <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800861e:	f107 030f 	add.w	r3, r7, #15
 8008622:	2201      	movs	r2, #1
 8008624:	4619      	mov	r1, r3
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f001 f9cb 	bl	80099c2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800862c:	e01a      	b.n	8008664 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800862e:	6839      	ldr	r1, [r7, #0]
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	f001 f95b 	bl	80098ec <USBD_CtlError>
            ret = USBD_FAIL;
 8008636:	2302      	movs	r3, #2
 8008638:	75fb      	strb	r3, [r7, #23]
          break;
 800863a:	e013      	b.n	8008664 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008642:	2b03      	cmp	r3, #3
 8008644:	d00d      	beq.n	8008662 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8008646:	6839      	ldr	r1, [r7, #0]
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	f001 f94f 	bl	80098ec <USBD_CtlError>
            ret = USBD_FAIL;
 800864e:	2302      	movs	r3, #2
 8008650:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008652:	e006      	b.n	8008662 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8008654:	6839      	ldr	r1, [r7, #0]
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f001 f948 	bl	80098ec <USBD_CtlError>
          ret = USBD_FAIL;
 800865c:	2302      	movs	r3, #2
 800865e:	75fb      	strb	r3, [r7, #23]
          break;
 8008660:	e000      	b.n	8008664 <USBD_CDC_Setup+0x12c>
          break;
 8008662:	bf00      	nop
      }
      break;
 8008664:	e006      	b.n	8008674 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008666:	6839      	ldr	r1, [r7, #0]
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	f001 f93f 	bl	80098ec <USBD_CtlError>
      ret = USBD_FAIL;
 800866e:	2302      	movs	r3, #2
 8008670:	75fb      	strb	r3, [r7, #23]
      break;
 8008672:	bf00      	nop
  }

  return ret;
 8008674:	7dfb      	ldrb	r3, [r7, #23]
}
 8008676:	4618      	mov	r0, r3
 8008678:	3718      	adds	r7, #24
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}

0800867e <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800867e:	b580      	push	{r7, lr}
 8008680:	b084      	sub	sp, #16
 8008682:	af00      	add	r7, sp, #0
 8008684:	6078      	str	r0, [r7, #4]
 8008686:	460b      	mov	r3, r1
 8008688:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008690:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008698:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d03a      	beq.n	800871a <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80086a4:	78fa      	ldrb	r2, [r7, #3]
 80086a6:	6879      	ldr	r1, [r7, #4]
 80086a8:	4613      	mov	r3, r2
 80086aa:	009b      	lsls	r3, r3, #2
 80086ac:	4413      	add	r3, r2
 80086ae:	009b      	lsls	r3, r3, #2
 80086b0:	440b      	add	r3, r1
 80086b2:	331c      	adds	r3, #28
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d029      	beq.n	800870e <USBD_CDC_DataIn+0x90>
 80086ba:	78fa      	ldrb	r2, [r7, #3]
 80086bc:	6879      	ldr	r1, [r7, #4]
 80086be:	4613      	mov	r3, r2
 80086c0:	009b      	lsls	r3, r3, #2
 80086c2:	4413      	add	r3, r2
 80086c4:	009b      	lsls	r3, r3, #2
 80086c6:	440b      	add	r3, r1
 80086c8:	331c      	adds	r3, #28
 80086ca:	681a      	ldr	r2, [r3, #0]
 80086cc:	78f9      	ldrb	r1, [r7, #3]
 80086ce:	68b8      	ldr	r0, [r7, #8]
 80086d0:	460b      	mov	r3, r1
 80086d2:	009b      	lsls	r3, r3, #2
 80086d4:	440b      	add	r3, r1
 80086d6:	00db      	lsls	r3, r3, #3
 80086d8:	4403      	add	r3, r0
 80086da:	3338      	adds	r3, #56	; 0x38
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	fbb2 f1f3 	udiv	r1, r2, r3
 80086e2:	fb03 f301 	mul.w	r3, r3, r1
 80086e6:	1ad3      	subs	r3, r2, r3
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d110      	bne.n	800870e <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80086ec:	78fa      	ldrb	r2, [r7, #3]
 80086ee:	6879      	ldr	r1, [r7, #4]
 80086f0:	4613      	mov	r3, r2
 80086f2:	009b      	lsls	r3, r3, #2
 80086f4:	4413      	add	r3, r2
 80086f6:	009b      	lsls	r3, r3, #2
 80086f8:	440b      	add	r3, r1
 80086fa:	331c      	adds	r3, #28
 80086fc:	2200      	movs	r2, #0
 80086fe:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008700:	78f9      	ldrb	r1, [r7, #3]
 8008702:	2300      	movs	r3, #0
 8008704:	2200      	movs	r2, #0
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	f001 fe00 	bl	800a30c <USBD_LL_Transmit>
 800870c:	e003      	b.n	8008716 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	2200      	movs	r2, #0
 8008712:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8008716:	2300      	movs	r3, #0
 8008718:	e000      	b.n	800871c <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800871a:	2302      	movs	r3, #2
  }
}
 800871c:	4618      	mov	r0, r3
 800871e:	3710      	adds	r7, #16
 8008720:	46bd      	mov	sp, r7
 8008722:	bd80      	pop	{r7, pc}

08008724 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b084      	sub	sp, #16
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
 800872c:	460b      	mov	r3, r1
 800872e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008736:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008738:	78fb      	ldrb	r3, [r7, #3]
 800873a:	4619      	mov	r1, r3
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f001 fe2b 	bl	800a398 <USBD_LL_GetRxDataSize>
 8008742:	4602      	mov	r2, r0
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008750:	2b00      	cmp	r3, #0
 8008752:	d00d      	beq.n	8008770 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800875a:	68db      	ldr	r3, [r3, #12]
 800875c:	68fa      	ldr	r2, [r7, #12]
 800875e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008762:	68fa      	ldr	r2, [r7, #12]
 8008764:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008768:	4611      	mov	r1, r2
 800876a:	4798      	blx	r3

    return USBD_OK;
 800876c:	2300      	movs	r3, #0
 800876e:	e000      	b.n	8008772 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008770:	2302      	movs	r3, #2
  }
}
 8008772:	4618      	mov	r0, r3
 8008774:	3710      	adds	r7, #16
 8008776:	46bd      	mov	sp, r7
 8008778:	bd80      	pop	{r7, pc}

0800877a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800877a:	b580      	push	{r7, lr}
 800877c:	b084      	sub	sp, #16
 800877e:	af00      	add	r7, sp, #0
 8008780:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008788:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008790:	2b00      	cmp	r3, #0
 8008792:	d015      	beq.n	80087c0 <USBD_CDC_EP0_RxReady+0x46>
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800879a:	2bff      	cmp	r3, #255	; 0xff
 800879c:	d010      	beq.n	80087c0 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80087a4:	689b      	ldr	r3, [r3, #8]
 80087a6:	68fa      	ldr	r2, [r7, #12]
 80087a8:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80087ac:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80087ae:	68fa      	ldr	r2, [r7, #12]
 80087b0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80087b4:	b292      	uxth	r2, r2
 80087b6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	22ff      	movs	r2, #255	; 0xff
 80087bc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80087c0:	2300      	movs	r3, #0
}
 80087c2:	4618      	mov	r0, r3
 80087c4:	3710      	adds	r7, #16
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}
	...

080087cc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80087cc:	b480      	push	{r7}
 80087ce:	b083      	sub	sp, #12
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2243      	movs	r2, #67	; 0x43
 80087d8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80087da:	4b03      	ldr	r3, [pc, #12]	; (80087e8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80087dc:	4618      	mov	r0, r3
 80087de:	370c      	adds	r7, #12
 80087e0:	46bd      	mov	sp, r7
 80087e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e6:	4770      	bx	lr
 80087e8:	20000094 	.word	0x20000094

080087ec <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80087ec:	b480      	push	{r7}
 80087ee:	b083      	sub	sp, #12
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2243      	movs	r2, #67	; 0x43
 80087f8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80087fa:	4b03      	ldr	r3, [pc, #12]	; (8008808 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80087fc:	4618      	mov	r0, r3
 80087fe:	370c      	adds	r7, #12
 8008800:	46bd      	mov	sp, r7
 8008802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008806:	4770      	bx	lr
 8008808:	20000050 	.word	0x20000050

0800880c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800880c:	b480      	push	{r7}
 800880e:	b083      	sub	sp, #12
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2243      	movs	r2, #67	; 0x43
 8008818:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800881a:	4b03      	ldr	r3, [pc, #12]	; (8008828 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800881c:	4618      	mov	r0, r3
 800881e:	370c      	adds	r7, #12
 8008820:	46bd      	mov	sp, r7
 8008822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008826:	4770      	bx	lr
 8008828:	200000d8 	.word	0x200000d8

0800882c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800882c:	b480      	push	{r7}
 800882e:	b083      	sub	sp, #12
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	220a      	movs	r2, #10
 8008838:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800883a:	4b03      	ldr	r3, [pc, #12]	; (8008848 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800883c:	4618      	mov	r0, r3
 800883e:	370c      	adds	r7, #12
 8008840:	46bd      	mov	sp, r7
 8008842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008846:	4770      	bx	lr
 8008848:	2000000c 	.word	0x2000000c

0800884c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800884c:	b480      	push	{r7}
 800884e:	b085      	sub	sp, #20
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
 8008854:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008856:	2302      	movs	r3, #2
 8008858:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d005      	beq.n	800886c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	683a      	ldr	r2, [r7, #0]
 8008864:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8008868:	2300      	movs	r3, #0
 800886a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800886c:	7bfb      	ldrb	r3, [r7, #15]
}
 800886e:	4618      	mov	r0, r3
 8008870:	3714      	adds	r7, #20
 8008872:	46bd      	mov	sp, r7
 8008874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008878:	4770      	bx	lr

0800887a <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800887a:	b480      	push	{r7}
 800887c:	b087      	sub	sp, #28
 800887e:	af00      	add	r7, sp, #0
 8008880:	60f8      	str	r0, [r7, #12]
 8008882:	60b9      	str	r1, [r7, #8]
 8008884:	4613      	mov	r3, r2
 8008886:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800888e:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008890:	697b      	ldr	r3, [r7, #20]
 8008892:	68ba      	ldr	r2, [r7, #8]
 8008894:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008898:	88fa      	ldrh	r2, [r7, #6]
 800889a:	697b      	ldr	r3, [r7, #20]
 800889c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80088a0:	2300      	movs	r3, #0
}
 80088a2:	4618      	mov	r0, r3
 80088a4:	371c      	adds	r7, #28
 80088a6:	46bd      	mov	sp, r7
 80088a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ac:	4770      	bx	lr

080088ae <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80088ae:	b480      	push	{r7}
 80088b0:	b085      	sub	sp, #20
 80088b2:	af00      	add	r7, sp, #0
 80088b4:	6078      	str	r0, [r7, #4]
 80088b6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088be:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	683a      	ldr	r2, [r7, #0]
 80088c4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80088c8:	2300      	movs	r3, #0
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	3714      	adds	r7, #20
 80088ce:	46bd      	mov	sp, r7
 80088d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d4:	4770      	bx	lr

080088d6 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80088d6:	b580      	push	{r7, lr}
 80088d8:	b084      	sub	sp, #16
 80088da:	af00      	add	r7, sp, #0
 80088dc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088e4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d01c      	beq.n	800892a <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d115      	bne.n	8008926 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	2201      	movs	r2, #1
 80088fe:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008918:	b29b      	uxth	r3, r3
 800891a:	2181      	movs	r1, #129	; 0x81
 800891c:	6878      	ldr	r0, [r7, #4]
 800891e:	f001 fcf5 	bl	800a30c <USBD_LL_Transmit>

      return USBD_OK;
 8008922:	2300      	movs	r3, #0
 8008924:	e002      	b.n	800892c <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8008926:	2301      	movs	r3, #1
 8008928:	e000      	b.n	800892c <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800892a:	2302      	movs	r3, #2
  }
}
 800892c:	4618      	mov	r0, r3
 800892e:	3710      	adds	r7, #16
 8008930:	46bd      	mov	sp, r7
 8008932:	bd80      	pop	{r7, pc}

08008934 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b084      	sub	sp, #16
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008942:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800894a:	2b00      	cmp	r3, #0
 800894c:	d017      	beq.n	800897e <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	7c1b      	ldrb	r3, [r3, #16]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d109      	bne.n	800896a <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800895c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008960:	2101      	movs	r1, #1
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f001 fcf5 	bl	800a352 <USBD_LL_PrepareReceive>
 8008968:	e007      	b.n	800897a <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008970:	2340      	movs	r3, #64	; 0x40
 8008972:	2101      	movs	r1, #1
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f001 fcec 	bl	800a352 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800897a:	2300      	movs	r3, #0
 800897c:	e000      	b.n	8008980 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800897e:	2302      	movs	r3, #2
  }
}
 8008980:	4618      	mov	r0, r3
 8008982:	3710      	adds	r7, #16
 8008984:	46bd      	mov	sp, r7
 8008986:	bd80      	pop	{r7, pc}

08008988 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b084      	sub	sp, #16
 800898c:	af00      	add	r7, sp, #0
 800898e:	60f8      	str	r0, [r7, #12]
 8008990:	60b9      	str	r1, [r7, #8]
 8008992:	4613      	mov	r3, r2
 8008994:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d101      	bne.n	80089a0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800899c:	2302      	movs	r3, #2
 800899e:	e01a      	b.n	80089d6 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d003      	beq.n	80089b2 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	2200      	movs	r2, #0
 80089ae:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80089b2:	68bb      	ldr	r3, [r7, #8]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d003      	beq.n	80089c0 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	68ba      	ldr	r2, [r7, #8]
 80089bc:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	2201      	movs	r2, #1
 80089c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	79fa      	ldrb	r2, [r7, #7]
 80089cc:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80089ce:	68f8      	ldr	r0, [r7, #12]
 80089d0:	f001 fb58 	bl	800a084 <USBD_LL_Init>

  return USBD_OK;
 80089d4:	2300      	movs	r3, #0
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	3710      	adds	r7, #16
 80089da:	46bd      	mov	sp, r7
 80089dc:	bd80      	pop	{r7, pc}

080089de <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80089de:	b480      	push	{r7}
 80089e0:	b085      	sub	sp, #20
 80089e2:	af00      	add	r7, sp, #0
 80089e4:	6078      	str	r0, [r7, #4]
 80089e6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80089e8:	2300      	movs	r3, #0
 80089ea:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d006      	beq.n	8008a00 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	683a      	ldr	r2, [r7, #0]
 80089f6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80089fa:	2300      	movs	r3, #0
 80089fc:	73fb      	strb	r3, [r7, #15]
 80089fe:	e001      	b.n	8008a04 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008a00:	2302      	movs	r3, #2
 8008a02:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008a04:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a06:	4618      	mov	r0, r3
 8008a08:	3714      	adds	r7, #20
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a10:	4770      	bx	lr

08008a12 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008a12:	b580      	push	{r7, lr}
 8008a14:	b082      	sub	sp, #8
 8008a16:	af00      	add	r7, sp, #0
 8008a18:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f001 fb8c 	bl	800a138 <USBD_LL_Start>

  return USBD_OK;
 8008a20:	2300      	movs	r3, #0
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	3708      	adds	r7, #8
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}

08008a2a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008a2a:	b480      	push	{r7}
 8008a2c:	b083      	sub	sp, #12
 8008a2e:	af00      	add	r7, sp, #0
 8008a30:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008a32:	2300      	movs	r3, #0
}
 8008a34:	4618      	mov	r0, r3
 8008a36:	370c      	adds	r7, #12
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3e:	4770      	bx	lr

08008a40 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b084      	sub	sp, #16
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
 8008a48:	460b      	mov	r3, r1
 8008a4a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008a4c:	2302      	movs	r3, #2
 8008a4e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d00c      	beq.n	8008a74 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	78fa      	ldrb	r2, [r7, #3]
 8008a64:	4611      	mov	r1, r2
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	4798      	blx	r3
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d101      	bne.n	8008a74 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008a70:	2300      	movs	r3, #0
 8008a72:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a76:	4618      	mov	r0, r3
 8008a78:	3710      	adds	r7, #16
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bd80      	pop	{r7, pc}

08008a7e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008a7e:	b580      	push	{r7, lr}
 8008a80:	b082      	sub	sp, #8
 8008a82:	af00      	add	r7, sp, #0
 8008a84:	6078      	str	r0, [r7, #4]
 8008a86:	460b      	mov	r3, r1
 8008a88:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a90:	685b      	ldr	r3, [r3, #4]
 8008a92:	78fa      	ldrb	r2, [r7, #3]
 8008a94:	4611      	mov	r1, r2
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	4798      	blx	r3

  return USBD_OK;
 8008a9a:	2300      	movs	r3, #0
}
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	3708      	adds	r7, #8
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd80      	pop	{r7, pc}

08008aa4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b082      	sub	sp, #8
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
 8008aac:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008ab4:	6839      	ldr	r1, [r7, #0]
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	f000 fedb 	bl	8009872 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2201      	movs	r2, #1
 8008ac0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008aca:	461a      	mov	r2, r3
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008ad8:	f003 031f 	and.w	r3, r3, #31
 8008adc:	2b02      	cmp	r3, #2
 8008ade:	d016      	beq.n	8008b0e <USBD_LL_SetupStage+0x6a>
 8008ae0:	2b02      	cmp	r3, #2
 8008ae2:	d81c      	bhi.n	8008b1e <USBD_LL_SetupStage+0x7a>
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d002      	beq.n	8008aee <USBD_LL_SetupStage+0x4a>
 8008ae8:	2b01      	cmp	r3, #1
 8008aea:	d008      	beq.n	8008afe <USBD_LL_SetupStage+0x5a>
 8008aec:	e017      	b.n	8008b1e <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008af4:	4619      	mov	r1, r3
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f000 f9ce 	bl	8008e98 <USBD_StdDevReq>
      break;
 8008afc:	e01a      	b.n	8008b34 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008b04:	4619      	mov	r1, r3
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f000 fa30 	bl	8008f6c <USBD_StdItfReq>
      break;
 8008b0c:	e012      	b.n	8008b34 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008b14:	4619      	mov	r1, r3
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f000 fa70 	bl	8008ffc <USBD_StdEPReq>
      break;
 8008b1c:	e00a      	b.n	8008b34 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008b24:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008b28:	b2db      	uxtb	r3, r3
 8008b2a:	4619      	mov	r1, r3
 8008b2c:	6878      	ldr	r0, [r7, #4]
 8008b2e:	f001 fb63 	bl	800a1f8 <USBD_LL_StallEP>
      break;
 8008b32:	bf00      	nop
  }

  return USBD_OK;
 8008b34:	2300      	movs	r3, #0
}
 8008b36:	4618      	mov	r0, r3
 8008b38:	3708      	adds	r7, #8
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	bd80      	pop	{r7, pc}

08008b3e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008b3e:	b580      	push	{r7, lr}
 8008b40:	b086      	sub	sp, #24
 8008b42:	af00      	add	r7, sp, #0
 8008b44:	60f8      	str	r0, [r7, #12]
 8008b46:	460b      	mov	r3, r1
 8008b48:	607a      	str	r2, [r7, #4]
 8008b4a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008b4c:	7afb      	ldrb	r3, [r7, #11]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d14b      	bne.n	8008bea <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008b58:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008b60:	2b03      	cmp	r3, #3
 8008b62:	d134      	bne.n	8008bce <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008b64:	697b      	ldr	r3, [r7, #20]
 8008b66:	68da      	ldr	r2, [r3, #12]
 8008b68:	697b      	ldr	r3, [r7, #20]
 8008b6a:	691b      	ldr	r3, [r3, #16]
 8008b6c:	429a      	cmp	r2, r3
 8008b6e:	d919      	bls.n	8008ba4 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008b70:	697b      	ldr	r3, [r7, #20]
 8008b72:	68da      	ldr	r2, [r3, #12]
 8008b74:	697b      	ldr	r3, [r7, #20]
 8008b76:	691b      	ldr	r3, [r3, #16]
 8008b78:	1ad2      	subs	r2, r2, r3
 8008b7a:	697b      	ldr	r3, [r7, #20]
 8008b7c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008b7e:	697b      	ldr	r3, [r7, #20]
 8008b80:	68da      	ldr	r2, [r3, #12]
 8008b82:	697b      	ldr	r3, [r7, #20]
 8008b84:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008b86:	429a      	cmp	r2, r3
 8008b88:	d203      	bcs.n	8008b92 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008b8a:	697b      	ldr	r3, [r7, #20]
 8008b8c:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008b8e:	b29b      	uxth	r3, r3
 8008b90:	e002      	b.n	8008b98 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008b92:	697b      	ldr	r3, [r7, #20]
 8008b94:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008b96:	b29b      	uxth	r3, r3
 8008b98:	461a      	mov	r2, r3
 8008b9a:	6879      	ldr	r1, [r7, #4]
 8008b9c:	68f8      	ldr	r0, [r7, #12]
 8008b9e:	f000 ff5c 	bl	8009a5a <USBD_CtlContinueRx>
 8008ba2:	e038      	b.n	8008c16 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008baa:	691b      	ldr	r3, [r3, #16]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d00a      	beq.n	8008bc6 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008bb6:	2b03      	cmp	r3, #3
 8008bb8:	d105      	bne.n	8008bc6 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bc0:	691b      	ldr	r3, [r3, #16]
 8008bc2:	68f8      	ldr	r0, [r7, #12]
 8008bc4:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008bc6:	68f8      	ldr	r0, [r7, #12]
 8008bc8:	f000 ff59 	bl	8009a7e <USBD_CtlSendStatus>
 8008bcc:	e023      	b.n	8008c16 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008bd4:	2b05      	cmp	r3, #5
 8008bd6:	d11e      	bne.n	8008c16 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	2200      	movs	r2, #0
 8008bdc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008be0:	2100      	movs	r1, #0
 8008be2:	68f8      	ldr	r0, [r7, #12]
 8008be4:	f001 fb08 	bl	800a1f8 <USBD_LL_StallEP>
 8008be8:	e015      	b.n	8008c16 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bf0:	699b      	ldr	r3, [r3, #24]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d00d      	beq.n	8008c12 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008bfc:	2b03      	cmp	r3, #3
 8008bfe:	d108      	bne.n	8008c12 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c06:	699b      	ldr	r3, [r3, #24]
 8008c08:	7afa      	ldrb	r2, [r7, #11]
 8008c0a:	4611      	mov	r1, r2
 8008c0c:	68f8      	ldr	r0, [r7, #12]
 8008c0e:	4798      	blx	r3
 8008c10:	e001      	b.n	8008c16 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008c12:	2302      	movs	r3, #2
 8008c14:	e000      	b.n	8008c18 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008c16:	2300      	movs	r3, #0
}
 8008c18:	4618      	mov	r0, r3
 8008c1a:	3718      	adds	r7, #24
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	bd80      	pop	{r7, pc}

08008c20 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b086      	sub	sp, #24
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	60f8      	str	r0, [r7, #12]
 8008c28:	460b      	mov	r3, r1
 8008c2a:	607a      	str	r2, [r7, #4]
 8008c2c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008c2e:	7afb      	ldrb	r3, [r7, #11]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d17f      	bne.n	8008d34 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	3314      	adds	r3, #20
 8008c38:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008c40:	2b02      	cmp	r3, #2
 8008c42:	d15c      	bne.n	8008cfe <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8008c44:	697b      	ldr	r3, [r7, #20]
 8008c46:	68da      	ldr	r2, [r3, #12]
 8008c48:	697b      	ldr	r3, [r7, #20]
 8008c4a:	691b      	ldr	r3, [r3, #16]
 8008c4c:	429a      	cmp	r2, r3
 8008c4e:	d915      	bls.n	8008c7c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008c50:	697b      	ldr	r3, [r7, #20]
 8008c52:	68da      	ldr	r2, [r3, #12]
 8008c54:	697b      	ldr	r3, [r7, #20]
 8008c56:	691b      	ldr	r3, [r3, #16]
 8008c58:	1ad2      	subs	r2, r2, r3
 8008c5a:	697b      	ldr	r3, [r7, #20]
 8008c5c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008c5e:	697b      	ldr	r3, [r7, #20]
 8008c60:	68db      	ldr	r3, [r3, #12]
 8008c62:	b29b      	uxth	r3, r3
 8008c64:	461a      	mov	r2, r3
 8008c66:	6879      	ldr	r1, [r7, #4]
 8008c68:	68f8      	ldr	r0, [r7, #12]
 8008c6a:	f000 fec6 	bl	80099fa <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008c6e:	2300      	movs	r3, #0
 8008c70:	2200      	movs	r2, #0
 8008c72:	2100      	movs	r1, #0
 8008c74:	68f8      	ldr	r0, [r7, #12]
 8008c76:	f001 fb6c 	bl	800a352 <USBD_LL_PrepareReceive>
 8008c7a:	e04e      	b.n	8008d1a <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008c7c:	697b      	ldr	r3, [r7, #20]
 8008c7e:	689b      	ldr	r3, [r3, #8]
 8008c80:	697a      	ldr	r2, [r7, #20]
 8008c82:	6912      	ldr	r2, [r2, #16]
 8008c84:	fbb3 f1f2 	udiv	r1, r3, r2
 8008c88:	fb02 f201 	mul.w	r2, r2, r1
 8008c8c:	1a9b      	subs	r3, r3, r2
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d11c      	bne.n	8008ccc <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008c92:	697b      	ldr	r3, [r7, #20]
 8008c94:	689a      	ldr	r2, [r3, #8]
 8008c96:	697b      	ldr	r3, [r7, #20]
 8008c98:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008c9a:	429a      	cmp	r2, r3
 8008c9c:	d316      	bcc.n	8008ccc <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8008c9e:	697b      	ldr	r3, [r7, #20]
 8008ca0:	689a      	ldr	r2, [r3, #8]
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008ca8:	429a      	cmp	r2, r3
 8008caa:	d20f      	bcs.n	8008ccc <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008cac:	2200      	movs	r2, #0
 8008cae:	2100      	movs	r1, #0
 8008cb0:	68f8      	ldr	r0, [r7, #12]
 8008cb2:	f000 fea2 	bl	80099fa <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	2200      	movs	r2, #0
 8008cba:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	2100      	movs	r1, #0
 8008cc4:	68f8      	ldr	r0, [r7, #12]
 8008cc6:	f001 fb44 	bl	800a352 <USBD_LL_PrepareReceive>
 8008cca:	e026      	b.n	8008d1a <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cd2:	68db      	ldr	r3, [r3, #12]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d00a      	beq.n	8008cee <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008cde:	2b03      	cmp	r3, #3
 8008ce0:	d105      	bne.n	8008cee <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ce8:	68db      	ldr	r3, [r3, #12]
 8008cea:	68f8      	ldr	r0, [r7, #12]
 8008cec:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008cee:	2180      	movs	r1, #128	; 0x80
 8008cf0:	68f8      	ldr	r0, [r7, #12]
 8008cf2:	f001 fa81 	bl	800a1f8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008cf6:	68f8      	ldr	r0, [r7, #12]
 8008cf8:	f000 fed4 	bl	8009aa4 <USBD_CtlReceiveStatus>
 8008cfc:	e00d      	b.n	8008d1a <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008d04:	2b04      	cmp	r3, #4
 8008d06:	d004      	beq.n	8008d12 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d103      	bne.n	8008d1a <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008d12:	2180      	movs	r1, #128	; 0x80
 8008d14:	68f8      	ldr	r0, [r7, #12]
 8008d16:	f001 fa6f 	bl	800a1f8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008d20:	2b01      	cmp	r3, #1
 8008d22:	d11d      	bne.n	8008d60 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008d24:	68f8      	ldr	r0, [r7, #12]
 8008d26:	f7ff fe80 	bl	8008a2a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008d32:	e015      	b.n	8008d60 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d3a:	695b      	ldr	r3, [r3, #20]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d00d      	beq.n	8008d5c <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008d46:	2b03      	cmp	r3, #3
 8008d48:	d108      	bne.n	8008d5c <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d50:	695b      	ldr	r3, [r3, #20]
 8008d52:	7afa      	ldrb	r2, [r7, #11]
 8008d54:	4611      	mov	r1, r2
 8008d56:	68f8      	ldr	r0, [r7, #12]
 8008d58:	4798      	blx	r3
 8008d5a:	e001      	b.n	8008d60 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008d5c:	2302      	movs	r3, #2
 8008d5e:	e000      	b.n	8008d62 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008d60:	2300      	movs	r3, #0
}
 8008d62:	4618      	mov	r0, r3
 8008d64:	3718      	adds	r7, #24
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bd80      	pop	{r7, pc}

08008d6a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008d6a:	b580      	push	{r7, lr}
 8008d6c:	b082      	sub	sp, #8
 8008d6e:	af00      	add	r7, sp, #0
 8008d70:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008d72:	2340      	movs	r3, #64	; 0x40
 8008d74:	2200      	movs	r2, #0
 8008d76:	2100      	movs	r1, #0
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f001 f9f8 	bl	800a16e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	2201      	movs	r2, #1
 8008d82:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2240      	movs	r2, #64	; 0x40
 8008d8a:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008d8e:	2340      	movs	r3, #64	; 0x40
 8008d90:	2200      	movs	r2, #0
 8008d92:	2180      	movs	r1, #128	; 0x80
 8008d94:	6878      	ldr	r0, [r7, #4]
 8008d96:	f001 f9ea 	bl	800a16e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2201      	movs	r2, #1
 8008d9e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2240      	movs	r2, #64	; 0x40
 8008da4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2201      	movs	r2, #1
 8008daa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2200      	movs	r2, #0
 8008db2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2200      	movs	r2, #0
 8008dba:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d009      	beq.n	8008de2 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008dd4:	685b      	ldr	r3, [r3, #4]
 8008dd6:	687a      	ldr	r2, [r7, #4]
 8008dd8:	6852      	ldr	r2, [r2, #4]
 8008dda:	b2d2      	uxtb	r2, r2
 8008ddc:	4611      	mov	r1, r2
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	4798      	blx	r3
  }

  return USBD_OK;
 8008de2:	2300      	movs	r3, #0
}
 8008de4:	4618      	mov	r0, r3
 8008de6:	3708      	adds	r7, #8
 8008de8:	46bd      	mov	sp, r7
 8008dea:	bd80      	pop	{r7, pc}

08008dec <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008dec:	b480      	push	{r7}
 8008dee:	b083      	sub	sp, #12
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
 8008df4:	460b      	mov	r3, r1
 8008df6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	78fa      	ldrb	r2, [r7, #3]
 8008dfc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008dfe:	2300      	movs	r3, #0
}
 8008e00:	4618      	mov	r0, r3
 8008e02:	370c      	adds	r7, #12
 8008e04:	46bd      	mov	sp, r7
 8008e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0a:	4770      	bx	lr

08008e0c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008e0c:	b480      	push	{r7}
 8008e0e:	b083      	sub	sp, #12
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2204      	movs	r2, #4
 8008e24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008e28:	2300      	movs	r3, #0
}
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	370c      	adds	r7, #12
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e34:	4770      	bx	lr

08008e36 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008e36:	b480      	push	{r7}
 8008e38:	b083      	sub	sp, #12
 8008e3a:	af00      	add	r7, sp, #0
 8008e3c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e44:	2b04      	cmp	r3, #4
 8008e46:	d105      	bne.n	8008e54 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008e54:	2300      	movs	r3, #0
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	370c      	adds	r7, #12
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e60:	4770      	bx	lr

08008e62 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008e62:	b580      	push	{r7, lr}
 8008e64:	b082      	sub	sp, #8
 8008e66:	af00      	add	r7, sp, #0
 8008e68:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e70:	2b03      	cmp	r3, #3
 8008e72:	d10b      	bne.n	8008e8c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e7a:	69db      	ldr	r3, [r3, #28]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d005      	beq.n	8008e8c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e86:	69db      	ldr	r3, [r3, #28]
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008e8c:	2300      	movs	r3, #0
}
 8008e8e:	4618      	mov	r0, r3
 8008e90:	3708      	adds	r7, #8
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bd80      	pop	{r7, pc}
	...

08008e98 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b084      	sub	sp, #16
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
 8008ea0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	781b      	ldrb	r3, [r3, #0]
 8008eaa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008eae:	2b40      	cmp	r3, #64	; 0x40
 8008eb0:	d005      	beq.n	8008ebe <USBD_StdDevReq+0x26>
 8008eb2:	2b40      	cmp	r3, #64	; 0x40
 8008eb4:	d84f      	bhi.n	8008f56 <USBD_StdDevReq+0xbe>
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d009      	beq.n	8008ece <USBD_StdDevReq+0x36>
 8008eba:	2b20      	cmp	r3, #32
 8008ebc:	d14b      	bne.n	8008f56 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ec4:	689b      	ldr	r3, [r3, #8]
 8008ec6:	6839      	ldr	r1, [r7, #0]
 8008ec8:	6878      	ldr	r0, [r7, #4]
 8008eca:	4798      	blx	r3
      break;
 8008ecc:	e048      	b.n	8008f60 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	785b      	ldrb	r3, [r3, #1]
 8008ed2:	2b09      	cmp	r3, #9
 8008ed4:	d839      	bhi.n	8008f4a <USBD_StdDevReq+0xb2>
 8008ed6:	a201      	add	r2, pc, #4	; (adr r2, 8008edc <USBD_StdDevReq+0x44>)
 8008ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008edc:	08008f2d 	.word	0x08008f2d
 8008ee0:	08008f41 	.word	0x08008f41
 8008ee4:	08008f4b 	.word	0x08008f4b
 8008ee8:	08008f37 	.word	0x08008f37
 8008eec:	08008f4b 	.word	0x08008f4b
 8008ef0:	08008f0f 	.word	0x08008f0f
 8008ef4:	08008f05 	.word	0x08008f05
 8008ef8:	08008f4b 	.word	0x08008f4b
 8008efc:	08008f23 	.word	0x08008f23
 8008f00:	08008f19 	.word	0x08008f19
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008f04:	6839      	ldr	r1, [r7, #0]
 8008f06:	6878      	ldr	r0, [r7, #4]
 8008f08:	f000 f9dc 	bl	80092c4 <USBD_GetDescriptor>
          break;
 8008f0c:	e022      	b.n	8008f54 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008f0e:	6839      	ldr	r1, [r7, #0]
 8008f10:	6878      	ldr	r0, [r7, #4]
 8008f12:	f000 fb3f 	bl	8009594 <USBD_SetAddress>
          break;
 8008f16:	e01d      	b.n	8008f54 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008f18:	6839      	ldr	r1, [r7, #0]
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f000 fb7e 	bl	800961c <USBD_SetConfig>
          break;
 8008f20:	e018      	b.n	8008f54 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008f22:	6839      	ldr	r1, [r7, #0]
 8008f24:	6878      	ldr	r0, [r7, #4]
 8008f26:	f000 fc07 	bl	8009738 <USBD_GetConfig>
          break;
 8008f2a:	e013      	b.n	8008f54 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008f2c:	6839      	ldr	r1, [r7, #0]
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	f000 fc37 	bl	80097a2 <USBD_GetStatus>
          break;
 8008f34:	e00e      	b.n	8008f54 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008f36:	6839      	ldr	r1, [r7, #0]
 8008f38:	6878      	ldr	r0, [r7, #4]
 8008f3a:	f000 fc65 	bl	8009808 <USBD_SetFeature>
          break;
 8008f3e:	e009      	b.n	8008f54 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008f40:	6839      	ldr	r1, [r7, #0]
 8008f42:	6878      	ldr	r0, [r7, #4]
 8008f44:	f000 fc74 	bl	8009830 <USBD_ClrFeature>
          break;
 8008f48:	e004      	b.n	8008f54 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008f4a:	6839      	ldr	r1, [r7, #0]
 8008f4c:	6878      	ldr	r0, [r7, #4]
 8008f4e:	f000 fccd 	bl	80098ec <USBD_CtlError>
          break;
 8008f52:	bf00      	nop
      }
      break;
 8008f54:	e004      	b.n	8008f60 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8008f56:	6839      	ldr	r1, [r7, #0]
 8008f58:	6878      	ldr	r0, [r7, #4]
 8008f5a:	f000 fcc7 	bl	80098ec <USBD_CtlError>
      break;
 8008f5e:	bf00      	nop
  }

  return ret;
 8008f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f62:	4618      	mov	r0, r3
 8008f64:	3710      	adds	r7, #16
 8008f66:	46bd      	mov	sp, r7
 8008f68:	bd80      	pop	{r7, pc}
 8008f6a:	bf00      	nop

08008f6c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b084      	sub	sp, #16
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
 8008f74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008f76:	2300      	movs	r3, #0
 8008f78:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	781b      	ldrb	r3, [r3, #0]
 8008f7e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008f82:	2b40      	cmp	r3, #64	; 0x40
 8008f84:	d005      	beq.n	8008f92 <USBD_StdItfReq+0x26>
 8008f86:	2b40      	cmp	r3, #64	; 0x40
 8008f88:	d82e      	bhi.n	8008fe8 <USBD_StdItfReq+0x7c>
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d001      	beq.n	8008f92 <USBD_StdItfReq+0x26>
 8008f8e:	2b20      	cmp	r3, #32
 8008f90:	d12a      	bne.n	8008fe8 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f98:	3b01      	subs	r3, #1
 8008f9a:	2b02      	cmp	r3, #2
 8008f9c:	d81d      	bhi.n	8008fda <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	889b      	ldrh	r3, [r3, #4]
 8008fa2:	b2db      	uxtb	r3, r3
 8008fa4:	2b01      	cmp	r3, #1
 8008fa6:	d813      	bhi.n	8008fd0 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fae:	689b      	ldr	r3, [r3, #8]
 8008fb0:	6839      	ldr	r1, [r7, #0]
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	4798      	blx	r3
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	88db      	ldrh	r3, [r3, #6]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d110      	bne.n	8008fe4 <USBD_StdItfReq+0x78>
 8008fc2:	7bfb      	ldrb	r3, [r7, #15]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d10d      	bne.n	8008fe4 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	f000 fd58 	bl	8009a7e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008fce:	e009      	b.n	8008fe4 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8008fd0:	6839      	ldr	r1, [r7, #0]
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f000 fc8a 	bl	80098ec <USBD_CtlError>
          break;
 8008fd8:	e004      	b.n	8008fe4 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8008fda:	6839      	ldr	r1, [r7, #0]
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f000 fc85 	bl	80098ec <USBD_CtlError>
          break;
 8008fe2:	e000      	b.n	8008fe6 <USBD_StdItfReq+0x7a>
          break;
 8008fe4:	bf00      	nop
      }
      break;
 8008fe6:	e004      	b.n	8008ff2 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8008fe8:	6839      	ldr	r1, [r7, #0]
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f000 fc7e 	bl	80098ec <USBD_CtlError>
      break;
 8008ff0:	bf00      	nop
  }

  return USBD_OK;
 8008ff2:	2300      	movs	r3, #0
}
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	3710      	adds	r7, #16
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	bd80      	pop	{r7, pc}

08008ffc <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b084      	sub	sp, #16
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
 8009004:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009006:	2300      	movs	r3, #0
 8009008:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	889b      	ldrh	r3, [r3, #4]
 800900e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	781b      	ldrb	r3, [r3, #0]
 8009014:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009018:	2b40      	cmp	r3, #64	; 0x40
 800901a:	d007      	beq.n	800902c <USBD_StdEPReq+0x30>
 800901c:	2b40      	cmp	r3, #64	; 0x40
 800901e:	f200 8146 	bhi.w	80092ae <USBD_StdEPReq+0x2b2>
 8009022:	2b00      	cmp	r3, #0
 8009024:	d00a      	beq.n	800903c <USBD_StdEPReq+0x40>
 8009026:	2b20      	cmp	r3, #32
 8009028:	f040 8141 	bne.w	80092ae <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009032:	689b      	ldr	r3, [r3, #8]
 8009034:	6839      	ldr	r1, [r7, #0]
 8009036:	6878      	ldr	r0, [r7, #4]
 8009038:	4798      	blx	r3
      break;
 800903a:	e13d      	b.n	80092b8 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	781b      	ldrb	r3, [r3, #0]
 8009040:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009044:	2b20      	cmp	r3, #32
 8009046:	d10a      	bne.n	800905e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800904e:	689b      	ldr	r3, [r3, #8]
 8009050:	6839      	ldr	r1, [r7, #0]
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	4798      	blx	r3
 8009056:	4603      	mov	r3, r0
 8009058:	73fb      	strb	r3, [r7, #15]

        return ret;
 800905a:	7bfb      	ldrb	r3, [r7, #15]
 800905c:	e12d      	b.n	80092ba <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	785b      	ldrb	r3, [r3, #1]
 8009062:	2b03      	cmp	r3, #3
 8009064:	d007      	beq.n	8009076 <USBD_StdEPReq+0x7a>
 8009066:	2b03      	cmp	r3, #3
 8009068:	f300 811b 	bgt.w	80092a2 <USBD_StdEPReq+0x2a6>
 800906c:	2b00      	cmp	r3, #0
 800906e:	d072      	beq.n	8009156 <USBD_StdEPReq+0x15a>
 8009070:	2b01      	cmp	r3, #1
 8009072:	d03a      	beq.n	80090ea <USBD_StdEPReq+0xee>
 8009074:	e115      	b.n	80092a2 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800907c:	2b02      	cmp	r3, #2
 800907e:	d002      	beq.n	8009086 <USBD_StdEPReq+0x8a>
 8009080:	2b03      	cmp	r3, #3
 8009082:	d015      	beq.n	80090b0 <USBD_StdEPReq+0xb4>
 8009084:	e02b      	b.n	80090de <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009086:	7bbb      	ldrb	r3, [r7, #14]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d00c      	beq.n	80090a6 <USBD_StdEPReq+0xaa>
 800908c:	7bbb      	ldrb	r3, [r7, #14]
 800908e:	2b80      	cmp	r3, #128	; 0x80
 8009090:	d009      	beq.n	80090a6 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009092:	7bbb      	ldrb	r3, [r7, #14]
 8009094:	4619      	mov	r1, r3
 8009096:	6878      	ldr	r0, [r7, #4]
 8009098:	f001 f8ae 	bl	800a1f8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800909c:	2180      	movs	r1, #128	; 0x80
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	f001 f8aa 	bl	800a1f8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80090a4:	e020      	b.n	80090e8 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80090a6:	6839      	ldr	r1, [r7, #0]
 80090a8:	6878      	ldr	r0, [r7, #4]
 80090aa:	f000 fc1f 	bl	80098ec <USBD_CtlError>
              break;
 80090ae:	e01b      	b.n	80090e8 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	885b      	ldrh	r3, [r3, #2]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d10e      	bne.n	80090d6 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80090b8:	7bbb      	ldrb	r3, [r7, #14]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d00b      	beq.n	80090d6 <USBD_StdEPReq+0xda>
 80090be:	7bbb      	ldrb	r3, [r7, #14]
 80090c0:	2b80      	cmp	r3, #128	; 0x80
 80090c2:	d008      	beq.n	80090d6 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	88db      	ldrh	r3, [r3, #6]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d104      	bne.n	80090d6 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80090cc:	7bbb      	ldrb	r3, [r7, #14]
 80090ce:	4619      	mov	r1, r3
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	f001 f891 	bl	800a1f8 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	f000 fcd1 	bl	8009a7e <USBD_CtlSendStatus>

              break;
 80090dc:	e004      	b.n	80090e8 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80090de:	6839      	ldr	r1, [r7, #0]
 80090e0:	6878      	ldr	r0, [r7, #4]
 80090e2:	f000 fc03 	bl	80098ec <USBD_CtlError>
              break;
 80090e6:	bf00      	nop
          }
          break;
 80090e8:	e0e0      	b.n	80092ac <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090f0:	2b02      	cmp	r3, #2
 80090f2:	d002      	beq.n	80090fa <USBD_StdEPReq+0xfe>
 80090f4:	2b03      	cmp	r3, #3
 80090f6:	d015      	beq.n	8009124 <USBD_StdEPReq+0x128>
 80090f8:	e026      	b.n	8009148 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80090fa:	7bbb      	ldrb	r3, [r7, #14]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d00c      	beq.n	800911a <USBD_StdEPReq+0x11e>
 8009100:	7bbb      	ldrb	r3, [r7, #14]
 8009102:	2b80      	cmp	r3, #128	; 0x80
 8009104:	d009      	beq.n	800911a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009106:	7bbb      	ldrb	r3, [r7, #14]
 8009108:	4619      	mov	r1, r3
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	f001 f874 	bl	800a1f8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009110:	2180      	movs	r1, #128	; 0x80
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f001 f870 	bl	800a1f8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009118:	e01c      	b.n	8009154 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800911a:	6839      	ldr	r1, [r7, #0]
 800911c:	6878      	ldr	r0, [r7, #4]
 800911e:	f000 fbe5 	bl	80098ec <USBD_CtlError>
              break;
 8009122:	e017      	b.n	8009154 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	885b      	ldrh	r3, [r3, #2]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d112      	bne.n	8009152 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800912c:	7bbb      	ldrb	r3, [r7, #14]
 800912e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009132:	2b00      	cmp	r3, #0
 8009134:	d004      	beq.n	8009140 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8009136:	7bbb      	ldrb	r3, [r7, #14]
 8009138:	4619      	mov	r1, r3
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	f001 f87b 	bl	800a236 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f000 fc9c 	bl	8009a7e <USBD_CtlSendStatus>
              }
              break;
 8009146:	e004      	b.n	8009152 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8009148:	6839      	ldr	r1, [r7, #0]
 800914a:	6878      	ldr	r0, [r7, #4]
 800914c:	f000 fbce 	bl	80098ec <USBD_CtlError>
              break;
 8009150:	e000      	b.n	8009154 <USBD_StdEPReq+0x158>
              break;
 8009152:	bf00      	nop
          }
          break;
 8009154:	e0aa      	b.n	80092ac <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800915c:	2b02      	cmp	r3, #2
 800915e:	d002      	beq.n	8009166 <USBD_StdEPReq+0x16a>
 8009160:	2b03      	cmp	r3, #3
 8009162:	d032      	beq.n	80091ca <USBD_StdEPReq+0x1ce>
 8009164:	e097      	b.n	8009296 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009166:	7bbb      	ldrb	r3, [r7, #14]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d007      	beq.n	800917c <USBD_StdEPReq+0x180>
 800916c:	7bbb      	ldrb	r3, [r7, #14]
 800916e:	2b80      	cmp	r3, #128	; 0x80
 8009170:	d004      	beq.n	800917c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8009172:	6839      	ldr	r1, [r7, #0]
 8009174:	6878      	ldr	r0, [r7, #4]
 8009176:	f000 fbb9 	bl	80098ec <USBD_CtlError>
                break;
 800917a:	e091      	b.n	80092a0 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800917c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009180:	2b00      	cmp	r3, #0
 8009182:	da0b      	bge.n	800919c <USBD_StdEPReq+0x1a0>
 8009184:	7bbb      	ldrb	r3, [r7, #14]
 8009186:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800918a:	4613      	mov	r3, r2
 800918c:	009b      	lsls	r3, r3, #2
 800918e:	4413      	add	r3, r2
 8009190:	009b      	lsls	r3, r3, #2
 8009192:	3310      	adds	r3, #16
 8009194:	687a      	ldr	r2, [r7, #4]
 8009196:	4413      	add	r3, r2
 8009198:	3304      	adds	r3, #4
 800919a:	e00b      	b.n	80091b4 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800919c:	7bbb      	ldrb	r3, [r7, #14]
 800919e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80091a2:	4613      	mov	r3, r2
 80091a4:	009b      	lsls	r3, r3, #2
 80091a6:	4413      	add	r3, r2
 80091a8:	009b      	lsls	r3, r3, #2
 80091aa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80091ae:	687a      	ldr	r2, [r7, #4]
 80091b0:	4413      	add	r3, r2
 80091b2:	3304      	adds	r3, #4
 80091b4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80091b6:	68bb      	ldr	r3, [r7, #8]
 80091b8:	2200      	movs	r2, #0
 80091ba:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	2202      	movs	r2, #2
 80091c0:	4619      	mov	r1, r3
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f000 fbfd 	bl	80099c2 <USBD_CtlSendData>
              break;
 80091c8:	e06a      	b.n	80092a0 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80091ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	da11      	bge.n	80091f6 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80091d2:	7bbb      	ldrb	r3, [r7, #14]
 80091d4:	f003 020f 	and.w	r2, r3, #15
 80091d8:	6879      	ldr	r1, [r7, #4]
 80091da:	4613      	mov	r3, r2
 80091dc:	009b      	lsls	r3, r3, #2
 80091de:	4413      	add	r3, r2
 80091e0:	009b      	lsls	r3, r3, #2
 80091e2:	440b      	add	r3, r1
 80091e4:	3318      	adds	r3, #24
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d117      	bne.n	800921c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80091ec:	6839      	ldr	r1, [r7, #0]
 80091ee:	6878      	ldr	r0, [r7, #4]
 80091f0:	f000 fb7c 	bl	80098ec <USBD_CtlError>
                  break;
 80091f4:	e054      	b.n	80092a0 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80091f6:	7bbb      	ldrb	r3, [r7, #14]
 80091f8:	f003 020f 	and.w	r2, r3, #15
 80091fc:	6879      	ldr	r1, [r7, #4]
 80091fe:	4613      	mov	r3, r2
 8009200:	009b      	lsls	r3, r3, #2
 8009202:	4413      	add	r3, r2
 8009204:	009b      	lsls	r3, r3, #2
 8009206:	440b      	add	r3, r1
 8009208:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d104      	bne.n	800921c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009212:	6839      	ldr	r1, [r7, #0]
 8009214:	6878      	ldr	r0, [r7, #4]
 8009216:	f000 fb69 	bl	80098ec <USBD_CtlError>
                  break;
 800921a:	e041      	b.n	80092a0 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800921c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009220:	2b00      	cmp	r3, #0
 8009222:	da0b      	bge.n	800923c <USBD_StdEPReq+0x240>
 8009224:	7bbb      	ldrb	r3, [r7, #14]
 8009226:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800922a:	4613      	mov	r3, r2
 800922c:	009b      	lsls	r3, r3, #2
 800922e:	4413      	add	r3, r2
 8009230:	009b      	lsls	r3, r3, #2
 8009232:	3310      	adds	r3, #16
 8009234:	687a      	ldr	r2, [r7, #4]
 8009236:	4413      	add	r3, r2
 8009238:	3304      	adds	r3, #4
 800923a:	e00b      	b.n	8009254 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800923c:	7bbb      	ldrb	r3, [r7, #14]
 800923e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009242:	4613      	mov	r3, r2
 8009244:	009b      	lsls	r3, r3, #2
 8009246:	4413      	add	r3, r2
 8009248:	009b      	lsls	r3, r3, #2
 800924a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800924e:	687a      	ldr	r2, [r7, #4]
 8009250:	4413      	add	r3, r2
 8009252:	3304      	adds	r3, #4
 8009254:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009256:	7bbb      	ldrb	r3, [r7, #14]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d002      	beq.n	8009262 <USBD_StdEPReq+0x266>
 800925c:	7bbb      	ldrb	r3, [r7, #14]
 800925e:	2b80      	cmp	r3, #128	; 0x80
 8009260:	d103      	bne.n	800926a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8009262:	68bb      	ldr	r3, [r7, #8]
 8009264:	2200      	movs	r2, #0
 8009266:	601a      	str	r2, [r3, #0]
 8009268:	e00e      	b.n	8009288 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800926a:	7bbb      	ldrb	r3, [r7, #14]
 800926c:	4619      	mov	r1, r3
 800926e:	6878      	ldr	r0, [r7, #4]
 8009270:	f001 f800 	bl	800a274 <USBD_LL_IsStallEP>
 8009274:	4603      	mov	r3, r0
 8009276:	2b00      	cmp	r3, #0
 8009278:	d003      	beq.n	8009282 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800927a:	68bb      	ldr	r3, [r7, #8]
 800927c:	2201      	movs	r2, #1
 800927e:	601a      	str	r2, [r3, #0]
 8009280:	e002      	b.n	8009288 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8009282:	68bb      	ldr	r3, [r7, #8]
 8009284:	2200      	movs	r2, #0
 8009286:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009288:	68bb      	ldr	r3, [r7, #8]
 800928a:	2202      	movs	r2, #2
 800928c:	4619      	mov	r1, r3
 800928e:	6878      	ldr	r0, [r7, #4]
 8009290:	f000 fb97 	bl	80099c2 <USBD_CtlSendData>
              break;
 8009294:	e004      	b.n	80092a0 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8009296:	6839      	ldr	r1, [r7, #0]
 8009298:	6878      	ldr	r0, [r7, #4]
 800929a:	f000 fb27 	bl	80098ec <USBD_CtlError>
              break;
 800929e:	bf00      	nop
          }
          break;
 80092a0:	e004      	b.n	80092ac <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80092a2:	6839      	ldr	r1, [r7, #0]
 80092a4:	6878      	ldr	r0, [r7, #4]
 80092a6:	f000 fb21 	bl	80098ec <USBD_CtlError>
          break;
 80092aa:	bf00      	nop
      }
      break;
 80092ac:	e004      	b.n	80092b8 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80092ae:	6839      	ldr	r1, [r7, #0]
 80092b0:	6878      	ldr	r0, [r7, #4]
 80092b2:	f000 fb1b 	bl	80098ec <USBD_CtlError>
      break;
 80092b6:	bf00      	nop
  }

  return ret;
 80092b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80092ba:	4618      	mov	r0, r3
 80092bc:	3710      	adds	r7, #16
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd80      	pop	{r7, pc}
	...

080092c4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b084      	sub	sp, #16
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
 80092cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80092ce:	2300      	movs	r3, #0
 80092d0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80092d2:	2300      	movs	r3, #0
 80092d4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80092d6:	2300      	movs	r3, #0
 80092d8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	885b      	ldrh	r3, [r3, #2]
 80092de:	0a1b      	lsrs	r3, r3, #8
 80092e0:	b29b      	uxth	r3, r3
 80092e2:	3b01      	subs	r3, #1
 80092e4:	2b06      	cmp	r3, #6
 80092e6:	f200 8128 	bhi.w	800953a <USBD_GetDescriptor+0x276>
 80092ea:	a201      	add	r2, pc, #4	; (adr r2, 80092f0 <USBD_GetDescriptor+0x2c>)
 80092ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092f0:	0800930d 	.word	0x0800930d
 80092f4:	08009325 	.word	0x08009325
 80092f8:	08009365 	.word	0x08009365
 80092fc:	0800953b 	.word	0x0800953b
 8009300:	0800953b 	.word	0x0800953b
 8009304:	080094db 	.word	0x080094db
 8009308:	08009507 	.word	0x08009507
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	687a      	ldr	r2, [r7, #4]
 8009316:	7c12      	ldrb	r2, [r2, #16]
 8009318:	f107 0108 	add.w	r1, r7, #8
 800931c:	4610      	mov	r0, r2
 800931e:	4798      	blx	r3
 8009320:	60f8      	str	r0, [r7, #12]
      break;
 8009322:	e112      	b.n	800954a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	7c1b      	ldrb	r3, [r3, #16]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d10d      	bne.n	8009348 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009334:	f107 0208 	add.w	r2, r7, #8
 8009338:	4610      	mov	r0, r2
 800933a:	4798      	blx	r3
 800933c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	3301      	adds	r3, #1
 8009342:	2202      	movs	r2, #2
 8009344:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009346:	e100      	b.n	800954a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800934e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009350:	f107 0208 	add.w	r2, r7, #8
 8009354:	4610      	mov	r0, r2
 8009356:	4798      	blx	r3
 8009358:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	3301      	adds	r3, #1
 800935e:	2202      	movs	r2, #2
 8009360:	701a      	strb	r2, [r3, #0]
      break;
 8009362:	e0f2      	b.n	800954a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	885b      	ldrh	r3, [r3, #2]
 8009368:	b2db      	uxtb	r3, r3
 800936a:	2b05      	cmp	r3, #5
 800936c:	f200 80ac 	bhi.w	80094c8 <USBD_GetDescriptor+0x204>
 8009370:	a201      	add	r2, pc, #4	; (adr r2, 8009378 <USBD_GetDescriptor+0xb4>)
 8009372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009376:	bf00      	nop
 8009378:	08009391 	.word	0x08009391
 800937c:	080093c5 	.word	0x080093c5
 8009380:	080093f9 	.word	0x080093f9
 8009384:	0800942d 	.word	0x0800942d
 8009388:	08009461 	.word	0x08009461
 800938c:	08009495 	.word	0x08009495
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009396:	685b      	ldr	r3, [r3, #4]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d00b      	beq.n	80093b4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80093a2:	685b      	ldr	r3, [r3, #4]
 80093a4:	687a      	ldr	r2, [r7, #4]
 80093a6:	7c12      	ldrb	r2, [r2, #16]
 80093a8:	f107 0108 	add.w	r1, r7, #8
 80093ac:	4610      	mov	r0, r2
 80093ae:	4798      	blx	r3
 80093b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80093b2:	e091      	b.n	80094d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80093b4:	6839      	ldr	r1, [r7, #0]
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	f000 fa98 	bl	80098ec <USBD_CtlError>
            err++;
 80093bc:	7afb      	ldrb	r3, [r7, #11]
 80093be:	3301      	adds	r3, #1
 80093c0:	72fb      	strb	r3, [r7, #11]
          break;
 80093c2:	e089      	b.n	80094d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80093ca:	689b      	ldr	r3, [r3, #8]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d00b      	beq.n	80093e8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80093d6:	689b      	ldr	r3, [r3, #8]
 80093d8:	687a      	ldr	r2, [r7, #4]
 80093da:	7c12      	ldrb	r2, [r2, #16]
 80093dc:	f107 0108 	add.w	r1, r7, #8
 80093e0:	4610      	mov	r0, r2
 80093e2:	4798      	blx	r3
 80093e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80093e6:	e077      	b.n	80094d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80093e8:	6839      	ldr	r1, [r7, #0]
 80093ea:	6878      	ldr	r0, [r7, #4]
 80093ec:	f000 fa7e 	bl	80098ec <USBD_CtlError>
            err++;
 80093f0:	7afb      	ldrb	r3, [r7, #11]
 80093f2:	3301      	adds	r3, #1
 80093f4:	72fb      	strb	r3, [r7, #11]
          break;
 80093f6:	e06f      	b.n	80094d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80093fe:	68db      	ldr	r3, [r3, #12]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d00b      	beq.n	800941c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800940a:	68db      	ldr	r3, [r3, #12]
 800940c:	687a      	ldr	r2, [r7, #4]
 800940e:	7c12      	ldrb	r2, [r2, #16]
 8009410:	f107 0108 	add.w	r1, r7, #8
 8009414:	4610      	mov	r0, r2
 8009416:	4798      	blx	r3
 8009418:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800941a:	e05d      	b.n	80094d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800941c:	6839      	ldr	r1, [r7, #0]
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	f000 fa64 	bl	80098ec <USBD_CtlError>
            err++;
 8009424:	7afb      	ldrb	r3, [r7, #11]
 8009426:	3301      	adds	r3, #1
 8009428:	72fb      	strb	r3, [r7, #11]
          break;
 800942a:	e055      	b.n	80094d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009432:	691b      	ldr	r3, [r3, #16]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d00b      	beq.n	8009450 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800943e:	691b      	ldr	r3, [r3, #16]
 8009440:	687a      	ldr	r2, [r7, #4]
 8009442:	7c12      	ldrb	r2, [r2, #16]
 8009444:	f107 0108 	add.w	r1, r7, #8
 8009448:	4610      	mov	r0, r2
 800944a:	4798      	blx	r3
 800944c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800944e:	e043      	b.n	80094d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009450:	6839      	ldr	r1, [r7, #0]
 8009452:	6878      	ldr	r0, [r7, #4]
 8009454:	f000 fa4a 	bl	80098ec <USBD_CtlError>
            err++;
 8009458:	7afb      	ldrb	r3, [r7, #11]
 800945a:	3301      	adds	r3, #1
 800945c:	72fb      	strb	r3, [r7, #11]
          break;
 800945e:	e03b      	b.n	80094d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009466:	695b      	ldr	r3, [r3, #20]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d00b      	beq.n	8009484 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009472:	695b      	ldr	r3, [r3, #20]
 8009474:	687a      	ldr	r2, [r7, #4]
 8009476:	7c12      	ldrb	r2, [r2, #16]
 8009478:	f107 0108 	add.w	r1, r7, #8
 800947c:	4610      	mov	r0, r2
 800947e:	4798      	blx	r3
 8009480:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009482:	e029      	b.n	80094d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009484:	6839      	ldr	r1, [r7, #0]
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f000 fa30 	bl	80098ec <USBD_CtlError>
            err++;
 800948c:	7afb      	ldrb	r3, [r7, #11]
 800948e:	3301      	adds	r3, #1
 8009490:	72fb      	strb	r3, [r7, #11]
          break;
 8009492:	e021      	b.n	80094d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800949a:	699b      	ldr	r3, [r3, #24]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d00b      	beq.n	80094b8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80094a6:	699b      	ldr	r3, [r3, #24]
 80094a8:	687a      	ldr	r2, [r7, #4]
 80094aa:	7c12      	ldrb	r2, [r2, #16]
 80094ac:	f107 0108 	add.w	r1, r7, #8
 80094b0:	4610      	mov	r0, r2
 80094b2:	4798      	blx	r3
 80094b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80094b6:	e00f      	b.n	80094d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80094b8:	6839      	ldr	r1, [r7, #0]
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	f000 fa16 	bl	80098ec <USBD_CtlError>
            err++;
 80094c0:	7afb      	ldrb	r3, [r7, #11]
 80094c2:	3301      	adds	r3, #1
 80094c4:	72fb      	strb	r3, [r7, #11]
          break;
 80094c6:	e007      	b.n	80094d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80094c8:	6839      	ldr	r1, [r7, #0]
 80094ca:	6878      	ldr	r0, [r7, #4]
 80094cc:	f000 fa0e 	bl	80098ec <USBD_CtlError>
          err++;
 80094d0:	7afb      	ldrb	r3, [r7, #11]
 80094d2:	3301      	adds	r3, #1
 80094d4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80094d6:	e038      	b.n	800954a <USBD_GetDescriptor+0x286>
 80094d8:	e037      	b.n	800954a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	7c1b      	ldrb	r3, [r3, #16]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d109      	bne.n	80094f6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094ea:	f107 0208 	add.w	r2, r7, #8
 80094ee:	4610      	mov	r0, r2
 80094f0:	4798      	blx	r3
 80094f2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80094f4:	e029      	b.n	800954a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80094f6:	6839      	ldr	r1, [r7, #0]
 80094f8:	6878      	ldr	r0, [r7, #4]
 80094fa:	f000 f9f7 	bl	80098ec <USBD_CtlError>
        err++;
 80094fe:	7afb      	ldrb	r3, [r7, #11]
 8009500:	3301      	adds	r3, #1
 8009502:	72fb      	strb	r3, [r7, #11]
      break;
 8009504:	e021      	b.n	800954a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	7c1b      	ldrb	r3, [r3, #16]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d10d      	bne.n	800952a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009516:	f107 0208 	add.w	r2, r7, #8
 800951a:	4610      	mov	r0, r2
 800951c:	4798      	blx	r3
 800951e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	3301      	adds	r3, #1
 8009524:	2207      	movs	r2, #7
 8009526:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009528:	e00f      	b.n	800954a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800952a:	6839      	ldr	r1, [r7, #0]
 800952c:	6878      	ldr	r0, [r7, #4]
 800952e:	f000 f9dd 	bl	80098ec <USBD_CtlError>
        err++;
 8009532:	7afb      	ldrb	r3, [r7, #11]
 8009534:	3301      	adds	r3, #1
 8009536:	72fb      	strb	r3, [r7, #11]
      break;
 8009538:	e007      	b.n	800954a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800953a:	6839      	ldr	r1, [r7, #0]
 800953c:	6878      	ldr	r0, [r7, #4]
 800953e:	f000 f9d5 	bl	80098ec <USBD_CtlError>
      err++;
 8009542:	7afb      	ldrb	r3, [r7, #11]
 8009544:	3301      	adds	r3, #1
 8009546:	72fb      	strb	r3, [r7, #11]
      break;
 8009548:	bf00      	nop
  }

  if (err != 0U)
 800954a:	7afb      	ldrb	r3, [r7, #11]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d11c      	bne.n	800958a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009550:	893b      	ldrh	r3, [r7, #8]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d011      	beq.n	800957a <USBD_GetDescriptor+0x2b6>
 8009556:	683b      	ldr	r3, [r7, #0]
 8009558:	88db      	ldrh	r3, [r3, #6]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d00d      	beq.n	800957a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	88da      	ldrh	r2, [r3, #6]
 8009562:	893b      	ldrh	r3, [r7, #8]
 8009564:	4293      	cmp	r3, r2
 8009566:	bf28      	it	cs
 8009568:	4613      	movcs	r3, r2
 800956a:	b29b      	uxth	r3, r3
 800956c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800956e:	893b      	ldrh	r3, [r7, #8]
 8009570:	461a      	mov	r2, r3
 8009572:	68f9      	ldr	r1, [r7, #12]
 8009574:	6878      	ldr	r0, [r7, #4]
 8009576:	f000 fa24 	bl	80099c2 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800957a:	683b      	ldr	r3, [r7, #0]
 800957c:	88db      	ldrh	r3, [r3, #6]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d104      	bne.n	800958c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009582:	6878      	ldr	r0, [r7, #4]
 8009584:	f000 fa7b 	bl	8009a7e <USBD_CtlSendStatus>
 8009588:	e000      	b.n	800958c <USBD_GetDescriptor+0x2c8>
    return;
 800958a:	bf00      	nop
    }
  }
}
 800958c:	3710      	adds	r7, #16
 800958e:	46bd      	mov	sp, r7
 8009590:	bd80      	pop	{r7, pc}
 8009592:	bf00      	nop

08009594 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b084      	sub	sp, #16
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
 800959c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	889b      	ldrh	r3, [r3, #4]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d130      	bne.n	8009608 <USBD_SetAddress+0x74>
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	88db      	ldrh	r3, [r3, #6]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d12c      	bne.n	8009608 <USBD_SetAddress+0x74>
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	885b      	ldrh	r3, [r3, #2]
 80095b2:	2b7f      	cmp	r3, #127	; 0x7f
 80095b4:	d828      	bhi.n	8009608 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	885b      	ldrh	r3, [r3, #2]
 80095ba:	b2db      	uxtb	r3, r3
 80095bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80095c0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095c8:	2b03      	cmp	r3, #3
 80095ca:	d104      	bne.n	80095d6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80095cc:	6839      	ldr	r1, [r7, #0]
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	f000 f98c 	bl	80098ec <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095d4:	e01d      	b.n	8009612 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	7bfa      	ldrb	r2, [r7, #15]
 80095da:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80095de:	7bfb      	ldrb	r3, [r7, #15]
 80095e0:	4619      	mov	r1, r3
 80095e2:	6878      	ldr	r0, [r7, #4]
 80095e4:	f000 fe73 	bl	800a2ce <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80095e8:	6878      	ldr	r0, [r7, #4]
 80095ea:	f000 fa48 	bl	8009a7e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80095ee:	7bfb      	ldrb	r3, [r7, #15]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d004      	beq.n	80095fe <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2202      	movs	r2, #2
 80095f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095fc:	e009      	b.n	8009612 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2201      	movs	r2, #1
 8009602:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009606:	e004      	b.n	8009612 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009608:	6839      	ldr	r1, [r7, #0]
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	f000 f96e 	bl	80098ec <USBD_CtlError>
  }
}
 8009610:	bf00      	nop
 8009612:	bf00      	nop
 8009614:	3710      	adds	r7, #16
 8009616:	46bd      	mov	sp, r7
 8009618:	bd80      	pop	{r7, pc}
	...

0800961c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b082      	sub	sp, #8
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
 8009624:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	885b      	ldrh	r3, [r3, #2]
 800962a:	b2da      	uxtb	r2, r3
 800962c:	4b41      	ldr	r3, [pc, #260]	; (8009734 <USBD_SetConfig+0x118>)
 800962e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009630:	4b40      	ldr	r3, [pc, #256]	; (8009734 <USBD_SetConfig+0x118>)
 8009632:	781b      	ldrb	r3, [r3, #0]
 8009634:	2b01      	cmp	r3, #1
 8009636:	d904      	bls.n	8009642 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009638:	6839      	ldr	r1, [r7, #0]
 800963a:	6878      	ldr	r0, [r7, #4]
 800963c:	f000 f956 	bl	80098ec <USBD_CtlError>
 8009640:	e075      	b.n	800972e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009648:	2b02      	cmp	r3, #2
 800964a:	d002      	beq.n	8009652 <USBD_SetConfig+0x36>
 800964c:	2b03      	cmp	r3, #3
 800964e:	d023      	beq.n	8009698 <USBD_SetConfig+0x7c>
 8009650:	e062      	b.n	8009718 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8009652:	4b38      	ldr	r3, [pc, #224]	; (8009734 <USBD_SetConfig+0x118>)
 8009654:	781b      	ldrb	r3, [r3, #0]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d01a      	beq.n	8009690 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800965a:	4b36      	ldr	r3, [pc, #216]	; (8009734 <USBD_SetConfig+0x118>)
 800965c:	781b      	ldrb	r3, [r3, #0]
 800965e:	461a      	mov	r2, r3
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2203      	movs	r2, #3
 8009668:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800966c:	4b31      	ldr	r3, [pc, #196]	; (8009734 <USBD_SetConfig+0x118>)
 800966e:	781b      	ldrb	r3, [r3, #0]
 8009670:	4619      	mov	r1, r3
 8009672:	6878      	ldr	r0, [r7, #4]
 8009674:	f7ff f9e4 	bl	8008a40 <USBD_SetClassConfig>
 8009678:	4603      	mov	r3, r0
 800967a:	2b02      	cmp	r3, #2
 800967c:	d104      	bne.n	8009688 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800967e:	6839      	ldr	r1, [r7, #0]
 8009680:	6878      	ldr	r0, [r7, #4]
 8009682:	f000 f933 	bl	80098ec <USBD_CtlError>
            return;
 8009686:	e052      	b.n	800972e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009688:	6878      	ldr	r0, [r7, #4]
 800968a:	f000 f9f8 	bl	8009a7e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800968e:	e04e      	b.n	800972e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009690:	6878      	ldr	r0, [r7, #4]
 8009692:	f000 f9f4 	bl	8009a7e <USBD_CtlSendStatus>
        break;
 8009696:	e04a      	b.n	800972e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009698:	4b26      	ldr	r3, [pc, #152]	; (8009734 <USBD_SetConfig+0x118>)
 800969a:	781b      	ldrb	r3, [r3, #0]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d112      	bne.n	80096c6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2202      	movs	r2, #2
 80096a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80096a8:	4b22      	ldr	r3, [pc, #136]	; (8009734 <USBD_SetConfig+0x118>)
 80096aa:	781b      	ldrb	r3, [r3, #0]
 80096ac:	461a      	mov	r2, r3
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80096b2:	4b20      	ldr	r3, [pc, #128]	; (8009734 <USBD_SetConfig+0x118>)
 80096b4:	781b      	ldrb	r3, [r3, #0]
 80096b6:	4619      	mov	r1, r3
 80096b8:	6878      	ldr	r0, [r7, #4]
 80096ba:	f7ff f9e0 	bl	8008a7e <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80096be:	6878      	ldr	r0, [r7, #4]
 80096c0:	f000 f9dd 	bl	8009a7e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80096c4:	e033      	b.n	800972e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80096c6:	4b1b      	ldr	r3, [pc, #108]	; (8009734 <USBD_SetConfig+0x118>)
 80096c8:	781b      	ldrb	r3, [r3, #0]
 80096ca:	461a      	mov	r2, r3
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	685b      	ldr	r3, [r3, #4]
 80096d0:	429a      	cmp	r2, r3
 80096d2:	d01d      	beq.n	8009710 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	685b      	ldr	r3, [r3, #4]
 80096d8:	b2db      	uxtb	r3, r3
 80096da:	4619      	mov	r1, r3
 80096dc:	6878      	ldr	r0, [r7, #4]
 80096de:	f7ff f9ce 	bl	8008a7e <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80096e2:	4b14      	ldr	r3, [pc, #80]	; (8009734 <USBD_SetConfig+0x118>)
 80096e4:	781b      	ldrb	r3, [r3, #0]
 80096e6:	461a      	mov	r2, r3
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80096ec:	4b11      	ldr	r3, [pc, #68]	; (8009734 <USBD_SetConfig+0x118>)
 80096ee:	781b      	ldrb	r3, [r3, #0]
 80096f0:	4619      	mov	r1, r3
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	f7ff f9a4 	bl	8008a40 <USBD_SetClassConfig>
 80096f8:	4603      	mov	r3, r0
 80096fa:	2b02      	cmp	r3, #2
 80096fc:	d104      	bne.n	8009708 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80096fe:	6839      	ldr	r1, [r7, #0]
 8009700:	6878      	ldr	r0, [r7, #4]
 8009702:	f000 f8f3 	bl	80098ec <USBD_CtlError>
            return;
 8009706:	e012      	b.n	800972e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009708:	6878      	ldr	r0, [r7, #4]
 800970a:	f000 f9b8 	bl	8009a7e <USBD_CtlSendStatus>
        break;
 800970e:	e00e      	b.n	800972e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	f000 f9b4 	bl	8009a7e <USBD_CtlSendStatus>
        break;
 8009716:	e00a      	b.n	800972e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009718:	6839      	ldr	r1, [r7, #0]
 800971a:	6878      	ldr	r0, [r7, #4]
 800971c:	f000 f8e6 	bl	80098ec <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009720:	4b04      	ldr	r3, [pc, #16]	; (8009734 <USBD_SetConfig+0x118>)
 8009722:	781b      	ldrb	r3, [r3, #0]
 8009724:	4619      	mov	r1, r3
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	f7ff f9a9 	bl	8008a7e <USBD_ClrClassConfig>
        break;
 800972c:	bf00      	nop
    }
  }
}
 800972e:	3708      	adds	r7, #8
 8009730:	46bd      	mov	sp, r7
 8009732:	bd80      	pop	{r7, pc}
 8009734:	20000370 	.word	0x20000370

08009738 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b082      	sub	sp, #8
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
 8009740:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009742:	683b      	ldr	r3, [r7, #0]
 8009744:	88db      	ldrh	r3, [r3, #6]
 8009746:	2b01      	cmp	r3, #1
 8009748:	d004      	beq.n	8009754 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800974a:	6839      	ldr	r1, [r7, #0]
 800974c:	6878      	ldr	r0, [r7, #4]
 800974e:	f000 f8cd 	bl	80098ec <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009752:	e022      	b.n	800979a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800975a:	2b02      	cmp	r3, #2
 800975c:	dc02      	bgt.n	8009764 <USBD_GetConfig+0x2c>
 800975e:	2b00      	cmp	r3, #0
 8009760:	dc03      	bgt.n	800976a <USBD_GetConfig+0x32>
 8009762:	e015      	b.n	8009790 <USBD_GetConfig+0x58>
 8009764:	2b03      	cmp	r3, #3
 8009766:	d00b      	beq.n	8009780 <USBD_GetConfig+0x48>
 8009768:	e012      	b.n	8009790 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	2200      	movs	r2, #0
 800976e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	3308      	adds	r3, #8
 8009774:	2201      	movs	r2, #1
 8009776:	4619      	mov	r1, r3
 8009778:	6878      	ldr	r0, [r7, #4]
 800977a:	f000 f922 	bl	80099c2 <USBD_CtlSendData>
        break;
 800977e:	e00c      	b.n	800979a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	3304      	adds	r3, #4
 8009784:	2201      	movs	r2, #1
 8009786:	4619      	mov	r1, r3
 8009788:	6878      	ldr	r0, [r7, #4]
 800978a:	f000 f91a 	bl	80099c2 <USBD_CtlSendData>
        break;
 800978e:	e004      	b.n	800979a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009790:	6839      	ldr	r1, [r7, #0]
 8009792:	6878      	ldr	r0, [r7, #4]
 8009794:	f000 f8aa 	bl	80098ec <USBD_CtlError>
        break;
 8009798:	bf00      	nop
}
 800979a:	bf00      	nop
 800979c:	3708      	adds	r7, #8
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd80      	pop	{r7, pc}

080097a2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097a2:	b580      	push	{r7, lr}
 80097a4:	b082      	sub	sp, #8
 80097a6:	af00      	add	r7, sp, #0
 80097a8:	6078      	str	r0, [r7, #4]
 80097aa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097b2:	3b01      	subs	r3, #1
 80097b4:	2b02      	cmp	r3, #2
 80097b6:	d81e      	bhi.n	80097f6 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	88db      	ldrh	r3, [r3, #6]
 80097bc:	2b02      	cmp	r3, #2
 80097be:	d004      	beq.n	80097ca <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80097c0:	6839      	ldr	r1, [r7, #0]
 80097c2:	6878      	ldr	r0, [r7, #4]
 80097c4:	f000 f892 	bl	80098ec <USBD_CtlError>
        break;
 80097c8:	e01a      	b.n	8009800 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	2201      	movs	r2, #1
 80097ce:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d005      	beq.n	80097e6 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	68db      	ldr	r3, [r3, #12]
 80097de:	f043 0202 	orr.w	r2, r3, #2
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	330c      	adds	r3, #12
 80097ea:	2202      	movs	r2, #2
 80097ec:	4619      	mov	r1, r3
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	f000 f8e7 	bl	80099c2 <USBD_CtlSendData>
      break;
 80097f4:	e004      	b.n	8009800 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80097f6:	6839      	ldr	r1, [r7, #0]
 80097f8:	6878      	ldr	r0, [r7, #4]
 80097fa:	f000 f877 	bl	80098ec <USBD_CtlError>
      break;
 80097fe:	bf00      	nop
  }
}
 8009800:	bf00      	nop
 8009802:	3708      	adds	r7, #8
 8009804:	46bd      	mov	sp, r7
 8009806:	bd80      	pop	{r7, pc}

08009808 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b082      	sub	sp, #8
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
 8009810:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009812:	683b      	ldr	r3, [r7, #0]
 8009814:	885b      	ldrh	r3, [r3, #2]
 8009816:	2b01      	cmp	r3, #1
 8009818:	d106      	bne.n	8009828 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	2201      	movs	r2, #1
 800981e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8009822:	6878      	ldr	r0, [r7, #4]
 8009824:	f000 f92b 	bl	8009a7e <USBD_CtlSendStatus>
  }
}
 8009828:	bf00      	nop
 800982a:	3708      	adds	r7, #8
 800982c:	46bd      	mov	sp, r7
 800982e:	bd80      	pop	{r7, pc}

08009830 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b082      	sub	sp, #8
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
 8009838:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009840:	3b01      	subs	r3, #1
 8009842:	2b02      	cmp	r3, #2
 8009844:	d80b      	bhi.n	800985e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	885b      	ldrh	r3, [r3, #2]
 800984a:	2b01      	cmp	r3, #1
 800984c:	d10c      	bne.n	8009868 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	2200      	movs	r2, #0
 8009852:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8009856:	6878      	ldr	r0, [r7, #4]
 8009858:	f000 f911 	bl	8009a7e <USBD_CtlSendStatus>
      }
      break;
 800985c:	e004      	b.n	8009868 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800985e:	6839      	ldr	r1, [r7, #0]
 8009860:	6878      	ldr	r0, [r7, #4]
 8009862:	f000 f843 	bl	80098ec <USBD_CtlError>
      break;
 8009866:	e000      	b.n	800986a <USBD_ClrFeature+0x3a>
      break;
 8009868:	bf00      	nop
  }
}
 800986a:	bf00      	nop
 800986c:	3708      	adds	r7, #8
 800986e:	46bd      	mov	sp, r7
 8009870:	bd80      	pop	{r7, pc}

08009872 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009872:	b480      	push	{r7}
 8009874:	b083      	sub	sp, #12
 8009876:	af00      	add	r7, sp, #0
 8009878:	6078      	str	r0, [r7, #4]
 800987a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	781a      	ldrb	r2, [r3, #0]
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	785a      	ldrb	r2, [r3, #1]
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800988c:	683b      	ldr	r3, [r7, #0]
 800988e:	3302      	adds	r3, #2
 8009890:	781b      	ldrb	r3, [r3, #0]
 8009892:	b29a      	uxth	r2, r3
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	3303      	adds	r3, #3
 8009898:	781b      	ldrb	r3, [r3, #0]
 800989a:	b29b      	uxth	r3, r3
 800989c:	021b      	lsls	r3, r3, #8
 800989e:	b29b      	uxth	r3, r3
 80098a0:	4413      	add	r3, r2
 80098a2:	b29a      	uxth	r2, r3
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	3304      	adds	r3, #4
 80098ac:	781b      	ldrb	r3, [r3, #0]
 80098ae:	b29a      	uxth	r2, r3
 80098b0:	683b      	ldr	r3, [r7, #0]
 80098b2:	3305      	adds	r3, #5
 80098b4:	781b      	ldrb	r3, [r3, #0]
 80098b6:	b29b      	uxth	r3, r3
 80098b8:	021b      	lsls	r3, r3, #8
 80098ba:	b29b      	uxth	r3, r3
 80098bc:	4413      	add	r3, r2
 80098be:	b29a      	uxth	r2, r3
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80098c4:	683b      	ldr	r3, [r7, #0]
 80098c6:	3306      	adds	r3, #6
 80098c8:	781b      	ldrb	r3, [r3, #0]
 80098ca:	b29a      	uxth	r2, r3
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	3307      	adds	r3, #7
 80098d0:	781b      	ldrb	r3, [r3, #0]
 80098d2:	b29b      	uxth	r3, r3
 80098d4:	021b      	lsls	r3, r3, #8
 80098d6:	b29b      	uxth	r3, r3
 80098d8:	4413      	add	r3, r2
 80098da:	b29a      	uxth	r2, r3
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	80da      	strh	r2, [r3, #6]

}
 80098e0:	bf00      	nop
 80098e2:	370c      	adds	r7, #12
 80098e4:	46bd      	mov	sp, r7
 80098e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ea:	4770      	bx	lr

080098ec <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b082      	sub	sp, #8
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
 80098f4:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80098f6:	2180      	movs	r1, #128	; 0x80
 80098f8:	6878      	ldr	r0, [r7, #4]
 80098fa:	f000 fc7d 	bl	800a1f8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80098fe:	2100      	movs	r1, #0
 8009900:	6878      	ldr	r0, [r7, #4]
 8009902:	f000 fc79 	bl	800a1f8 <USBD_LL_StallEP>
}
 8009906:	bf00      	nop
 8009908:	3708      	adds	r7, #8
 800990a:	46bd      	mov	sp, r7
 800990c:	bd80      	pop	{r7, pc}

0800990e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800990e:	b580      	push	{r7, lr}
 8009910:	b086      	sub	sp, #24
 8009912:	af00      	add	r7, sp, #0
 8009914:	60f8      	str	r0, [r7, #12]
 8009916:	60b9      	str	r1, [r7, #8]
 8009918:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800991a:	2300      	movs	r3, #0
 800991c:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d032      	beq.n	800998a <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009924:	68f8      	ldr	r0, [r7, #12]
 8009926:	f000 f834 	bl	8009992 <USBD_GetLen>
 800992a:	4603      	mov	r3, r0
 800992c:	3301      	adds	r3, #1
 800992e:	b29b      	uxth	r3, r3
 8009930:	005b      	lsls	r3, r3, #1
 8009932:	b29a      	uxth	r2, r3
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009938:	7dfb      	ldrb	r3, [r7, #23]
 800993a:	1c5a      	adds	r2, r3, #1
 800993c:	75fa      	strb	r2, [r7, #23]
 800993e:	461a      	mov	r2, r3
 8009940:	68bb      	ldr	r3, [r7, #8]
 8009942:	4413      	add	r3, r2
 8009944:	687a      	ldr	r2, [r7, #4]
 8009946:	7812      	ldrb	r2, [r2, #0]
 8009948:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800994a:	7dfb      	ldrb	r3, [r7, #23]
 800994c:	1c5a      	adds	r2, r3, #1
 800994e:	75fa      	strb	r2, [r7, #23]
 8009950:	461a      	mov	r2, r3
 8009952:	68bb      	ldr	r3, [r7, #8]
 8009954:	4413      	add	r3, r2
 8009956:	2203      	movs	r2, #3
 8009958:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800995a:	e012      	b.n	8009982 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	1c5a      	adds	r2, r3, #1
 8009960:	60fa      	str	r2, [r7, #12]
 8009962:	7dfa      	ldrb	r2, [r7, #23]
 8009964:	1c51      	adds	r1, r2, #1
 8009966:	75f9      	strb	r1, [r7, #23]
 8009968:	4611      	mov	r1, r2
 800996a:	68ba      	ldr	r2, [r7, #8]
 800996c:	440a      	add	r2, r1
 800996e:	781b      	ldrb	r3, [r3, #0]
 8009970:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009972:	7dfb      	ldrb	r3, [r7, #23]
 8009974:	1c5a      	adds	r2, r3, #1
 8009976:	75fa      	strb	r2, [r7, #23]
 8009978:	461a      	mov	r2, r3
 800997a:	68bb      	ldr	r3, [r7, #8]
 800997c:	4413      	add	r3, r2
 800997e:	2200      	movs	r2, #0
 8009980:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	781b      	ldrb	r3, [r3, #0]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d1e8      	bne.n	800995c <USBD_GetString+0x4e>
    }
  }
}
 800998a:	bf00      	nop
 800998c:	3718      	adds	r7, #24
 800998e:	46bd      	mov	sp, r7
 8009990:	bd80      	pop	{r7, pc}

08009992 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009992:	b480      	push	{r7}
 8009994:	b085      	sub	sp, #20
 8009996:	af00      	add	r7, sp, #0
 8009998:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800999a:	2300      	movs	r3, #0
 800999c:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800999e:	e005      	b.n	80099ac <USBD_GetLen+0x1a>
  {
    len++;
 80099a0:	7bfb      	ldrb	r3, [r7, #15]
 80099a2:	3301      	adds	r3, #1
 80099a4:	73fb      	strb	r3, [r7, #15]
    buf++;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	3301      	adds	r3, #1
 80099aa:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	781b      	ldrb	r3, [r3, #0]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d1f5      	bne.n	80099a0 <USBD_GetLen+0xe>
  }

  return len;
 80099b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80099b6:	4618      	mov	r0, r3
 80099b8:	3714      	adds	r7, #20
 80099ba:	46bd      	mov	sp, r7
 80099bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c0:	4770      	bx	lr

080099c2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80099c2:	b580      	push	{r7, lr}
 80099c4:	b084      	sub	sp, #16
 80099c6:	af00      	add	r7, sp, #0
 80099c8:	60f8      	str	r0, [r7, #12]
 80099ca:	60b9      	str	r1, [r7, #8]
 80099cc:	4613      	mov	r3, r2
 80099ce:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	2202      	movs	r2, #2
 80099d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80099d8:	88fa      	ldrh	r2, [r7, #6]
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80099de:	88fa      	ldrh	r2, [r7, #6]
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80099e4:	88fb      	ldrh	r3, [r7, #6]
 80099e6:	68ba      	ldr	r2, [r7, #8]
 80099e8:	2100      	movs	r1, #0
 80099ea:	68f8      	ldr	r0, [r7, #12]
 80099ec:	f000 fc8e 	bl	800a30c <USBD_LL_Transmit>

  return USBD_OK;
 80099f0:	2300      	movs	r3, #0
}
 80099f2:	4618      	mov	r0, r3
 80099f4:	3710      	adds	r7, #16
 80099f6:	46bd      	mov	sp, r7
 80099f8:	bd80      	pop	{r7, pc}

080099fa <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80099fa:	b580      	push	{r7, lr}
 80099fc:	b084      	sub	sp, #16
 80099fe:	af00      	add	r7, sp, #0
 8009a00:	60f8      	str	r0, [r7, #12]
 8009a02:	60b9      	str	r1, [r7, #8]
 8009a04:	4613      	mov	r3, r2
 8009a06:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009a08:	88fb      	ldrh	r3, [r7, #6]
 8009a0a:	68ba      	ldr	r2, [r7, #8]
 8009a0c:	2100      	movs	r1, #0
 8009a0e:	68f8      	ldr	r0, [r7, #12]
 8009a10:	f000 fc7c 	bl	800a30c <USBD_LL_Transmit>

  return USBD_OK;
 8009a14:	2300      	movs	r3, #0
}
 8009a16:	4618      	mov	r0, r3
 8009a18:	3710      	adds	r7, #16
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bd80      	pop	{r7, pc}

08009a1e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009a1e:	b580      	push	{r7, lr}
 8009a20:	b084      	sub	sp, #16
 8009a22:	af00      	add	r7, sp, #0
 8009a24:	60f8      	str	r0, [r7, #12]
 8009a26:	60b9      	str	r1, [r7, #8]
 8009a28:	4613      	mov	r3, r2
 8009a2a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	2203      	movs	r2, #3
 8009a30:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009a34:	88fa      	ldrh	r2, [r7, #6]
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8009a3c:	88fa      	ldrh	r2, [r7, #6]
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009a44:	88fb      	ldrh	r3, [r7, #6]
 8009a46:	68ba      	ldr	r2, [r7, #8]
 8009a48:	2100      	movs	r1, #0
 8009a4a:	68f8      	ldr	r0, [r7, #12]
 8009a4c:	f000 fc81 	bl	800a352 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009a50:	2300      	movs	r3, #0
}
 8009a52:	4618      	mov	r0, r3
 8009a54:	3710      	adds	r7, #16
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bd80      	pop	{r7, pc}

08009a5a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009a5a:	b580      	push	{r7, lr}
 8009a5c:	b084      	sub	sp, #16
 8009a5e:	af00      	add	r7, sp, #0
 8009a60:	60f8      	str	r0, [r7, #12]
 8009a62:	60b9      	str	r1, [r7, #8]
 8009a64:	4613      	mov	r3, r2
 8009a66:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009a68:	88fb      	ldrh	r3, [r7, #6]
 8009a6a:	68ba      	ldr	r2, [r7, #8]
 8009a6c:	2100      	movs	r1, #0
 8009a6e:	68f8      	ldr	r0, [r7, #12]
 8009a70:	f000 fc6f 	bl	800a352 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009a74:	2300      	movs	r3, #0
}
 8009a76:	4618      	mov	r0, r3
 8009a78:	3710      	adds	r7, #16
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bd80      	pop	{r7, pc}

08009a7e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009a7e:	b580      	push	{r7, lr}
 8009a80:	b082      	sub	sp, #8
 8009a82:	af00      	add	r7, sp, #0
 8009a84:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	2204      	movs	r2, #4
 8009a8a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009a8e:	2300      	movs	r3, #0
 8009a90:	2200      	movs	r2, #0
 8009a92:	2100      	movs	r1, #0
 8009a94:	6878      	ldr	r0, [r7, #4]
 8009a96:	f000 fc39 	bl	800a30c <USBD_LL_Transmit>

  return USBD_OK;
 8009a9a:	2300      	movs	r3, #0
}
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	3708      	adds	r7, #8
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	bd80      	pop	{r7, pc}

08009aa4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b082      	sub	sp, #8
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2205      	movs	r2, #5
 8009ab0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	2100      	movs	r1, #0
 8009aba:	6878      	ldr	r0, [r7, #4]
 8009abc:	f000 fc49 	bl	800a352 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009ac0:	2300      	movs	r3, #0
}
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	3708      	adds	r7, #8
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	bd80      	pop	{r7, pc}
	...

08009acc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	4912      	ldr	r1, [pc, #72]	; (8009b1c <MX_USB_DEVICE_Init+0x50>)
 8009ad4:	4812      	ldr	r0, [pc, #72]	; (8009b20 <MX_USB_DEVICE_Init+0x54>)
 8009ad6:	f7fe ff57 	bl	8008988 <USBD_Init>
 8009ada:	4603      	mov	r3, r0
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d001      	beq.n	8009ae4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009ae0:	f7f7 fde0 	bl	80016a4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009ae4:	490f      	ldr	r1, [pc, #60]	; (8009b24 <MX_USB_DEVICE_Init+0x58>)
 8009ae6:	480e      	ldr	r0, [pc, #56]	; (8009b20 <MX_USB_DEVICE_Init+0x54>)
 8009ae8:	f7fe ff79 	bl	80089de <USBD_RegisterClass>
 8009aec:	4603      	mov	r3, r0
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d001      	beq.n	8009af6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009af2:	f7f7 fdd7 	bl	80016a4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009af6:	490c      	ldr	r1, [pc, #48]	; (8009b28 <MX_USB_DEVICE_Init+0x5c>)
 8009af8:	4809      	ldr	r0, [pc, #36]	; (8009b20 <MX_USB_DEVICE_Init+0x54>)
 8009afa:	f7fe fea7 	bl	800884c <USBD_CDC_RegisterInterface>
 8009afe:	4603      	mov	r3, r0
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d001      	beq.n	8009b08 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009b04:	f7f7 fdce 	bl	80016a4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009b08:	4805      	ldr	r0, [pc, #20]	; (8009b20 <MX_USB_DEVICE_Init+0x54>)
 8009b0a:	f7fe ff82 	bl	8008a12 <USBD_Start>
 8009b0e:	4603      	mov	r3, r0
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d001      	beq.n	8009b18 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009b14:	f7f7 fdc6 	bl	80016a4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009b18:	bf00      	nop
 8009b1a:	bd80      	pop	{r7, pc}
 8009b1c:	2000012c 	.word	0x2000012c
 8009b20:	2000069c 	.word	0x2000069c
 8009b24:	20000018 	.word	0x20000018
 8009b28:	2000011c 	.word	0x2000011c

08009b2c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009b30:	2200      	movs	r2, #0
 8009b32:	4905      	ldr	r1, [pc, #20]	; (8009b48 <CDC_Init_FS+0x1c>)
 8009b34:	4805      	ldr	r0, [pc, #20]	; (8009b4c <CDC_Init_FS+0x20>)
 8009b36:	f7fe fea0 	bl	800887a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009b3a:	4905      	ldr	r1, [pc, #20]	; (8009b50 <CDC_Init_FS+0x24>)
 8009b3c:	4803      	ldr	r0, [pc, #12]	; (8009b4c <CDC_Init_FS+0x20>)
 8009b3e:	f7fe feb6 	bl	80088ae <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009b42:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009b44:	4618      	mov	r0, r3
 8009b46:	bd80      	pop	{r7, pc}
 8009b48:	20000d48 	.word	0x20000d48
 8009b4c:	2000069c 	.word	0x2000069c
 8009b50:	20000960 	.word	0x20000960

08009b54 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009b54:	b480      	push	{r7}
 8009b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009b58:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b62:	4770      	bx	lr

08009b64 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009b64:	b480      	push	{r7}
 8009b66:	b083      	sub	sp, #12
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	6039      	str	r1, [r7, #0]
 8009b6e:	71fb      	strb	r3, [r7, #7]
 8009b70:	4613      	mov	r3, r2
 8009b72:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009b74:	79fb      	ldrb	r3, [r7, #7]
 8009b76:	2b23      	cmp	r3, #35	; 0x23
 8009b78:	d84a      	bhi.n	8009c10 <CDC_Control_FS+0xac>
 8009b7a:	a201      	add	r2, pc, #4	; (adr r2, 8009b80 <CDC_Control_FS+0x1c>)
 8009b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b80:	08009c11 	.word	0x08009c11
 8009b84:	08009c11 	.word	0x08009c11
 8009b88:	08009c11 	.word	0x08009c11
 8009b8c:	08009c11 	.word	0x08009c11
 8009b90:	08009c11 	.word	0x08009c11
 8009b94:	08009c11 	.word	0x08009c11
 8009b98:	08009c11 	.word	0x08009c11
 8009b9c:	08009c11 	.word	0x08009c11
 8009ba0:	08009c11 	.word	0x08009c11
 8009ba4:	08009c11 	.word	0x08009c11
 8009ba8:	08009c11 	.word	0x08009c11
 8009bac:	08009c11 	.word	0x08009c11
 8009bb0:	08009c11 	.word	0x08009c11
 8009bb4:	08009c11 	.word	0x08009c11
 8009bb8:	08009c11 	.word	0x08009c11
 8009bbc:	08009c11 	.word	0x08009c11
 8009bc0:	08009c11 	.word	0x08009c11
 8009bc4:	08009c11 	.word	0x08009c11
 8009bc8:	08009c11 	.word	0x08009c11
 8009bcc:	08009c11 	.word	0x08009c11
 8009bd0:	08009c11 	.word	0x08009c11
 8009bd4:	08009c11 	.word	0x08009c11
 8009bd8:	08009c11 	.word	0x08009c11
 8009bdc:	08009c11 	.word	0x08009c11
 8009be0:	08009c11 	.word	0x08009c11
 8009be4:	08009c11 	.word	0x08009c11
 8009be8:	08009c11 	.word	0x08009c11
 8009bec:	08009c11 	.word	0x08009c11
 8009bf0:	08009c11 	.word	0x08009c11
 8009bf4:	08009c11 	.word	0x08009c11
 8009bf8:	08009c11 	.word	0x08009c11
 8009bfc:	08009c11 	.word	0x08009c11
 8009c00:	08009c11 	.word	0x08009c11
 8009c04:	08009c11 	.word	0x08009c11
 8009c08:	08009c11 	.word	0x08009c11
 8009c0c:	08009c11 	.word	0x08009c11
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009c10:	bf00      	nop
  }

  return (USBD_OK);
 8009c12:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009c14:	4618      	mov	r0, r3
 8009c16:	370c      	adds	r7, #12
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1e:	4770      	bx	lr

08009c20 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b082      	sub	sp, #8
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
 8009c28:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009c2a:	6879      	ldr	r1, [r7, #4]
 8009c2c:	4805      	ldr	r0, [pc, #20]	; (8009c44 <CDC_Receive_FS+0x24>)
 8009c2e:	f7fe fe3e 	bl	80088ae <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009c32:	4804      	ldr	r0, [pc, #16]	; (8009c44 <CDC_Receive_FS+0x24>)
 8009c34:	f7fe fe7e 	bl	8008934 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009c38:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	3708      	adds	r7, #8
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bd80      	pop	{r7, pc}
 8009c42:	bf00      	nop
 8009c44:	2000069c 	.word	0x2000069c

08009c48 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b084      	sub	sp, #16
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
 8009c50:	460b      	mov	r3, r1
 8009c52:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009c54:	2300      	movs	r3, #0
 8009c56:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009c58:	4b0d      	ldr	r3, [pc, #52]	; (8009c90 <CDC_Transmit_FS+0x48>)
 8009c5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c5e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d001      	beq.n	8009c6e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009c6a:	2301      	movs	r3, #1
 8009c6c:	e00b      	b.n	8009c86 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009c6e:	887b      	ldrh	r3, [r7, #2]
 8009c70:	461a      	mov	r2, r3
 8009c72:	6879      	ldr	r1, [r7, #4]
 8009c74:	4806      	ldr	r0, [pc, #24]	; (8009c90 <CDC_Transmit_FS+0x48>)
 8009c76:	f7fe fe00 	bl	800887a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009c7a:	4805      	ldr	r0, [pc, #20]	; (8009c90 <CDC_Transmit_FS+0x48>)
 8009c7c:	f7fe fe2b 	bl	80088d6 <USBD_CDC_TransmitPacket>
 8009c80:	4603      	mov	r3, r0
 8009c82:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c86:	4618      	mov	r0, r3
 8009c88:	3710      	adds	r7, #16
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	bd80      	pop	{r7, pc}
 8009c8e:	bf00      	nop
 8009c90:	2000069c 	.word	0x2000069c

08009c94 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c94:	b480      	push	{r7}
 8009c96:	b083      	sub	sp, #12
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	6039      	str	r1, [r7, #0]
 8009c9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	2212      	movs	r2, #18
 8009ca4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009ca6:	4b03      	ldr	r3, [pc, #12]	; (8009cb4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009ca8:	4618      	mov	r0, r3
 8009caa:	370c      	adds	r7, #12
 8009cac:	46bd      	mov	sp, r7
 8009cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb2:	4770      	bx	lr
 8009cb4:	20000148 	.word	0x20000148

08009cb8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009cb8:	b480      	push	{r7}
 8009cba:	b083      	sub	sp, #12
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	6039      	str	r1, [r7, #0]
 8009cc2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	2204      	movs	r2, #4
 8009cc8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009cca:	4b03      	ldr	r3, [pc, #12]	; (8009cd8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009ccc:	4618      	mov	r0, r3
 8009cce:	370c      	adds	r7, #12
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd6:	4770      	bx	lr
 8009cd8:	2000015c 	.word	0x2000015c

08009cdc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b082      	sub	sp, #8
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	6039      	str	r1, [r7, #0]
 8009ce6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009ce8:	79fb      	ldrb	r3, [r7, #7]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d105      	bne.n	8009cfa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009cee:	683a      	ldr	r2, [r7, #0]
 8009cf0:	4907      	ldr	r1, [pc, #28]	; (8009d10 <USBD_FS_ProductStrDescriptor+0x34>)
 8009cf2:	4808      	ldr	r0, [pc, #32]	; (8009d14 <USBD_FS_ProductStrDescriptor+0x38>)
 8009cf4:	f7ff fe0b 	bl	800990e <USBD_GetString>
 8009cf8:	e004      	b.n	8009d04 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009cfa:	683a      	ldr	r2, [r7, #0]
 8009cfc:	4904      	ldr	r1, [pc, #16]	; (8009d10 <USBD_FS_ProductStrDescriptor+0x34>)
 8009cfe:	4805      	ldr	r0, [pc, #20]	; (8009d14 <USBD_FS_ProductStrDescriptor+0x38>)
 8009d00:	f7ff fe05 	bl	800990e <USBD_GetString>
  }
  return USBD_StrDesc;
 8009d04:	4b02      	ldr	r3, [pc, #8]	; (8009d10 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009d06:	4618      	mov	r0, r3
 8009d08:	3708      	adds	r7, #8
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	bd80      	pop	{r7, pc}
 8009d0e:	bf00      	nop
 8009d10:	20001130 	.word	0x20001130
 8009d14:	0800e260 	.word	0x0800e260

08009d18 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b082      	sub	sp, #8
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	4603      	mov	r3, r0
 8009d20:	6039      	str	r1, [r7, #0]
 8009d22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009d24:	683a      	ldr	r2, [r7, #0]
 8009d26:	4904      	ldr	r1, [pc, #16]	; (8009d38 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009d28:	4804      	ldr	r0, [pc, #16]	; (8009d3c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009d2a:	f7ff fdf0 	bl	800990e <USBD_GetString>
  return USBD_StrDesc;
 8009d2e:	4b02      	ldr	r3, [pc, #8]	; (8009d38 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009d30:	4618      	mov	r0, r3
 8009d32:	3708      	adds	r7, #8
 8009d34:	46bd      	mov	sp, r7
 8009d36:	bd80      	pop	{r7, pc}
 8009d38:	20001130 	.word	0x20001130
 8009d3c:	0800e270 	.word	0x0800e270

08009d40 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b082      	sub	sp, #8
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	4603      	mov	r3, r0
 8009d48:	6039      	str	r1, [r7, #0]
 8009d4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	221a      	movs	r2, #26
 8009d50:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009d52:	f000 f843 	bl	8009ddc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009d56:	4b02      	ldr	r3, [pc, #8]	; (8009d60 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009d58:	4618      	mov	r0, r3
 8009d5a:	3708      	adds	r7, #8
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	bd80      	pop	{r7, pc}
 8009d60:	20000160 	.word	0x20000160

08009d64 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b082      	sub	sp, #8
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	4603      	mov	r3, r0
 8009d6c:	6039      	str	r1, [r7, #0]
 8009d6e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009d70:	79fb      	ldrb	r3, [r7, #7]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d105      	bne.n	8009d82 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009d76:	683a      	ldr	r2, [r7, #0]
 8009d78:	4907      	ldr	r1, [pc, #28]	; (8009d98 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009d7a:	4808      	ldr	r0, [pc, #32]	; (8009d9c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009d7c:	f7ff fdc7 	bl	800990e <USBD_GetString>
 8009d80:	e004      	b.n	8009d8c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009d82:	683a      	ldr	r2, [r7, #0]
 8009d84:	4904      	ldr	r1, [pc, #16]	; (8009d98 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009d86:	4805      	ldr	r0, [pc, #20]	; (8009d9c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009d88:	f7ff fdc1 	bl	800990e <USBD_GetString>
  }
  return USBD_StrDesc;
 8009d8c:	4b02      	ldr	r3, [pc, #8]	; (8009d98 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009d8e:	4618      	mov	r0, r3
 8009d90:	3708      	adds	r7, #8
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bd80      	pop	{r7, pc}
 8009d96:	bf00      	nop
 8009d98:	20001130 	.word	0x20001130
 8009d9c:	0800e27c 	.word	0x0800e27c

08009da0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b082      	sub	sp, #8
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	4603      	mov	r3, r0
 8009da8:	6039      	str	r1, [r7, #0]
 8009daa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009dac:	79fb      	ldrb	r3, [r7, #7]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d105      	bne.n	8009dbe <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009db2:	683a      	ldr	r2, [r7, #0]
 8009db4:	4907      	ldr	r1, [pc, #28]	; (8009dd4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009db6:	4808      	ldr	r0, [pc, #32]	; (8009dd8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009db8:	f7ff fda9 	bl	800990e <USBD_GetString>
 8009dbc:	e004      	b.n	8009dc8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009dbe:	683a      	ldr	r2, [r7, #0]
 8009dc0:	4904      	ldr	r1, [pc, #16]	; (8009dd4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009dc2:	4805      	ldr	r0, [pc, #20]	; (8009dd8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009dc4:	f7ff fda3 	bl	800990e <USBD_GetString>
  }
  return USBD_StrDesc;
 8009dc8:	4b02      	ldr	r3, [pc, #8]	; (8009dd4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009dca:	4618      	mov	r0, r3
 8009dcc:	3708      	adds	r7, #8
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	bd80      	pop	{r7, pc}
 8009dd2:	bf00      	nop
 8009dd4:	20001130 	.word	0x20001130
 8009dd8:	0800e288 	.word	0x0800e288

08009ddc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b084      	sub	sp, #16
 8009de0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009de2:	4b0f      	ldr	r3, [pc, #60]	; (8009e20 <Get_SerialNum+0x44>)
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009de8:	4b0e      	ldr	r3, [pc, #56]	; (8009e24 <Get_SerialNum+0x48>)
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009dee:	4b0e      	ldr	r3, [pc, #56]	; (8009e28 <Get_SerialNum+0x4c>)
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009df4:	68fa      	ldr	r2, [r7, #12]
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	4413      	add	r3, r2
 8009dfa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d009      	beq.n	8009e16 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009e02:	2208      	movs	r2, #8
 8009e04:	4909      	ldr	r1, [pc, #36]	; (8009e2c <Get_SerialNum+0x50>)
 8009e06:	68f8      	ldr	r0, [r7, #12]
 8009e08:	f000 f814 	bl	8009e34 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009e0c:	2204      	movs	r2, #4
 8009e0e:	4908      	ldr	r1, [pc, #32]	; (8009e30 <Get_SerialNum+0x54>)
 8009e10:	68b8      	ldr	r0, [r7, #8]
 8009e12:	f000 f80f 	bl	8009e34 <IntToUnicode>
  }
}
 8009e16:	bf00      	nop
 8009e18:	3710      	adds	r7, #16
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	bd80      	pop	{r7, pc}
 8009e1e:	bf00      	nop
 8009e20:	1ffff7ac 	.word	0x1ffff7ac
 8009e24:	1ffff7b0 	.word	0x1ffff7b0
 8009e28:	1ffff7b4 	.word	0x1ffff7b4
 8009e2c:	20000162 	.word	0x20000162
 8009e30:	20000172 	.word	0x20000172

08009e34 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009e34:	b480      	push	{r7}
 8009e36:	b087      	sub	sp, #28
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	60f8      	str	r0, [r7, #12]
 8009e3c:	60b9      	str	r1, [r7, #8]
 8009e3e:	4613      	mov	r3, r2
 8009e40:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009e42:	2300      	movs	r3, #0
 8009e44:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009e46:	2300      	movs	r3, #0
 8009e48:	75fb      	strb	r3, [r7, #23]
 8009e4a:	e027      	b.n	8009e9c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	0f1b      	lsrs	r3, r3, #28
 8009e50:	2b09      	cmp	r3, #9
 8009e52:	d80b      	bhi.n	8009e6c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	0f1b      	lsrs	r3, r3, #28
 8009e58:	b2da      	uxtb	r2, r3
 8009e5a:	7dfb      	ldrb	r3, [r7, #23]
 8009e5c:	005b      	lsls	r3, r3, #1
 8009e5e:	4619      	mov	r1, r3
 8009e60:	68bb      	ldr	r3, [r7, #8]
 8009e62:	440b      	add	r3, r1
 8009e64:	3230      	adds	r2, #48	; 0x30
 8009e66:	b2d2      	uxtb	r2, r2
 8009e68:	701a      	strb	r2, [r3, #0]
 8009e6a:	e00a      	b.n	8009e82 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	0f1b      	lsrs	r3, r3, #28
 8009e70:	b2da      	uxtb	r2, r3
 8009e72:	7dfb      	ldrb	r3, [r7, #23]
 8009e74:	005b      	lsls	r3, r3, #1
 8009e76:	4619      	mov	r1, r3
 8009e78:	68bb      	ldr	r3, [r7, #8]
 8009e7a:	440b      	add	r3, r1
 8009e7c:	3237      	adds	r2, #55	; 0x37
 8009e7e:	b2d2      	uxtb	r2, r2
 8009e80:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	011b      	lsls	r3, r3, #4
 8009e86:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009e88:	7dfb      	ldrb	r3, [r7, #23]
 8009e8a:	005b      	lsls	r3, r3, #1
 8009e8c:	3301      	adds	r3, #1
 8009e8e:	68ba      	ldr	r2, [r7, #8]
 8009e90:	4413      	add	r3, r2
 8009e92:	2200      	movs	r2, #0
 8009e94:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009e96:	7dfb      	ldrb	r3, [r7, #23]
 8009e98:	3301      	adds	r3, #1
 8009e9a:	75fb      	strb	r3, [r7, #23]
 8009e9c:	7dfa      	ldrb	r2, [r7, #23]
 8009e9e:	79fb      	ldrb	r3, [r7, #7]
 8009ea0:	429a      	cmp	r2, r3
 8009ea2:	d3d3      	bcc.n	8009e4c <IntToUnicode+0x18>
  }
}
 8009ea4:	bf00      	nop
 8009ea6:	bf00      	nop
 8009ea8:	371c      	adds	r7, #28
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb0:	4770      	bx	lr
	...

08009eb4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b08a      	sub	sp, #40	; 0x28
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009ebc:	f107 0314 	add.w	r3, r7, #20
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	601a      	str	r2, [r3, #0]
 8009ec4:	605a      	str	r2, [r3, #4]
 8009ec6:	609a      	str	r2, [r3, #8]
 8009ec8:	60da      	str	r2, [r3, #12]
 8009eca:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	4a1c      	ldr	r2, [pc, #112]	; (8009f44 <HAL_PCD_MspInit+0x90>)
 8009ed2:	4293      	cmp	r3, r2
 8009ed4:	d131      	bne.n	8009f3a <HAL_PCD_MspInit+0x86>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009ed6:	4b1c      	ldr	r3, [pc, #112]	; (8009f48 <HAL_PCD_MspInit+0x94>)
 8009ed8:	695b      	ldr	r3, [r3, #20]
 8009eda:	4a1b      	ldr	r2, [pc, #108]	; (8009f48 <HAL_PCD_MspInit+0x94>)
 8009edc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ee0:	6153      	str	r3, [r2, #20]
 8009ee2:	4b19      	ldr	r3, [pc, #100]	; (8009f48 <HAL_PCD_MspInit+0x94>)
 8009ee4:	695b      	ldr	r3, [r3, #20]
 8009ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009eea:	613b      	str	r3, [r7, #16]
 8009eec:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8009eee:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009ef2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009ef4:	2302      	movs	r3, #2
 8009ef6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ef8:	2300      	movs	r3, #0
 8009efa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009efc:	2303      	movs	r3, #3
 8009efe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8009f00:	230e      	movs	r3, #14
 8009f02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009f04:	f107 0314 	add.w	r3, r7, #20
 8009f08:	4619      	mov	r1, r3
 8009f0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009f0e:	f7f7 ff6b 	bl	8001de8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009f12:	4b0d      	ldr	r3, [pc, #52]	; (8009f48 <HAL_PCD_MspInit+0x94>)
 8009f14:	69db      	ldr	r3, [r3, #28]
 8009f16:	4a0c      	ldr	r2, [pc, #48]	; (8009f48 <HAL_PCD_MspInit+0x94>)
 8009f18:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009f1c:	61d3      	str	r3, [r2, #28]
 8009f1e:	4b0a      	ldr	r3, [pc, #40]	; (8009f48 <HAL_PCD_MspInit+0x94>)
 8009f20:	69db      	ldr	r3, [r3, #28]
 8009f22:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009f26:	60fb      	str	r3, [r7, #12]
 8009f28:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	2100      	movs	r1, #0
 8009f2e:	2014      	movs	r0, #20
 8009f30:	f7f7 ff23 	bl	8001d7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8009f34:	2014      	movs	r0, #20
 8009f36:	f7f7 ff3c 	bl	8001db2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009f3a:	bf00      	nop
 8009f3c:	3728      	adds	r7, #40	; 0x28
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	bd80      	pop	{r7, pc}
 8009f42:	bf00      	nop
 8009f44:	40005c00 	.word	0x40005c00
 8009f48:	40021000 	.word	0x40021000

08009f4c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	b082      	sub	sp, #8
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009f60:	4619      	mov	r1, r3
 8009f62:	4610      	mov	r0, r2
 8009f64:	f7fe fd9e 	bl	8008aa4 <USBD_LL_SetupStage>
}
 8009f68:	bf00      	nop
 8009f6a:	3708      	adds	r7, #8
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	bd80      	pop	{r7, pc}

08009f70 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b082      	sub	sp, #8
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
 8009f78:	460b      	mov	r3, r1
 8009f7a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009f82:	78fa      	ldrb	r2, [r7, #3]
 8009f84:	6879      	ldr	r1, [r7, #4]
 8009f86:	4613      	mov	r3, r2
 8009f88:	009b      	lsls	r3, r3, #2
 8009f8a:	4413      	add	r3, r2
 8009f8c:	00db      	lsls	r3, r3, #3
 8009f8e:	440b      	add	r3, r1
 8009f90:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009f94:	681a      	ldr	r2, [r3, #0]
 8009f96:	78fb      	ldrb	r3, [r7, #3]
 8009f98:	4619      	mov	r1, r3
 8009f9a:	f7fe fdd0 	bl	8008b3e <USBD_LL_DataOutStage>
}
 8009f9e:	bf00      	nop
 8009fa0:	3708      	adds	r7, #8
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	bd80      	pop	{r7, pc}

08009fa6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fa6:	b580      	push	{r7, lr}
 8009fa8:	b082      	sub	sp, #8
 8009faa:	af00      	add	r7, sp, #0
 8009fac:	6078      	str	r0, [r7, #4]
 8009fae:	460b      	mov	r3, r1
 8009fb0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009fb8:	78fa      	ldrb	r2, [r7, #3]
 8009fba:	6879      	ldr	r1, [r7, #4]
 8009fbc:	4613      	mov	r3, r2
 8009fbe:	009b      	lsls	r3, r3, #2
 8009fc0:	4413      	add	r3, r2
 8009fc2:	00db      	lsls	r3, r3, #3
 8009fc4:	440b      	add	r3, r1
 8009fc6:	333c      	adds	r3, #60	; 0x3c
 8009fc8:	681a      	ldr	r2, [r3, #0]
 8009fca:	78fb      	ldrb	r3, [r7, #3]
 8009fcc:	4619      	mov	r1, r3
 8009fce:	f7fe fe27 	bl	8008c20 <USBD_LL_DataInStage>
}
 8009fd2:	bf00      	nop
 8009fd4:	3708      	adds	r7, #8
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	bd80      	pop	{r7, pc}

08009fda <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fda:	b580      	push	{r7, lr}
 8009fdc:	b082      	sub	sp, #8
 8009fde:	af00      	add	r7, sp, #0
 8009fe0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009fe8:	4618      	mov	r0, r3
 8009fea:	f7fe ff3a 	bl	8008e62 <USBD_LL_SOF>
}
 8009fee:	bf00      	nop
 8009ff0:	3708      	adds	r7, #8
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	bd80      	pop	{r7, pc}

08009ff6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ff6:	b580      	push	{r7, lr}
 8009ff8:	b084      	sub	sp, #16
 8009ffa:	af00      	add	r7, sp, #0
 8009ffc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009ffe:	2301      	movs	r3, #1
 800a000:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	689b      	ldr	r3, [r3, #8]
 800a006:	2b02      	cmp	r3, #2
 800a008:	d001      	beq.n	800a00e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a00a:	f7f7 fb4b 	bl	80016a4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a014:	7bfa      	ldrb	r2, [r7, #15]
 800a016:	4611      	mov	r1, r2
 800a018:	4618      	mov	r0, r3
 800a01a:	f7fe fee7 	bl	8008dec <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a024:	4618      	mov	r0, r3
 800a026:	f7fe fea0 	bl	8008d6a <USBD_LL_Reset>
}
 800a02a:	bf00      	nop
 800a02c:	3710      	adds	r7, #16
 800a02e:	46bd      	mov	sp, r7
 800a030:	bd80      	pop	{r7, pc}
	...

0800a034 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a034:	b580      	push	{r7, lr}
 800a036:	b082      	sub	sp, #8
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a042:	4618      	mov	r0, r3
 800a044:	f7fe fee2 	bl	8008e0c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	699b      	ldr	r3, [r3, #24]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d005      	beq.n	800a05c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a050:	4b04      	ldr	r3, [pc, #16]	; (800a064 <HAL_PCD_SuspendCallback+0x30>)
 800a052:	691b      	ldr	r3, [r3, #16]
 800a054:	4a03      	ldr	r2, [pc, #12]	; (800a064 <HAL_PCD_SuspendCallback+0x30>)
 800a056:	f043 0306 	orr.w	r3, r3, #6
 800a05a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a05c:	bf00      	nop
 800a05e:	3708      	adds	r7, #8
 800a060:	46bd      	mov	sp, r7
 800a062:	bd80      	pop	{r7, pc}
 800a064:	e000ed00 	.word	0xe000ed00

0800a068 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b082      	sub	sp, #8
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a076:	4618      	mov	r0, r3
 800a078:	f7fe fedd 	bl	8008e36 <USBD_LL_Resume>
}
 800a07c:	bf00      	nop
 800a07e:	3708      	adds	r7, #8
 800a080:	46bd      	mov	sp, r7
 800a082:	bd80      	pop	{r7, pc}

0800a084 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b082      	sub	sp, #8
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a08c:	4a28      	ldr	r2, [pc, #160]	; (800a130 <USBD_LL_Init+0xac>)
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	4a26      	ldr	r2, [pc, #152]	; (800a130 <USBD_LL_Init+0xac>)
 800a098:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800a09c:	4b24      	ldr	r3, [pc, #144]	; (800a130 <USBD_LL_Init+0xac>)
 800a09e:	4a25      	ldr	r2, [pc, #148]	; (800a134 <USBD_LL_Init+0xb0>)
 800a0a0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a0a2:	4b23      	ldr	r3, [pc, #140]	; (800a130 <USBD_LL_Init+0xac>)
 800a0a4:	2208      	movs	r2, #8
 800a0a6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a0a8:	4b21      	ldr	r3, [pc, #132]	; (800a130 <USBD_LL_Init+0xac>)
 800a0aa:	2202      	movs	r2, #2
 800a0ac:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a0ae:	4b20      	ldr	r3, [pc, #128]	; (800a130 <USBD_LL_Init+0xac>)
 800a0b0:	2202      	movs	r2, #2
 800a0b2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a0b4:	4b1e      	ldr	r3, [pc, #120]	; (800a130 <USBD_LL_Init+0xac>)
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a0ba:	4b1d      	ldr	r3, [pc, #116]	; (800a130 <USBD_LL_Init+0xac>)
 800a0bc:	2200      	movs	r2, #0
 800a0be:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a0c0:	481b      	ldr	r0, [pc, #108]	; (800a130 <USBD_LL_Init+0xac>)
 800a0c2:	f7f8 fdbc 	bl	8002c3e <HAL_PCD_Init>
 800a0c6:	4603      	mov	r3, r0
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d001      	beq.n	800a0d0 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800a0cc:	f7f7 faea 	bl	80016a4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a0d6:	2318      	movs	r3, #24
 800a0d8:	2200      	movs	r2, #0
 800a0da:	2100      	movs	r1, #0
 800a0dc:	f7fa fa57 	bl	800458e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a0e6:	2358      	movs	r3, #88	; 0x58
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	2180      	movs	r1, #128	; 0x80
 800a0ec:	f7fa fa4f 	bl	800458e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a0f6:	23c0      	movs	r3, #192	; 0xc0
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	2181      	movs	r1, #129	; 0x81
 800a0fc:	f7fa fa47 	bl	800458e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a106:	f44f 7388 	mov.w	r3, #272	; 0x110
 800a10a:	2200      	movs	r2, #0
 800a10c:	2101      	movs	r1, #1
 800a10e:	f7fa fa3e 	bl	800458e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a118:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a11c:	2200      	movs	r2, #0
 800a11e:	2182      	movs	r1, #130	; 0x82
 800a120:	f7fa fa35 	bl	800458e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a124:	2300      	movs	r3, #0
}
 800a126:	4618      	mov	r0, r3
 800a128:	3708      	adds	r7, #8
 800a12a:	46bd      	mov	sp, r7
 800a12c:	bd80      	pop	{r7, pc}
 800a12e:	bf00      	nop
 800a130:	20001330 	.word	0x20001330
 800a134:	40005c00 	.word	0x40005c00

0800a138 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b084      	sub	sp, #16
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a140:	2300      	movs	r3, #0
 800a142:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a144:	2300      	movs	r3, #0
 800a146:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a14e:	4618      	mov	r0, r3
 800a150:	f7f8 fe53 	bl	8002dfa <HAL_PCD_Start>
 800a154:	4603      	mov	r3, r0
 800a156:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a158:	7bfb      	ldrb	r3, [r7, #15]
 800a15a:	4618      	mov	r0, r3
 800a15c:	f000 f954 	bl	800a408 <USBD_Get_USB_Status>
 800a160:	4603      	mov	r3, r0
 800a162:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a164:	7bbb      	ldrb	r3, [r7, #14]
}
 800a166:	4618      	mov	r0, r3
 800a168:	3710      	adds	r7, #16
 800a16a:	46bd      	mov	sp, r7
 800a16c:	bd80      	pop	{r7, pc}

0800a16e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a16e:	b580      	push	{r7, lr}
 800a170:	b084      	sub	sp, #16
 800a172:	af00      	add	r7, sp, #0
 800a174:	6078      	str	r0, [r7, #4]
 800a176:	4608      	mov	r0, r1
 800a178:	4611      	mov	r1, r2
 800a17a:	461a      	mov	r2, r3
 800a17c:	4603      	mov	r3, r0
 800a17e:	70fb      	strb	r3, [r7, #3]
 800a180:	460b      	mov	r3, r1
 800a182:	70bb      	strb	r3, [r7, #2]
 800a184:	4613      	mov	r3, r2
 800a186:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a188:	2300      	movs	r3, #0
 800a18a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a18c:	2300      	movs	r3, #0
 800a18e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a196:	78bb      	ldrb	r3, [r7, #2]
 800a198:	883a      	ldrh	r2, [r7, #0]
 800a19a:	78f9      	ldrb	r1, [r7, #3]
 800a19c:	f7f8 ff6f 	bl	800307e <HAL_PCD_EP_Open>
 800a1a0:	4603      	mov	r3, r0
 800a1a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a1a4:	7bfb      	ldrb	r3, [r7, #15]
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	f000 f92e 	bl	800a408 <USBD_Get_USB_Status>
 800a1ac:	4603      	mov	r3, r0
 800a1ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a1b0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	3710      	adds	r7, #16
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	bd80      	pop	{r7, pc}

0800a1ba <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a1ba:	b580      	push	{r7, lr}
 800a1bc:	b084      	sub	sp, #16
 800a1be:	af00      	add	r7, sp, #0
 800a1c0:	6078      	str	r0, [r7, #4]
 800a1c2:	460b      	mov	r3, r1
 800a1c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a1d4:	78fa      	ldrb	r2, [r7, #3]
 800a1d6:	4611      	mov	r1, r2
 800a1d8:	4618      	mov	r0, r3
 800a1da:	f7f8 ffb6 	bl	800314a <HAL_PCD_EP_Close>
 800a1de:	4603      	mov	r3, r0
 800a1e0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a1e2:	7bfb      	ldrb	r3, [r7, #15]
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	f000 f90f 	bl	800a408 <USBD_Get_USB_Status>
 800a1ea:	4603      	mov	r3, r0
 800a1ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a1ee:	7bbb      	ldrb	r3, [r7, #14]
}
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	3710      	adds	r7, #16
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	bd80      	pop	{r7, pc}

0800a1f8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b084      	sub	sp, #16
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
 800a200:	460b      	mov	r3, r1
 800a202:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a204:	2300      	movs	r3, #0
 800a206:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a208:	2300      	movs	r3, #0
 800a20a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a212:	78fa      	ldrb	r2, [r7, #3]
 800a214:	4611      	mov	r1, r2
 800a216:	4618      	mov	r0, r3
 800a218:	f7f9 f877 	bl	800330a <HAL_PCD_EP_SetStall>
 800a21c:	4603      	mov	r3, r0
 800a21e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a220:	7bfb      	ldrb	r3, [r7, #15]
 800a222:	4618      	mov	r0, r3
 800a224:	f000 f8f0 	bl	800a408 <USBD_Get_USB_Status>
 800a228:	4603      	mov	r3, r0
 800a22a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a22c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a22e:	4618      	mov	r0, r3
 800a230:	3710      	adds	r7, #16
 800a232:	46bd      	mov	sp, r7
 800a234:	bd80      	pop	{r7, pc}

0800a236 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a236:	b580      	push	{r7, lr}
 800a238:	b084      	sub	sp, #16
 800a23a:	af00      	add	r7, sp, #0
 800a23c:	6078      	str	r0, [r7, #4]
 800a23e:	460b      	mov	r3, r1
 800a240:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a242:	2300      	movs	r3, #0
 800a244:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a246:	2300      	movs	r3, #0
 800a248:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a250:	78fa      	ldrb	r2, [r7, #3]
 800a252:	4611      	mov	r1, r2
 800a254:	4618      	mov	r0, r3
 800a256:	f7f9 f8aa 	bl	80033ae <HAL_PCD_EP_ClrStall>
 800a25a:	4603      	mov	r3, r0
 800a25c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a25e:	7bfb      	ldrb	r3, [r7, #15]
 800a260:	4618      	mov	r0, r3
 800a262:	f000 f8d1 	bl	800a408 <USBD_Get_USB_Status>
 800a266:	4603      	mov	r3, r0
 800a268:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a26a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a26c:	4618      	mov	r0, r3
 800a26e:	3710      	adds	r7, #16
 800a270:	46bd      	mov	sp, r7
 800a272:	bd80      	pop	{r7, pc}

0800a274 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a274:	b480      	push	{r7}
 800a276:	b085      	sub	sp, #20
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
 800a27c:	460b      	mov	r3, r1
 800a27e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a286:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a288:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	da0c      	bge.n	800a2aa <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a290:	78fb      	ldrb	r3, [r7, #3]
 800a292:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a296:	68f9      	ldr	r1, [r7, #12]
 800a298:	1c5a      	adds	r2, r3, #1
 800a29a:	4613      	mov	r3, r2
 800a29c:	009b      	lsls	r3, r3, #2
 800a29e:	4413      	add	r3, r2
 800a2a0:	00db      	lsls	r3, r3, #3
 800a2a2:	440b      	add	r3, r1
 800a2a4:	3302      	adds	r3, #2
 800a2a6:	781b      	ldrb	r3, [r3, #0]
 800a2a8:	e00b      	b.n	800a2c2 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a2aa:	78fb      	ldrb	r3, [r7, #3]
 800a2ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a2b0:	68f9      	ldr	r1, [r7, #12]
 800a2b2:	4613      	mov	r3, r2
 800a2b4:	009b      	lsls	r3, r3, #2
 800a2b6:	4413      	add	r3, r2
 800a2b8:	00db      	lsls	r3, r3, #3
 800a2ba:	440b      	add	r3, r1
 800a2bc:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800a2c0:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	3714      	adds	r7, #20
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2cc:	4770      	bx	lr

0800a2ce <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a2ce:	b580      	push	{r7, lr}
 800a2d0:	b084      	sub	sp, #16
 800a2d2:	af00      	add	r7, sp, #0
 800a2d4:	6078      	str	r0, [r7, #4]
 800a2d6:	460b      	mov	r3, r1
 800a2d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2da:	2300      	movs	r3, #0
 800a2dc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2de:	2300      	movs	r3, #0
 800a2e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a2e8:	78fa      	ldrb	r2, [r7, #3]
 800a2ea:	4611      	mov	r1, r2
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	f7f8 fea1 	bl	8003034 <HAL_PCD_SetAddress>
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2f6:	7bfb      	ldrb	r3, [r7, #15]
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	f000 f885 	bl	800a408 <USBD_Get_USB_Status>
 800a2fe:	4603      	mov	r3, r0
 800a300:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a302:	7bbb      	ldrb	r3, [r7, #14]
}
 800a304:	4618      	mov	r0, r3
 800a306:	3710      	adds	r7, #16
 800a308:	46bd      	mov	sp, r7
 800a30a:	bd80      	pop	{r7, pc}

0800a30c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b086      	sub	sp, #24
 800a310:	af00      	add	r7, sp, #0
 800a312:	60f8      	str	r0, [r7, #12]
 800a314:	607a      	str	r2, [r7, #4]
 800a316:	461a      	mov	r2, r3
 800a318:	460b      	mov	r3, r1
 800a31a:	72fb      	strb	r3, [r7, #11]
 800a31c:	4613      	mov	r3, r2
 800a31e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a320:	2300      	movs	r3, #0
 800a322:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a324:	2300      	movs	r3, #0
 800a326:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a32e:	893b      	ldrh	r3, [r7, #8]
 800a330:	7af9      	ldrb	r1, [r7, #11]
 800a332:	687a      	ldr	r2, [r7, #4]
 800a334:	f7f8 ffa6 	bl	8003284 <HAL_PCD_EP_Transmit>
 800a338:	4603      	mov	r3, r0
 800a33a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a33c:	7dfb      	ldrb	r3, [r7, #23]
 800a33e:	4618      	mov	r0, r3
 800a340:	f000 f862 	bl	800a408 <USBD_Get_USB_Status>
 800a344:	4603      	mov	r3, r0
 800a346:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a348:	7dbb      	ldrb	r3, [r7, #22]
}
 800a34a:	4618      	mov	r0, r3
 800a34c:	3718      	adds	r7, #24
 800a34e:	46bd      	mov	sp, r7
 800a350:	bd80      	pop	{r7, pc}

0800a352 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a352:	b580      	push	{r7, lr}
 800a354:	b086      	sub	sp, #24
 800a356:	af00      	add	r7, sp, #0
 800a358:	60f8      	str	r0, [r7, #12]
 800a35a:	607a      	str	r2, [r7, #4]
 800a35c:	461a      	mov	r2, r3
 800a35e:	460b      	mov	r3, r1
 800a360:	72fb      	strb	r3, [r7, #11]
 800a362:	4613      	mov	r3, r2
 800a364:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a366:	2300      	movs	r3, #0
 800a368:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a36a:	2300      	movs	r3, #0
 800a36c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a374:	893b      	ldrh	r3, [r7, #8]
 800a376:	7af9      	ldrb	r1, [r7, #11]
 800a378:	687a      	ldr	r2, [r7, #4]
 800a37a:	f7f8 ff2e 	bl	80031da <HAL_PCD_EP_Receive>
 800a37e:	4603      	mov	r3, r0
 800a380:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a382:	7dfb      	ldrb	r3, [r7, #23]
 800a384:	4618      	mov	r0, r3
 800a386:	f000 f83f 	bl	800a408 <USBD_Get_USB_Status>
 800a38a:	4603      	mov	r3, r0
 800a38c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a38e:	7dbb      	ldrb	r3, [r7, #22]
}
 800a390:	4618      	mov	r0, r3
 800a392:	3718      	adds	r7, #24
 800a394:	46bd      	mov	sp, r7
 800a396:	bd80      	pop	{r7, pc}

0800a398 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b082      	sub	sp, #8
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
 800a3a0:	460b      	mov	r3, r1
 800a3a2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a3aa:	78fa      	ldrb	r2, [r7, #3]
 800a3ac:	4611      	mov	r1, r2
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	f7f8 ff50 	bl	8003254 <HAL_PCD_EP_GetRxCount>
 800a3b4:	4603      	mov	r3, r0
}
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	3708      	adds	r7, #8
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	bd80      	pop	{r7, pc}
	...

0800a3c0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a3c0:	b480      	push	{r7}
 800a3c2:	b083      	sub	sp, #12
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a3c8:	4b03      	ldr	r3, [pc, #12]	; (800a3d8 <USBD_static_malloc+0x18>)
}
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	370c      	adds	r7, #12
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d4:	4770      	bx	lr
 800a3d6:	bf00      	nop
 800a3d8:	20000374 	.word	0x20000374

0800a3dc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a3dc:	b480      	push	{r7}
 800a3de:	b083      	sub	sp, #12
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]

}
 800a3e4:	bf00      	nop
 800a3e6:	370c      	adds	r7, #12
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ee:	4770      	bx	lr

0800a3f0 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3f0:	b480      	push	{r7}
 800a3f2:	b083      	sub	sp, #12
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
 800a3f8:	460b      	mov	r3, r1
 800a3fa:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800a3fc:	bf00      	nop
 800a3fe:	370c      	adds	r7, #12
 800a400:	46bd      	mov	sp, r7
 800a402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a406:	4770      	bx	lr

0800a408 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a408:	b480      	push	{r7}
 800a40a:	b085      	sub	sp, #20
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	4603      	mov	r3, r0
 800a410:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a412:	2300      	movs	r3, #0
 800a414:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a416:	79fb      	ldrb	r3, [r7, #7]
 800a418:	2b03      	cmp	r3, #3
 800a41a:	d817      	bhi.n	800a44c <USBD_Get_USB_Status+0x44>
 800a41c:	a201      	add	r2, pc, #4	; (adr r2, 800a424 <USBD_Get_USB_Status+0x1c>)
 800a41e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a422:	bf00      	nop
 800a424:	0800a435 	.word	0x0800a435
 800a428:	0800a43b 	.word	0x0800a43b
 800a42c:	0800a441 	.word	0x0800a441
 800a430:	0800a447 	.word	0x0800a447
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a434:	2300      	movs	r3, #0
 800a436:	73fb      	strb	r3, [r7, #15]
    break;
 800a438:	e00b      	b.n	800a452 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a43a:	2302      	movs	r3, #2
 800a43c:	73fb      	strb	r3, [r7, #15]
    break;
 800a43e:	e008      	b.n	800a452 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a440:	2301      	movs	r3, #1
 800a442:	73fb      	strb	r3, [r7, #15]
    break;
 800a444:	e005      	b.n	800a452 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a446:	2302      	movs	r3, #2
 800a448:	73fb      	strb	r3, [r7, #15]
    break;
 800a44a:	e002      	b.n	800a452 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a44c:	2302      	movs	r3, #2
 800a44e:	73fb      	strb	r3, [r7, #15]
    break;
 800a450:	bf00      	nop
  }
  return usb_status;
 800a452:	7bfb      	ldrb	r3, [r7, #15]
}
 800a454:	4618      	mov	r0, r3
 800a456:	3714      	adds	r7, #20
 800a458:	46bd      	mov	sp, r7
 800a45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45e:	4770      	bx	lr

0800a460 <__errno>:
 800a460:	4b01      	ldr	r3, [pc, #4]	; (800a468 <__errno+0x8>)
 800a462:	6818      	ldr	r0, [r3, #0]
 800a464:	4770      	bx	lr
 800a466:	bf00      	nop
 800a468:	2000017c 	.word	0x2000017c

0800a46c <__libc_init_array>:
 800a46c:	b570      	push	{r4, r5, r6, lr}
 800a46e:	4d0d      	ldr	r5, [pc, #52]	; (800a4a4 <__libc_init_array+0x38>)
 800a470:	4c0d      	ldr	r4, [pc, #52]	; (800a4a8 <__libc_init_array+0x3c>)
 800a472:	1b64      	subs	r4, r4, r5
 800a474:	10a4      	asrs	r4, r4, #2
 800a476:	2600      	movs	r6, #0
 800a478:	42a6      	cmp	r6, r4
 800a47a:	d109      	bne.n	800a490 <__libc_init_array+0x24>
 800a47c:	4d0b      	ldr	r5, [pc, #44]	; (800a4ac <__libc_init_array+0x40>)
 800a47e:	4c0c      	ldr	r4, [pc, #48]	; (800a4b0 <__libc_init_array+0x44>)
 800a480:	f003 fe9c 	bl	800e1bc <_init>
 800a484:	1b64      	subs	r4, r4, r5
 800a486:	10a4      	asrs	r4, r4, #2
 800a488:	2600      	movs	r6, #0
 800a48a:	42a6      	cmp	r6, r4
 800a48c:	d105      	bne.n	800a49a <__libc_init_array+0x2e>
 800a48e:	bd70      	pop	{r4, r5, r6, pc}
 800a490:	f855 3b04 	ldr.w	r3, [r5], #4
 800a494:	4798      	blx	r3
 800a496:	3601      	adds	r6, #1
 800a498:	e7ee      	b.n	800a478 <__libc_init_array+0xc>
 800a49a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a49e:	4798      	blx	r3
 800a4a0:	3601      	adds	r6, #1
 800a4a2:	e7f2      	b.n	800a48a <__libc_init_array+0x1e>
 800a4a4:	0800e6f0 	.word	0x0800e6f0
 800a4a8:	0800e6f0 	.word	0x0800e6f0
 800a4ac:	0800e6f0 	.word	0x0800e6f0
 800a4b0:	0800e6f4 	.word	0x0800e6f4

0800a4b4 <memset>:
 800a4b4:	4402      	add	r2, r0
 800a4b6:	4603      	mov	r3, r0
 800a4b8:	4293      	cmp	r3, r2
 800a4ba:	d100      	bne.n	800a4be <memset+0xa>
 800a4bc:	4770      	bx	lr
 800a4be:	f803 1b01 	strb.w	r1, [r3], #1
 800a4c2:	e7f9      	b.n	800a4b8 <memset+0x4>

0800a4c4 <__cvt>:
 800a4c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a4c8:	ec55 4b10 	vmov	r4, r5, d0
 800a4cc:	2d00      	cmp	r5, #0
 800a4ce:	460e      	mov	r6, r1
 800a4d0:	4619      	mov	r1, r3
 800a4d2:	462b      	mov	r3, r5
 800a4d4:	bfbb      	ittet	lt
 800a4d6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a4da:	461d      	movlt	r5, r3
 800a4dc:	2300      	movge	r3, #0
 800a4de:	232d      	movlt	r3, #45	; 0x2d
 800a4e0:	700b      	strb	r3, [r1, #0]
 800a4e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a4e4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a4e8:	4691      	mov	r9, r2
 800a4ea:	f023 0820 	bic.w	r8, r3, #32
 800a4ee:	bfbc      	itt	lt
 800a4f0:	4622      	movlt	r2, r4
 800a4f2:	4614      	movlt	r4, r2
 800a4f4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a4f8:	d005      	beq.n	800a506 <__cvt+0x42>
 800a4fa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a4fe:	d100      	bne.n	800a502 <__cvt+0x3e>
 800a500:	3601      	adds	r6, #1
 800a502:	2102      	movs	r1, #2
 800a504:	e000      	b.n	800a508 <__cvt+0x44>
 800a506:	2103      	movs	r1, #3
 800a508:	ab03      	add	r3, sp, #12
 800a50a:	9301      	str	r3, [sp, #4]
 800a50c:	ab02      	add	r3, sp, #8
 800a50e:	9300      	str	r3, [sp, #0]
 800a510:	ec45 4b10 	vmov	d0, r4, r5
 800a514:	4653      	mov	r3, sl
 800a516:	4632      	mov	r2, r6
 800a518:	f000 fcea 	bl	800aef0 <_dtoa_r>
 800a51c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a520:	4607      	mov	r7, r0
 800a522:	d102      	bne.n	800a52a <__cvt+0x66>
 800a524:	f019 0f01 	tst.w	r9, #1
 800a528:	d022      	beq.n	800a570 <__cvt+0xac>
 800a52a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a52e:	eb07 0906 	add.w	r9, r7, r6
 800a532:	d110      	bne.n	800a556 <__cvt+0x92>
 800a534:	783b      	ldrb	r3, [r7, #0]
 800a536:	2b30      	cmp	r3, #48	; 0x30
 800a538:	d10a      	bne.n	800a550 <__cvt+0x8c>
 800a53a:	2200      	movs	r2, #0
 800a53c:	2300      	movs	r3, #0
 800a53e:	4620      	mov	r0, r4
 800a540:	4629      	mov	r1, r5
 800a542:	f7f6 fac1 	bl	8000ac8 <__aeabi_dcmpeq>
 800a546:	b918      	cbnz	r0, 800a550 <__cvt+0x8c>
 800a548:	f1c6 0601 	rsb	r6, r6, #1
 800a54c:	f8ca 6000 	str.w	r6, [sl]
 800a550:	f8da 3000 	ldr.w	r3, [sl]
 800a554:	4499      	add	r9, r3
 800a556:	2200      	movs	r2, #0
 800a558:	2300      	movs	r3, #0
 800a55a:	4620      	mov	r0, r4
 800a55c:	4629      	mov	r1, r5
 800a55e:	f7f6 fab3 	bl	8000ac8 <__aeabi_dcmpeq>
 800a562:	b108      	cbz	r0, 800a568 <__cvt+0xa4>
 800a564:	f8cd 900c 	str.w	r9, [sp, #12]
 800a568:	2230      	movs	r2, #48	; 0x30
 800a56a:	9b03      	ldr	r3, [sp, #12]
 800a56c:	454b      	cmp	r3, r9
 800a56e:	d307      	bcc.n	800a580 <__cvt+0xbc>
 800a570:	9b03      	ldr	r3, [sp, #12]
 800a572:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a574:	1bdb      	subs	r3, r3, r7
 800a576:	4638      	mov	r0, r7
 800a578:	6013      	str	r3, [r2, #0]
 800a57a:	b004      	add	sp, #16
 800a57c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a580:	1c59      	adds	r1, r3, #1
 800a582:	9103      	str	r1, [sp, #12]
 800a584:	701a      	strb	r2, [r3, #0]
 800a586:	e7f0      	b.n	800a56a <__cvt+0xa6>

0800a588 <__exponent>:
 800a588:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a58a:	4603      	mov	r3, r0
 800a58c:	2900      	cmp	r1, #0
 800a58e:	bfb8      	it	lt
 800a590:	4249      	neglt	r1, r1
 800a592:	f803 2b02 	strb.w	r2, [r3], #2
 800a596:	bfb4      	ite	lt
 800a598:	222d      	movlt	r2, #45	; 0x2d
 800a59a:	222b      	movge	r2, #43	; 0x2b
 800a59c:	2909      	cmp	r1, #9
 800a59e:	7042      	strb	r2, [r0, #1]
 800a5a0:	dd2a      	ble.n	800a5f8 <__exponent+0x70>
 800a5a2:	f10d 0407 	add.w	r4, sp, #7
 800a5a6:	46a4      	mov	ip, r4
 800a5a8:	270a      	movs	r7, #10
 800a5aa:	46a6      	mov	lr, r4
 800a5ac:	460a      	mov	r2, r1
 800a5ae:	fb91 f6f7 	sdiv	r6, r1, r7
 800a5b2:	fb07 1516 	mls	r5, r7, r6, r1
 800a5b6:	3530      	adds	r5, #48	; 0x30
 800a5b8:	2a63      	cmp	r2, #99	; 0x63
 800a5ba:	f104 34ff 	add.w	r4, r4, #4294967295
 800a5be:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a5c2:	4631      	mov	r1, r6
 800a5c4:	dcf1      	bgt.n	800a5aa <__exponent+0x22>
 800a5c6:	3130      	adds	r1, #48	; 0x30
 800a5c8:	f1ae 0502 	sub.w	r5, lr, #2
 800a5cc:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a5d0:	1c44      	adds	r4, r0, #1
 800a5d2:	4629      	mov	r1, r5
 800a5d4:	4561      	cmp	r1, ip
 800a5d6:	d30a      	bcc.n	800a5ee <__exponent+0x66>
 800a5d8:	f10d 0209 	add.w	r2, sp, #9
 800a5dc:	eba2 020e 	sub.w	r2, r2, lr
 800a5e0:	4565      	cmp	r5, ip
 800a5e2:	bf88      	it	hi
 800a5e4:	2200      	movhi	r2, #0
 800a5e6:	4413      	add	r3, r2
 800a5e8:	1a18      	subs	r0, r3, r0
 800a5ea:	b003      	add	sp, #12
 800a5ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a5ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a5f2:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a5f6:	e7ed      	b.n	800a5d4 <__exponent+0x4c>
 800a5f8:	2330      	movs	r3, #48	; 0x30
 800a5fa:	3130      	adds	r1, #48	; 0x30
 800a5fc:	7083      	strb	r3, [r0, #2]
 800a5fe:	70c1      	strb	r1, [r0, #3]
 800a600:	1d03      	adds	r3, r0, #4
 800a602:	e7f1      	b.n	800a5e8 <__exponent+0x60>

0800a604 <_printf_float>:
 800a604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a608:	ed2d 8b02 	vpush	{d8}
 800a60c:	b08d      	sub	sp, #52	; 0x34
 800a60e:	460c      	mov	r4, r1
 800a610:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a614:	4616      	mov	r6, r2
 800a616:	461f      	mov	r7, r3
 800a618:	4605      	mov	r5, r0
 800a61a:	f001 fa55 	bl	800bac8 <_localeconv_r>
 800a61e:	f8d0 a000 	ldr.w	sl, [r0]
 800a622:	4650      	mov	r0, sl
 800a624:	f7f5 fdd4 	bl	80001d0 <strlen>
 800a628:	2300      	movs	r3, #0
 800a62a:	930a      	str	r3, [sp, #40]	; 0x28
 800a62c:	6823      	ldr	r3, [r4, #0]
 800a62e:	9305      	str	r3, [sp, #20]
 800a630:	f8d8 3000 	ldr.w	r3, [r8]
 800a634:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a638:	3307      	adds	r3, #7
 800a63a:	f023 0307 	bic.w	r3, r3, #7
 800a63e:	f103 0208 	add.w	r2, r3, #8
 800a642:	f8c8 2000 	str.w	r2, [r8]
 800a646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a64a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a64e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a652:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a656:	9307      	str	r3, [sp, #28]
 800a658:	f8cd 8018 	str.w	r8, [sp, #24]
 800a65c:	ee08 0a10 	vmov	s16, r0
 800a660:	4b9f      	ldr	r3, [pc, #636]	; (800a8e0 <_printf_float+0x2dc>)
 800a662:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a666:	f04f 32ff 	mov.w	r2, #4294967295
 800a66a:	f7f6 fa5f 	bl	8000b2c <__aeabi_dcmpun>
 800a66e:	bb88      	cbnz	r0, 800a6d4 <_printf_float+0xd0>
 800a670:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a674:	4b9a      	ldr	r3, [pc, #616]	; (800a8e0 <_printf_float+0x2dc>)
 800a676:	f04f 32ff 	mov.w	r2, #4294967295
 800a67a:	f7f6 fa39 	bl	8000af0 <__aeabi_dcmple>
 800a67e:	bb48      	cbnz	r0, 800a6d4 <_printf_float+0xd0>
 800a680:	2200      	movs	r2, #0
 800a682:	2300      	movs	r3, #0
 800a684:	4640      	mov	r0, r8
 800a686:	4649      	mov	r1, r9
 800a688:	f7f6 fa28 	bl	8000adc <__aeabi_dcmplt>
 800a68c:	b110      	cbz	r0, 800a694 <_printf_float+0x90>
 800a68e:	232d      	movs	r3, #45	; 0x2d
 800a690:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a694:	4b93      	ldr	r3, [pc, #588]	; (800a8e4 <_printf_float+0x2e0>)
 800a696:	4894      	ldr	r0, [pc, #592]	; (800a8e8 <_printf_float+0x2e4>)
 800a698:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a69c:	bf94      	ite	ls
 800a69e:	4698      	movls	r8, r3
 800a6a0:	4680      	movhi	r8, r0
 800a6a2:	2303      	movs	r3, #3
 800a6a4:	6123      	str	r3, [r4, #16]
 800a6a6:	9b05      	ldr	r3, [sp, #20]
 800a6a8:	f023 0204 	bic.w	r2, r3, #4
 800a6ac:	6022      	str	r2, [r4, #0]
 800a6ae:	f04f 0900 	mov.w	r9, #0
 800a6b2:	9700      	str	r7, [sp, #0]
 800a6b4:	4633      	mov	r3, r6
 800a6b6:	aa0b      	add	r2, sp, #44	; 0x2c
 800a6b8:	4621      	mov	r1, r4
 800a6ba:	4628      	mov	r0, r5
 800a6bc:	f000 f9d8 	bl	800aa70 <_printf_common>
 800a6c0:	3001      	adds	r0, #1
 800a6c2:	f040 8090 	bne.w	800a7e6 <_printf_float+0x1e2>
 800a6c6:	f04f 30ff 	mov.w	r0, #4294967295
 800a6ca:	b00d      	add	sp, #52	; 0x34
 800a6cc:	ecbd 8b02 	vpop	{d8}
 800a6d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6d4:	4642      	mov	r2, r8
 800a6d6:	464b      	mov	r3, r9
 800a6d8:	4640      	mov	r0, r8
 800a6da:	4649      	mov	r1, r9
 800a6dc:	f7f6 fa26 	bl	8000b2c <__aeabi_dcmpun>
 800a6e0:	b140      	cbz	r0, 800a6f4 <_printf_float+0xf0>
 800a6e2:	464b      	mov	r3, r9
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	bfbc      	itt	lt
 800a6e8:	232d      	movlt	r3, #45	; 0x2d
 800a6ea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a6ee:	487f      	ldr	r0, [pc, #508]	; (800a8ec <_printf_float+0x2e8>)
 800a6f0:	4b7f      	ldr	r3, [pc, #508]	; (800a8f0 <_printf_float+0x2ec>)
 800a6f2:	e7d1      	b.n	800a698 <_printf_float+0x94>
 800a6f4:	6863      	ldr	r3, [r4, #4]
 800a6f6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a6fa:	9206      	str	r2, [sp, #24]
 800a6fc:	1c5a      	adds	r2, r3, #1
 800a6fe:	d13f      	bne.n	800a780 <_printf_float+0x17c>
 800a700:	2306      	movs	r3, #6
 800a702:	6063      	str	r3, [r4, #4]
 800a704:	9b05      	ldr	r3, [sp, #20]
 800a706:	6861      	ldr	r1, [r4, #4]
 800a708:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a70c:	2300      	movs	r3, #0
 800a70e:	9303      	str	r3, [sp, #12]
 800a710:	ab0a      	add	r3, sp, #40	; 0x28
 800a712:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a716:	ab09      	add	r3, sp, #36	; 0x24
 800a718:	ec49 8b10 	vmov	d0, r8, r9
 800a71c:	9300      	str	r3, [sp, #0]
 800a71e:	6022      	str	r2, [r4, #0]
 800a720:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a724:	4628      	mov	r0, r5
 800a726:	f7ff fecd 	bl	800a4c4 <__cvt>
 800a72a:	9b06      	ldr	r3, [sp, #24]
 800a72c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a72e:	2b47      	cmp	r3, #71	; 0x47
 800a730:	4680      	mov	r8, r0
 800a732:	d108      	bne.n	800a746 <_printf_float+0x142>
 800a734:	1cc8      	adds	r0, r1, #3
 800a736:	db02      	blt.n	800a73e <_printf_float+0x13a>
 800a738:	6863      	ldr	r3, [r4, #4]
 800a73a:	4299      	cmp	r1, r3
 800a73c:	dd41      	ble.n	800a7c2 <_printf_float+0x1be>
 800a73e:	f1ab 0b02 	sub.w	fp, fp, #2
 800a742:	fa5f fb8b 	uxtb.w	fp, fp
 800a746:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a74a:	d820      	bhi.n	800a78e <_printf_float+0x18a>
 800a74c:	3901      	subs	r1, #1
 800a74e:	465a      	mov	r2, fp
 800a750:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a754:	9109      	str	r1, [sp, #36]	; 0x24
 800a756:	f7ff ff17 	bl	800a588 <__exponent>
 800a75a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a75c:	1813      	adds	r3, r2, r0
 800a75e:	2a01      	cmp	r2, #1
 800a760:	4681      	mov	r9, r0
 800a762:	6123      	str	r3, [r4, #16]
 800a764:	dc02      	bgt.n	800a76c <_printf_float+0x168>
 800a766:	6822      	ldr	r2, [r4, #0]
 800a768:	07d2      	lsls	r2, r2, #31
 800a76a:	d501      	bpl.n	800a770 <_printf_float+0x16c>
 800a76c:	3301      	adds	r3, #1
 800a76e:	6123      	str	r3, [r4, #16]
 800a770:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a774:	2b00      	cmp	r3, #0
 800a776:	d09c      	beq.n	800a6b2 <_printf_float+0xae>
 800a778:	232d      	movs	r3, #45	; 0x2d
 800a77a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a77e:	e798      	b.n	800a6b2 <_printf_float+0xae>
 800a780:	9a06      	ldr	r2, [sp, #24]
 800a782:	2a47      	cmp	r2, #71	; 0x47
 800a784:	d1be      	bne.n	800a704 <_printf_float+0x100>
 800a786:	2b00      	cmp	r3, #0
 800a788:	d1bc      	bne.n	800a704 <_printf_float+0x100>
 800a78a:	2301      	movs	r3, #1
 800a78c:	e7b9      	b.n	800a702 <_printf_float+0xfe>
 800a78e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a792:	d118      	bne.n	800a7c6 <_printf_float+0x1c2>
 800a794:	2900      	cmp	r1, #0
 800a796:	6863      	ldr	r3, [r4, #4]
 800a798:	dd0b      	ble.n	800a7b2 <_printf_float+0x1ae>
 800a79a:	6121      	str	r1, [r4, #16]
 800a79c:	b913      	cbnz	r3, 800a7a4 <_printf_float+0x1a0>
 800a79e:	6822      	ldr	r2, [r4, #0]
 800a7a0:	07d0      	lsls	r0, r2, #31
 800a7a2:	d502      	bpl.n	800a7aa <_printf_float+0x1a6>
 800a7a4:	3301      	adds	r3, #1
 800a7a6:	440b      	add	r3, r1
 800a7a8:	6123      	str	r3, [r4, #16]
 800a7aa:	65a1      	str	r1, [r4, #88]	; 0x58
 800a7ac:	f04f 0900 	mov.w	r9, #0
 800a7b0:	e7de      	b.n	800a770 <_printf_float+0x16c>
 800a7b2:	b913      	cbnz	r3, 800a7ba <_printf_float+0x1b6>
 800a7b4:	6822      	ldr	r2, [r4, #0]
 800a7b6:	07d2      	lsls	r2, r2, #31
 800a7b8:	d501      	bpl.n	800a7be <_printf_float+0x1ba>
 800a7ba:	3302      	adds	r3, #2
 800a7bc:	e7f4      	b.n	800a7a8 <_printf_float+0x1a4>
 800a7be:	2301      	movs	r3, #1
 800a7c0:	e7f2      	b.n	800a7a8 <_printf_float+0x1a4>
 800a7c2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a7c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7c8:	4299      	cmp	r1, r3
 800a7ca:	db05      	blt.n	800a7d8 <_printf_float+0x1d4>
 800a7cc:	6823      	ldr	r3, [r4, #0]
 800a7ce:	6121      	str	r1, [r4, #16]
 800a7d0:	07d8      	lsls	r0, r3, #31
 800a7d2:	d5ea      	bpl.n	800a7aa <_printf_float+0x1a6>
 800a7d4:	1c4b      	adds	r3, r1, #1
 800a7d6:	e7e7      	b.n	800a7a8 <_printf_float+0x1a4>
 800a7d8:	2900      	cmp	r1, #0
 800a7da:	bfd4      	ite	le
 800a7dc:	f1c1 0202 	rsble	r2, r1, #2
 800a7e0:	2201      	movgt	r2, #1
 800a7e2:	4413      	add	r3, r2
 800a7e4:	e7e0      	b.n	800a7a8 <_printf_float+0x1a4>
 800a7e6:	6823      	ldr	r3, [r4, #0]
 800a7e8:	055a      	lsls	r2, r3, #21
 800a7ea:	d407      	bmi.n	800a7fc <_printf_float+0x1f8>
 800a7ec:	6923      	ldr	r3, [r4, #16]
 800a7ee:	4642      	mov	r2, r8
 800a7f0:	4631      	mov	r1, r6
 800a7f2:	4628      	mov	r0, r5
 800a7f4:	47b8      	blx	r7
 800a7f6:	3001      	adds	r0, #1
 800a7f8:	d12c      	bne.n	800a854 <_printf_float+0x250>
 800a7fa:	e764      	b.n	800a6c6 <_printf_float+0xc2>
 800a7fc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a800:	f240 80e0 	bls.w	800a9c4 <_printf_float+0x3c0>
 800a804:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a808:	2200      	movs	r2, #0
 800a80a:	2300      	movs	r3, #0
 800a80c:	f7f6 f95c 	bl	8000ac8 <__aeabi_dcmpeq>
 800a810:	2800      	cmp	r0, #0
 800a812:	d034      	beq.n	800a87e <_printf_float+0x27a>
 800a814:	4a37      	ldr	r2, [pc, #220]	; (800a8f4 <_printf_float+0x2f0>)
 800a816:	2301      	movs	r3, #1
 800a818:	4631      	mov	r1, r6
 800a81a:	4628      	mov	r0, r5
 800a81c:	47b8      	blx	r7
 800a81e:	3001      	adds	r0, #1
 800a820:	f43f af51 	beq.w	800a6c6 <_printf_float+0xc2>
 800a824:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a828:	429a      	cmp	r2, r3
 800a82a:	db02      	blt.n	800a832 <_printf_float+0x22e>
 800a82c:	6823      	ldr	r3, [r4, #0]
 800a82e:	07d8      	lsls	r0, r3, #31
 800a830:	d510      	bpl.n	800a854 <_printf_float+0x250>
 800a832:	ee18 3a10 	vmov	r3, s16
 800a836:	4652      	mov	r2, sl
 800a838:	4631      	mov	r1, r6
 800a83a:	4628      	mov	r0, r5
 800a83c:	47b8      	blx	r7
 800a83e:	3001      	adds	r0, #1
 800a840:	f43f af41 	beq.w	800a6c6 <_printf_float+0xc2>
 800a844:	f04f 0800 	mov.w	r8, #0
 800a848:	f104 091a 	add.w	r9, r4, #26
 800a84c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a84e:	3b01      	subs	r3, #1
 800a850:	4543      	cmp	r3, r8
 800a852:	dc09      	bgt.n	800a868 <_printf_float+0x264>
 800a854:	6823      	ldr	r3, [r4, #0]
 800a856:	079b      	lsls	r3, r3, #30
 800a858:	f100 8105 	bmi.w	800aa66 <_printf_float+0x462>
 800a85c:	68e0      	ldr	r0, [r4, #12]
 800a85e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a860:	4298      	cmp	r0, r3
 800a862:	bfb8      	it	lt
 800a864:	4618      	movlt	r0, r3
 800a866:	e730      	b.n	800a6ca <_printf_float+0xc6>
 800a868:	2301      	movs	r3, #1
 800a86a:	464a      	mov	r2, r9
 800a86c:	4631      	mov	r1, r6
 800a86e:	4628      	mov	r0, r5
 800a870:	47b8      	blx	r7
 800a872:	3001      	adds	r0, #1
 800a874:	f43f af27 	beq.w	800a6c6 <_printf_float+0xc2>
 800a878:	f108 0801 	add.w	r8, r8, #1
 800a87c:	e7e6      	b.n	800a84c <_printf_float+0x248>
 800a87e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a880:	2b00      	cmp	r3, #0
 800a882:	dc39      	bgt.n	800a8f8 <_printf_float+0x2f4>
 800a884:	4a1b      	ldr	r2, [pc, #108]	; (800a8f4 <_printf_float+0x2f0>)
 800a886:	2301      	movs	r3, #1
 800a888:	4631      	mov	r1, r6
 800a88a:	4628      	mov	r0, r5
 800a88c:	47b8      	blx	r7
 800a88e:	3001      	adds	r0, #1
 800a890:	f43f af19 	beq.w	800a6c6 <_printf_float+0xc2>
 800a894:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a898:	4313      	orrs	r3, r2
 800a89a:	d102      	bne.n	800a8a2 <_printf_float+0x29e>
 800a89c:	6823      	ldr	r3, [r4, #0]
 800a89e:	07d9      	lsls	r1, r3, #31
 800a8a0:	d5d8      	bpl.n	800a854 <_printf_float+0x250>
 800a8a2:	ee18 3a10 	vmov	r3, s16
 800a8a6:	4652      	mov	r2, sl
 800a8a8:	4631      	mov	r1, r6
 800a8aa:	4628      	mov	r0, r5
 800a8ac:	47b8      	blx	r7
 800a8ae:	3001      	adds	r0, #1
 800a8b0:	f43f af09 	beq.w	800a6c6 <_printf_float+0xc2>
 800a8b4:	f04f 0900 	mov.w	r9, #0
 800a8b8:	f104 0a1a 	add.w	sl, r4, #26
 800a8bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8be:	425b      	negs	r3, r3
 800a8c0:	454b      	cmp	r3, r9
 800a8c2:	dc01      	bgt.n	800a8c8 <_printf_float+0x2c4>
 800a8c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8c6:	e792      	b.n	800a7ee <_printf_float+0x1ea>
 800a8c8:	2301      	movs	r3, #1
 800a8ca:	4652      	mov	r2, sl
 800a8cc:	4631      	mov	r1, r6
 800a8ce:	4628      	mov	r0, r5
 800a8d0:	47b8      	blx	r7
 800a8d2:	3001      	adds	r0, #1
 800a8d4:	f43f aef7 	beq.w	800a6c6 <_printf_float+0xc2>
 800a8d8:	f109 0901 	add.w	r9, r9, #1
 800a8dc:	e7ee      	b.n	800a8bc <_printf_float+0x2b8>
 800a8de:	bf00      	nop
 800a8e0:	7fefffff 	.word	0x7fefffff
 800a8e4:	0800e2cc 	.word	0x0800e2cc
 800a8e8:	0800e2d0 	.word	0x0800e2d0
 800a8ec:	0800e2d8 	.word	0x0800e2d8
 800a8f0:	0800e2d4 	.word	0x0800e2d4
 800a8f4:	0800e2dc 	.word	0x0800e2dc
 800a8f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a8fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a8fc:	429a      	cmp	r2, r3
 800a8fe:	bfa8      	it	ge
 800a900:	461a      	movge	r2, r3
 800a902:	2a00      	cmp	r2, #0
 800a904:	4691      	mov	r9, r2
 800a906:	dc37      	bgt.n	800a978 <_printf_float+0x374>
 800a908:	f04f 0b00 	mov.w	fp, #0
 800a90c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a910:	f104 021a 	add.w	r2, r4, #26
 800a914:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a916:	9305      	str	r3, [sp, #20]
 800a918:	eba3 0309 	sub.w	r3, r3, r9
 800a91c:	455b      	cmp	r3, fp
 800a91e:	dc33      	bgt.n	800a988 <_printf_float+0x384>
 800a920:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a924:	429a      	cmp	r2, r3
 800a926:	db3b      	blt.n	800a9a0 <_printf_float+0x39c>
 800a928:	6823      	ldr	r3, [r4, #0]
 800a92a:	07da      	lsls	r2, r3, #31
 800a92c:	d438      	bmi.n	800a9a0 <_printf_float+0x39c>
 800a92e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a930:	9b05      	ldr	r3, [sp, #20]
 800a932:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a934:	1ad3      	subs	r3, r2, r3
 800a936:	eba2 0901 	sub.w	r9, r2, r1
 800a93a:	4599      	cmp	r9, r3
 800a93c:	bfa8      	it	ge
 800a93e:	4699      	movge	r9, r3
 800a940:	f1b9 0f00 	cmp.w	r9, #0
 800a944:	dc35      	bgt.n	800a9b2 <_printf_float+0x3ae>
 800a946:	f04f 0800 	mov.w	r8, #0
 800a94a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a94e:	f104 0a1a 	add.w	sl, r4, #26
 800a952:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a956:	1a9b      	subs	r3, r3, r2
 800a958:	eba3 0309 	sub.w	r3, r3, r9
 800a95c:	4543      	cmp	r3, r8
 800a95e:	f77f af79 	ble.w	800a854 <_printf_float+0x250>
 800a962:	2301      	movs	r3, #1
 800a964:	4652      	mov	r2, sl
 800a966:	4631      	mov	r1, r6
 800a968:	4628      	mov	r0, r5
 800a96a:	47b8      	blx	r7
 800a96c:	3001      	adds	r0, #1
 800a96e:	f43f aeaa 	beq.w	800a6c6 <_printf_float+0xc2>
 800a972:	f108 0801 	add.w	r8, r8, #1
 800a976:	e7ec      	b.n	800a952 <_printf_float+0x34e>
 800a978:	4613      	mov	r3, r2
 800a97a:	4631      	mov	r1, r6
 800a97c:	4642      	mov	r2, r8
 800a97e:	4628      	mov	r0, r5
 800a980:	47b8      	blx	r7
 800a982:	3001      	adds	r0, #1
 800a984:	d1c0      	bne.n	800a908 <_printf_float+0x304>
 800a986:	e69e      	b.n	800a6c6 <_printf_float+0xc2>
 800a988:	2301      	movs	r3, #1
 800a98a:	4631      	mov	r1, r6
 800a98c:	4628      	mov	r0, r5
 800a98e:	9205      	str	r2, [sp, #20]
 800a990:	47b8      	blx	r7
 800a992:	3001      	adds	r0, #1
 800a994:	f43f ae97 	beq.w	800a6c6 <_printf_float+0xc2>
 800a998:	9a05      	ldr	r2, [sp, #20]
 800a99a:	f10b 0b01 	add.w	fp, fp, #1
 800a99e:	e7b9      	b.n	800a914 <_printf_float+0x310>
 800a9a0:	ee18 3a10 	vmov	r3, s16
 800a9a4:	4652      	mov	r2, sl
 800a9a6:	4631      	mov	r1, r6
 800a9a8:	4628      	mov	r0, r5
 800a9aa:	47b8      	blx	r7
 800a9ac:	3001      	adds	r0, #1
 800a9ae:	d1be      	bne.n	800a92e <_printf_float+0x32a>
 800a9b0:	e689      	b.n	800a6c6 <_printf_float+0xc2>
 800a9b2:	9a05      	ldr	r2, [sp, #20]
 800a9b4:	464b      	mov	r3, r9
 800a9b6:	4442      	add	r2, r8
 800a9b8:	4631      	mov	r1, r6
 800a9ba:	4628      	mov	r0, r5
 800a9bc:	47b8      	blx	r7
 800a9be:	3001      	adds	r0, #1
 800a9c0:	d1c1      	bne.n	800a946 <_printf_float+0x342>
 800a9c2:	e680      	b.n	800a6c6 <_printf_float+0xc2>
 800a9c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a9c6:	2a01      	cmp	r2, #1
 800a9c8:	dc01      	bgt.n	800a9ce <_printf_float+0x3ca>
 800a9ca:	07db      	lsls	r3, r3, #31
 800a9cc:	d538      	bpl.n	800aa40 <_printf_float+0x43c>
 800a9ce:	2301      	movs	r3, #1
 800a9d0:	4642      	mov	r2, r8
 800a9d2:	4631      	mov	r1, r6
 800a9d4:	4628      	mov	r0, r5
 800a9d6:	47b8      	blx	r7
 800a9d8:	3001      	adds	r0, #1
 800a9da:	f43f ae74 	beq.w	800a6c6 <_printf_float+0xc2>
 800a9de:	ee18 3a10 	vmov	r3, s16
 800a9e2:	4652      	mov	r2, sl
 800a9e4:	4631      	mov	r1, r6
 800a9e6:	4628      	mov	r0, r5
 800a9e8:	47b8      	blx	r7
 800a9ea:	3001      	adds	r0, #1
 800a9ec:	f43f ae6b 	beq.w	800a6c6 <_printf_float+0xc2>
 800a9f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	f7f6 f866 	bl	8000ac8 <__aeabi_dcmpeq>
 800a9fc:	b9d8      	cbnz	r0, 800aa36 <_printf_float+0x432>
 800a9fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa00:	f108 0201 	add.w	r2, r8, #1
 800aa04:	3b01      	subs	r3, #1
 800aa06:	4631      	mov	r1, r6
 800aa08:	4628      	mov	r0, r5
 800aa0a:	47b8      	blx	r7
 800aa0c:	3001      	adds	r0, #1
 800aa0e:	d10e      	bne.n	800aa2e <_printf_float+0x42a>
 800aa10:	e659      	b.n	800a6c6 <_printf_float+0xc2>
 800aa12:	2301      	movs	r3, #1
 800aa14:	4652      	mov	r2, sl
 800aa16:	4631      	mov	r1, r6
 800aa18:	4628      	mov	r0, r5
 800aa1a:	47b8      	blx	r7
 800aa1c:	3001      	adds	r0, #1
 800aa1e:	f43f ae52 	beq.w	800a6c6 <_printf_float+0xc2>
 800aa22:	f108 0801 	add.w	r8, r8, #1
 800aa26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa28:	3b01      	subs	r3, #1
 800aa2a:	4543      	cmp	r3, r8
 800aa2c:	dcf1      	bgt.n	800aa12 <_printf_float+0x40e>
 800aa2e:	464b      	mov	r3, r9
 800aa30:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800aa34:	e6dc      	b.n	800a7f0 <_printf_float+0x1ec>
 800aa36:	f04f 0800 	mov.w	r8, #0
 800aa3a:	f104 0a1a 	add.w	sl, r4, #26
 800aa3e:	e7f2      	b.n	800aa26 <_printf_float+0x422>
 800aa40:	2301      	movs	r3, #1
 800aa42:	4642      	mov	r2, r8
 800aa44:	e7df      	b.n	800aa06 <_printf_float+0x402>
 800aa46:	2301      	movs	r3, #1
 800aa48:	464a      	mov	r2, r9
 800aa4a:	4631      	mov	r1, r6
 800aa4c:	4628      	mov	r0, r5
 800aa4e:	47b8      	blx	r7
 800aa50:	3001      	adds	r0, #1
 800aa52:	f43f ae38 	beq.w	800a6c6 <_printf_float+0xc2>
 800aa56:	f108 0801 	add.w	r8, r8, #1
 800aa5a:	68e3      	ldr	r3, [r4, #12]
 800aa5c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aa5e:	1a5b      	subs	r3, r3, r1
 800aa60:	4543      	cmp	r3, r8
 800aa62:	dcf0      	bgt.n	800aa46 <_printf_float+0x442>
 800aa64:	e6fa      	b.n	800a85c <_printf_float+0x258>
 800aa66:	f04f 0800 	mov.w	r8, #0
 800aa6a:	f104 0919 	add.w	r9, r4, #25
 800aa6e:	e7f4      	b.n	800aa5a <_printf_float+0x456>

0800aa70 <_printf_common>:
 800aa70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa74:	4616      	mov	r6, r2
 800aa76:	4699      	mov	r9, r3
 800aa78:	688a      	ldr	r2, [r1, #8]
 800aa7a:	690b      	ldr	r3, [r1, #16]
 800aa7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800aa80:	4293      	cmp	r3, r2
 800aa82:	bfb8      	it	lt
 800aa84:	4613      	movlt	r3, r2
 800aa86:	6033      	str	r3, [r6, #0]
 800aa88:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aa8c:	4607      	mov	r7, r0
 800aa8e:	460c      	mov	r4, r1
 800aa90:	b10a      	cbz	r2, 800aa96 <_printf_common+0x26>
 800aa92:	3301      	adds	r3, #1
 800aa94:	6033      	str	r3, [r6, #0]
 800aa96:	6823      	ldr	r3, [r4, #0]
 800aa98:	0699      	lsls	r1, r3, #26
 800aa9a:	bf42      	ittt	mi
 800aa9c:	6833      	ldrmi	r3, [r6, #0]
 800aa9e:	3302      	addmi	r3, #2
 800aaa0:	6033      	strmi	r3, [r6, #0]
 800aaa2:	6825      	ldr	r5, [r4, #0]
 800aaa4:	f015 0506 	ands.w	r5, r5, #6
 800aaa8:	d106      	bne.n	800aab8 <_printf_common+0x48>
 800aaaa:	f104 0a19 	add.w	sl, r4, #25
 800aaae:	68e3      	ldr	r3, [r4, #12]
 800aab0:	6832      	ldr	r2, [r6, #0]
 800aab2:	1a9b      	subs	r3, r3, r2
 800aab4:	42ab      	cmp	r3, r5
 800aab6:	dc26      	bgt.n	800ab06 <_printf_common+0x96>
 800aab8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800aabc:	1e13      	subs	r3, r2, #0
 800aabe:	6822      	ldr	r2, [r4, #0]
 800aac0:	bf18      	it	ne
 800aac2:	2301      	movne	r3, #1
 800aac4:	0692      	lsls	r2, r2, #26
 800aac6:	d42b      	bmi.n	800ab20 <_printf_common+0xb0>
 800aac8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aacc:	4649      	mov	r1, r9
 800aace:	4638      	mov	r0, r7
 800aad0:	47c0      	blx	r8
 800aad2:	3001      	adds	r0, #1
 800aad4:	d01e      	beq.n	800ab14 <_printf_common+0xa4>
 800aad6:	6823      	ldr	r3, [r4, #0]
 800aad8:	68e5      	ldr	r5, [r4, #12]
 800aada:	6832      	ldr	r2, [r6, #0]
 800aadc:	f003 0306 	and.w	r3, r3, #6
 800aae0:	2b04      	cmp	r3, #4
 800aae2:	bf08      	it	eq
 800aae4:	1aad      	subeq	r5, r5, r2
 800aae6:	68a3      	ldr	r3, [r4, #8]
 800aae8:	6922      	ldr	r2, [r4, #16]
 800aaea:	bf0c      	ite	eq
 800aaec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aaf0:	2500      	movne	r5, #0
 800aaf2:	4293      	cmp	r3, r2
 800aaf4:	bfc4      	itt	gt
 800aaf6:	1a9b      	subgt	r3, r3, r2
 800aaf8:	18ed      	addgt	r5, r5, r3
 800aafa:	2600      	movs	r6, #0
 800aafc:	341a      	adds	r4, #26
 800aafe:	42b5      	cmp	r5, r6
 800ab00:	d11a      	bne.n	800ab38 <_printf_common+0xc8>
 800ab02:	2000      	movs	r0, #0
 800ab04:	e008      	b.n	800ab18 <_printf_common+0xa8>
 800ab06:	2301      	movs	r3, #1
 800ab08:	4652      	mov	r2, sl
 800ab0a:	4649      	mov	r1, r9
 800ab0c:	4638      	mov	r0, r7
 800ab0e:	47c0      	blx	r8
 800ab10:	3001      	adds	r0, #1
 800ab12:	d103      	bne.n	800ab1c <_printf_common+0xac>
 800ab14:	f04f 30ff 	mov.w	r0, #4294967295
 800ab18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab1c:	3501      	adds	r5, #1
 800ab1e:	e7c6      	b.n	800aaae <_printf_common+0x3e>
 800ab20:	18e1      	adds	r1, r4, r3
 800ab22:	1c5a      	adds	r2, r3, #1
 800ab24:	2030      	movs	r0, #48	; 0x30
 800ab26:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ab2a:	4422      	add	r2, r4
 800ab2c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ab30:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ab34:	3302      	adds	r3, #2
 800ab36:	e7c7      	b.n	800aac8 <_printf_common+0x58>
 800ab38:	2301      	movs	r3, #1
 800ab3a:	4622      	mov	r2, r4
 800ab3c:	4649      	mov	r1, r9
 800ab3e:	4638      	mov	r0, r7
 800ab40:	47c0      	blx	r8
 800ab42:	3001      	adds	r0, #1
 800ab44:	d0e6      	beq.n	800ab14 <_printf_common+0xa4>
 800ab46:	3601      	adds	r6, #1
 800ab48:	e7d9      	b.n	800aafe <_printf_common+0x8e>
	...

0800ab4c <_printf_i>:
 800ab4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ab50:	460c      	mov	r4, r1
 800ab52:	4691      	mov	r9, r2
 800ab54:	7e27      	ldrb	r7, [r4, #24]
 800ab56:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ab58:	2f78      	cmp	r7, #120	; 0x78
 800ab5a:	4680      	mov	r8, r0
 800ab5c:	469a      	mov	sl, r3
 800ab5e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ab62:	d807      	bhi.n	800ab74 <_printf_i+0x28>
 800ab64:	2f62      	cmp	r7, #98	; 0x62
 800ab66:	d80a      	bhi.n	800ab7e <_printf_i+0x32>
 800ab68:	2f00      	cmp	r7, #0
 800ab6a:	f000 80d8 	beq.w	800ad1e <_printf_i+0x1d2>
 800ab6e:	2f58      	cmp	r7, #88	; 0x58
 800ab70:	f000 80a3 	beq.w	800acba <_printf_i+0x16e>
 800ab74:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ab78:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ab7c:	e03a      	b.n	800abf4 <_printf_i+0xa8>
 800ab7e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ab82:	2b15      	cmp	r3, #21
 800ab84:	d8f6      	bhi.n	800ab74 <_printf_i+0x28>
 800ab86:	a001      	add	r0, pc, #4	; (adr r0, 800ab8c <_printf_i+0x40>)
 800ab88:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800ab8c:	0800abe5 	.word	0x0800abe5
 800ab90:	0800abf9 	.word	0x0800abf9
 800ab94:	0800ab75 	.word	0x0800ab75
 800ab98:	0800ab75 	.word	0x0800ab75
 800ab9c:	0800ab75 	.word	0x0800ab75
 800aba0:	0800ab75 	.word	0x0800ab75
 800aba4:	0800abf9 	.word	0x0800abf9
 800aba8:	0800ab75 	.word	0x0800ab75
 800abac:	0800ab75 	.word	0x0800ab75
 800abb0:	0800ab75 	.word	0x0800ab75
 800abb4:	0800ab75 	.word	0x0800ab75
 800abb8:	0800ad05 	.word	0x0800ad05
 800abbc:	0800ac29 	.word	0x0800ac29
 800abc0:	0800ace7 	.word	0x0800ace7
 800abc4:	0800ab75 	.word	0x0800ab75
 800abc8:	0800ab75 	.word	0x0800ab75
 800abcc:	0800ad27 	.word	0x0800ad27
 800abd0:	0800ab75 	.word	0x0800ab75
 800abd4:	0800ac29 	.word	0x0800ac29
 800abd8:	0800ab75 	.word	0x0800ab75
 800abdc:	0800ab75 	.word	0x0800ab75
 800abe0:	0800acef 	.word	0x0800acef
 800abe4:	680b      	ldr	r3, [r1, #0]
 800abe6:	1d1a      	adds	r2, r3, #4
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	600a      	str	r2, [r1, #0]
 800abec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800abf0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800abf4:	2301      	movs	r3, #1
 800abf6:	e0a3      	b.n	800ad40 <_printf_i+0x1f4>
 800abf8:	6825      	ldr	r5, [r4, #0]
 800abfa:	6808      	ldr	r0, [r1, #0]
 800abfc:	062e      	lsls	r6, r5, #24
 800abfe:	f100 0304 	add.w	r3, r0, #4
 800ac02:	d50a      	bpl.n	800ac1a <_printf_i+0xce>
 800ac04:	6805      	ldr	r5, [r0, #0]
 800ac06:	600b      	str	r3, [r1, #0]
 800ac08:	2d00      	cmp	r5, #0
 800ac0a:	da03      	bge.n	800ac14 <_printf_i+0xc8>
 800ac0c:	232d      	movs	r3, #45	; 0x2d
 800ac0e:	426d      	negs	r5, r5
 800ac10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac14:	485e      	ldr	r0, [pc, #376]	; (800ad90 <_printf_i+0x244>)
 800ac16:	230a      	movs	r3, #10
 800ac18:	e019      	b.n	800ac4e <_printf_i+0x102>
 800ac1a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ac1e:	6805      	ldr	r5, [r0, #0]
 800ac20:	600b      	str	r3, [r1, #0]
 800ac22:	bf18      	it	ne
 800ac24:	b22d      	sxthne	r5, r5
 800ac26:	e7ef      	b.n	800ac08 <_printf_i+0xbc>
 800ac28:	680b      	ldr	r3, [r1, #0]
 800ac2a:	6825      	ldr	r5, [r4, #0]
 800ac2c:	1d18      	adds	r0, r3, #4
 800ac2e:	6008      	str	r0, [r1, #0]
 800ac30:	0628      	lsls	r0, r5, #24
 800ac32:	d501      	bpl.n	800ac38 <_printf_i+0xec>
 800ac34:	681d      	ldr	r5, [r3, #0]
 800ac36:	e002      	b.n	800ac3e <_printf_i+0xf2>
 800ac38:	0669      	lsls	r1, r5, #25
 800ac3a:	d5fb      	bpl.n	800ac34 <_printf_i+0xe8>
 800ac3c:	881d      	ldrh	r5, [r3, #0]
 800ac3e:	4854      	ldr	r0, [pc, #336]	; (800ad90 <_printf_i+0x244>)
 800ac40:	2f6f      	cmp	r7, #111	; 0x6f
 800ac42:	bf0c      	ite	eq
 800ac44:	2308      	moveq	r3, #8
 800ac46:	230a      	movne	r3, #10
 800ac48:	2100      	movs	r1, #0
 800ac4a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ac4e:	6866      	ldr	r6, [r4, #4]
 800ac50:	60a6      	str	r6, [r4, #8]
 800ac52:	2e00      	cmp	r6, #0
 800ac54:	bfa2      	ittt	ge
 800ac56:	6821      	ldrge	r1, [r4, #0]
 800ac58:	f021 0104 	bicge.w	r1, r1, #4
 800ac5c:	6021      	strge	r1, [r4, #0]
 800ac5e:	b90d      	cbnz	r5, 800ac64 <_printf_i+0x118>
 800ac60:	2e00      	cmp	r6, #0
 800ac62:	d04d      	beq.n	800ad00 <_printf_i+0x1b4>
 800ac64:	4616      	mov	r6, r2
 800ac66:	fbb5 f1f3 	udiv	r1, r5, r3
 800ac6a:	fb03 5711 	mls	r7, r3, r1, r5
 800ac6e:	5dc7      	ldrb	r7, [r0, r7]
 800ac70:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ac74:	462f      	mov	r7, r5
 800ac76:	42bb      	cmp	r3, r7
 800ac78:	460d      	mov	r5, r1
 800ac7a:	d9f4      	bls.n	800ac66 <_printf_i+0x11a>
 800ac7c:	2b08      	cmp	r3, #8
 800ac7e:	d10b      	bne.n	800ac98 <_printf_i+0x14c>
 800ac80:	6823      	ldr	r3, [r4, #0]
 800ac82:	07df      	lsls	r7, r3, #31
 800ac84:	d508      	bpl.n	800ac98 <_printf_i+0x14c>
 800ac86:	6923      	ldr	r3, [r4, #16]
 800ac88:	6861      	ldr	r1, [r4, #4]
 800ac8a:	4299      	cmp	r1, r3
 800ac8c:	bfde      	ittt	le
 800ac8e:	2330      	movle	r3, #48	; 0x30
 800ac90:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ac94:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ac98:	1b92      	subs	r2, r2, r6
 800ac9a:	6122      	str	r2, [r4, #16]
 800ac9c:	f8cd a000 	str.w	sl, [sp]
 800aca0:	464b      	mov	r3, r9
 800aca2:	aa03      	add	r2, sp, #12
 800aca4:	4621      	mov	r1, r4
 800aca6:	4640      	mov	r0, r8
 800aca8:	f7ff fee2 	bl	800aa70 <_printf_common>
 800acac:	3001      	adds	r0, #1
 800acae:	d14c      	bne.n	800ad4a <_printf_i+0x1fe>
 800acb0:	f04f 30ff 	mov.w	r0, #4294967295
 800acb4:	b004      	add	sp, #16
 800acb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acba:	4835      	ldr	r0, [pc, #212]	; (800ad90 <_printf_i+0x244>)
 800acbc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800acc0:	6823      	ldr	r3, [r4, #0]
 800acc2:	680e      	ldr	r6, [r1, #0]
 800acc4:	061f      	lsls	r7, r3, #24
 800acc6:	f856 5b04 	ldr.w	r5, [r6], #4
 800acca:	600e      	str	r6, [r1, #0]
 800accc:	d514      	bpl.n	800acf8 <_printf_i+0x1ac>
 800acce:	07d9      	lsls	r1, r3, #31
 800acd0:	bf44      	itt	mi
 800acd2:	f043 0320 	orrmi.w	r3, r3, #32
 800acd6:	6023      	strmi	r3, [r4, #0]
 800acd8:	b91d      	cbnz	r5, 800ace2 <_printf_i+0x196>
 800acda:	6823      	ldr	r3, [r4, #0]
 800acdc:	f023 0320 	bic.w	r3, r3, #32
 800ace0:	6023      	str	r3, [r4, #0]
 800ace2:	2310      	movs	r3, #16
 800ace4:	e7b0      	b.n	800ac48 <_printf_i+0xfc>
 800ace6:	6823      	ldr	r3, [r4, #0]
 800ace8:	f043 0320 	orr.w	r3, r3, #32
 800acec:	6023      	str	r3, [r4, #0]
 800acee:	2378      	movs	r3, #120	; 0x78
 800acf0:	4828      	ldr	r0, [pc, #160]	; (800ad94 <_printf_i+0x248>)
 800acf2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800acf6:	e7e3      	b.n	800acc0 <_printf_i+0x174>
 800acf8:	065e      	lsls	r6, r3, #25
 800acfa:	bf48      	it	mi
 800acfc:	b2ad      	uxthmi	r5, r5
 800acfe:	e7e6      	b.n	800acce <_printf_i+0x182>
 800ad00:	4616      	mov	r6, r2
 800ad02:	e7bb      	b.n	800ac7c <_printf_i+0x130>
 800ad04:	680b      	ldr	r3, [r1, #0]
 800ad06:	6826      	ldr	r6, [r4, #0]
 800ad08:	6960      	ldr	r0, [r4, #20]
 800ad0a:	1d1d      	adds	r5, r3, #4
 800ad0c:	600d      	str	r5, [r1, #0]
 800ad0e:	0635      	lsls	r5, r6, #24
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	d501      	bpl.n	800ad18 <_printf_i+0x1cc>
 800ad14:	6018      	str	r0, [r3, #0]
 800ad16:	e002      	b.n	800ad1e <_printf_i+0x1d2>
 800ad18:	0671      	lsls	r1, r6, #25
 800ad1a:	d5fb      	bpl.n	800ad14 <_printf_i+0x1c8>
 800ad1c:	8018      	strh	r0, [r3, #0]
 800ad1e:	2300      	movs	r3, #0
 800ad20:	6123      	str	r3, [r4, #16]
 800ad22:	4616      	mov	r6, r2
 800ad24:	e7ba      	b.n	800ac9c <_printf_i+0x150>
 800ad26:	680b      	ldr	r3, [r1, #0]
 800ad28:	1d1a      	adds	r2, r3, #4
 800ad2a:	600a      	str	r2, [r1, #0]
 800ad2c:	681e      	ldr	r6, [r3, #0]
 800ad2e:	6862      	ldr	r2, [r4, #4]
 800ad30:	2100      	movs	r1, #0
 800ad32:	4630      	mov	r0, r6
 800ad34:	f7f5 fa54 	bl	80001e0 <memchr>
 800ad38:	b108      	cbz	r0, 800ad3e <_printf_i+0x1f2>
 800ad3a:	1b80      	subs	r0, r0, r6
 800ad3c:	6060      	str	r0, [r4, #4]
 800ad3e:	6863      	ldr	r3, [r4, #4]
 800ad40:	6123      	str	r3, [r4, #16]
 800ad42:	2300      	movs	r3, #0
 800ad44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad48:	e7a8      	b.n	800ac9c <_printf_i+0x150>
 800ad4a:	6923      	ldr	r3, [r4, #16]
 800ad4c:	4632      	mov	r2, r6
 800ad4e:	4649      	mov	r1, r9
 800ad50:	4640      	mov	r0, r8
 800ad52:	47d0      	blx	sl
 800ad54:	3001      	adds	r0, #1
 800ad56:	d0ab      	beq.n	800acb0 <_printf_i+0x164>
 800ad58:	6823      	ldr	r3, [r4, #0]
 800ad5a:	079b      	lsls	r3, r3, #30
 800ad5c:	d413      	bmi.n	800ad86 <_printf_i+0x23a>
 800ad5e:	68e0      	ldr	r0, [r4, #12]
 800ad60:	9b03      	ldr	r3, [sp, #12]
 800ad62:	4298      	cmp	r0, r3
 800ad64:	bfb8      	it	lt
 800ad66:	4618      	movlt	r0, r3
 800ad68:	e7a4      	b.n	800acb4 <_printf_i+0x168>
 800ad6a:	2301      	movs	r3, #1
 800ad6c:	4632      	mov	r2, r6
 800ad6e:	4649      	mov	r1, r9
 800ad70:	4640      	mov	r0, r8
 800ad72:	47d0      	blx	sl
 800ad74:	3001      	adds	r0, #1
 800ad76:	d09b      	beq.n	800acb0 <_printf_i+0x164>
 800ad78:	3501      	adds	r5, #1
 800ad7a:	68e3      	ldr	r3, [r4, #12]
 800ad7c:	9903      	ldr	r1, [sp, #12]
 800ad7e:	1a5b      	subs	r3, r3, r1
 800ad80:	42ab      	cmp	r3, r5
 800ad82:	dcf2      	bgt.n	800ad6a <_printf_i+0x21e>
 800ad84:	e7eb      	b.n	800ad5e <_printf_i+0x212>
 800ad86:	2500      	movs	r5, #0
 800ad88:	f104 0619 	add.w	r6, r4, #25
 800ad8c:	e7f5      	b.n	800ad7a <_printf_i+0x22e>
 800ad8e:	bf00      	nop
 800ad90:	0800e2de 	.word	0x0800e2de
 800ad94:	0800e2ef 	.word	0x0800e2ef

0800ad98 <siprintf>:
 800ad98:	b40e      	push	{r1, r2, r3}
 800ad9a:	b500      	push	{lr}
 800ad9c:	b09c      	sub	sp, #112	; 0x70
 800ad9e:	ab1d      	add	r3, sp, #116	; 0x74
 800ada0:	9002      	str	r0, [sp, #8]
 800ada2:	9006      	str	r0, [sp, #24]
 800ada4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ada8:	4809      	ldr	r0, [pc, #36]	; (800add0 <siprintf+0x38>)
 800adaa:	9107      	str	r1, [sp, #28]
 800adac:	9104      	str	r1, [sp, #16]
 800adae:	4909      	ldr	r1, [pc, #36]	; (800add4 <siprintf+0x3c>)
 800adb0:	f853 2b04 	ldr.w	r2, [r3], #4
 800adb4:	9105      	str	r1, [sp, #20]
 800adb6:	6800      	ldr	r0, [r0, #0]
 800adb8:	9301      	str	r3, [sp, #4]
 800adba:	a902      	add	r1, sp, #8
 800adbc:	f001 fb32 	bl	800c424 <_svfiprintf_r>
 800adc0:	9b02      	ldr	r3, [sp, #8]
 800adc2:	2200      	movs	r2, #0
 800adc4:	701a      	strb	r2, [r3, #0]
 800adc6:	b01c      	add	sp, #112	; 0x70
 800adc8:	f85d eb04 	ldr.w	lr, [sp], #4
 800adcc:	b003      	add	sp, #12
 800adce:	4770      	bx	lr
 800add0:	2000017c 	.word	0x2000017c
 800add4:	ffff0208 	.word	0xffff0208

0800add8 <quorem>:
 800add8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800addc:	6903      	ldr	r3, [r0, #16]
 800adde:	690c      	ldr	r4, [r1, #16]
 800ade0:	42a3      	cmp	r3, r4
 800ade2:	4607      	mov	r7, r0
 800ade4:	f2c0 8081 	blt.w	800aeea <quorem+0x112>
 800ade8:	3c01      	subs	r4, #1
 800adea:	f101 0814 	add.w	r8, r1, #20
 800adee:	f100 0514 	add.w	r5, r0, #20
 800adf2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800adf6:	9301      	str	r3, [sp, #4]
 800adf8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800adfc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ae00:	3301      	adds	r3, #1
 800ae02:	429a      	cmp	r2, r3
 800ae04:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ae08:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ae0c:	fbb2 f6f3 	udiv	r6, r2, r3
 800ae10:	d331      	bcc.n	800ae76 <quorem+0x9e>
 800ae12:	f04f 0e00 	mov.w	lr, #0
 800ae16:	4640      	mov	r0, r8
 800ae18:	46ac      	mov	ip, r5
 800ae1a:	46f2      	mov	sl, lr
 800ae1c:	f850 2b04 	ldr.w	r2, [r0], #4
 800ae20:	b293      	uxth	r3, r2
 800ae22:	fb06 e303 	mla	r3, r6, r3, lr
 800ae26:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ae2a:	b29b      	uxth	r3, r3
 800ae2c:	ebaa 0303 	sub.w	r3, sl, r3
 800ae30:	0c12      	lsrs	r2, r2, #16
 800ae32:	f8dc a000 	ldr.w	sl, [ip]
 800ae36:	fb06 e202 	mla	r2, r6, r2, lr
 800ae3a:	fa13 f38a 	uxtah	r3, r3, sl
 800ae3e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ae42:	fa1f fa82 	uxth.w	sl, r2
 800ae46:	f8dc 2000 	ldr.w	r2, [ip]
 800ae4a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800ae4e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ae52:	b29b      	uxth	r3, r3
 800ae54:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ae58:	4581      	cmp	r9, r0
 800ae5a:	f84c 3b04 	str.w	r3, [ip], #4
 800ae5e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ae62:	d2db      	bcs.n	800ae1c <quorem+0x44>
 800ae64:	f855 300b 	ldr.w	r3, [r5, fp]
 800ae68:	b92b      	cbnz	r3, 800ae76 <quorem+0x9e>
 800ae6a:	9b01      	ldr	r3, [sp, #4]
 800ae6c:	3b04      	subs	r3, #4
 800ae6e:	429d      	cmp	r5, r3
 800ae70:	461a      	mov	r2, r3
 800ae72:	d32e      	bcc.n	800aed2 <quorem+0xfa>
 800ae74:	613c      	str	r4, [r7, #16]
 800ae76:	4638      	mov	r0, r7
 800ae78:	f001 f8be 	bl	800bff8 <__mcmp>
 800ae7c:	2800      	cmp	r0, #0
 800ae7e:	db24      	blt.n	800aeca <quorem+0xf2>
 800ae80:	3601      	adds	r6, #1
 800ae82:	4628      	mov	r0, r5
 800ae84:	f04f 0c00 	mov.w	ip, #0
 800ae88:	f858 2b04 	ldr.w	r2, [r8], #4
 800ae8c:	f8d0 e000 	ldr.w	lr, [r0]
 800ae90:	b293      	uxth	r3, r2
 800ae92:	ebac 0303 	sub.w	r3, ip, r3
 800ae96:	0c12      	lsrs	r2, r2, #16
 800ae98:	fa13 f38e 	uxtah	r3, r3, lr
 800ae9c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800aea0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800aea4:	b29b      	uxth	r3, r3
 800aea6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aeaa:	45c1      	cmp	r9, r8
 800aeac:	f840 3b04 	str.w	r3, [r0], #4
 800aeb0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800aeb4:	d2e8      	bcs.n	800ae88 <quorem+0xb0>
 800aeb6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aeba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aebe:	b922      	cbnz	r2, 800aeca <quorem+0xf2>
 800aec0:	3b04      	subs	r3, #4
 800aec2:	429d      	cmp	r5, r3
 800aec4:	461a      	mov	r2, r3
 800aec6:	d30a      	bcc.n	800aede <quorem+0x106>
 800aec8:	613c      	str	r4, [r7, #16]
 800aeca:	4630      	mov	r0, r6
 800aecc:	b003      	add	sp, #12
 800aece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aed2:	6812      	ldr	r2, [r2, #0]
 800aed4:	3b04      	subs	r3, #4
 800aed6:	2a00      	cmp	r2, #0
 800aed8:	d1cc      	bne.n	800ae74 <quorem+0x9c>
 800aeda:	3c01      	subs	r4, #1
 800aedc:	e7c7      	b.n	800ae6e <quorem+0x96>
 800aede:	6812      	ldr	r2, [r2, #0]
 800aee0:	3b04      	subs	r3, #4
 800aee2:	2a00      	cmp	r2, #0
 800aee4:	d1f0      	bne.n	800aec8 <quorem+0xf0>
 800aee6:	3c01      	subs	r4, #1
 800aee8:	e7eb      	b.n	800aec2 <quorem+0xea>
 800aeea:	2000      	movs	r0, #0
 800aeec:	e7ee      	b.n	800aecc <quorem+0xf4>
	...

0800aef0 <_dtoa_r>:
 800aef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aef4:	ed2d 8b02 	vpush	{d8}
 800aef8:	ec57 6b10 	vmov	r6, r7, d0
 800aefc:	b095      	sub	sp, #84	; 0x54
 800aefe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800af00:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800af04:	9105      	str	r1, [sp, #20]
 800af06:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800af0a:	4604      	mov	r4, r0
 800af0c:	9209      	str	r2, [sp, #36]	; 0x24
 800af0e:	930f      	str	r3, [sp, #60]	; 0x3c
 800af10:	b975      	cbnz	r5, 800af30 <_dtoa_r+0x40>
 800af12:	2010      	movs	r0, #16
 800af14:	f000 fddc 	bl	800bad0 <malloc>
 800af18:	4602      	mov	r2, r0
 800af1a:	6260      	str	r0, [r4, #36]	; 0x24
 800af1c:	b920      	cbnz	r0, 800af28 <_dtoa_r+0x38>
 800af1e:	4bb2      	ldr	r3, [pc, #712]	; (800b1e8 <_dtoa_r+0x2f8>)
 800af20:	21ea      	movs	r1, #234	; 0xea
 800af22:	48b2      	ldr	r0, [pc, #712]	; (800b1ec <_dtoa_r+0x2fc>)
 800af24:	f001 fb8e 	bl	800c644 <__assert_func>
 800af28:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800af2c:	6005      	str	r5, [r0, #0]
 800af2e:	60c5      	str	r5, [r0, #12]
 800af30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af32:	6819      	ldr	r1, [r3, #0]
 800af34:	b151      	cbz	r1, 800af4c <_dtoa_r+0x5c>
 800af36:	685a      	ldr	r2, [r3, #4]
 800af38:	604a      	str	r2, [r1, #4]
 800af3a:	2301      	movs	r3, #1
 800af3c:	4093      	lsls	r3, r2
 800af3e:	608b      	str	r3, [r1, #8]
 800af40:	4620      	mov	r0, r4
 800af42:	f000 fe1b 	bl	800bb7c <_Bfree>
 800af46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af48:	2200      	movs	r2, #0
 800af4a:	601a      	str	r2, [r3, #0]
 800af4c:	1e3b      	subs	r3, r7, #0
 800af4e:	bfb9      	ittee	lt
 800af50:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800af54:	9303      	strlt	r3, [sp, #12]
 800af56:	2300      	movge	r3, #0
 800af58:	f8c8 3000 	strge.w	r3, [r8]
 800af5c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800af60:	4ba3      	ldr	r3, [pc, #652]	; (800b1f0 <_dtoa_r+0x300>)
 800af62:	bfbc      	itt	lt
 800af64:	2201      	movlt	r2, #1
 800af66:	f8c8 2000 	strlt.w	r2, [r8]
 800af6a:	ea33 0309 	bics.w	r3, r3, r9
 800af6e:	d11b      	bne.n	800afa8 <_dtoa_r+0xb8>
 800af70:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800af72:	f242 730f 	movw	r3, #9999	; 0x270f
 800af76:	6013      	str	r3, [r2, #0]
 800af78:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800af7c:	4333      	orrs	r3, r6
 800af7e:	f000 857a 	beq.w	800ba76 <_dtoa_r+0xb86>
 800af82:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800af84:	b963      	cbnz	r3, 800afa0 <_dtoa_r+0xb0>
 800af86:	4b9b      	ldr	r3, [pc, #620]	; (800b1f4 <_dtoa_r+0x304>)
 800af88:	e024      	b.n	800afd4 <_dtoa_r+0xe4>
 800af8a:	4b9b      	ldr	r3, [pc, #620]	; (800b1f8 <_dtoa_r+0x308>)
 800af8c:	9300      	str	r3, [sp, #0]
 800af8e:	3308      	adds	r3, #8
 800af90:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800af92:	6013      	str	r3, [r2, #0]
 800af94:	9800      	ldr	r0, [sp, #0]
 800af96:	b015      	add	sp, #84	; 0x54
 800af98:	ecbd 8b02 	vpop	{d8}
 800af9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afa0:	4b94      	ldr	r3, [pc, #592]	; (800b1f4 <_dtoa_r+0x304>)
 800afa2:	9300      	str	r3, [sp, #0]
 800afa4:	3303      	adds	r3, #3
 800afa6:	e7f3      	b.n	800af90 <_dtoa_r+0xa0>
 800afa8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800afac:	2200      	movs	r2, #0
 800afae:	ec51 0b17 	vmov	r0, r1, d7
 800afb2:	2300      	movs	r3, #0
 800afb4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800afb8:	f7f5 fd86 	bl	8000ac8 <__aeabi_dcmpeq>
 800afbc:	4680      	mov	r8, r0
 800afbe:	b158      	cbz	r0, 800afd8 <_dtoa_r+0xe8>
 800afc0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800afc2:	2301      	movs	r3, #1
 800afc4:	6013      	str	r3, [r2, #0]
 800afc6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800afc8:	2b00      	cmp	r3, #0
 800afca:	f000 8551 	beq.w	800ba70 <_dtoa_r+0xb80>
 800afce:	488b      	ldr	r0, [pc, #556]	; (800b1fc <_dtoa_r+0x30c>)
 800afd0:	6018      	str	r0, [r3, #0]
 800afd2:	1e43      	subs	r3, r0, #1
 800afd4:	9300      	str	r3, [sp, #0]
 800afd6:	e7dd      	b.n	800af94 <_dtoa_r+0xa4>
 800afd8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800afdc:	aa12      	add	r2, sp, #72	; 0x48
 800afde:	a913      	add	r1, sp, #76	; 0x4c
 800afe0:	4620      	mov	r0, r4
 800afe2:	f001 f8ad 	bl	800c140 <__d2b>
 800afe6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800afea:	4683      	mov	fp, r0
 800afec:	2d00      	cmp	r5, #0
 800afee:	d07c      	beq.n	800b0ea <_dtoa_r+0x1fa>
 800aff0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aff2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800aff6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800affa:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800affe:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b002:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b006:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b00a:	4b7d      	ldr	r3, [pc, #500]	; (800b200 <_dtoa_r+0x310>)
 800b00c:	2200      	movs	r2, #0
 800b00e:	4630      	mov	r0, r6
 800b010:	4639      	mov	r1, r7
 800b012:	f7f5 f939 	bl	8000288 <__aeabi_dsub>
 800b016:	a36e      	add	r3, pc, #440	; (adr r3, 800b1d0 <_dtoa_r+0x2e0>)
 800b018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b01c:	f7f5 faec 	bl	80005f8 <__aeabi_dmul>
 800b020:	a36d      	add	r3, pc, #436	; (adr r3, 800b1d8 <_dtoa_r+0x2e8>)
 800b022:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b026:	f7f5 f931 	bl	800028c <__adddf3>
 800b02a:	4606      	mov	r6, r0
 800b02c:	4628      	mov	r0, r5
 800b02e:	460f      	mov	r7, r1
 800b030:	f7f5 fa78 	bl	8000524 <__aeabi_i2d>
 800b034:	a36a      	add	r3, pc, #424	; (adr r3, 800b1e0 <_dtoa_r+0x2f0>)
 800b036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b03a:	f7f5 fadd 	bl	80005f8 <__aeabi_dmul>
 800b03e:	4602      	mov	r2, r0
 800b040:	460b      	mov	r3, r1
 800b042:	4630      	mov	r0, r6
 800b044:	4639      	mov	r1, r7
 800b046:	f7f5 f921 	bl	800028c <__adddf3>
 800b04a:	4606      	mov	r6, r0
 800b04c:	460f      	mov	r7, r1
 800b04e:	f7f5 fd83 	bl	8000b58 <__aeabi_d2iz>
 800b052:	2200      	movs	r2, #0
 800b054:	4682      	mov	sl, r0
 800b056:	2300      	movs	r3, #0
 800b058:	4630      	mov	r0, r6
 800b05a:	4639      	mov	r1, r7
 800b05c:	f7f5 fd3e 	bl	8000adc <__aeabi_dcmplt>
 800b060:	b148      	cbz	r0, 800b076 <_dtoa_r+0x186>
 800b062:	4650      	mov	r0, sl
 800b064:	f7f5 fa5e 	bl	8000524 <__aeabi_i2d>
 800b068:	4632      	mov	r2, r6
 800b06a:	463b      	mov	r3, r7
 800b06c:	f7f5 fd2c 	bl	8000ac8 <__aeabi_dcmpeq>
 800b070:	b908      	cbnz	r0, 800b076 <_dtoa_r+0x186>
 800b072:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b076:	f1ba 0f16 	cmp.w	sl, #22
 800b07a:	d854      	bhi.n	800b126 <_dtoa_r+0x236>
 800b07c:	4b61      	ldr	r3, [pc, #388]	; (800b204 <_dtoa_r+0x314>)
 800b07e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b082:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b086:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b08a:	f7f5 fd27 	bl	8000adc <__aeabi_dcmplt>
 800b08e:	2800      	cmp	r0, #0
 800b090:	d04b      	beq.n	800b12a <_dtoa_r+0x23a>
 800b092:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b096:	2300      	movs	r3, #0
 800b098:	930e      	str	r3, [sp, #56]	; 0x38
 800b09a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b09c:	1b5d      	subs	r5, r3, r5
 800b09e:	1e6b      	subs	r3, r5, #1
 800b0a0:	9304      	str	r3, [sp, #16]
 800b0a2:	bf43      	ittte	mi
 800b0a4:	2300      	movmi	r3, #0
 800b0a6:	f1c5 0801 	rsbmi	r8, r5, #1
 800b0aa:	9304      	strmi	r3, [sp, #16]
 800b0ac:	f04f 0800 	movpl.w	r8, #0
 800b0b0:	f1ba 0f00 	cmp.w	sl, #0
 800b0b4:	db3b      	blt.n	800b12e <_dtoa_r+0x23e>
 800b0b6:	9b04      	ldr	r3, [sp, #16]
 800b0b8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800b0bc:	4453      	add	r3, sl
 800b0be:	9304      	str	r3, [sp, #16]
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	9306      	str	r3, [sp, #24]
 800b0c4:	9b05      	ldr	r3, [sp, #20]
 800b0c6:	2b09      	cmp	r3, #9
 800b0c8:	d869      	bhi.n	800b19e <_dtoa_r+0x2ae>
 800b0ca:	2b05      	cmp	r3, #5
 800b0cc:	bfc4      	itt	gt
 800b0ce:	3b04      	subgt	r3, #4
 800b0d0:	9305      	strgt	r3, [sp, #20]
 800b0d2:	9b05      	ldr	r3, [sp, #20]
 800b0d4:	f1a3 0302 	sub.w	r3, r3, #2
 800b0d8:	bfcc      	ite	gt
 800b0da:	2500      	movgt	r5, #0
 800b0dc:	2501      	movle	r5, #1
 800b0de:	2b03      	cmp	r3, #3
 800b0e0:	d869      	bhi.n	800b1b6 <_dtoa_r+0x2c6>
 800b0e2:	e8df f003 	tbb	[pc, r3]
 800b0e6:	4e2c      	.short	0x4e2c
 800b0e8:	5a4c      	.short	0x5a4c
 800b0ea:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800b0ee:	441d      	add	r5, r3
 800b0f0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b0f4:	2b20      	cmp	r3, #32
 800b0f6:	bfc1      	itttt	gt
 800b0f8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b0fc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b100:	fa09 f303 	lslgt.w	r3, r9, r3
 800b104:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b108:	bfda      	itte	le
 800b10a:	f1c3 0320 	rsble	r3, r3, #32
 800b10e:	fa06 f003 	lslle.w	r0, r6, r3
 800b112:	4318      	orrgt	r0, r3
 800b114:	f7f5 f9f6 	bl	8000504 <__aeabi_ui2d>
 800b118:	2301      	movs	r3, #1
 800b11a:	4606      	mov	r6, r0
 800b11c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b120:	3d01      	subs	r5, #1
 800b122:	9310      	str	r3, [sp, #64]	; 0x40
 800b124:	e771      	b.n	800b00a <_dtoa_r+0x11a>
 800b126:	2301      	movs	r3, #1
 800b128:	e7b6      	b.n	800b098 <_dtoa_r+0x1a8>
 800b12a:	900e      	str	r0, [sp, #56]	; 0x38
 800b12c:	e7b5      	b.n	800b09a <_dtoa_r+0x1aa>
 800b12e:	f1ca 0300 	rsb	r3, sl, #0
 800b132:	9306      	str	r3, [sp, #24]
 800b134:	2300      	movs	r3, #0
 800b136:	eba8 080a 	sub.w	r8, r8, sl
 800b13a:	930d      	str	r3, [sp, #52]	; 0x34
 800b13c:	e7c2      	b.n	800b0c4 <_dtoa_r+0x1d4>
 800b13e:	2300      	movs	r3, #0
 800b140:	9308      	str	r3, [sp, #32]
 800b142:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b144:	2b00      	cmp	r3, #0
 800b146:	dc39      	bgt.n	800b1bc <_dtoa_r+0x2cc>
 800b148:	f04f 0901 	mov.w	r9, #1
 800b14c:	f8cd 9004 	str.w	r9, [sp, #4]
 800b150:	464b      	mov	r3, r9
 800b152:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800b156:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b158:	2200      	movs	r2, #0
 800b15a:	6042      	str	r2, [r0, #4]
 800b15c:	2204      	movs	r2, #4
 800b15e:	f102 0614 	add.w	r6, r2, #20
 800b162:	429e      	cmp	r6, r3
 800b164:	6841      	ldr	r1, [r0, #4]
 800b166:	d92f      	bls.n	800b1c8 <_dtoa_r+0x2d8>
 800b168:	4620      	mov	r0, r4
 800b16a:	f000 fcc7 	bl	800bafc <_Balloc>
 800b16e:	9000      	str	r0, [sp, #0]
 800b170:	2800      	cmp	r0, #0
 800b172:	d14b      	bne.n	800b20c <_dtoa_r+0x31c>
 800b174:	4b24      	ldr	r3, [pc, #144]	; (800b208 <_dtoa_r+0x318>)
 800b176:	4602      	mov	r2, r0
 800b178:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b17c:	e6d1      	b.n	800af22 <_dtoa_r+0x32>
 800b17e:	2301      	movs	r3, #1
 800b180:	e7de      	b.n	800b140 <_dtoa_r+0x250>
 800b182:	2300      	movs	r3, #0
 800b184:	9308      	str	r3, [sp, #32]
 800b186:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b188:	eb0a 0903 	add.w	r9, sl, r3
 800b18c:	f109 0301 	add.w	r3, r9, #1
 800b190:	2b01      	cmp	r3, #1
 800b192:	9301      	str	r3, [sp, #4]
 800b194:	bfb8      	it	lt
 800b196:	2301      	movlt	r3, #1
 800b198:	e7dd      	b.n	800b156 <_dtoa_r+0x266>
 800b19a:	2301      	movs	r3, #1
 800b19c:	e7f2      	b.n	800b184 <_dtoa_r+0x294>
 800b19e:	2501      	movs	r5, #1
 800b1a0:	2300      	movs	r3, #0
 800b1a2:	9305      	str	r3, [sp, #20]
 800b1a4:	9508      	str	r5, [sp, #32]
 800b1a6:	f04f 39ff 	mov.w	r9, #4294967295
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	f8cd 9004 	str.w	r9, [sp, #4]
 800b1b0:	2312      	movs	r3, #18
 800b1b2:	9209      	str	r2, [sp, #36]	; 0x24
 800b1b4:	e7cf      	b.n	800b156 <_dtoa_r+0x266>
 800b1b6:	2301      	movs	r3, #1
 800b1b8:	9308      	str	r3, [sp, #32]
 800b1ba:	e7f4      	b.n	800b1a6 <_dtoa_r+0x2b6>
 800b1bc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800b1c0:	f8cd 9004 	str.w	r9, [sp, #4]
 800b1c4:	464b      	mov	r3, r9
 800b1c6:	e7c6      	b.n	800b156 <_dtoa_r+0x266>
 800b1c8:	3101      	adds	r1, #1
 800b1ca:	6041      	str	r1, [r0, #4]
 800b1cc:	0052      	lsls	r2, r2, #1
 800b1ce:	e7c6      	b.n	800b15e <_dtoa_r+0x26e>
 800b1d0:	636f4361 	.word	0x636f4361
 800b1d4:	3fd287a7 	.word	0x3fd287a7
 800b1d8:	8b60c8b3 	.word	0x8b60c8b3
 800b1dc:	3fc68a28 	.word	0x3fc68a28
 800b1e0:	509f79fb 	.word	0x509f79fb
 800b1e4:	3fd34413 	.word	0x3fd34413
 800b1e8:	0800e30d 	.word	0x0800e30d
 800b1ec:	0800e324 	.word	0x0800e324
 800b1f0:	7ff00000 	.word	0x7ff00000
 800b1f4:	0800e309 	.word	0x0800e309
 800b1f8:	0800e300 	.word	0x0800e300
 800b1fc:	0800e2dd 	.word	0x0800e2dd
 800b200:	3ff80000 	.word	0x3ff80000
 800b204:	0800e420 	.word	0x0800e420
 800b208:	0800e383 	.word	0x0800e383
 800b20c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b20e:	9a00      	ldr	r2, [sp, #0]
 800b210:	601a      	str	r2, [r3, #0]
 800b212:	9b01      	ldr	r3, [sp, #4]
 800b214:	2b0e      	cmp	r3, #14
 800b216:	f200 80ad 	bhi.w	800b374 <_dtoa_r+0x484>
 800b21a:	2d00      	cmp	r5, #0
 800b21c:	f000 80aa 	beq.w	800b374 <_dtoa_r+0x484>
 800b220:	f1ba 0f00 	cmp.w	sl, #0
 800b224:	dd36      	ble.n	800b294 <_dtoa_r+0x3a4>
 800b226:	4ac3      	ldr	r2, [pc, #780]	; (800b534 <_dtoa_r+0x644>)
 800b228:	f00a 030f 	and.w	r3, sl, #15
 800b22c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b230:	ed93 7b00 	vldr	d7, [r3]
 800b234:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800b238:	ea4f 172a 	mov.w	r7, sl, asr #4
 800b23c:	eeb0 8a47 	vmov.f32	s16, s14
 800b240:	eef0 8a67 	vmov.f32	s17, s15
 800b244:	d016      	beq.n	800b274 <_dtoa_r+0x384>
 800b246:	4bbc      	ldr	r3, [pc, #752]	; (800b538 <_dtoa_r+0x648>)
 800b248:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b24c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b250:	f7f5 fafc 	bl	800084c <__aeabi_ddiv>
 800b254:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b258:	f007 070f 	and.w	r7, r7, #15
 800b25c:	2503      	movs	r5, #3
 800b25e:	4eb6      	ldr	r6, [pc, #728]	; (800b538 <_dtoa_r+0x648>)
 800b260:	b957      	cbnz	r7, 800b278 <_dtoa_r+0x388>
 800b262:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b266:	ec53 2b18 	vmov	r2, r3, d8
 800b26a:	f7f5 faef 	bl	800084c <__aeabi_ddiv>
 800b26e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b272:	e029      	b.n	800b2c8 <_dtoa_r+0x3d8>
 800b274:	2502      	movs	r5, #2
 800b276:	e7f2      	b.n	800b25e <_dtoa_r+0x36e>
 800b278:	07f9      	lsls	r1, r7, #31
 800b27a:	d508      	bpl.n	800b28e <_dtoa_r+0x39e>
 800b27c:	ec51 0b18 	vmov	r0, r1, d8
 800b280:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b284:	f7f5 f9b8 	bl	80005f8 <__aeabi_dmul>
 800b288:	ec41 0b18 	vmov	d8, r0, r1
 800b28c:	3501      	adds	r5, #1
 800b28e:	107f      	asrs	r7, r7, #1
 800b290:	3608      	adds	r6, #8
 800b292:	e7e5      	b.n	800b260 <_dtoa_r+0x370>
 800b294:	f000 80a6 	beq.w	800b3e4 <_dtoa_r+0x4f4>
 800b298:	f1ca 0600 	rsb	r6, sl, #0
 800b29c:	4ba5      	ldr	r3, [pc, #660]	; (800b534 <_dtoa_r+0x644>)
 800b29e:	4fa6      	ldr	r7, [pc, #664]	; (800b538 <_dtoa_r+0x648>)
 800b2a0:	f006 020f 	and.w	r2, r6, #15
 800b2a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b2a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2ac:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b2b0:	f7f5 f9a2 	bl	80005f8 <__aeabi_dmul>
 800b2b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b2b8:	1136      	asrs	r6, r6, #4
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	2502      	movs	r5, #2
 800b2be:	2e00      	cmp	r6, #0
 800b2c0:	f040 8085 	bne.w	800b3ce <_dtoa_r+0x4de>
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d1d2      	bne.n	800b26e <_dtoa_r+0x37e>
 800b2c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	f000 808c 	beq.w	800b3e8 <_dtoa_r+0x4f8>
 800b2d0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b2d4:	4b99      	ldr	r3, [pc, #612]	; (800b53c <_dtoa_r+0x64c>)
 800b2d6:	2200      	movs	r2, #0
 800b2d8:	4630      	mov	r0, r6
 800b2da:	4639      	mov	r1, r7
 800b2dc:	f7f5 fbfe 	bl	8000adc <__aeabi_dcmplt>
 800b2e0:	2800      	cmp	r0, #0
 800b2e2:	f000 8081 	beq.w	800b3e8 <_dtoa_r+0x4f8>
 800b2e6:	9b01      	ldr	r3, [sp, #4]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d07d      	beq.n	800b3e8 <_dtoa_r+0x4f8>
 800b2ec:	f1b9 0f00 	cmp.w	r9, #0
 800b2f0:	dd3c      	ble.n	800b36c <_dtoa_r+0x47c>
 800b2f2:	f10a 33ff 	add.w	r3, sl, #4294967295
 800b2f6:	9307      	str	r3, [sp, #28]
 800b2f8:	2200      	movs	r2, #0
 800b2fa:	4b91      	ldr	r3, [pc, #580]	; (800b540 <_dtoa_r+0x650>)
 800b2fc:	4630      	mov	r0, r6
 800b2fe:	4639      	mov	r1, r7
 800b300:	f7f5 f97a 	bl	80005f8 <__aeabi_dmul>
 800b304:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b308:	3501      	adds	r5, #1
 800b30a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800b30e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b312:	4628      	mov	r0, r5
 800b314:	f7f5 f906 	bl	8000524 <__aeabi_i2d>
 800b318:	4632      	mov	r2, r6
 800b31a:	463b      	mov	r3, r7
 800b31c:	f7f5 f96c 	bl	80005f8 <__aeabi_dmul>
 800b320:	4b88      	ldr	r3, [pc, #544]	; (800b544 <_dtoa_r+0x654>)
 800b322:	2200      	movs	r2, #0
 800b324:	f7f4 ffb2 	bl	800028c <__adddf3>
 800b328:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800b32c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b330:	9303      	str	r3, [sp, #12]
 800b332:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b334:	2b00      	cmp	r3, #0
 800b336:	d15c      	bne.n	800b3f2 <_dtoa_r+0x502>
 800b338:	4b83      	ldr	r3, [pc, #524]	; (800b548 <_dtoa_r+0x658>)
 800b33a:	2200      	movs	r2, #0
 800b33c:	4630      	mov	r0, r6
 800b33e:	4639      	mov	r1, r7
 800b340:	f7f4 ffa2 	bl	8000288 <__aeabi_dsub>
 800b344:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b348:	4606      	mov	r6, r0
 800b34a:	460f      	mov	r7, r1
 800b34c:	f7f5 fbe4 	bl	8000b18 <__aeabi_dcmpgt>
 800b350:	2800      	cmp	r0, #0
 800b352:	f040 8296 	bne.w	800b882 <_dtoa_r+0x992>
 800b356:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b35a:	4630      	mov	r0, r6
 800b35c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b360:	4639      	mov	r1, r7
 800b362:	f7f5 fbbb 	bl	8000adc <__aeabi_dcmplt>
 800b366:	2800      	cmp	r0, #0
 800b368:	f040 8288 	bne.w	800b87c <_dtoa_r+0x98c>
 800b36c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b370:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b374:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b376:	2b00      	cmp	r3, #0
 800b378:	f2c0 8158 	blt.w	800b62c <_dtoa_r+0x73c>
 800b37c:	f1ba 0f0e 	cmp.w	sl, #14
 800b380:	f300 8154 	bgt.w	800b62c <_dtoa_r+0x73c>
 800b384:	4b6b      	ldr	r3, [pc, #428]	; (800b534 <_dtoa_r+0x644>)
 800b386:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b38a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b38e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b390:	2b00      	cmp	r3, #0
 800b392:	f280 80e3 	bge.w	800b55c <_dtoa_r+0x66c>
 800b396:	9b01      	ldr	r3, [sp, #4]
 800b398:	2b00      	cmp	r3, #0
 800b39a:	f300 80df 	bgt.w	800b55c <_dtoa_r+0x66c>
 800b39e:	f040 826d 	bne.w	800b87c <_dtoa_r+0x98c>
 800b3a2:	4b69      	ldr	r3, [pc, #420]	; (800b548 <_dtoa_r+0x658>)
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	4640      	mov	r0, r8
 800b3a8:	4649      	mov	r1, r9
 800b3aa:	f7f5 f925 	bl	80005f8 <__aeabi_dmul>
 800b3ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b3b2:	f7f5 fba7 	bl	8000b04 <__aeabi_dcmpge>
 800b3b6:	9e01      	ldr	r6, [sp, #4]
 800b3b8:	4637      	mov	r7, r6
 800b3ba:	2800      	cmp	r0, #0
 800b3bc:	f040 8243 	bne.w	800b846 <_dtoa_r+0x956>
 800b3c0:	9d00      	ldr	r5, [sp, #0]
 800b3c2:	2331      	movs	r3, #49	; 0x31
 800b3c4:	f805 3b01 	strb.w	r3, [r5], #1
 800b3c8:	f10a 0a01 	add.w	sl, sl, #1
 800b3cc:	e23f      	b.n	800b84e <_dtoa_r+0x95e>
 800b3ce:	07f2      	lsls	r2, r6, #31
 800b3d0:	d505      	bpl.n	800b3de <_dtoa_r+0x4ee>
 800b3d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b3d6:	f7f5 f90f 	bl	80005f8 <__aeabi_dmul>
 800b3da:	3501      	adds	r5, #1
 800b3dc:	2301      	movs	r3, #1
 800b3de:	1076      	asrs	r6, r6, #1
 800b3e0:	3708      	adds	r7, #8
 800b3e2:	e76c      	b.n	800b2be <_dtoa_r+0x3ce>
 800b3e4:	2502      	movs	r5, #2
 800b3e6:	e76f      	b.n	800b2c8 <_dtoa_r+0x3d8>
 800b3e8:	9b01      	ldr	r3, [sp, #4]
 800b3ea:	f8cd a01c 	str.w	sl, [sp, #28]
 800b3ee:	930c      	str	r3, [sp, #48]	; 0x30
 800b3f0:	e78d      	b.n	800b30e <_dtoa_r+0x41e>
 800b3f2:	9900      	ldr	r1, [sp, #0]
 800b3f4:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b3f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b3f8:	4b4e      	ldr	r3, [pc, #312]	; (800b534 <_dtoa_r+0x644>)
 800b3fa:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b3fe:	4401      	add	r1, r0
 800b400:	9102      	str	r1, [sp, #8]
 800b402:	9908      	ldr	r1, [sp, #32]
 800b404:	eeb0 8a47 	vmov.f32	s16, s14
 800b408:	eef0 8a67 	vmov.f32	s17, s15
 800b40c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b410:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b414:	2900      	cmp	r1, #0
 800b416:	d045      	beq.n	800b4a4 <_dtoa_r+0x5b4>
 800b418:	494c      	ldr	r1, [pc, #304]	; (800b54c <_dtoa_r+0x65c>)
 800b41a:	2000      	movs	r0, #0
 800b41c:	f7f5 fa16 	bl	800084c <__aeabi_ddiv>
 800b420:	ec53 2b18 	vmov	r2, r3, d8
 800b424:	f7f4 ff30 	bl	8000288 <__aeabi_dsub>
 800b428:	9d00      	ldr	r5, [sp, #0]
 800b42a:	ec41 0b18 	vmov	d8, r0, r1
 800b42e:	4639      	mov	r1, r7
 800b430:	4630      	mov	r0, r6
 800b432:	f7f5 fb91 	bl	8000b58 <__aeabi_d2iz>
 800b436:	900c      	str	r0, [sp, #48]	; 0x30
 800b438:	f7f5 f874 	bl	8000524 <__aeabi_i2d>
 800b43c:	4602      	mov	r2, r0
 800b43e:	460b      	mov	r3, r1
 800b440:	4630      	mov	r0, r6
 800b442:	4639      	mov	r1, r7
 800b444:	f7f4 ff20 	bl	8000288 <__aeabi_dsub>
 800b448:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b44a:	3330      	adds	r3, #48	; 0x30
 800b44c:	f805 3b01 	strb.w	r3, [r5], #1
 800b450:	ec53 2b18 	vmov	r2, r3, d8
 800b454:	4606      	mov	r6, r0
 800b456:	460f      	mov	r7, r1
 800b458:	f7f5 fb40 	bl	8000adc <__aeabi_dcmplt>
 800b45c:	2800      	cmp	r0, #0
 800b45e:	d165      	bne.n	800b52c <_dtoa_r+0x63c>
 800b460:	4632      	mov	r2, r6
 800b462:	463b      	mov	r3, r7
 800b464:	4935      	ldr	r1, [pc, #212]	; (800b53c <_dtoa_r+0x64c>)
 800b466:	2000      	movs	r0, #0
 800b468:	f7f4 ff0e 	bl	8000288 <__aeabi_dsub>
 800b46c:	ec53 2b18 	vmov	r2, r3, d8
 800b470:	f7f5 fb34 	bl	8000adc <__aeabi_dcmplt>
 800b474:	2800      	cmp	r0, #0
 800b476:	f040 80b9 	bne.w	800b5ec <_dtoa_r+0x6fc>
 800b47a:	9b02      	ldr	r3, [sp, #8]
 800b47c:	429d      	cmp	r5, r3
 800b47e:	f43f af75 	beq.w	800b36c <_dtoa_r+0x47c>
 800b482:	4b2f      	ldr	r3, [pc, #188]	; (800b540 <_dtoa_r+0x650>)
 800b484:	ec51 0b18 	vmov	r0, r1, d8
 800b488:	2200      	movs	r2, #0
 800b48a:	f7f5 f8b5 	bl	80005f8 <__aeabi_dmul>
 800b48e:	4b2c      	ldr	r3, [pc, #176]	; (800b540 <_dtoa_r+0x650>)
 800b490:	ec41 0b18 	vmov	d8, r0, r1
 800b494:	2200      	movs	r2, #0
 800b496:	4630      	mov	r0, r6
 800b498:	4639      	mov	r1, r7
 800b49a:	f7f5 f8ad 	bl	80005f8 <__aeabi_dmul>
 800b49e:	4606      	mov	r6, r0
 800b4a0:	460f      	mov	r7, r1
 800b4a2:	e7c4      	b.n	800b42e <_dtoa_r+0x53e>
 800b4a4:	ec51 0b17 	vmov	r0, r1, d7
 800b4a8:	f7f5 f8a6 	bl	80005f8 <__aeabi_dmul>
 800b4ac:	9b02      	ldr	r3, [sp, #8]
 800b4ae:	9d00      	ldr	r5, [sp, #0]
 800b4b0:	930c      	str	r3, [sp, #48]	; 0x30
 800b4b2:	ec41 0b18 	vmov	d8, r0, r1
 800b4b6:	4639      	mov	r1, r7
 800b4b8:	4630      	mov	r0, r6
 800b4ba:	f7f5 fb4d 	bl	8000b58 <__aeabi_d2iz>
 800b4be:	9011      	str	r0, [sp, #68]	; 0x44
 800b4c0:	f7f5 f830 	bl	8000524 <__aeabi_i2d>
 800b4c4:	4602      	mov	r2, r0
 800b4c6:	460b      	mov	r3, r1
 800b4c8:	4630      	mov	r0, r6
 800b4ca:	4639      	mov	r1, r7
 800b4cc:	f7f4 fedc 	bl	8000288 <__aeabi_dsub>
 800b4d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b4d2:	3330      	adds	r3, #48	; 0x30
 800b4d4:	f805 3b01 	strb.w	r3, [r5], #1
 800b4d8:	9b02      	ldr	r3, [sp, #8]
 800b4da:	429d      	cmp	r5, r3
 800b4dc:	4606      	mov	r6, r0
 800b4de:	460f      	mov	r7, r1
 800b4e0:	f04f 0200 	mov.w	r2, #0
 800b4e4:	d134      	bne.n	800b550 <_dtoa_r+0x660>
 800b4e6:	4b19      	ldr	r3, [pc, #100]	; (800b54c <_dtoa_r+0x65c>)
 800b4e8:	ec51 0b18 	vmov	r0, r1, d8
 800b4ec:	f7f4 fece 	bl	800028c <__adddf3>
 800b4f0:	4602      	mov	r2, r0
 800b4f2:	460b      	mov	r3, r1
 800b4f4:	4630      	mov	r0, r6
 800b4f6:	4639      	mov	r1, r7
 800b4f8:	f7f5 fb0e 	bl	8000b18 <__aeabi_dcmpgt>
 800b4fc:	2800      	cmp	r0, #0
 800b4fe:	d175      	bne.n	800b5ec <_dtoa_r+0x6fc>
 800b500:	ec53 2b18 	vmov	r2, r3, d8
 800b504:	4911      	ldr	r1, [pc, #68]	; (800b54c <_dtoa_r+0x65c>)
 800b506:	2000      	movs	r0, #0
 800b508:	f7f4 febe 	bl	8000288 <__aeabi_dsub>
 800b50c:	4602      	mov	r2, r0
 800b50e:	460b      	mov	r3, r1
 800b510:	4630      	mov	r0, r6
 800b512:	4639      	mov	r1, r7
 800b514:	f7f5 fae2 	bl	8000adc <__aeabi_dcmplt>
 800b518:	2800      	cmp	r0, #0
 800b51a:	f43f af27 	beq.w	800b36c <_dtoa_r+0x47c>
 800b51e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b520:	1e6b      	subs	r3, r5, #1
 800b522:	930c      	str	r3, [sp, #48]	; 0x30
 800b524:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b528:	2b30      	cmp	r3, #48	; 0x30
 800b52a:	d0f8      	beq.n	800b51e <_dtoa_r+0x62e>
 800b52c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800b530:	e04a      	b.n	800b5c8 <_dtoa_r+0x6d8>
 800b532:	bf00      	nop
 800b534:	0800e420 	.word	0x0800e420
 800b538:	0800e3f8 	.word	0x0800e3f8
 800b53c:	3ff00000 	.word	0x3ff00000
 800b540:	40240000 	.word	0x40240000
 800b544:	401c0000 	.word	0x401c0000
 800b548:	40140000 	.word	0x40140000
 800b54c:	3fe00000 	.word	0x3fe00000
 800b550:	4baf      	ldr	r3, [pc, #700]	; (800b810 <_dtoa_r+0x920>)
 800b552:	f7f5 f851 	bl	80005f8 <__aeabi_dmul>
 800b556:	4606      	mov	r6, r0
 800b558:	460f      	mov	r7, r1
 800b55a:	e7ac      	b.n	800b4b6 <_dtoa_r+0x5c6>
 800b55c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b560:	9d00      	ldr	r5, [sp, #0]
 800b562:	4642      	mov	r2, r8
 800b564:	464b      	mov	r3, r9
 800b566:	4630      	mov	r0, r6
 800b568:	4639      	mov	r1, r7
 800b56a:	f7f5 f96f 	bl	800084c <__aeabi_ddiv>
 800b56e:	f7f5 faf3 	bl	8000b58 <__aeabi_d2iz>
 800b572:	9002      	str	r0, [sp, #8]
 800b574:	f7f4 ffd6 	bl	8000524 <__aeabi_i2d>
 800b578:	4642      	mov	r2, r8
 800b57a:	464b      	mov	r3, r9
 800b57c:	f7f5 f83c 	bl	80005f8 <__aeabi_dmul>
 800b580:	4602      	mov	r2, r0
 800b582:	460b      	mov	r3, r1
 800b584:	4630      	mov	r0, r6
 800b586:	4639      	mov	r1, r7
 800b588:	f7f4 fe7e 	bl	8000288 <__aeabi_dsub>
 800b58c:	9e02      	ldr	r6, [sp, #8]
 800b58e:	9f01      	ldr	r7, [sp, #4]
 800b590:	3630      	adds	r6, #48	; 0x30
 800b592:	f805 6b01 	strb.w	r6, [r5], #1
 800b596:	9e00      	ldr	r6, [sp, #0]
 800b598:	1bae      	subs	r6, r5, r6
 800b59a:	42b7      	cmp	r7, r6
 800b59c:	4602      	mov	r2, r0
 800b59e:	460b      	mov	r3, r1
 800b5a0:	d137      	bne.n	800b612 <_dtoa_r+0x722>
 800b5a2:	f7f4 fe73 	bl	800028c <__adddf3>
 800b5a6:	4642      	mov	r2, r8
 800b5a8:	464b      	mov	r3, r9
 800b5aa:	4606      	mov	r6, r0
 800b5ac:	460f      	mov	r7, r1
 800b5ae:	f7f5 fab3 	bl	8000b18 <__aeabi_dcmpgt>
 800b5b2:	b9c8      	cbnz	r0, 800b5e8 <_dtoa_r+0x6f8>
 800b5b4:	4642      	mov	r2, r8
 800b5b6:	464b      	mov	r3, r9
 800b5b8:	4630      	mov	r0, r6
 800b5ba:	4639      	mov	r1, r7
 800b5bc:	f7f5 fa84 	bl	8000ac8 <__aeabi_dcmpeq>
 800b5c0:	b110      	cbz	r0, 800b5c8 <_dtoa_r+0x6d8>
 800b5c2:	9b02      	ldr	r3, [sp, #8]
 800b5c4:	07d9      	lsls	r1, r3, #31
 800b5c6:	d40f      	bmi.n	800b5e8 <_dtoa_r+0x6f8>
 800b5c8:	4620      	mov	r0, r4
 800b5ca:	4659      	mov	r1, fp
 800b5cc:	f000 fad6 	bl	800bb7c <_Bfree>
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	702b      	strb	r3, [r5, #0]
 800b5d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b5d6:	f10a 0001 	add.w	r0, sl, #1
 800b5da:	6018      	str	r0, [r3, #0]
 800b5dc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	f43f acd8 	beq.w	800af94 <_dtoa_r+0xa4>
 800b5e4:	601d      	str	r5, [r3, #0]
 800b5e6:	e4d5      	b.n	800af94 <_dtoa_r+0xa4>
 800b5e8:	f8cd a01c 	str.w	sl, [sp, #28]
 800b5ec:	462b      	mov	r3, r5
 800b5ee:	461d      	mov	r5, r3
 800b5f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b5f4:	2a39      	cmp	r2, #57	; 0x39
 800b5f6:	d108      	bne.n	800b60a <_dtoa_r+0x71a>
 800b5f8:	9a00      	ldr	r2, [sp, #0]
 800b5fa:	429a      	cmp	r2, r3
 800b5fc:	d1f7      	bne.n	800b5ee <_dtoa_r+0x6fe>
 800b5fe:	9a07      	ldr	r2, [sp, #28]
 800b600:	9900      	ldr	r1, [sp, #0]
 800b602:	3201      	adds	r2, #1
 800b604:	9207      	str	r2, [sp, #28]
 800b606:	2230      	movs	r2, #48	; 0x30
 800b608:	700a      	strb	r2, [r1, #0]
 800b60a:	781a      	ldrb	r2, [r3, #0]
 800b60c:	3201      	adds	r2, #1
 800b60e:	701a      	strb	r2, [r3, #0]
 800b610:	e78c      	b.n	800b52c <_dtoa_r+0x63c>
 800b612:	4b7f      	ldr	r3, [pc, #508]	; (800b810 <_dtoa_r+0x920>)
 800b614:	2200      	movs	r2, #0
 800b616:	f7f4 ffef 	bl	80005f8 <__aeabi_dmul>
 800b61a:	2200      	movs	r2, #0
 800b61c:	2300      	movs	r3, #0
 800b61e:	4606      	mov	r6, r0
 800b620:	460f      	mov	r7, r1
 800b622:	f7f5 fa51 	bl	8000ac8 <__aeabi_dcmpeq>
 800b626:	2800      	cmp	r0, #0
 800b628:	d09b      	beq.n	800b562 <_dtoa_r+0x672>
 800b62a:	e7cd      	b.n	800b5c8 <_dtoa_r+0x6d8>
 800b62c:	9a08      	ldr	r2, [sp, #32]
 800b62e:	2a00      	cmp	r2, #0
 800b630:	f000 80c4 	beq.w	800b7bc <_dtoa_r+0x8cc>
 800b634:	9a05      	ldr	r2, [sp, #20]
 800b636:	2a01      	cmp	r2, #1
 800b638:	f300 80a8 	bgt.w	800b78c <_dtoa_r+0x89c>
 800b63c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b63e:	2a00      	cmp	r2, #0
 800b640:	f000 80a0 	beq.w	800b784 <_dtoa_r+0x894>
 800b644:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b648:	9e06      	ldr	r6, [sp, #24]
 800b64a:	4645      	mov	r5, r8
 800b64c:	9a04      	ldr	r2, [sp, #16]
 800b64e:	2101      	movs	r1, #1
 800b650:	441a      	add	r2, r3
 800b652:	4620      	mov	r0, r4
 800b654:	4498      	add	r8, r3
 800b656:	9204      	str	r2, [sp, #16]
 800b658:	f000 fb4c 	bl	800bcf4 <__i2b>
 800b65c:	4607      	mov	r7, r0
 800b65e:	2d00      	cmp	r5, #0
 800b660:	dd0b      	ble.n	800b67a <_dtoa_r+0x78a>
 800b662:	9b04      	ldr	r3, [sp, #16]
 800b664:	2b00      	cmp	r3, #0
 800b666:	dd08      	ble.n	800b67a <_dtoa_r+0x78a>
 800b668:	42ab      	cmp	r3, r5
 800b66a:	9a04      	ldr	r2, [sp, #16]
 800b66c:	bfa8      	it	ge
 800b66e:	462b      	movge	r3, r5
 800b670:	eba8 0803 	sub.w	r8, r8, r3
 800b674:	1aed      	subs	r5, r5, r3
 800b676:	1ad3      	subs	r3, r2, r3
 800b678:	9304      	str	r3, [sp, #16]
 800b67a:	9b06      	ldr	r3, [sp, #24]
 800b67c:	b1fb      	cbz	r3, 800b6be <_dtoa_r+0x7ce>
 800b67e:	9b08      	ldr	r3, [sp, #32]
 800b680:	2b00      	cmp	r3, #0
 800b682:	f000 809f 	beq.w	800b7c4 <_dtoa_r+0x8d4>
 800b686:	2e00      	cmp	r6, #0
 800b688:	dd11      	ble.n	800b6ae <_dtoa_r+0x7be>
 800b68a:	4639      	mov	r1, r7
 800b68c:	4632      	mov	r2, r6
 800b68e:	4620      	mov	r0, r4
 800b690:	f000 fbec 	bl	800be6c <__pow5mult>
 800b694:	465a      	mov	r2, fp
 800b696:	4601      	mov	r1, r0
 800b698:	4607      	mov	r7, r0
 800b69a:	4620      	mov	r0, r4
 800b69c:	f000 fb40 	bl	800bd20 <__multiply>
 800b6a0:	4659      	mov	r1, fp
 800b6a2:	9007      	str	r0, [sp, #28]
 800b6a4:	4620      	mov	r0, r4
 800b6a6:	f000 fa69 	bl	800bb7c <_Bfree>
 800b6aa:	9b07      	ldr	r3, [sp, #28]
 800b6ac:	469b      	mov	fp, r3
 800b6ae:	9b06      	ldr	r3, [sp, #24]
 800b6b0:	1b9a      	subs	r2, r3, r6
 800b6b2:	d004      	beq.n	800b6be <_dtoa_r+0x7ce>
 800b6b4:	4659      	mov	r1, fp
 800b6b6:	4620      	mov	r0, r4
 800b6b8:	f000 fbd8 	bl	800be6c <__pow5mult>
 800b6bc:	4683      	mov	fp, r0
 800b6be:	2101      	movs	r1, #1
 800b6c0:	4620      	mov	r0, r4
 800b6c2:	f000 fb17 	bl	800bcf4 <__i2b>
 800b6c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	4606      	mov	r6, r0
 800b6cc:	dd7c      	ble.n	800b7c8 <_dtoa_r+0x8d8>
 800b6ce:	461a      	mov	r2, r3
 800b6d0:	4601      	mov	r1, r0
 800b6d2:	4620      	mov	r0, r4
 800b6d4:	f000 fbca 	bl	800be6c <__pow5mult>
 800b6d8:	9b05      	ldr	r3, [sp, #20]
 800b6da:	2b01      	cmp	r3, #1
 800b6dc:	4606      	mov	r6, r0
 800b6de:	dd76      	ble.n	800b7ce <_dtoa_r+0x8de>
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	9306      	str	r3, [sp, #24]
 800b6e4:	6933      	ldr	r3, [r6, #16]
 800b6e6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b6ea:	6918      	ldr	r0, [r3, #16]
 800b6ec:	f000 fab2 	bl	800bc54 <__hi0bits>
 800b6f0:	f1c0 0020 	rsb	r0, r0, #32
 800b6f4:	9b04      	ldr	r3, [sp, #16]
 800b6f6:	4418      	add	r0, r3
 800b6f8:	f010 001f 	ands.w	r0, r0, #31
 800b6fc:	f000 8086 	beq.w	800b80c <_dtoa_r+0x91c>
 800b700:	f1c0 0320 	rsb	r3, r0, #32
 800b704:	2b04      	cmp	r3, #4
 800b706:	dd7f      	ble.n	800b808 <_dtoa_r+0x918>
 800b708:	f1c0 001c 	rsb	r0, r0, #28
 800b70c:	9b04      	ldr	r3, [sp, #16]
 800b70e:	4403      	add	r3, r0
 800b710:	4480      	add	r8, r0
 800b712:	4405      	add	r5, r0
 800b714:	9304      	str	r3, [sp, #16]
 800b716:	f1b8 0f00 	cmp.w	r8, #0
 800b71a:	dd05      	ble.n	800b728 <_dtoa_r+0x838>
 800b71c:	4659      	mov	r1, fp
 800b71e:	4642      	mov	r2, r8
 800b720:	4620      	mov	r0, r4
 800b722:	f000 fbfd 	bl	800bf20 <__lshift>
 800b726:	4683      	mov	fp, r0
 800b728:	9b04      	ldr	r3, [sp, #16]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	dd05      	ble.n	800b73a <_dtoa_r+0x84a>
 800b72e:	4631      	mov	r1, r6
 800b730:	461a      	mov	r2, r3
 800b732:	4620      	mov	r0, r4
 800b734:	f000 fbf4 	bl	800bf20 <__lshift>
 800b738:	4606      	mov	r6, r0
 800b73a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d069      	beq.n	800b814 <_dtoa_r+0x924>
 800b740:	4631      	mov	r1, r6
 800b742:	4658      	mov	r0, fp
 800b744:	f000 fc58 	bl	800bff8 <__mcmp>
 800b748:	2800      	cmp	r0, #0
 800b74a:	da63      	bge.n	800b814 <_dtoa_r+0x924>
 800b74c:	2300      	movs	r3, #0
 800b74e:	4659      	mov	r1, fp
 800b750:	220a      	movs	r2, #10
 800b752:	4620      	mov	r0, r4
 800b754:	f000 fa34 	bl	800bbc0 <__multadd>
 800b758:	9b08      	ldr	r3, [sp, #32]
 800b75a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b75e:	4683      	mov	fp, r0
 800b760:	2b00      	cmp	r3, #0
 800b762:	f000 818f 	beq.w	800ba84 <_dtoa_r+0xb94>
 800b766:	4639      	mov	r1, r7
 800b768:	2300      	movs	r3, #0
 800b76a:	220a      	movs	r2, #10
 800b76c:	4620      	mov	r0, r4
 800b76e:	f000 fa27 	bl	800bbc0 <__multadd>
 800b772:	f1b9 0f00 	cmp.w	r9, #0
 800b776:	4607      	mov	r7, r0
 800b778:	f300 808e 	bgt.w	800b898 <_dtoa_r+0x9a8>
 800b77c:	9b05      	ldr	r3, [sp, #20]
 800b77e:	2b02      	cmp	r3, #2
 800b780:	dc50      	bgt.n	800b824 <_dtoa_r+0x934>
 800b782:	e089      	b.n	800b898 <_dtoa_r+0x9a8>
 800b784:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b786:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b78a:	e75d      	b.n	800b648 <_dtoa_r+0x758>
 800b78c:	9b01      	ldr	r3, [sp, #4]
 800b78e:	1e5e      	subs	r6, r3, #1
 800b790:	9b06      	ldr	r3, [sp, #24]
 800b792:	42b3      	cmp	r3, r6
 800b794:	bfbf      	itttt	lt
 800b796:	9b06      	ldrlt	r3, [sp, #24]
 800b798:	9606      	strlt	r6, [sp, #24]
 800b79a:	1af2      	sublt	r2, r6, r3
 800b79c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800b79e:	bfb6      	itet	lt
 800b7a0:	189b      	addlt	r3, r3, r2
 800b7a2:	1b9e      	subge	r6, r3, r6
 800b7a4:	930d      	strlt	r3, [sp, #52]	; 0x34
 800b7a6:	9b01      	ldr	r3, [sp, #4]
 800b7a8:	bfb8      	it	lt
 800b7aa:	2600      	movlt	r6, #0
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	bfb5      	itete	lt
 800b7b0:	eba8 0503 	sublt.w	r5, r8, r3
 800b7b4:	9b01      	ldrge	r3, [sp, #4]
 800b7b6:	2300      	movlt	r3, #0
 800b7b8:	4645      	movge	r5, r8
 800b7ba:	e747      	b.n	800b64c <_dtoa_r+0x75c>
 800b7bc:	9e06      	ldr	r6, [sp, #24]
 800b7be:	9f08      	ldr	r7, [sp, #32]
 800b7c0:	4645      	mov	r5, r8
 800b7c2:	e74c      	b.n	800b65e <_dtoa_r+0x76e>
 800b7c4:	9a06      	ldr	r2, [sp, #24]
 800b7c6:	e775      	b.n	800b6b4 <_dtoa_r+0x7c4>
 800b7c8:	9b05      	ldr	r3, [sp, #20]
 800b7ca:	2b01      	cmp	r3, #1
 800b7cc:	dc18      	bgt.n	800b800 <_dtoa_r+0x910>
 800b7ce:	9b02      	ldr	r3, [sp, #8]
 800b7d0:	b9b3      	cbnz	r3, 800b800 <_dtoa_r+0x910>
 800b7d2:	9b03      	ldr	r3, [sp, #12]
 800b7d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b7d8:	b9a3      	cbnz	r3, 800b804 <_dtoa_r+0x914>
 800b7da:	9b03      	ldr	r3, [sp, #12]
 800b7dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b7e0:	0d1b      	lsrs	r3, r3, #20
 800b7e2:	051b      	lsls	r3, r3, #20
 800b7e4:	b12b      	cbz	r3, 800b7f2 <_dtoa_r+0x902>
 800b7e6:	9b04      	ldr	r3, [sp, #16]
 800b7e8:	3301      	adds	r3, #1
 800b7ea:	9304      	str	r3, [sp, #16]
 800b7ec:	f108 0801 	add.w	r8, r8, #1
 800b7f0:	2301      	movs	r3, #1
 800b7f2:	9306      	str	r3, [sp, #24]
 800b7f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	f47f af74 	bne.w	800b6e4 <_dtoa_r+0x7f4>
 800b7fc:	2001      	movs	r0, #1
 800b7fe:	e779      	b.n	800b6f4 <_dtoa_r+0x804>
 800b800:	2300      	movs	r3, #0
 800b802:	e7f6      	b.n	800b7f2 <_dtoa_r+0x902>
 800b804:	9b02      	ldr	r3, [sp, #8]
 800b806:	e7f4      	b.n	800b7f2 <_dtoa_r+0x902>
 800b808:	d085      	beq.n	800b716 <_dtoa_r+0x826>
 800b80a:	4618      	mov	r0, r3
 800b80c:	301c      	adds	r0, #28
 800b80e:	e77d      	b.n	800b70c <_dtoa_r+0x81c>
 800b810:	40240000 	.word	0x40240000
 800b814:	9b01      	ldr	r3, [sp, #4]
 800b816:	2b00      	cmp	r3, #0
 800b818:	dc38      	bgt.n	800b88c <_dtoa_r+0x99c>
 800b81a:	9b05      	ldr	r3, [sp, #20]
 800b81c:	2b02      	cmp	r3, #2
 800b81e:	dd35      	ble.n	800b88c <_dtoa_r+0x99c>
 800b820:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b824:	f1b9 0f00 	cmp.w	r9, #0
 800b828:	d10d      	bne.n	800b846 <_dtoa_r+0x956>
 800b82a:	4631      	mov	r1, r6
 800b82c:	464b      	mov	r3, r9
 800b82e:	2205      	movs	r2, #5
 800b830:	4620      	mov	r0, r4
 800b832:	f000 f9c5 	bl	800bbc0 <__multadd>
 800b836:	4601      	mov	r1, r0
 800b838:	4606      	mov	r6, r0
 800b83a:	4658      	mov	r0, fp
 800b83c:	f000 fbdc 	bl	800bff8 <__mcmp>
 800b840:	2800      	cmp	r0, #0
 800b842:	f73f adbd 	bgt.w	800b3c0 <_dtoa_r+0x4d0>
 800b846:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b848:	9d00      	ldr	r5, [sp, #0]
 800b84a:	ea6f 0a03 	mvn.w	sl, r3
 800b84e:	f04f 0800 	mov.w	r8, #0
 800b852:	4631      	mov	r1, r6
 800b854:	4620      	mov	r0, r4
 800b856:	f000 f991 	bl	800bb7c <_Bfree>
 800b85a:	2f00      	cmp	r7, #0
 800b85c:	f43f aeb4 	beq.w	800b5c8 <_dtoa_r+0x6d8>
 800b860:	f1b8 0f00 	cmp.w	r8, #0
 800b864:	d005      	beq.n	800b872 <_dtoa_r+0x982>
 800b866:	45b8      	cmp	r8, r7
 800b868:	d003      	beq.n	800b872 <_dtoa_r+0x982>
 800b86a:	4641      	mov	r1, r8
 800b86c:	4620      	mov	r0, r4
 800b86e:	f000 f985 	bl	800bb7c <_Bfree>
 800b872:	4639      	mov	r1, r7
 800b874:	4620      	mov	r0, r4
 800b876:	f000 f981 	bl	800bb7c <_Bfree>
 800b87a:	e6a5      	b.n	800b5c8 <_dtoa_r+0x6d8>
 800b87c:	2600      	movs	r6, #0
 800b87e:	4637      	mov	r7, r6
 800b880:	e7e1      	b.n	800b846 <_dtoa_r+0x956>
 800b882:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800b884:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800b888:	4637      	mov	r7, r6
 800b88a:	e599      	b.n	800b3c0 <_dtoa_r+0x4d0>
 800b88c:	9b08      	ldr	r3, [sp, #32]
 800b88e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b892:	2b00      	cmp	r3, #0
 800b894:	f000 80fd 	beq.w	800ba92 <_dtoa_r+0xba2>
 800b898:	2d00      	cmp	r5, #0
 800b89a:	dd05      	ble.n	800b8a8 <_dtoa_r+0x9b8>
 800b89c:	4639      	mov	r1, r7
 800b89e:	462a      	mov	r2, r5
 800b8a0:	4620      	mov	r0, r4
 800b8a2:	f000 fb3d 	bl	800bf20 <__lshift>
 800b8a6:	4607      	mov	r7, r0
 800b8a8:	9b06      	ldr	r3, [sp, #24]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d05c      	beq.n	800b968 <_dtoa_r+0xa78>
 800b8ae:	6879      	ldr	r1, [r7, #4]
 800b8b0:	4620      	mov	r0, r4
 800b8b2:	f000 f923 	bl	800bafc <_Balloc>
 800b8b6:	4605      	mov	r5, r0
 800b8b8:	b928      	cbnz	r0, 800b8c6 <_dtoa_r+0x9d6>
 800b8ba:	4b80      	ldr	r3, [pc, #512]	; (800babc <_dtoa_r+0xbcc>)
 800b8bc:	4602      	mov	r2, r0
 800b8be:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b8c2:	f7ff bb2e 	b.w	800af22 <_dtoa_r+0x32>
 800b8c6:	693a      	ldr	r2, [r7, #16]
 800b8c8:	3202      	adds	r2, #2
 800b8ca:	0092      	lsls	r2, r2, #2
 800b8cc:	f107 010c 	add.w	r1, r7, #12
 800b8d0:	300c      	adds	r0, #12
 800b8d2:	f000 f905 	bl	800bae0 <memcpy>
 800b8d6:	2201      	movs	r2, #1
 800b8d8:	4629      	mov	r1, r5
 800b8da:	4620      	mov	r0, r4
 800b8dc:	f000 fb20 	bl	800bf20 <__lshift>
 800b8e0:	9b00      	ldr	r3, [sp, #0]
 800b8e2:	3301      	adds	r3, #1
 800b8e4:	9301      	str	r3, [sp, #4]
 800b8e6:	9b00      	ldr	r3, [sp, #0]
 800b8e8:	444b      	add	r3, r9
 800b8ea:	9307      	str	r3, [sp, #28]
 800b8ec:	9b02      	ldr	r3, [sp, #8]
 800b8ee:	f003 0301 	and.w	r3, r3, #1
 800b8f2:	46b8      	mov	r8, r7
 800b8f4:	9306      	str	r3, [sp, #24]
 800b8f6:	4607      	mov	r7, r0
 800b8f8:	9b01      	ldr	r3, [sp, #4]
 800b8fa:	4631      	mov	r1, r6
 800b8fc:	3b01      	subs	r3, #1
 800b8fe:	4658      	mov	r0, fp
 800b900:	9302      	str	r3, [sp, #8]
 800b902:	f7ff fa69 	bl	800add8 <quorem>
 800b906:	4603      	mov	r3, r0
 800b908:	3330      	adds	r3, #48	; 0x30
 800b90a:	9004      	str	r0, [sp, #16]
 800b90c:	4641      	mov	r1, r8
 800b90e:	4658      	mov	r0, fp
 800b910:	9308      	str	r3, [sp, #32]
 800b912:	f000 fb71 	bl	800bff8 <__mcmp>
 800b916:	463a      	mov	r2, r7
 800b918:	4681      	mov	r9, r0
 800b91a:	4631      	mov	r1, r6
 800b91c:	4620      	mov	r0, r4
 800b91e:	f000 fb87 	bl	800c030 <__mdiff>
 800b922:	68c2      	ldr	r2, [r0, #12]
 800b924:	9b08      	ldr	r3, [sp, #32]
 800b926:	4605      	mov	r5, r0
 800b928:	bb02      	cbnz	r2, 800b96c <_dtoa_r+0xa7c>
 800b92a:	4601      	mov	r1, r0
 800b92c:	4658      	mov	r0, fp
 800b92e:	f000 fb63 	bl	800bff8 <__mcmp>
 800b932:	9b08      	ldr	r3, [sp, #32]
 800b934:	4602      	mov	r2, r0
 800b936:	4629      	mov	r1, r5
 800b938:	4620      	mov	r0, r4
 800b93a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800b93e:	f000 f91d 	bl	800bb7c <_Bfree>
 800b942:	9b05      	ldr	r3, [sp, #20]
 800b944:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b946:	9d01      	ldr	r5, [sp, #4]
 800b948:	ea43 0102 	orr.w	r1, r3, r2
 800b94c:	9b06      	ldr	r3, [sp, #24]
 800b94e:	430b      	orrs	r3, r1
 800b950:	9b08      	ldr	r3, [sp, #32]
 800b952:	d10d      	bne.n	800b970 <_dtoa_r+0xa80>
 800b954:	2b39      	cmp	r3, #57	; 0x39
 800b956:	d029      	beq.n	800b9ac <_dtoa_r+0xabc>
 800b958:	f1b9 0f00 	cmp.w	r9, #0
 800b95c:	dd01      	ble.n	800b962 <_dtoa_r+0xa72>
 800b95e:	9b04      	ldr	r3, [sp, #16]
 800b960:	3331      	adds	r3, #49	; 0x31
 800b962:	9a02      	ldr	r2, [sp, #8]
 800b964:	7013      	strb	r3, [r2, #0]
 800b966:	e774      	b.n	800b852 <_dtoa_r+0x962>
 800b968:	4638      	mov	r0, r7
 800b96a:	e7b9      	b.n	800b8e0 <_dtoa_r+0x9f0>
 800b96c:	2201      	movs	r2, #1
 800b96e:	e7e2      	b.n	800b936 <_dtoa_r+0xa46>
 800b970:	f1b9 0f00 	cmp.w	r9, #0
 800b974:	db06      	blt.n	800b984 <_dtoa_r+0xa94>
 800b976:	9905      	ldr	r1, [sp, #20]
 800b978:	ea41 0909 	orr.w	r9, r1, r9
 800b97c:	9906      	ldr	r1, [sp, #24]
 800b97e:	ea59 0101 	orrs.w	r1, r9, r1
 800b982:	d120      	bne.n	800b9c6 <_dtoa_r+0xad6>
 800b984:	2a00      	cmp	r2, #0
 800b986:	ddec      	ble.n	800b962 <_dtoa_r+0xa72>
 800b988:	4659      	mov	r1, fp
 800b98a:	2201      	movs	r2, #1
 800b98c:	4620      	mov	r0, r4
 800b98e:	9301      	str	r3, [sp, #4]
 800b990:	f000 fac6 	bl	800bf20 <__lshift>
 800b994:	4631      	mov	r1, r6
 800b996:	4683      	mov	fp, r0
 800b998:	f000 fb2e 	bl	800bff8 <__mcmp>
 800b99c:	2800      	cmp	r0, #0
 800b99e:	9b01      	ldr	r3, [sp, #4]
 800b9a0:	dc02      	bgt.n	800b9a8 <_dtoa_r+0xab8>
 800b9a2:	d1de      	bne.n	800b962 <_dtoa_r+0xa72>
 800b9a4:	07da      	lsls	r2, r3, #31
 800b9a6:	d5dc      	bpl.n	800b962 <_dtoa_r+0xa72>
 800b9a8:	2b39      	cmp	r3, #57	; 0x39
 800b9aa:	d1d8      	bne.n	800b95e <_dtoa_r+0xa6e>
 800b9ac:	9a02      	ldr	r2, [sp, #8]
 800b9ae:	2339      	movs	r3, #57	; 0x39
 800b9b0:	7013      	strb	r3, [r2, #0]
 800b9b2:	462b      	mov	r3, r5
 800b9b4:	461d      	mov	r5, r3
 800b9b6:	3b01      	subs	r3, #1
 800b9b8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b9bc:	2a39      	cmp	r2, #57	; 0x39
 800b9be:	d050      	beq.n	800ba62 <_dtoa_r+0xb72>
 800b9c0:	3201      	adds	r2, #1
 800b9c2:	701a      	strb	r2, [r3, #0]
 800b9c4:	e745      	b.n	800b852 <_dtoa_r+0x962>
 800b9c6:	2a00      	cmp	r2, #0
 800b9c8:	dd03      	ble.n	800b9d2 <_dtoa_r+0xae2>
 800b9ca:	2b39      	cmp	r3, #57	; 0x39
 800b9cc:	d0ee      	beq.n	800b9ac <_dtoa_r+0xabc>
 800b9ce:	3301      	adds	r3, #1
 800b9d0:	e7c7      	b.n	800b962 <_dtoa_r+0xa72>
 800b9d2:	9a01      	ldr	r2, [sp, #4]
 800b9d4:	9907      	ldr	r1, [sp, #28]
 800b9d6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b9da:	428a      	cmp	r2, r1
 800b9dc:	d02a      	beq.n	800ba34 <_dtoa_r+0xb44>
 800b9de:	4659      	mov	r1, fp
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	220a      	movs	r2, #10
 800b9e4:	4620      	mov	r0, r4
 800b9e6:	f000 f8eb 	bl	800bbc0 <__multadd>
 800b9ea:	45b8      	cmp	r8, r7
 800b9ec:	4683      	mov	fp, r0
 800b9ee:	f04f 0300 	mov.w	r3, #0
 800b9f2:	f04f 020a 	mov.w	r2, #10
 800b9f6:	4641      	mov	r1, r8
 800b9f8:	4620      	mov	r0, r4
 800b9fa:	d107      	bne.n	800ba0c <_dtoa_r+0xb1c>
 800b9fc:	f000 f8e0 	bl	800bbc0 <__multadd>
 800ba00:	4680      	mov	r8, r0
 800ba02:	4607      	mov	r7, r0
 800ba04:	9b01      	ldr	r3, [sp, #4]
 800ba06:	3301      	adds	r3, #1
 800ba08:	9301      	str	r3, [sp, #4]
 800ba0a:	e775      	b.n	800b8f8 <_dtoa_r+0xa08>
 800ba0c:	f000 f8d8 	bl	800bbc0 <__multadd>
 800ba10:	4639      	mov	r1, r7
 800ba12:	4680      	mov	r8, r0
 800ba14:	2300      	movs	r3, #0
 800ba16:	220a      	movs	r2, #10
 800ba18:	4620      	mov	r0, r4
 800ba1a:	f000 f8d1 	bl	800bbc0 <__multadd>
 800ba1e:	4607      	mov	r7, r0
 800ba20:	e7f0      	b.n	800ba04 <_dtoa_r+0xb14>
 800ba22:	f1b9 0f00 	cmp.w	r9, #0
 800ba26:	9a00      	ldr	r2, [sp, #0]
 800ba28:	bfcc      	ite	gt
 800ba2a:	464d      	movgt	r5, r9
 800ba2c:	2501      	movle	r5, #1
 800ba2e:	4415      	add	r5, r2
 800ba30:	f04f 0800 	mov.w	r8, #0
 800ba34:	4659      	mov	r1, fp
 800ba36:	2201      	movs	r2, #1
 800ba38:	4620      	mov	r0, r4
 800ba3a:	9301      	str	r3, [sp, #4]
 800ba3c:	f000 fa70 	bl	800bf20 <__lshift>
 800ba40:	4631      	mov	r1, r6
 800ba42:	4683      	mov	fp, r0
 800ba44:	f000 fad8 	bl	800bff8 <__mcmp>
 800ba48:	2800      	cmp	r0, #0
 800ba4a:	dcb2      	bgt.n	800b9b2 <_dtoa_r+0xac2>
 800ba4c:	d102      	bne.n	800ba54 <_dtoa_r+0xb64>
 800ba4e:	9b01      	ldr	r3, [sp, #4]
 800ba50:	07db      	lsls	r3, r3, #31
 800ba52:	d4ae      	bmi.n	800b9b2 <_dtoa_r+0xac2>
 800ba54:	462b      	mov	r3, r5
 800ba56:	461d      	mov	r5, r3
 800ba58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ba5c:	2a30      	cmp	r2, #48	; 0x30
 800ba5e:	d0fa      	beq.n	800ba56 <_dtoa_r+0xb66>
 800ba60:	e6f7      	b.n	800b852 <_dtoa_r+0x962>
 800ba62:	9a00      	ldr	r2, [sp, #0]
 800ba64:	429a      	cmp	r2, r3
 800ba66:	d1a5      	bne.n	800b9b4 <_dtoa_r+0xac4>
 800ba68:	f10a 0a01 	add.w	sl, sl, #1
 800ba6c:	2331      	movs	r3, #49	; 0x31
 800ba6e:	e779      	b.n	800b964 <_dtoa_r+0xa74>
 800ba70:	4b13      	ldr	r3, [pc, #76]	; (800bac0 <_dtoa_r+0xbd0>)
 800ba72:	f7ff baaf 	b.w	800afd4 <_dtoa_r+0xe4>
 800ba76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	f47f aa86 	bne.w	800af8a <_dtoa_r+0x9a>
 800ba7e:	4b11      	ldr	r3, [pc, #68]	; (800bac4 <_dtoa_r+0xbd4>)
 800ba80:	f7ff baa8 	b.w	800afd4 <_dtoa_r+0xe4>
 800ba84:	f1b9 0f00 	cmp.w	r9, #0
 800ba88:	dc03      	bgt.n	800ba92 <_dtoa_r+0xba2>
 800ba8a:	9b05      	ldr	r3, [sp, #20]
 800ba8c:	2b02      	cmp	r3, #2
 800ba8e:	f73f aec9 	bgt.w	800b824 <_dtoa_r+0x934>
 800ba92:	9d00      	ldr	r5, [sp, #0]
 800ba94:	4631      	mov	r1, r6
 800ba96:	4658      	mov	r0, fp
 800ba98:	f7ff f99e 	bl	800add8 <quorem>
 800ba9c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800baa0:	f805 3b01 	strb.w	r3, [r5], #1
 800baa4:	9a00      	ldr	r2, [sp, #0]
 800baa6:	1aaa      	subs	r2, r5, r2
 800baa8:	4591      	cmp	r9, r2
 800baaa:	ddba      	ble.n	800ba22 <_dtoa_r+0xb32>
 800baac:	4659      	mov	r1, fp
 800baae:	2300      	movs	r3, #0
 800bab0:	220a      	movs	r2, #10
 800bab2:	4620      	mov	r0, r4
 800bab4:	f000 f884 	bl	800bbc0 <__multadd>
 800bab8:	4683      	mov	fp, r0
 800baba:	e7eb      	b.n	800ba94 <_dtoa_r+0xba4>
 800babc:	0800e383 	.word	0x0800e383
 800bac0:	0800e2dc 	.word	0x0800e2dc
 800bac4:	0800e300 	.word	0x0800e300

0800bac8 <_localeconv_r>:
 800bac8:	4800      	ldr	r0, [pc, #0]	; (800bacc <_localeconv_r+0x4>)
 800baca:	4770      	bx	lr
 800bacc:	200002d0 	.word	0x200002d0

0800bad0 <malloc>:
 800bad0:	4b02      	ldr	r3, [pc, #8]	; (800badc <malloc+0xc>)
 800bad2:	4601      	mov	r1, r0
 800bad4:	6818      	ldr	r0, [r3, #0]
 800bad6:	f000 bbef 	b.w	800c2b8 <_malloc_r>
 800bada:	bf00      	nop
 800badc:	2000017c 	.word	0x2000017c

0800bae0 <memcpy>:
 800bae0:	440a      	add	r2, r1
 800bae2:	4291      	cmp	r1, r2
 800bae4:	f100 33ff 	add.w	r3, r0, #4294967295
 800bae8:	d100      	bne.n	800baec <memcpy+0xc>
 800baea:	4770      	bx	lr
 800baec:	b510      	push	{r4, lr}
 800baee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800baf2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800baf6:	4291      	cmp	r1, r2
 800baf8:	d1f9      	bne.n	800baee <memcpy+0xe>
 800bafa:	bd10      	pop	{r4, pc}

0800bafc <_Balloc>:
 800bafc:	b570      	push	{r4, r5, r6, lr}
 800bafe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bb00:	4604      	mov	r4, r0
 800bb02:	460d      	mov	r5, r1
 800bb04:	b976      	cbnz	r6, 800bb24 <_Balloc+0x28>
 800bb06:	2010      	movs	r0, #16
 800bb08:	f7ff ffe2 	bl	800bad0 <malloc>
 800bb0c:	4602      	mov	r2, r0
 800bb0e:	6260      	str	r0, [r4, #36]	; 0x24
 800bb10:	b920      	cbnz	r0, 800bb1c <_Balloc+0x20>
 800bb12:	4b18      	ldr	r3, [pc, #96]	; (800bb74 <_Balloc+0x78>)
 800bb14:	4818      	ldr	r0, [pc, #96]	; (800bb78 <_Balloc+0x7c>)
 800bb16:	2166      	movs	r1, #102	; 0x66
 800bb18:	f000 fd94 	bl	800c644 <__assert_func>
 800bb1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bb20:	6006      	str	r6, [r0, #0]
 800bb22:	60c6      	str	r6, [r0, #12]
 800bb24:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bb26:	68f3      	ldr	r3, [r6, #12]
 800bb28:	b183      	cbz	r3, 800bb4c <_Balloc+0x50>
 800bb2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bb2c:	68db      	ldr	r3, [r3, #12]
 800bb2e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bb32:	b9b8      	cbnz	r0, 800bb64 <_Balloc+0x68>
 800bb34:	2101      	movs	r1, #1
 800bb36:	fa01 f605 	lsl.w	r6, r1, r5
 800bb3a:	1d72      	adds	r2, r6, #5
 800bb3c:	0092      	lsls	r2, r2, #2
 800bb3e:	4620      	mov	r0, r4
 800bb40:	f000 fb5a 	bl	800c1f8 <_calloc_r>
 800bb44:	b160      	cbz	r0, 800bb60 <_Balloc+0x64>
 800bb46:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bb4a:	e00e      	b.n	800bb6a <_Balloc+0x6e>
 800bb4c:	2221      	movs	r2, #33	; 0x21
 800bb4e:	2104      	movs	r1, #4
 800bb50:	4620      	mov	r0, r4
 800bb52:	f000 fb51 	bl	800c1f8 <_calloc_r>
 800bb56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bb58:	60f0      	str	r0, [r6, #12]
 800bb5a:	68db      	ldr	r3, [r3, #12]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d1e4      	bne.n	800bb2a <_Balloc+0x2e>
 800bb60:	2000      	movs	r0, #0
 800bb62:	bd70      	pop	{r4, r5, r6, pc}
 800bb64:	6802      	ldr	r2, [r0, #0]
 800bb66:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bb70:	e7f7      	b.n	800bb62 <_Balloc+0x66>
 800bb72:	bf00      	nop
 800bb74:	0800e30d 	.word	0x0800e30d
 800bb78:	0800e394 	.word	0x0800e394

0800bb7c <_Bfree>:
 800bb7c:	b570      	push	{r4, r5, r6, lr}
 800bb7e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bb80:	4605      	mov	r5, r0
 800bb82:	460c      	mov	r4, r1
 800bb84:	b976      	cbnz	r6, 800bba4 <_Bfree+0x28>
 800bb86:	2010      	movs	r0, #16
 800bb88:	f7ff ffa2 	bl	800bad0 <malloc>
 800bb8c:	4602      	mov	r2, r0
 800bb8e:	6268      	str	r0, [r5, #36]	; 0x24
 800bb90:	b920      	cbnz	r0, 800bb9c <_Bfree+0x20>
 800bb92:	4b09      	ldr	r3, [pc, #36]	; (800bbb8 <_Bfree+0x3c>)
 800bb94:	4809      	ldr	r0, [pc, #36]	; (800bbbc <_Bfree+0x40>)
 800bb96:	218a      	movs	r1, #138	; 0x8a
 800bb98:	f000 fd54 	bl	800c644 <__assert_func>
 800bb9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bba0:	6006      	str	r6, [r0, #0]
 800bba2:	60c6      	str	r6, [r0, #12]
 800bba4:	b13c      	cbz	r4, 800bbb6 <_Bfree+0x3a>
 800bba6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bba8:	6862      	ldr	r2, [r4, #4]
 800bbaa:	68db      	ldr	r3, [r3, #12]
 800bbac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bbb0:	6021      	str	r1, [r4, #0]
 800bbb2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bbb6:	bd70      	pop	{r4, r5, r6, pc}
 800bbb8:	0800e30d 	.word	0x0800e30d
 800bbbc:	0800e394 	.word	0x0800e394

0800bbc0 <__multadd>:
 800bbc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbc4:	690e      	ldr	r6, [r1, #16]
 800bbc6:	4607      	mov	r7, r0
 800bbc8:	4698      	mov	r8, r3
 800bbca:	460c      	mov	r4, r1
 800bbcc:	f101 0014 	add.w	r0, r1, #20
 800bbd0:	2300      	movs	r3, #0
 800bbd2:	6805      	ldr	r5, [r0, #0]
 800bbd4:	b2a9      	uxth	r1, r5
 800bbd6:	fb02 8101 	mla	r1, r2, r1, r8
 800bbda:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800bbde:	0c2d      	lsrs	r5, r5, #16
 800bbe0:	fb02 c505 	mla	r5, r2, r5, ip
 800bbe4:	b289      	uxth	r1, r1
 800bbe6:	3301      	adds	r3, #1
 800bbe8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800bbec:	429e      	cmp	r6, r3
 800bbee:	f840 1b04 	str.w	r1, [r0], #4
 800bbf2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800bbf6:	dcec      	bgt.n	800bbd2 <__multadd+0x12>
 800bbf8:	f1b8 0f00 	cmp.w	r8, #0
 800bbfc:	d022      	beq.n	800bc44 <__multadd+0x84>
 800bbfe:	68a3      	ldr	r3, [r4, #8]
 800bc00:	42b3      	cmp	r3, r6
 800bc02:	dc19      	bgt.n	800bc38 <__multadd+0x78>
 800bc04:	6861      	ldr	r1, [r4, #4]
 800bc06:	4638      	mov	r0, r7
 800bc08:	3101      	adds	r1, #1
 800bc0a:	f7ff ff77 	bl	800bafc <_Balloc>
 800bc0e:	4605      	mov	r5, r0
 800bc10:	b928      	cbnz	r0, 800bc1e <__multadd+0x5e>
 800bc12:	4602      	mov	r2, r0
 800bc14:	4b0d      	ldr	r3, [pc, #52]	; (800bc4c <__multadd+0x8c>)
 800bc16:	480e      	ldr	r0, [pc, #56]	; (800bc50 <__multadd+0x90>)
 800bc18:	21b5      	movs	r1, #181	; 0xb5
 800bc1a:	f000 fd13 	bl	800c644 <__assert_func>
 800bc1e:	6922      	ldr	r2, [r4, #16]
 800bc20:	3202      	adds	r2, #2
 800bc22:	f104 010c 	add.w	r1, r4, #12
 800bc26:	0092      	lsls	r2, r2, #2
 800bc28:	300c      	adds	r0, #12
 800bc2a:	f7ff ff59 	bl	800bae0 <memcpy>
 800bc2e:	4621      	mov	r1, r4
 800bc30:	4638      	mov	r0, r7
 800bc32:	f7ff ffa3 	bl	800bb7c <_Bfree>
 800bc36:	462c      	mov	r4, r5
 800bc38:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800bc3c:	3601      	adds	r6, #1
 800bc3e:	f8c3 8014 	str.w	r8, [r3, #20]
 800bc42:	6126      	str	r6, [r4, #16]
 800bc44:	4620      	mov	r0, r4
 800bc46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc4a:	bf00      	nop
 800bc4c:	0800e383 	.word	0x0800e383
 800bc50:	0800e394 	.word	0x0800e394

0800bc54 <__hi0bits>:
 800bc54:	0c03      	lsrs	r3, r0, #16
 800bc56:	041b      	lsls	r3, r3, #16
 800bc58:	b9d3      	cbnz	r3, 800bc90 <__hi0bits+0x3c>
 800bc5a:	0400      	lsls	r0, r0, #16
 800bc5c:	2310      	movs	r3, #16
 800bc5e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bc62:	bf04      	itt	eq
 800bc64:	0200      	lsleq	r0, r0, #8
 800bc66:	3308      	addeq	r3, #8
 800bc68:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bc6c:	bf04      	itt	eq
 800bc6e:	0100      	lsleq	r0, r0, #4
 800bc70:	3304      	addeq	r3, #4
 800bc72:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bc76:	bf04      	itt	eq
 800bc78:	0080      	lsleq	r0, r0, #2
 800bc7a:	3302      	addeq	r3, #2
 800bc7c:	2800      	cmp	r0, #0
 800bc7e:	db05      	blt.n	800bc8c <__hi0bits+0x38>
 800bc80:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bc84:	f103 0301 	add.w	r3, r3, #1
 800bc88:	bf08      	it	eq
 800bc8a:	2320      	moveq	r3, #32
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	4770      	bx	lr
 800bc90:	2300      	movs	r3, #0
 800bc92:	e7e4      	b.n	800bc5e <__hi0bits+0xa>

0800bc94 <__lo0bits>:
 800bc94:	6803      	ldr	r3, [r0, #0]
 800bc96:	f013 0207 	ands.w	r2, r3, #7
 800bc9a:	4601      	mov	r1, r0
 800bc9c:	d00b      	beq.n	800bcb6 <__lo0bits+0x22>
 800bc9e:	07da      	lsls	r2, r3, #31
 800bca0:	d424      	bmi.n	800bcec <__lo0bits+0x58>
 800bca2:	0798      	lsls	r0, r3, #30
 800bca4:	bf49      	itett	mi
 800bca6:	085b      	lsrmi	r3, r3, #1
 800bca8:	089b      	lsrpl	r3, r3, #2
 800bcaa:	2001      	movmi	r0, #1
 800bcac:	600b      	strmi	r3, [r1, #0]
 800bcae:	bf5c      	itt	pl
 800bcb0:	600b      	strpl	r3, [r1, #0]
 800bcb2:	2002      	movpl	r0, #2
 800bcb4:	4770      	bx	lr
 800bcb6:	b298      	uxth	r0, r3
 800bcb8:	b9b0      	cbnz	r0, 800bce8 <__lo0bits+0x54>
 800bcba:	0c1b      	lsrs	r3, r3, #16
 800bcbc:	2010      	movs	r0, #16
 800bcbe:	f013 0fff 	tst.w	r3, #255	; 0xff
 800bcc2:	bf04      	itt	eq
 800bcc4:	0a1b      	lsreq	r3, r3, #8
 800bcc6:	3008      	addeq	r0, #8
 800bcc8:	071a      	lsls	r2, r3, #28
 800bcca:	bf04      	itt	eq
 800bccc:	091b      	lsreq	r3, r3, #4
 800bcce:	3004      	addeq	r0, #4
 800bcd0:	079a      	lsls	r2, r3, #30
 800bcd2:	bf04      	itt	eq
 800bcd4:	089b      	lsreq	r3, r3, #2
 800bcd6:	3002      	addeq	r0, #2
 800bcd8:	07da      	lsls	r2, r3, #31
 800bcda:	d403      	bmi.n	800bce4 <__lo0bits+0x50>
 800bcdc:	085b      	lsrs	r3, r3, #1
 800bcde:	f100 0001 	add.w	r0, r0, #1
 800bce2:	d005      	beq.n	800bcf0 <__lo0bits+0x5c>
 800bce4:	600b      	str	r3, [r1, #0]
 800bce6:	4770      	bx	lr
 800bce8:	4610      	mov	r0, r2
 800bcea:	e7e8      	b.n	800bcbe <__lo0bits+0x2a>
 800bcec:	2000      	movs	r0, #0
 800bcee:	4770      	bx	lr
 800bcf0:	2020      	movs	r0, #32
 800bcf2:	4770      	bx	lr

0800bcf4 <__i2b>:
 800bcf4:	b510      	push	{r4, lr}
 800bcf6:	460c      	mov	r4, r1
 800bcf8:	2101      	movs	r1, #1
 800bcfa:	f7ff feff 	bl	800bafc <_Balloc>
 800bcfe:	4602      	mov	r2, r0
 800bd00:	b928      	cbnz	r0, 800bd0e <__i2b+0x1a>
 800bd02:	4b05      	ldr	r3, [pc, #20]	; (800bd18 <__i2b+0x24>)
 800bd04:	4805      	ldr	r0, [pc, #20]	; (800bd1c <__i2b+0x28>)
 800bd06:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800bd0a:	f000 fc9b 	bl	800c644 <__assert_func>
 800bd0e:	2301      	movs	r3, #1
 800bd10:	6144      	str	r4, [r0, #20]
 800bd12:	6103      	str	r3, [r0, #16]
 800bd14:	bd10      	pop	{r4, pc}
 800bd16:	bf00      	nop
 800bd18:	0800e383 	.word	0x0800e383
 800bd1c:	0800e394 	.word	0x0800e394

0800bd20 <__multiply>:
 800bd20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd24:	4614      	mov	r4, r2
 800bd26:	690a      	ldr	r2, [r1, #16]
 800bd28:	6923      	ldr	r3, [r4, #16]
 800bd2a:	429a      	cmp	r2, r3
 800bd2c:	bfb8      	it	lt
 800bd2e:	460b      	movlt	r3, r1
 800bd30:	460d      	mov	r5, r1
 800bd32:	bfbc      	itt	lt
 800bd34:	4625      	movlt	r5, r4
 800bd36:	461c      	movlt	r4, r3
 800bd38:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800bd3c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800bd40:	68ab      	ldr	r3, [r5, #8]
 800bd42:	6869      	ldr	r1, [r5, #4]
 800bd44:	eb0a 0709 	add.w	r7, sl, r9
 800bd48:	42bb      	cmp	r3, r7
 800bd4a:	b085      	sub	sp, #20
 800bd4c:	bfb8      	it	lt
 800bd4e:	3101      	addlt	r1, #1
 800bd50:	f7ff fed4 	bl	800bafc <_Balloc>
 800bd54:	b930      	cbnz	r0, 800bd64 <__multiply+0x44>
 800bd56:	4602      	mov	r2, r0
 800bd58:	4b42      	ldr	r3, [pc, #264]	; (800be64 <__multiply+0x144>)
 800bd5a:	4843      	ldr	r0, [pc, #268]	; (800be68 <__multiply+0x148>)
 800bd5c:	f240 115d 	movw	r1, #349	; 0x15d
 800bd60:	f000 fc70 	bl	800c644 <__assert_func>
 800bd64:	f100 0614 	add.w	r6, r0, #20
 800bd68:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800bd6c:	4633      	mov	r3, r6
 800bd6e:	2200      	movs	r2, #0
 800bd70:	4543      	cmp	r3, r8
 800bd72:	d31e      	bcc.n	800bdb2 <__multiply+0x92>
 800bd74:	f105 0c14 	add.w	ip, r5, #20
 800bd78:	f104 0314 	add.w	r3, r4, #20
 800bd7c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800bd80:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800bd84:	9202      	str	r2, [sp, #8]
 800bd86:	ebac 0205 	sub.w	r2, ip, r5
 800bd8a:	3a15      	subs	r2, #21
 800bd8c:	f022 0203 	bic.w	r2, r2, #3
 800bd90:	3204      	adds	r2, #4
 800bd92:	f105 0115 	add.w	r1, r5, #21
 800bd96:	458c      	cmp	ip, r1
 800bd98:	bf38      	it	cc
 800bd9a:	2204      	movcc	r2, #4
 800bd9c:	9201      	str	r2, [sp, #4]
 800bd9e:	9a02      	ldr	r2, [sp, #8]
 800bda0:	9303      	str	r3, [sp, #12]
 800bda2:	429a      	cmp	r2, r3
 800bda4:	d808      	bhi.n	800bdb8 <__multiply+0x98>
 800bda6:	2f00      	cmp	r7, #0
 800bda8:	dc55      	bgt.n	800be56 <__multiply+0x136>
 800bdaa:	6107      	str	r7, [r0, #16]
 800bdac:	b005      	add	sp, #20
 800bdae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdb2:	f843 2b04 	str.w	r2, [r3], #4
 800bdb6:	e7db      	b.n	800bd70 <__multiply+0x50>
 800bdb8:	f8b3 a000 	ldrh.w	sl, [r3]
 800bdbc:	f1ba 0f00 	cmp.w	sl, #0
 800bdc0:	d020      	beq.n	800be04 <__multiply+0xe4>
 800bdc2:	f105 0e14 	add.w	lr, r5, #20
 800bdc6:	46b1      	mov	r9, r6
 800bdc8:	2200      	movs	r2, #0
 800bdca:	f85e 4b04 	ldr.w	r4, [lr], #4
 800bdce:	f8d9 b000 	ldr.w	fp, [r9]
 800bdd2:	b2a1      	uxth	r1, r4
 800bdd4:	fa1f fb8b 	uxth.w	fp, fp
 800bdd8:	fb0a b101 	mla	r1, sl, r1, fp
 800bddc:	4411      	add	r1, r2
 800bdde:	f8d9 2000 	ldr.w	r2, [r9]
 800bde2:	0c24      	lsrs	r4, r4, #16
 800bde4:	0c12      	lsrs	r2, r2, #16
 800bde6:	fb0a 2404 	mla	r4, sl, r4, r2
 800bdea:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800bdee:	b289      	uxth	r1, r1
 800bdf0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800bdf4:	45f4      	cmp	ip, lr
 800bdf6:	f849 1b04 	str.w	r1, [r9], #4
 800bdfa:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800bdfe:	d8e4      	bhi.n	800bdca <__multiply+0xaa>
 800be00:	9901      	ldr	r1, [sp, #4]
 800be02:	5072      	str	r2, [r6, r1]
 800be04:	9a03      	ldr	r2, [sp, #12]
 800be06:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800be0a:	3304      	adds	r3, #4
 800be0c:	f1b9 0f00 	cmp.w	r9, #0
 800be10:	d01f      	beq.n	800be52 <__multiply+0x132>
 800be12:	6834      	ldr	r4, [r6, #0]
 800be14:	f105 0114 	add.w	r1, r5, #20
 800be18:	46b6      	mov	lr, r6
 800be1a:	f04f 0a00 	mov.w	sl, #0
 800be1e:	880a      	ldrh	r2, [r1, #0]
 800be20:	f8be b002 	ldrh.w	fp, [lr, #2]
 800be24:	fb09 b202 	mla	r2, r9, r2, fp
 800be28:	4492      	add	sl, r2
 800be2a:	b2a4      	uxth	r4, r4
 800be2c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800be30:	f84e 4b04 	str.w	r4, [lr], #4
 800be34:	f851 4b04 	ldr.w	r4, [r1], #4
 800be38:	f8be 2000 	ldrh.w	r2, [lr]
 800be3c:	0c24      	lsrs	r4, r4, #16
 800be3e:	fb09 2404 	mla	r4, r9, r4, r2
 800be42:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800be46:	458c      	cmp	ip, r1
 800be48:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800be4c:	d8e7      	bhi.n	800be1e <__multiply+0xfe>
 800be4e:	9a01      	ldr	r2, [sp, #4]
 800be50:	50b4      	str	r4, [r6, r2]
 800be52:	3604      	adds	r6, #4
 800be54:	e7a3      	b.n	800bd9e <__multiply+0x7e>
 800be56:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d1a5      	bne.n	800bdaa <__multiply+0x8a>
 800be5e:	3f01      	subs	r7, #1
 800be60:	e7a1      	b.n	800bda6 <__multiply+0x86>
 800be62:	bf00      	nop
 800be64:	0800e383 	.word	0x0800e383
 800be68:	0800e394 	.word	0x0800e394

0800be6c <__pow5mult>:
 800be6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be70:	4615      	mov	r5, r2
 800be72:	f012 0203 	ands.w	r2, r2, #3
 800be76:	4606      	mov	r6, r0
 800be78:	460f      	mov	r7, r1
 800be7a:	d007      	beq.n	800be8c <__pow5mult+0x20>
 800be7c:	4c25      	ldr	r4, [pc, #148]	; (800bf14 <__pow5mult+0xa8>)
 800be7e:	3a01      	subs	r2, #1
 800be80:	2300      	movs	r3, #0
 800be82:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800be86:	f7ff fe9b 	bl	800bbc0 <__multadd>
 800be8a:	4607      	mov	r7, r0
 800be8c:	10ad      	asrs	r5, r5, #2
 800be8e:	d03d      	beq.n	800bf0c <__pow5mult+0xa0>
 800be90:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800be92:	b97c      	cbnz	r4, 800beb4 <__pow5mult+0x48>
 800be94:	2010      	movs	r0, #16
 800be96:	f7ff fe1b 	bl	800bad0 <malloc>
 800be9a:	4602      	mov	r2, r0
 800be9c:	6270      	str	r0, [r6, #36]	; 0x24
 800be9e:	b928      	cbnz	r0, 800beac <__pow5mult+0x40>
 800bea0:	4b1d      	ldr	r3, [pc, #116]	; (800bf18 <__pow5mult+0xac>)
 800bea2:	481e      	ldr	r0, [pc, #120]	; (800bf1c <__pow5mult+0xb0>)
 800bea4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800bea8:	f000 fbcc 	bl	800c644 <__assert_func>
 800beac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800beb0:	6004      	str	r4, [r0, #0]
 800beb2:	60c4      	str	r4, [r0, #12]
 800beb4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800beb8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bebc:	b94c      	cbnz	r4, 800bed2 <__pow5mult+0x66>
 800bebe:	f240 2171 	movw	r1, #625	; 0x271
 800bec2:	4630      	mov	r0, r6
 800bec4:	f7ff ff16 	bl	800bcf4 <__i2b>
 800bec8:	2300      	movs	r3, #0
 800beca:	f8c8 0008 	str.w	r0, [r8, #8]
 800bece:	4604      	mov	r4, r0
 800bed0:	6003      	str	r3, [r0, #0]
 800bed2:	f04f 0900 	mov.w	r9, #0
 800bed6:	07eb      	lsls	r3, r5, #31
 800bed8:	d50a      	bpl.n	800bef0 <__pow5mult+0x84>
 800beda:	4639      	mov	r1, r7
 800bedc:	4622      	mov	r2, r4
 800bede:	4630      	mov	r0, r6
 800bee0:	f7ff ff1e 	bl	800bd20 <__multiply>
 800bee4:	4639      	mov	r1, r7
 800bee6:	4680      	mov	r8, r0
 800bee8:	4630      	mov	r0, r6
 800beea:	f7ff fe47 	bl	800bb7c <_Bfree>
 800beee:	4647      	mov	r7, r8
 800bef0:	106d      	asrs	r5, r5, #1
 800bef2:	d00b      	beq.n	800bf0c <__pow5mult+0xa0>
 800bef4:	6820      	ldr	r0, [r4, #0]
 800bef6:	b938      	cbnz	r0, 800bf08 <__pow5mult+0x9c>
 800bef8:	4622      	mov	r2, r4
 800befa:	4621      	mov	r1, r4
 800befc:	4630      	mov	r0, r6
 800befe:	f7ff ff0f 	bl	800bd20 <__multiply>
 800bf02:	6020      	str	r0, [r4, #0]
 800bf04:	f8c0 9000 	str.w	r9, [r0]
 800bf08:	4604      	mov	r4, r0
 800bf0a:	e7e4      	b.n	800bed6 <__pow5mult+0x6a>
 800bf0c:	4638      	mov	r0, r7
 800bf0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf12:	bf00      	nop
 800bf14:	0800e4e8 	.word	0x0800e4e8
 800bf18:	0800e30d 	.word	0x0800e30d
 800bf1c:	0800e394 	.word	0x0800e394

0800bf20 <__lshift>:
 800bf20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf24:	460c      	mov	r4, r1
 800bf26:	6849      	ldr	r1, [r1, #4]
 800bf28:	6923      	ldr	r3, [r4, #16]
 800bf2a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bf2e:	68a3      	ldr	r3, [r4, #8]
 800bf30:	4607      	mov	r7, r0
 800bf32:	4691      	mov	r9, r2
 800bf34:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bf38:	f108 0601 	add.w	r6, r8, #1
 800bf3c:	42b3      	cmp	r3, r6
 800bf3e:	db0b      	blt.n	800bf58 <__lshift+0x38>
 800bf40:	4638      	mov	r0, r7
 800bf42:	f7ff fddb 	bl	800bafc <_Balloc>
 800bf46:	4605      	mov	r5, r0
 800bf48:	b948      	cbnz	r0, 800bf5e <__lshift+0x3e>
 800bf4a:	4602      	mov	r2, r0
 800bf4c:	4b28      	ldr	r3, [pc, #160]	; (800bff0 <__lshift+0xd0>)
 800bf4e:	4829      	ldr	r0, [pc, #164]	; (800bff4 <__lshift+0xd4>)
 800bf50:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bf54:	f000 fb76 	bl	800c644 <__assert_func>
 800bf58:	3101      	adds	r1, #1
 800bf5a:	005b      	lsls	r3, r3, #1
 800bf5c:	e7ee      	b.n	800bf3c <__lshift+0x1c>
 800bf5e:	2300      	movs	r3, #0
 800bf60:	f100 0114 	add.w	r1, r0, #20
 800bf64:	f100 0210 	add.w	r2, r0, #16
 800bf68:	4618      	mov	r0, r3
 800bf6a:	4553      	cmp	r3, sl
 800bf6c:	db33      	blt.n	800bfd6 <__lshift+0xb6>
 800bf6e:	6920      	ldr	r0, [r4, #16]
 800bf70:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bf74:	f104 0314 	add.w	r3, r4, #20
 800bf78:	f019 091f 	ands.w	r9, r9, #31
 800bf7c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bf80:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bf84:	d02b      	beq.n	800bfde <__lshift+0xbe>
 800bf86:	f1c9 0e20 	rsb	lr, r9, #32
 800bf8a:	468a      	mov	sl, r1
 800bf8c:	2200      	movs	r2, #0
 800bf8e:	6818      	ldr	r0, [r3, #0]
 800bf90:	fa00 f009 	lsl.w	r0, r0, r9
 800bf94:	4302      	orrs	r2, r0
 800bf96:	f84a 2b04 	str.w	r2, [sl], #4
 800bf9a:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf9e:	459c      	cmp	ip, r3
 800bfa0:	fa22 f20e 	lsr.w	r2, r2, lr
 800bfa4:	d8f3      	bhi.n	800bf8e <__lshift+0x6e>
 800bfa6:	ebac 0304 	sub.w	r3, ip, r4
 800bfaa:	3b15      	subs	r3, #21
 800bfac:	f023 0303 	bic.w	r3, r3, #3
 800bfb0:	3304      	adds	r3, #4
 800bfb2:	f104 0015 	add.w	r0, r4, #21
 800bfb6:	4584      	cmp	ip, r0
 800bfb8:	bf38      	it	cc
 800bfba:	2304      	movcc	r3, #4
 800bfbc:	50ca      	str	r2, [r1, r3]
 800bfbe:	b10a      	cbz	r2, 800bfc4 <__lshift+0xa4>
 800bfc0:	f108 0602 	add.w	r6, r8, #2
 800bfc4:	3e01      	subs	r6, #1
 800bfc6:	4638      	mov	r0, r7
 800bfc8:	612e      	str	r6, [r5, #16]
 800bfca:	4621      	mov	r1, r4
 800bfcc:	f7ff fdd6 	bl	800bb7c <_Bfree>
 800bfd0:	4628      	mov	r0, r5
 800bfd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfd6:	f842 0f04 	str.w	r0, [r2, #4]!
 800bfda:	3301      	adds	r3, #1
 800bfdc:	e7c5      	b.n	800bf6a <__lshift+0x4a>
 800bfde:	3904      	subs	r1, #4
 800bfe0:	f853 2b04 	ldr.w	r2, [r3], #4
 800bfe4:	f841 2f04 	str.w	r2, [r1, #4]!
 800bfe8:	459c      	cmp	ip, r3
 800bfea:	d8f9      	bhi.n	800bfe0 <__lshift+0xc0>
 800bfec:	e7ea      	b.n	800bfc4 <__lshift+0xa4>
 800bfee:	bf00      	nop
 800bff0:	0800e383 	.word	0x0800e383
 800bff4:	0800e394 	.word	0x0800e394

0800bff8 <__mcmp>:
 800bff8:	b530      	push	{r4, r5, lr}
 800bffa:	6902      	ldr	r2, [r0, #16]
 800bffc:	690c      	ldr	r4, [r1, #16]
 800bffe:	1b12      	subs	r2, r2, r4
 800c000:	d10e      	bne.n	800c020 <__mcmp+0x28>
 800c002:	f100 0314 	add.w	r3, r0, #20
 800c006:	3114      	adds	r1, #20
 800c008:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c00c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c010:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c014:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c018:	42a5      	cmp	r5, r4
 800c01a:	d003      	beq.n	800c024 <__mcmp+0x2c>
 800c01c:	d305      	bcc.n	800c02a <__mcmp+0x32>
 800c01e:	2201      	movs	r2, #1
 800c020:	4610      	mov	r0, r2
 800c022:	bd30      	pop	{r4, r5, pc}
 800c024:	4283      	cmp	r3, r0
 800c026:	d3f3      	bcc.n	800c010 <__mcmp+0x18>
 800c028:	e7fa      	b.n	800c020 <__mcmp+0x28>
 800c02a:	f04f 32ff 	mov.w	r2, #4294967295
 800c02e:	e7f7      	b.n	800c020 <__mcmp+0x28>

0800c030 <__mdiff>:
 800c030:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c034:	460c      	mov	r4, r1
 800c036:	4606      	mov	r6, r0
 800c038:	4611      	mov	r1, r2
 800c03a:	4620      	mov	r0, r4
 800c03c:	4617      	mov	r7, r2
 800c03e:	f7ff ffdb 	bl	800bff8 <__mcmp>
 800c042:	1e05      	subs	r5, r0, #0
 800c044:	d110      	bne.n	800c068 <__mdiff+0x38>
 800c046:	4629      	mov	r1, r5
 800c048:	4630      	mov	r0, r6
 800c04a:	f7ff fd57 	bl	800bafc <_Balloc>
 800c04e:	b930      	cbnz	r0, 800c05e <__mdiff+0x2e>
 800c050:	4b39      	ldr	r3, [pc, #228]	; (800c138 <__mdiff+0x108>)
 800c052:	4602      	mov	r2, r0
 800c054:	f240 2132 	movw	r1, #562	; 0x232
 800c058:	4838      	ldr	r0, [pc, #224]	; (800c13c <__mdiff+0x10c>)
 800c05a:	f000 faf3 	bl	800c644 <__assert_func>
 800c05e:	2301      	movs	r3, #1
 800c060:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c064:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c068:	bfa4      	itt	ge
 800c06a:	463b      	movge	r3, r7
 800c06c:	4627      	movge	r7, r4
 800c06e:	4630      	mov	r0, r6
 800c070:	6879      	ldr	r1, [r7, #4]
 800c072:	bfa6      	itte	ge
 800c074:	461c      	movge	r4, r3
 800c076:	2500      	movge	r5, #0
 800c078:	2501      	movlt	r5, #1
 800c07a:	f7ff fd3f 	bl	800bafc <_Balloc>
 800c07e:	b920      	cbnz	r0, 800c08a <__mdiff+0x5a>
 800c080:	4b2d      	ldr	r3, [pc, #180]	; (800c138 <__mdiff+0x108>)
 800c082:	4602      	mov	r2, r0
 800c084:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c088:	e7e6      	b.n	800c058 <__mdiff+0x28>
 800c08a:	693e      	ldr	r6, [r7, #16]
 800c08c:	60c5      	str	r5, [r0, #12]
 800c08e:	6925      	ldr	r5, [r4, #16]
 800c090:	f107 0114 	add.w	r1, r7, #20
 800c094:	f104 0914 	add.w	r9, r4, #20
 800c098:	f100 0e14 	add.w	lr, r0, #20
 800c09c:	f107 0210 	add.w	r2, r7, #16
 800c0a0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800c0a4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800c0a8:	46f2      	mov	sl, lr
 800c0aa:	2700      	movs	r7, #0
 800c0ac:	f859 3b04 	ldr.w	r3, [r9], #4
 800c0b0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c0b4:	fa1f f883 	uxth.w	r8, r3
 800c0b8:	fa17 f78b 	uxtah	r7, r7, fp
 800c0bc:	0c1b      	lsrs	r3, r3, #16
 800c0be:	eba7 0808 	sub.w	r8, r7, r8
 800c0c2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c0c6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c0ca:	fa1f f888 	uxth.w	r8, r8
 800c0ce:	141f      	asrs	r7, r3, #16
 800c0d0:	454d      	cmp	r5, r9
 800c0d2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c0d6:	f84a 3b04 	str.w	r3, [sl], #4
 800c0da:	d8e7      	bhi.n	800c0ac <__mdiff+0x7c>
 800c0dc:	1b2b      	subs	r3, r5, r4
 800c0de:	3b15      	subs	r3, #21
 800c0e0:	f023 0303 	bic.w	r3, r3, #3
 800c0e4:	3304      	adds	r3, #4
 800c0e6:	3415      	adds	r4, #21
 800c0e8:	42a5      	cmp	r5, r4
 800c0ea:	bf38      	it	cc
 800c0ec:	2304      	movcc	r3, #4
 800c0ee:	4419      	add	r1, r3
 800c0f0:	4473      	add	r3, lr
 800c0f2:	469e      	mov	lr, r3
 800c0f4:	460d      	mov	r5, r1
 800c0f6:	4565      	cmp	r5, ip
 800c0f8:	d30e      	bcc.n	800c118 <__mdiff+0xe8>
 800c0fa:	f10c 0203 	add.w	r2, ip, #3
 800c0fe:	1a52      	subs	r2, r2, r1
 800c100:	f022 0203 	bic.w	r2, r2, #3
 800c104:	3903      	subs	r1, #3
 800c106:	458c      	cmp	ip, r1
 800c108:	bf38      	it	cc
 800c10a:	2200      	movcc	r2, #0
 800c10c:	441a      	add	r2, r3
 800c10e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c112:	b17b      	cbz	r3, 800c134 <__mdiff+0x104>
 800c114:	6106      	str	r6, [r0, #16]
 800c116:	e7a5      	b.n	800c064 <__mdiff+0x34>
 800c118:	f855 8b04 	ldr.w	r8, [r5], #4
 800c11c:	fa17 f488 	uxtah	r4, r7, r8
 800c120:	1422      	asrs	r2, r4, #16
 800c122:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800c126:	b2a4      	uxth	r4, r4
 800c128:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800c12c:	f84e 4b04 	str.w	r4, [lr], #4
 800c130:	1417      	asrs	r7, r2, #16
 800c132:	e7e0      	b.n	800c0f6 <__mdiff+0xc6>
 800c134:	3e01      	subs	r6, #1
 800c136:	e7ea      	b.n	800c10e <__mdiff+0xde>
 800c138:	0800e383 	.word	0x0800e383
 800c13c:	0800e394 	.word	0x0800e394

0800c140 <__d2b>:
 800c140:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c144:	4689      	mov	r9, r1
 800c146:	2101      	movs	r1, #1
 800c148:	ec57 6b10 	vmov	r6, r7, d0
 800c14c:	4690      	mov	r8, r2
 800c14e:	f7ff fcd5 	bl	800bafc <_Balloc>
 800c152:	4604      	mov	r4, r0
 800c154:	b930      	cbnz	r0, 800c164 <__d2b+0x24>
 800c156:	4602      	mov	r2, r0
 800c158:	4b25      	ldr	r3, [pc, #148]	; (800c1f0 <__d2b+0xb0>)
 800c15a:	4826      	ldr	r0, [pc, #152]	; (800c1f4 <__d2b+0xb4>)
 800c15c:	f240 310a 	movw	r1, #778	; 0x30a
 800c160:	f000 fa70 	bl	800c644 <__assert_func>
 800c164:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c168:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c16c:	bb35      	cbnz	r5, 800c1bc <__d2b+0x7c>
 800c16e:	2e00      	cmp	r6, #0
 800c170:	9301      	str	r3, [sp, #4]
 800c172:	d028      	beq.n	800c1c6 <__d2b+0x86>
 800c174:	4668      	mov	r0, sp
 800c176:	9600      	str	r6, [sp, #0]
 800c178:	f7ff fd8c 	bl	800bc94 <__lo0bits>
 800c17c:	9900      	ldr	r1, [sp, #0]
 800c17e:	b300      	cbz	r0, 800c1c2 <__d2b+0x82>
 800c180:	9a01      	ldr	r2, [sp, #4]
 800c182:	f1c0 0320 	rsb	r3, r0, #32
 800c186:	fa02 f303 	lsl.w	r3, r2, r3
 800c18a:	430b      	orrs	r3, r1
 800c18c:	40c2      	lsrs	r2, r0
 800c18e:	6163      	str	r3, [r4, #20]
 800c190:	9201      	str	r2, [sp, #4]
 800c192:	9b01      	ldr	r3, [sp, #4]
 800c194:	61a3      	str	r3, [r4, #24]
 800c196:	2b00      	cmp	r3, #0
 800c198:	bf14      	ite	ne
 800c19a:	2202      	movne	r2, #2
 800c19c:	2201      	moveq	r2, #1
 800c19e:	6122      	str	r2, [r4, #16]
 800c1a0:	b1d5      	cbz	r5, 800c1d8 <__d2b+0x98>
 800c1a2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c1a6:	4405      	add	r5, r0
 800c1a8:	f8c9 5000 	str.w	r5, [r9]
 800c1ac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c1b0:	f8c8 0000 	str.w	r0, [r8]
 800c1b4:	4620      	mov	r0, r4
 800c1b6:	b003      	add	sp, #12
 800c1b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c1bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c1c0:	e7d5      	b.n	800c16e <__d2b+0x2e>
 800c1c2:	6161      	str	r1, [r4, #20]
 800c1c4:	e7e5      	b.n	800c192 <__d2b+0x52>
 800c1c6:	a801      	add	r0, sp, #4
 800c1c8:	f7ff fd64 	bl	800bc94 <__lo0bits>
 800c1cc:	9b01      	ldr	r3, [sp, #4]
 800c1ce:	6163      	str	r3, [r4, #20]
 800c1d0:	2201      	movs	r2, #1
 800c1d2:	6122      	str	r2, [r4, #16]
 800c1d4:	3020      	adds	r0, #32
 800c1d6:	e7e3      	b.n	800c1a0 <__d2b+0x60>
 800c1d8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c1dc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c1e0:	f8c9 0000 	str.w	r0, [r9]
 800c1e4:	6918      	ldr	r0, [r3, #16]
 800c1e6:	f7ff fd35 	bl	800bc54 <__hi0bits>
 800c1ea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c1ee:	e7df      	b.n	800c1b0 <__d2b+0x70>
 800c1f0:	0800e383 	.word	0x0800e383
 800c1f4:	0800e394 	.word	0x0800e394

0800c1f8 <_calloc_r>:
 800c1f8:	b513      	push	{r0, r1, r4, lr}
 800c1fa:	434a      	muls	r2, r1
 800c1fc:	4611      	mov	r1, r2
 800c1fe:	9201      	str	r2, [sp, #4]
 800c200:	f000 f85a 	bl	800c2b8 <_malloc_r>
 800c204:	4604      	mov	r4, r0
 800c206:	b118      	cbz	r0, 800c210 <_calloc_r+0x18>
 800c208:	9a01      	ldr	r2, [sp, #4]
 800c20a:	2100      	movs	r1, #0
 800c20c:	f7fe f952 	bl	800a4b4 <memset>
 800c210:	4620      	mov	r0, r4
 800c212:	b002      	add	sp, #8
 800c214:	bd10      	pop	{r4, pc}
	...

0800c218 <_free_r>:
 800c218:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c21a:	2900      	cmp	r1, #0
 800c21c:	d048      	beq.n	800c2b0 <_free_r+0x98>
 800c21e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c222:	9001      	str	r0, [sp, #4]
 800c224:	2b00      	cmp	r3, #0
 800c226:	f1a1 0404 	sub.w	r4, r1, #4
 800c22a:	bfb8      	it	lt
 800c22c:	18e4      	addlt	r4, r4, r3
 800c22e:	f000 fa65 	bl	800c6fc <__malloc_lock>
 800c232:	4a20      	ldr	r2, [pc, #128]	; (800c2b4 <_free_r+0x9c>)
 800c234:	9801      	ldr	r0, [sp, #4]
 800c236:	6813      	ldr	r3, [r2, #0]
 800c238:	4615      	mov	r5, r2
 800c23a:	b933      	cbnz	r3, 800c24a <_free_r+0x32>
 800c23c:	6063      	str	r3, [r4, #4]
 800c23e:	6014      	str	r4, [r2, #0]
 800c240:	b003      	add	sp, #12
 800c242:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c246:	f000 ba5f 	b.w	800c708 <__malloc_unlock>
 800c24a:	42a3      	cmp	r3, r4
 800c24c:	d90b      	bls.n	800c266 <_free_r+0x4e>
 800c24e:	6821      	ldr	r1, [r4, #0]
 800c250:	1862      	adds	r2, r4, r1
 800c252:	4293      	cmp	r3, r2
 800c254:	bf04      	itt	eq
 800c256:	681a      	ldreq	r2, [r3, #0]
 800c258:	685b      	ldreq	r3, [r3, #4]
 800c25a:	6063      	str	r3, [r4, #4]
 800c25c:	bf04      	itt	eq
 800c25e:	1852      	addeq	r2, r2, r1
 800c260:	6022      	streq	r2, [r4, #0]
 800c262:	602c      	str	r4, [r5, #0]
 800c264:	e7ec      	b.n	800c240 <_free_r+0x28>
 800c266:	461a      	mov	r2, r3
 800c268:	685b      	ldr	r3, [r3, #4]
 800c26a:	b10b      	cbz	r3, 800c270 <_free_r+0x58>
 800c26c:	42a3      	cmp	r3, r4
 800c26e:	d9fa      	bls.n	800c266 <_free_r+0x4e>
 800c270:	6811      	ldr	r1, [r2, #0]
 800c272:	1855      	adds	r5, r2, r1
 800c274:	42a5      	cmp	r5, r4
 800c276:	d10b      	bne.n	800c290 <_free_r+0x78>
 800c278:	6824      	ldr	r4, [r4, #0]
 800c27a:	4421      	add	r1, r4
 800c27c:	1854      	adds	r4, r2, r1
 800c27e:	42a3      	cmp	r3, r4
 800c280:	6011      	str	r1, [r2, #0]
 800c282:	d1dd      	bne.n	800c240 <_free_r+0x28>
 800c284:	681c      	ldr	r4, [r3, #0]
 800c286:	685b      	ldr	r3, [r3, #4]
 800c288:	6053      	str	r3, [r2, #4]
 800c28a:	4421      	add	r1, r4
 800c28c:	6011      	str	r1, [r2, #0]
 800c28e:	e7d7      	b.n	800c240 <_free_r+0x28>
 800c290:	d902      	bls.n	800c298 <_free_r+0x80>
 800c292:	230c      	movs	r3, #12
 800c294:	6003      	str	r3, [r0, #0]
 800c296:	e7d3      	b.n	800c240 <_free_r+0x28>
 800c298:	6825      	ldr	r5, [r4, #0]
 800c29a:	1961      	adds	r1, r4, r5
 800c29c:	428b      	cmp	r3, r1
 800c29e:	bf04      	itt	eq
 800c2a0:	6819      	ldreq	r1, [r3, #0]
 800c2a2:	685b      	ldreq	r3, [r3, #4]
 800c2a4:	6063      	str	r3, [r4, #4]
 800c2a6:	bf04      	itt	eq
 800c2a8:	1949      	addeq	r1, r1, r5
 800c2aa:	6021      	streq	r1, [r4, #0]
 800c2ac:	6054      	str	r4, [r2, #4]
 800c2ae:	e7c7      	b.n	800c240 <_free_r+0x28>
 800c2b0:	b003      	add	sp, #12
 800c2b2:	bd30      	pop	{r4, r5, pc}
 800c2b4:	20000594 	.word	0x20000594

0800c2b8 <_malloc_r>:
 800c2b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2ba:	1ccd      	adds	r5, r1, #3
 800c2bc:	f025 0503 	bic.w	r5, r5, #3
 800c2c0:	3508      	adds	r5, #8
 800c2c2:	2d0c      	cmp	r5, #12
 800c2c4:	bf38      	it	cc
 800c2c6:	250c      	movcc	r5, #12
 800c2c8:	2d00      	cmp	r5, #0
 800c2ca:	4606      	mov	r6, r0
 800c2cc:	db01      	blt.n	800c2d2 <_malloc_r+0x1a>
 800c2ce:	42a9      	cmp	r1, r5
 800c2d0:	d903      	bls.n	800c2da <_malloc_r+0x22>
 800c2d2:	230c      	movs	r3, #12
 800c2d4:	6033      	str	r3, [r6, #0]
 800c2d6:	2000      	movs	r0, #0
 800c2d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c2da:	f000 fa0f 	bl	800c6fc <__malloc_lock>
 800c2de:	4921      	ldr	r1, [pc, #132]	; (800c364 <_malloc_r+0xac>)
 800c2e0:	680a      	ldr	r2, [r1, #0]
 800c2e2:	4614      	mov	r4, r2
 800c2e4:	b99c      	cbnz	r4, 800c30e <_malloc_r+0x56>
 800c2e6:	4f20      	ldr	r7, [pc, #128]	; (800c368 <_malloc_r+0xb0>)
 800c2e8:	683b      	ldr	r3, [r7, #0]
 800c2ea:	b923      	cbnz	r3, 800c2f6 <_malloc_r+0x3e>
 800c2ec:	4621      	mov	r1, r4
 800c2ee:	4630      	mov	r0, r6
 800c2f0:	f000 f998 	bl	800c624 <_sbrk_r>
 800c2f4:	6038      	str	r0, [r7, #0]
 800c2f6:	4629      	mov	r1, r5
 800c2f8:	4630      	mov	r0, r6
 800c2fa:	f000 f993 	bl	800c624 <_sbrk_r>
 800c2fe:	1c43      	adds	r3, r0, #1
 800c300:	d123      	bne.n	800c34a <_malloc_r+0x92>
 800c302:	230c      	movs	r3, #12
 800c304:	6033      	str	r3, [r6, #0]
 800c306:	4630      	mov	r0, r6
 800c308:	f000 f9fe 	bl	800c708 <__malloc_unlock>
 800c30c:	e7e3      	b.n	800c2d6 <_malloc_r+0x1e>
 800c30e:	6823      	ldr	r3, [r4, #0]
 800c310:	1b5b      	subs	r3, r3, r5
 800c312:	d417      	bmi.n	800c344 <_malloc_r+0x8c>
 800c314:	2b0b      	cmp	r3, #11
 800c316:	d903      	bls.n	800c320 <_malloc_r+0x68>
 800c318:	6023      	str	r3, [r4, #0]
 800c31a:	441c      	add	r4, r3
 800c31c:	6025      	str	r5, [r4, #0]
 800c31e:	e004      	b.n	800c32a <_malloc_r+0x72>
 800c320:	6863      	ldr	r3, [r4, #4]
 800c322:	42a2      	cmp	r2, r4
 800c324:	bf0c      	ite	eq
 800c326:	600b      	streq	r3, [r1, #0]
 800c328:	6053      	strne	r3, [r2, #4]
 800c32a:	4630      	mov	r0, r6
 800c32c:	f000 f9ec 	bl	800c708 <__malloc_unlock>
 800c330:	f104 000b 	add.w	r0, r4, #11
 800c334:	1d23      	adds	r3, r4, #4
 800c336:	f020 0007 	bic.w	r0, r0, #7
 800c33a:	1ac2      	subs	r2, r0, r3
 800c33c:	d0cc      	beq.n	800c2d8 <_malloc_r+0x20>
 800c33e:	1a1b      	subs	r3, r3, r0
 800c340:	50a3      	str	r3, [r4, r2]
 800c342:	e7c9      	b.n	800c2d8 <_malloc_r+0x20>
 800c344:	4622      	mov	r2, r4
 800c346:	6864      	ldr	r4, [r4, #4]
 800c348:	e7cc      	b.n	800c2e4 <_malloc_r+0x2c>
 800c34a:	1cc4      	adds	r4, r0, #3
 800c34c:	f024 0403 	bic.w	r4, r4, #3
 800c350:	42a0      	cmp	r0, r4
 800c352:	d0e3      	beq.n	800c31c <_malloc_r+0x64>
 800c354:	1a21      	subs	r1, r4, r0
 800c356:	4630      	mov	r0, r6
 800c358:	f000 f964 	bl	800c624 <_sbrk_r>
 800c35c:	3001      	adds	r0, #1
 800c35e:	d1dd      	bne.n	800c31c <_malloc_r+0x64>
 800c360:	e7cf      	b.n	800c302 <_malloc_r+0x4a>
 800c362:	bf00      	nop
 800c364:	20000594 	.word	0x20000594
 800c368:	20000598 	.word	0x20000598

0800c36c <__ssputs_r>:
 800c36c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c370:	688e      	ldr	r6, [r1, #8]
 800c372:	429e      	cmp	r6, r3
 800c374:	4682      	mov	sl, r0
 800c376:	460c      	mov	r4, r1
 800c378:	4690      	mov	r8, r2
 800c37a:	461f      	mov	r7, r3
 800c37c:	d838      	bhi.n	800c3f0 <__ssputs_r+0x84>
 800c37e:	898a      	ldrh	r2, [r1, #12]
 800c380:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c384:	d032      	beq.n	800c3ec <__ssputs_r+0x80>
 800c386:	6825      	ldr	r5, [r4, #0]
 800c388:	6909      	ldr	r1, [r1, #16]
 800c38a:	eba5 0901 	sub.w	r9, r5, r1
 800c38e:	6965      	ldr	r5, [r4, #20]
 800c390:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c394:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c398:	3301      	adds	r3, #1
 800c39a:	444b      	add	r3, r9
 800c39c:	106d      	asrs	r5, r5, #1
 800c39e:	429d      	cmp	r5, r3
 800c3a0:	bf38      	it	cc
 800c3a2:	461d      	movcc	r5, r3
 800c3a4:	0553      	lsls	r3, r2, #21
 800c3a6:	d531      	bpl.n	800c40c <__ssputs_r+0xa0>
 800c3a8:	4629      	mov	r1, r5
 800c3aa:	f7ff ff85 	bl	800c2b8 <_malloc_r>
 800c3ae:	4606      	mov	r6, r0
 800c3b0:	b950      	cbnz	r0, 800c3c8 <__ssputs_r+0x5c>
 800c3b2:	230c      	movs	r3, #12
 800c3b4:	f8ca 3000 	str.w	r3, [sl]
 800c3b8:	89a3      	ldrh	r3, [r4, #12]
 800c3ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c3be:	81a3      	strh	r3, [r4, #12]
 800c3c0:	f04f 30ff 	mov.w	r0, #4294967295
 800c3c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3c8:	6921      	ldr	r1, [r4, #16]
 800c3ca:	464a      	mov	r2, r9
 800c3cc:	f7ff fb88 	bl	800bae0 <memcpy>
 800c3d0:	89a3      	ldrh	r3, [r4, #12]
 800c3d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c3d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c3da:	81a3      	strh	r3, [r4, #12]
 800c3dc:	6126      	str	r6, [r4, #16]
 800c3de:	6165      	str	r5, [r4, #20]
 800c3e0:	444e      	add	r6, r9
 800c3e2:	eba5 0509 	sub.w	r5, r5, r9
 800c3e6:	6026      	str	r6, [r4, #0]
 800c3e8:	60a5      	str	r5, [r4, #8]
 800c3ea:	463e      	mov	r6, r7
 800c3ec:	42be      	cmp	r6, r7
 800c3ee:	d900      	bls.n	800c3f2 <__ssputs_r+0x86>
 800c3f0:	463e      	mov	r6, r7
 800c3f2:	4632      	mov	r2, r6
 800c3f4:	6820      	ldr	r0, [r4, #0]
 800c3f6:	4641      	mov	r1, r8
 800c3f8:	f000 f966 	bl	800c6c8 <memmove>
 800c3fc:	68a3      	ldr	r3, [r4, #8]
 800c3fe:	6822      	ldr	r2, [r4, #0]
 800c400:	1b9b      	subs	r3, r3, r6
 800c402:	4432      	add	r2, r6
 800c404:	60a3      	str	r3, [r4, #8]
 800c406:	6022      	str	r2, [r4, #0]
 800c408:	2000      	movs	r0, #0
 800c40a:	e7db      	b.n	800c3c4 <__ssputs_r+0x58>
 800c40c:	462a      	mov	r2, r5
 800c40e:	f000 f981 	bl	800c714 <_realloc_r>
 800c412:	4606      	mov	r6, r0
 800c414:	2800      	cmp	r0, #0
 800c416:	d1e1      	bne.n	800c3dc <__ssputs_r+0x70>
 800c418:	6921      	ldr	r1, [r4, #16]
 800c41a:	4650      	mov	r0, sl
 800c41c:	f7ff fefc 	bl	800c218 <_free_r>
 800c420:	e7c7      	b.n	800c3b2 <__ssputs_r+0x46>
	...

0800c424 <_svfiprintf_r>:
 800c424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c428:	4698      	mov	r8, r3
 800c42a:	898b      	ldrh	r3, [r1, #12]
 800c42c:	061b      	lsls	r3, r3, #24
 800c42e:	b09d      	sub	sp, #116	; 0x74
 800c430:	4607      	mov	r7, r0
 800c432:	460d      	mov	r5, r1
 800c434:	4614      	mov	r4, r2
 800c436:	d50e      	bpl.n	800c456 <_svfiprintf_r+0x32>
 800c438:	690b      	ldr	r3, [r1, #16]
 800c43a:	b963      	cbnz	r3, 800c456 <_svfiprintf_r+0x32>
 800c43c:	2140      	movs	r1, #64	; 0x40
 800c43e:	f7ff ff3b 	bl	800c2b8 <_malloc_r>
 800c442:	6028      	str	r0, [r5, #0]
 800c444:	6128      	str	r0, [r5, #16]
 800c446:	b920      	cbnz	r0, 800c452 <_svfiprintf_r+0x2e>
 800c448:	230c      	movs	r3, #12
 800c44a:	603b      	str	r3, [r7, #0]
 800c44c:	f04f 30ff 	mov.w	r0, #4294967295
 800c450:	e0d1      	b.n	800c5f6 <_svfiprintf_r+0x1d2>
 800c452:	2340      	movs	r3, #64	; 0x40
 800c454:	616b      	str	r3, [r5, #20]
 800c456:	2300      	movs	r3, #0
 800c458:	9309      	str	r3, [sp, #36]	; 0x24
 800c45a:	2320      	movs	r3, #32
 800c45c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c460:	f8cd 800c 	str.w	r8, [sp, #12]
 800c464:	2330      	movs	r3, #48	; 0x30
 800c466:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c610 <_svfiprintf_r+0x1ec>
 800c46a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c46e:	f04f 0901 	mov.w	r9, #1
 800c472:	4623      	mov	r3, r4
 800c474:	469a      	mov	sl, r3
 800c476:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c47a:	b10a      	cbz	r2, 800c480 <_svfiprintf_r+0x5c>
 800c47c:	2a25      	cmp	r2, #37	; 0x25
 800c47e:	d1f9      	bne.n	800c474 <_svfiprintf_r+0x50>
 800c480:	ebba 0b04 	subs.w	fp, sl, r4
 800c484:	d00b      	beq.n	800c49e <_svfiprintf_r+0x7a>
 800c486:	465b      	mov	r3, fp
 800c488:	4622      	mov	r2, r4
 800c48a:	4629      	mov	r1, r5
 800c48c:	4638      	mov	r0, r7
 800c48e:	f7ff ff6d 	bl	800c36c <__ssputs_r>
 800c492:	3001      	adds	r0, #1
 800c494:	f000 80aa 	beq.w	800c5ec <_svfiprintf_r+0x1c8>
 800c498:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c49a:	445a      	add	r2, fp
 800c49c:	9209      	str	r2, [sp, #36]	; 0x24
 800c49e:	f89a 3000 	ldrb.w	r3, [sl]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	f000 80a2 	beq.w	800c5ec <_svfiprintf_r+0x1c8>
 800c4a8:	2300      	movs	r3, #0
 800c4aa:	f04f 32ff 	mov.w	r2, #4294967295
 800c4ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c4b2:	f10a 0a01 	add.w	sl, sl, #1
 800c4b6:	9304      	str	r3, [sp, #16]
 800c4b8:	9307      	str	r3, [sp, #28]
 800c4ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c4be:	931a      	str	r3, [sp, #104]	; 0x68
 800c4c0:	4654      	mov	r4, sl
 800c4c2:	2205      	movs	r2, #5
 800c4c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4c8:	4851      	ldr	r0, [pc, #324]	; (800c610 <_svfiprintf_r+0x1ec>)
 800c4ca:	f7f3 fe89 	bl	80001e0 <memchr>
 800c4ce:	9a04      	ldr	r2, [sp, #16]
 800c4d0:	b9d8      	cbnz	r0, 800c50a <_svfiprintf_r+0xe6>
 800c4d2:	06d0      	lsls	r0, r2, #27
 800c4d4:	bf44      	itt	mi
 800c4d6:	2320      	movmi	r3, #32
 800c4d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c4dc:	0711      	lsls	r1, r2, #28
 800c4de:	bf44      	itt	mi
 800c4e0:	232b      	movmi	r3, #43	; 0x2b
 800c4e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c4e6:	f89a 3000 	ldrb.w	r3, [sl]
 800c4ea:	2b2a      	cmp	r3, #42	; 0x2a
 800c4ec:	d015      	beq.n	800c51a <_svfiprintf_r+0xf6>
 800c4ee:	9a07      	ldr	r2, [sp, #28]
 800c4f0:	4654      	mov	r4, sl
 800c4f2:	2000      	movs	r0, #0
 800c4f4:	f04f 0c0a 	mov.w	ip, #10
 800c4f8:	4621      	mov	r1, r4
 800c4fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c4fe:	3b30      	subs	r3, #48	; 0x30
 800c500:	2b09      	cmp	r3, #9
 800c502:	d94e      	bls.n	800c5a2 <_svfiprintf_r+0x17e>
 800c504:	b1b0      	cbz	r0, 800c534 <_svfiprintf_r+0x110>
 800c506:	9207      	str	r2, [sp, #28]
 800c508:	e014      	b.n	800c534 <_svfiprintf_r+0x110>
 800c50a:	eba0 0308 	sub.w	r3, r0, r8
 800c50e:	fa09 f303 	lsl.w	r3, r9, r3
 800c512:	4313      	orrs	r3, r2
 800c514:	9304      	str	r3, [sp, #16]
 800c516:	46a2      	mov	sl, r4
 800c518:	e7d2      	b.n	800c4c0 <_svfiprintf_r+0x9c>
 800c51a:	9b03      	ldr	r3, [sp, #12]
 800c51c:	1d19      	adds	r1, r3, #4
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	9103      	str	r1, [sp, #12]
 800c522:	2b00      	cmp	r3, #0
 800c524:	bfbb      	ittet	lt
 800c526:	425b      	neglt	r3, r3
 800c528:	f042 0202 	orrlt.w	r2, r2, #2
 800c52c:	9307      	strge	r3, [sp, #28]
 800c52e:	9307      	strlt	r3, [sp, #28]
 800c530:	bfb8      	it	lt
 800c532:	9204      	strlt	r2, [sp, #16]
 800c534:	7823      	ldrb	r3, [r4, #0]
 800c536:	2b2e      	cmp	r3, #46	; 0x2e
 800c538:	d10c      	bne.n	800c554 <_svfiprintf_r+0x130>
 800c53a:	7863      	ldrb	r3, [r4, #1]
 800c53c:	2b2a      	cmp	r3, #42	; 0x2a
 800c53e:	d135      	bne.n	800c5ac <_svfiprintf_r+0x188>
 800c540:	9b03      	ldr	r3, [sp, #12]
 800c542:	1d1a      	adds	r2, r3, #4
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	9203      	str	r2, [sp, #12]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	bfb8      	it	lt
 800c54c:	f04f 33ff 	movlt.w	r3, #4294967295
 800c550:	3402      	adds	r4, #2
 800c552:	9305      	str	r3, [sp, #20]
 800c554:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c620 <_svfiprintf_r+0x1fc>
 800c558:	7821      	ldrb	r1, [r4, #0]
 800c55a:	2203      	movs	r2, #3
 800c55c:	4650      	mov	r0, sl
 800c55e:	f7f3 fe3f 	bl	80001e0 <memchr>
 800c562:	b140      	cbz	r0, 800c576 <_svfiprintf_r+0x152>
 800c564:	2340      	movs	r3, #64	; 0x40
 800c566:	eba0 000a 	sub.w	r0, r0, sl
 800c56a:	fa03 f000 	lsl.w	r0, r3, r0
 800c56e:	9b04      	ldr	r3, [sp, #16]
 800c570:	4303      	orrs	r3, r0
 800c572:	3401      	adds	r4, #1
 800c574:	9304      	str	r3, [sp, #16]
 800c576:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c57a:	4826      	ldr	r0, [pc, #152]	; (800c614 <_svfiprintf_r+0x1f0>)
 800c57c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c580:	2206      	movs	r2, #6
 800c582:	f7f3 fe2d 	bl	80001e0 <memchr>
 800c586:	2800      	cmp	r0, #0
 800c588:	d038      	beq.n	800c5fc <_svfiprintf_r+0x1d8>
 800c58a:	4b23      	ldr	r3, [pc, #140]	; (800c618 <_svfiprintf_r+0x1f4>)
 800c58c:	bb1b      	cbnz	r3, 800c5d6 <_svfiprintf_r+0x1b2>
 800c58e:	9b03      	ldr	r3, [sp, #12]
 800c590:	3307      	adds	r3, #7
 800c592:	f023 0307 	bic.w	r3, r3, #7
 800c596:	3308      	adds	r3, #8
 800c598:	9303      	str	r3, [sp, #12]
 800c59a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c59c:	4433      	add	r3, r6
 800c59e:	9309      	str	r3, [sp, #36]	; 0x24
 800c5a0:	e767      	b.n	800c472 <_svfiprintf_r+0x4e>
 800c5a2:	fb0c 3202 	mla	r2, ip, r2, r3
 800c5a6:	460c      	mov	r4, r1
 800c5a8:	2001      	movs	r0, #1
 800c5aa:	e7a5      	b.n	800c4f8 <_svfiprintf_r+0xd4>
 800c5ac:	2300      	movs	r3, #0
 800c5ae:	3401      	adds	r4, #1
 800c5b0:	9305      	str	r3, [sp, #20]
 800c5b2:	4619      	mov	r1, r3
 800c5b4:	f04f 0c0a 	mov.w	ip, #10
 800c5b8:	4620      	mov	r0, r4
 800c5ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c5be:	3a30      	subs	r2, #48	; 0x30
 800c5c0:	2a09      	cmp	r2, #9
 800c5c2:	d903      	bls.n	800c5cc <_svfiprintf_r+0x1a8>
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d0c5      	beq.n	800c554 <_svfiprintf_r+0x130>
 800c5c8:	9105      	str	r1, [sp, #20]
 800c5ca:	e7c3      	b.n	800c554 <_svfiprintf_r+0x130>
 800c5cc:	fb0c 2101 	mla	r1, ip, r1, r2
 800c5d0:	4604      	mov	r4, r0
 800c5d2:	2301      	movs	r3, #1
 800c5d4:	e7f0      	b.n	800c5b8 <_svfiprintf_r+0x194>
 800c5d6:	ab03      	add	r3, sp, #12
 800c5d8:	9300      	str	r3, [sp, #0]
 800c5da:	462a      	mov	r2, r5
 800c5dc:	4b0f      	ldr	r3, [pc, #60]	; (800c61c <_svfiprintf_r+0x1f8>)
 800c5de:	a904      	add	r1, sp, #16
 800c5e0:	4638      	mov	r0, r7
 800c5e2:	f7fe f80f 	bl	800a604 <_printf_float>
 800c5e6:	1c42      	adds	r2, r0, #1
 800c5e8:	4606      	mov	r6, r0
 800c5ea:	d1d6      	bne.n	800c59a <_svfiprintf_r+0x176>
 800c5ec:	89ab      	ldrh	r3, [r5, #12]
 800c5ee:	065b      	lsls	r3, r3, #25
 800c5f0:	f53f af2c 	bmi.w	800c44c <_svfiprintf_r+0x28>
 800c5f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c5f6:	b01d      	add	sp, #116	; 0x74
 800c5f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5fc:	ab03      	add	r3, sp, #12
 800c5fe:	9300      	str	r3, [sp, #0]
 800c600:	462a      	mov	r2, r5
 800c602:	4b06      	ldr	r3, [pc, #24]	; (800c61c <_svfiprintf_r+0x1f8>)
 800c604:	a904      	add	r1, sp, #16
 800c606:	4638      	mov	r0, r7
 800c608:	f7fe faa0 	bl	800ab4c <_printf_i>
 800c60c:	e7eb      	b.n	800c5e6 <_svfiprintf_r+0x1c2>
 800c60e:	bf00      	nop
 800c610:	0800e4f4 	.word	0x0800e4f4
 800c614:	0800e4fe 	.word	0x0800e4fe
 800c618:	0800a605 	.word	0x0800a605
 800c61c:	0800c36d 	.word	0x0800c36d
 800c620:	0800e4fa 	.word	0x0800e4fa

0800c624 <_sbrk_r>:
 800c624:	b538      	push	{r3, r4, r5, lr}
 800c626:	4d06      	ldr	r5, [pc, #24]	; (800c640 <_sbrk_r+0x1c>)
 800c628:	2300      	movs	r3, #0
 800c62a:	4604      	mov	r4, r0
 800c62c:	4608      	mov	r0, r1
 800c62e:	602b      	str	r3, [r5, #0]
 800c630:	f7f5 f9cc 	bl	80019cc <_sbrk>
 800c634:	1c43      	adds	r3, r0, #1
 800c636:	d102      	bne.n	800c63e <_sbrk_r+0x1a>
 800c638:	682b      	ldr	r3, [r5, #0]
 800c63a:	b103      	cbz	r3, 800c63e <_sbrk_r+0x1a>
 800c63c:	6023      	str	r3, [r4, #0]
 800c63e:	bd38      	pop	{r3, r4, r5, pc}
 800c640:	2000161c 	.word	0x2000161c

0800c644 <__assert_func>:
 800c644:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c646:	4614      	mov	r4, r2
 800c648:	461a      	mov	r2, r3
 800c64a:	4b09      	ldr	r3, [pc, #36]	; (800c670 <__assert_func+0x2c>)
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	4605      	mov	r5, r0
 800c650:	68d8      	ldr	r0, [r3, #12]
 800c652:	b14c      	cbz	r4, 800c668 <__assert_func+0x24>
 800c654:	4b07      	ldr	r3, [pc, #28]	; (800c674 <__assert_func+0x30>)
 800c656:	9100      	str	r1, [sp, #0]
 800c658:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c65c:	4906      	ldr	r1, [pc, #24]	; (800c678 <__assert_func+0x34>)
 800c65e:	462b      	mov	r3, r5
 800c660:	f000 f80e 	bl	800c680 <fiprintf>
 800c664:	f000 faa4 	bl	800cbb0 <abort>
 800c668:	4b04      	ldr	r3, [pc, #16]	; (800c67c <__assert_func+0x38>)
 800c66a:	461c      	mov	r4, r3
 800c66c:	e7f3      	b.n	800c656 <__assert_func+0x12>
 800c66e:	bf00      	nop
 800c670:	2000017c 	.word	0x2000017c
 800c674:	0800e505 	.word	0x0800e505
 800c678:	0800e512 	.word	0x0800e512
 800c67c:	0800e540 	.word	0x0800e540

0800c680 <fiprintf>:
 800c680:	b40e      	push	{r1, r2, r3}
 800c682:	b503      	push	{r0, r1, lr}
 800c684:	4601      	mov	r1, r0
 800c686:	ab03      	add	r3, sp, #12
 800c688:	4805      	ldr	r0, [pc, #20]	; (800c6a0 <fiprintf+0x20>)
 800c68a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c68e:	6800      	ldr	r0, [r0, #0]
 800c690:	9301      	str	r3, [sp, #4]
 800c692:	f000 f88f 	bl	800c7b4 <_vfiprintf_r>
 800c696:	b002      	add	sp, #8
 800c698:	f85d eb04 	ldr.w	lr, [sp], #4
 800c69c:	b003      	add	sp, #12
 800c69e:	4770      	bx	lr
 800c6a0:	2000017c 	.word	0x2000017c

0800c6a4 <__ascii_mbtowc>:
 800c6a4:	b082      	sub	sp, #8
 800c6a6:	b901      	cbnz	r1, 800c6aa <__ascii_mbtowc+0x6>
 800c6a8:	a901      	add	r1, sp, #4
 800c6aa:	b142      	cbz	r2, 800c6be <__ascii_mbtowc+0x1a>
 800c6ac:	b14b      	cbz	r3, 800c6c2 <__ascii_mbtowc+0x1e>
 800c6ae:	7813      	ldrb	r3, [r2, #0]
 800c6b0:	600b      	str	r3, [r1, #0]
 800c6b2:	7812      	ldrb	r2, [r2, #0]
 800c6b4:	1e10      	subs	r0, r2, #0
 800c6b6:	bf18      	it	ne
 800c6b8:	2001      	movne	r0, #1
 800c6ba:	b002      	add	sp, #8
 800c6bc:	4770      	bx	lr
 800c6be:	4610      	mov	r0, r2
 800c6c0:	e7fb      	b.n	800c6ba <__ascii_mbtowc+0x16>
 800c6c2:	f06f 0001 	mvn.w	r0, #1
 800c6c6:	e7f8      	b.n	800c6ba <__ascii_mbtowc+0x16>

0800c6c8 <memmove>:
 800c6c8:	4288      	cmp	r0, r1
 800c6ca:	b510      	push	{r4, lr}
 800c6cc:	eb01 0402 	add.w	r4, r1, r2
 800c6d0:	d902      	bls.n	800c6d8 <memmove+0x10>
 800c6d2:	4284      	cmp	r4, r0
 800c6d4:	4623      	mov	r3, r4
 800c6d6:	d807      	bhi.n	800c6e8 <memmove+0x20>
 800c6d8:	1e43      	subs	r3, r0, #1
 800c6da:	42a1      	cmp	r1, r4
 800c6dc:	d008      	beq.n	800c6f0 <memmove+0x28>
 800c6de:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c6e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c6e6:	e7f8      	b.n	800c6da <memmove+0x12>
 800c6e8:	4402      	add	r2, r0
 800c6ea:	4601      	mov	r1, r0
 800c6ec:	428a      	cmp	r2, r1
 800c6ee:	d100      	bne.n	800c6f2 <memmove+0x2a>
 800c6f0:	bd10      	pop	{r4, pc}
 800c6f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c6f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c6fa:	e7f7      	b.n	800c6ec <memmove+0x24>

0800c6fc <__malloc_lock>:
 800c6fc:	4801      	ldr	r0, [pc, #4]	; (800c704 <__malloc_lock+0x8>)
 800c6fe:	f000 bc17 	b.w	800cf30 <__retarget_lock_acquire_recursive>
 800c702:	bf00      	nop
 800c704:	20001624 	.word	0x20001624

0800c708 <__malloc_unlock>:
 800c708:	4801      	ldr	r0, [pc, #4]	; (800c710 <__malloc_unlock+0x8>)
 800c70a:	f000 bc12 	b.w	800cf32 <__retarget_lock_release_recursive>
 800c70e:	bf00      	nop
 800c710:	20001624 	.word	0x20001624

0800c714 <_realloc_r>:
 800c714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c716:	4607      	mov	r7, r0
 800c718:	4614      	mov	r4, r2
 800c71a:	460e      	mov	r6, r1
 800c71c:	b921      	cbnz	r1, 800c728 <_realloc_r+0x14>
 800c71e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c722:	4611      	mov	r1, r2
 800c724:	f7ff bdc8 	b.w	800c2b8 <_malloc_r>
 800c728:	b922      	cbnz	r2, 800c734 <_realloc_r+0x20>
 800c72a:	f7ff fd75 	bl	800c218 <_free_r>
 800c72e:	4625      	mov	r5, r4
 800c730:	4628      	mov	r0, r5
 800c732:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c734:	f000 fc62 	bl	800cffc <_malloc_usable_size_r>
 800c738:	42a0      	cmp	r0, r4
 800c73a:	d20f      	bcs.n	800c75c <_realloc_r+0x48>
 800c73c:	4621      	mov	r1, r4
 800c73e:	4638      	mov	r0, r7
 800c740:	f7ff fdba 	bl	800c2b8 <_malloc_r>
 800c744:	4605      	mov	r5, r0
 800c746:	2800      	cmp	r0, #0
 800c748:	d0f2      	beq.n	800c730 <_realloc_r+0x1c>
 800c74a:	4631      	mov	r1, r6
 800c74c:	4622      	mov	r2, r4
 800c74e:	f7ff f9c7 	bl	800bae0 <memcpy>
 800c752:	4631      	mov	r1, r6
 800c754:	4638      	mov	r0, r7
 800c756:	f7ff fd5f 	bl	800c218 <_free_r>
 800c75a:	e7e9      	b.n	800c730 <_realloc_r+0x1c>
 800c75c:	4635      	mov	r5, r6
 800c75e:	e7e7      	b.n	800c730 <_realloc_r+0x1c>

0800c760 <__sfputc_r>:
 800c760:	6893      	ldr	r3, [r2, #8]
 800c762:	3b01      	subs	r3, #1
 800c764:	2b00      	cmp	r3, #0
 800c766:	b410      	push	{r4}
 800c768:	6093      	str	r3, [r2, #8]
 800c76a:	da08      	bge.n	800c77e <__sfputc_r+0x1e>
 800c76c:	6994      	ldr	r4, [r2, #24]
 800c76e:	42a3      	cmp	r3, r4
 800c770:	db01      	blt.n	800c776 <__sfputc_r+0x16>
 800c772:	290a      	cmp	r1, #10
 800c774:	d103      	bne.n	800c77e <__sfputc_r+0x1e>
 800c776:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c77a:	f000 b94b 	b.w	800ca14 <__swbuf_r>
 800c77e:	6813      	ldr	r3, [r2, #0]
 800c780:	1c58      	adds	r0, r3, #1
 800c782:	6010      	str	r0, [r2, #0]
 800c784:	7019      	strb	r1, [r3, #0]
 800c786:	4608      	mov	r0, r1
 800c788:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c78c:	4770      	bx	lr

0800c78e <__sfputs_r>:
 800c78e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c790:	4606      	mov	r6, r0
 800c792:	460f      	mov	r7, r1
 800c794:	4614      	mov	r4, r2
 800c796:	18d5      	adds	r5, r2, r3
 800c798:	42ac      	cmp	r4, r5
 800c79a:	d101      	bne.n	800c7a0 <__sfputs_r+0x12>
 800c79c:	2000      	movs	r0, #0
 800c79e:	e007      	b.n	800c7b0 <__sfputs_r+0x22>
 800c7a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7a4:	463a      	mov	r2, r7
 800c7a6:	4630      	mov	r0, r6
 800c7a8:	f7ff ffda 	bl	800c760 <__sfputc_r>
 800c7ac:	1c43      	adds	r3, r0, #1
 800c7ae:	d1f3      	bne.n	800c798 <__sfputs_r+0xa>
 800c7b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c7b4 <_vfiprintf_r>:
 800c7b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7b8:	460d      	mov	r5, r1
 800c7ba:	b09d      	sub	sp, #116	; 0x74
 800c7bc:	4614      	mov	r4, r2
 800c7be:	4698      	mov	r8, r3
 800c7c0:	4606      	mov	r6, r0
 800c7c2:	b118      	cbz	r0, 800c7cc <_vfiprintf_r+0x18>
 800c7c4:	6983      	ldr	r3, [r0, #24]
 800c7c6:	b90b      	cbnz	r3, 800c7cc <_vfiprintf_r+0x18>
 800c7c8:	f000 fb14 	bl	800cdf4 <__sinit>
 800c7cc:	4b89      	ldr	r3, [pc, #548]	; (800c9f4 <_vfiprintf_r+0x240>)
 800c7ce:	429d      	cmp	r5, r3
 800c7d0:	d11b      	bne.n	800c80a <_vfiprintf_r+0x56>
 800c7d2:	6875      	ldr	r5, [r6, #4]
 800c7d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c7d6:	07d9      	lsls	r1, r3, #31
 800c7d8:	d405      	bmi.n	800c7e6 <_vfiprintf_r+0x32>
 800c7da:	89ab      	ldrh	r3, [r5, #12]
 800c7dc:	059a      	lsls	r2, r3, #22
 800c7de:	d402      	bmi.n	800c7e6 <_vfiprintf_r+0x32>
 800c7e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c7e2:	f000 fba5 	bl	800cf30 <__retarget_lock_acquire_recursive>
 800c7e6:	89ab      	ldrh	r3, [r5, #12]
 800c7e8:	071b      	lsls	r3, r3, #28
 800c7ea:	d501      	bpl.n	800c7f0 <_vfiprintf_r+0x3c>
 800c7ec:	692b      	ldr	r3, [r5, #16]
 800c7ee:	b9eb      	cbnz	r3, 800c82c <_vfiprintf_r+0x78>
 800c7f0:	4629      	mov	r1, r5
 800c7f2:	4630      	mov	r0, r6
 800c7f4:	f000 f96e 	bl	800cad4 <__swsetup_r>
 800c7f8:	b1c0      	cbz	r0, 800c82c <_vfiprintf_r+0x78>
 800c7fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c7fc:	07dc      	lsls	r4, r3, #31
 800c7fe:	d50e      	bpl.n	800c81e <_vfiprintf_r+0x6a>
 800c800:	f04f 30ff 	mov.w	r0, #4294967295
 800c804:	b01d      	add	sp, #116	; 0x74
 800c806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c80a:	4b7b      	ldr	r3, [pc, #492]	; (800c9f8 <_vfiprintf_r+0x244>)
 800c80c:	429d      	cmp	r5, r3
 800c80e:	d101      	bne.n	800c814 <_vfiprintf_r+0x60>
 800c810:	68b5      	ldr	r5, [r6, #8]
 800c812:	e7df      	b.n	800c7d4 <_vfiprintf_r+0x20>
 800c814:	4b79      	ldr	r3, [pc, #484]	; (800c9fc <_vfiprintf_r+0x248>)
 800c816:	429d      	cmp	r5, r3
 800c818:	bf08      	it	eq
 800c81a:	68f5      	ldreq	r5, [r6, #12]
 800c81c:	e7da      	b.n	800c7d4 <_vfiprintf_r+0x20>
 800c81e:	89ab      	ldrh	r3, [r5, #12]
 800c820:	0598      	lsls	r0, r3, #22
 800c822:	d4ed      	bmi.n	800c800 <_vfiprintf_r+0x4c>
 800c824:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c826:	f000 fb84 	bl	800cf32 <__retarget_lock_release_recursive>
 800c82a:	e7e9      	b.n	800c800 <_vfiprintf_r+0x4c>
 800c82c:	2300      	movs	r3, #0
 800c82e:	9309      	str	r3, [sp, #36]	; 0x24
 800c830:	2320      	movs	r3, #32
 800c832:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c836:	f8cd 800c 	str.w	r8, [sp, #12]
 800c83a:	2330      	movs	r3, #48	; 0x30
 800c83c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ca00 <_vfiprintf_r+0x24c>
 800c840:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c844:	f04f 0901 	mov.w	r9, #1
 800c848:	4623      	mov	r3, r4
 800c84a:	469a      	mov	sl, r3
 800c84c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c850:	b10a      	cbz	r2, 800c856 <_vfiprintf_r+0xa2>
 800c852:	2a25      	cmp	r2, #37	; 0x25
 800c854:	d1f9      	bne.n	800c84a <_vfiprintf_r+0x96>
 800c856:	ebba 0b04 	subs.w	fp, sl, r4
 800c85a:	d00b      	beq.n	800c874 <_vfiprintf_r+0xc0>
 800c85c:	465b      	mov	r3, fp
 800c85e:	4622      	mov	r2, r4
 800c860:	4629      	mov	r1, r5
 800c862:	4630      	mov	r0, r6
 800c864:	f7ff ff93 	bl	800c78e <__sfputs_r>
 800c868:	3001      	adds	r0, #1
 800c86a:	f000 80aa 	beq.w	800c9c2 <_vfiprintf_r+0x20e>
 800c86e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c870:	445a      	add	r2, fp
 800c872:	9209      	str	r2, [sp, #36]	; 0x24
 800c874:	f89a 3000 	ldrb.w	r3, [sl]
 800c878:	2b00      	cmp	r3, #0
 800c87a:	f000 80a2 	beq.w	800c9c2 <_vfiprintf_r+0x20e>
 800c87e:	2300      	movs	r3, #0
 800c880:	f04f 32ff 	mov.w	r2, #4294967295
 800c884:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c888:	f10a 0a01 	add.w	sl, sl, #1
 800c88c:	9304      	str	r3, [sp, #16]
 800c88e:	9307      	str	r3, [sp, #28]
 800c890:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c894:	931a      	str	r3, [sp, #104]	; 0x68
 800c896:	4654      	mov	r4, sl
 800c898:	2205      	movs	r2, #5
 800c89a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c89e:	4858      	ldr	r0, [pc, #352]	; (800ca00 <_vfiprintf_r+0x24c>)
 800c8a0:	f7f3 fc9e 	bl	80001e0 <memchr>
 800c8a4:	9a04      	ldr	r2, [sp, #16]
 800c8a6:	b9d8      	cbnz	r0, 800c8e0 <_vfiprintf_r+0x12c>
 800c8a8:	06d1      	lsls	r1, r2, #27
 800c8aa:	bf44      	itt	mi
 800c8ac:	2320      	movmi	r3, #32
 800c8ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c8b2:	0713      	lsls	r3, r2, #28
 800c8b4:	bf44      	itt	mi
 800c8b6:	232b      	movmi	r3, #43	; 0x2b
 800c8b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c8bc:	f89a 3000 	ldrb.w	r3, [sl]
 800c8c0:	2b2a      	cmp	r3, #42	; 0x2a
 800c8c2:	d015      	beq.n	800c8f0 <_vfiprintf_r+0x13c>
 800c8c4:	9a07      	ldr	r2, [sp, #28]
 800c8c6:	4654      	mov	r4, sl
 800c8c8:	2000      	movs	r0, #0
 800c8ca:	f04f 0c0a 	mov.w	ip, #10
 800c8ce:	4621      	mov	r1, r4
 800c8d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c8d4:	3b30      	subs	r3, #48	; 0x30
 800c8d6:	2b09      	cmp	r3, #9
 800c8d8:	d94e      	bls.n	800c978 <_vfiprintf_r+0x1c4>
 800c8da:	b1b0      	cbz	r0, 800c90a <_vfiprintf_r+0x156>
 800c8dc:	9207      	str	r2, [sp, #28]
 800c8de:	e014      	b.n	800c90a <_vfiprintf_r+0x156>
 800c8e0:	eba0 0308 	sub.w	r3, r0, r8
 800c8e4:	fa09 f303 	lsl.w	r3, r9, r3
 800c8e8:	4313      	orrs	r3, r2
 800c8ea:	9304      	str	r3, [sp, #16]
 800c8ec:	46a2      	mov	sl, r4
 800c8ee:	e7d2      	b.n	800c896 <_vfiprintf_r+0xe2>
 800c8f0:	9b03      	ldr	r3, [sp, #12]
 800c8f2:	1d19      	adds	r1, r3, #4
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	9103      	str	r1, [sp, #12]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	bfbb      	ittet	lt
 800c8fc:	425b      	neglt	r3, r3
 800c8fe:	f042 0202 	orrlt.w	r2, r2, #2
 800c902:	9307      	strge	r3, [sp, #28]
 800c904:	9307      	strlt	r3, [sp, #28]
 800c906:	bfb8      	it	lt
 800c908:	9204      	strlt	r2, [sp, #16]
 800c90a:	7823      	ldrb	r3, [r4, #0]
 800c90c:	2b2e      	cmp	r3, #46	; 0x2e
 800c90e:	d10c      	bne.n	800c92a <_vfiprintf_r+0x176>
 800c910:	7863      	ldrb	r3, [r4, #1]
 800c912:	2b2a      	cmp	r3, #42	; 0x2a
 800c914:	d135      	bne.n	800c982 <_vfiprintf_r+0x1ce>
 800c916:	9b03      	ldr	r3, [sp, #12]
 800c918:	1d1a      	adds	r2, r3, #4
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	9203      	str	r2, [sp, #12]
 800c91e:	2b00      	cmp	r3, #0
 800c920:	bfb8      	it	lt
 800c922:	f04f 33ff 	movlt.w	r3, #4294967295
 800c926:	3402      	adds	r4, #2
 800c928:	9305      	str	r3, [sp, #20]
 800c92a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ca10 <_vfiprintf_r+0x25c>
 800c92e:	7821      	ldrb	r1, [r4, #0]
 800c930:	2203      	movs	r2, #3
 800c932:	4650      	mov	r0, sl
 800c934:	f7f3 fc54 	bl	80001e0 <memchr>
 800c938:	b140      	cbz	r0, 800c94c <_vfiprintf_r+0x198>
 800c93a:	2340      	movs	r3, #64	; 0x40
 800c93c:	eba0 000a 	sub.w	r0, r0, sl
 800c940:	fa03 f000 	lsl.w	r0, r3, r0
 800c944:	9b04      	ldr	r3, [sp, #16]
 800c946:	4303      	orrs	r3, r0
 800c948:	3401      	adds	r4, #1
 800c94a:	9304      	str	r3, [sp, #16]
 800c94c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c950:	482c      	ldr	r0, [pc, #176]	; (800ca04 <_vfiprintf_r+0x250>)
 800c952:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c956:	2206      	movs	r2, #6
 800c958:	f7f3 fc42 	bl	80001e0 <memchr>
 800c95c:	2800      	cmp	r0, #0
 800c95e:	d03f      	beq.n	800c9e0 <_vfiprintf_r+0x22c>
 800c960:	4b29      	ldr	r3, [pc, #164]	; (800ca08 <_vfiprintf_r+0x254>)
 800c962:	bb1b      	cbnz	r3, 800c9ac <_vfiprintf_r+0x1f8>
 800c964:	9b03      	ldr	r3, [sp, #12]
 800c966:	3307      	adds	r3, #7
 800c968:	f023 0307 	bic.w	r3, r3, #7
 800c96c:	3308      	adds	r3, #8
 800c96e:	9303      	str	r3, [sp, #12]
 800c970:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c972:	443b      	add	r3, r7
 800c974:	9309      	str	r3, [sp, #36]	; 0x24
 800c976:	e767      	b.n	800c848 <_vfiprintf_r+0x94>
 800c978:	fb0c 3202 	mla	r2, ip, r2, r3
 800c97c:	460c      	mov	r4, r1
 800c97e:	2001      	movs	r0, #1
 800c980:	e7a5      	b.n	800c8ce <_vfiprintf_r+0x11a>
 800c982:	2300      	movs	r3, #0
 800c984:	3401      	adds	r4, #1
 800c986:	9305      	str	r3, [sp, #20]
 800c988:	4619      	mov	r1, r3
 800c98a:	f04f 0c0a 	mov.w	ip, #10
 800c98e:	4620      	mov	r0, r4
 800c990:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c994:	3a30      	subs	r2, #48	; 0x30
 800c996:	2a09      	cmp	r2, #9
 800c998:	d903      	bls.n	800c9a2 <_vfiprintf_r+0x1ee>
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d0c5      	beq.n	800c92a <_vfiprintf_r+0x176>
 800c99e:	9105      	str	r1, [sp, #20]
 800c9a0:	e7c3      	b.n	800c92a <_vfiprintf_r+0x176>
 800c9a2:	fb0c 2101 	mla	r1, ip, r1, r2
 800c9a6:	4604      	mov	r4, r0
 800c9a8:	2301      	movs	r3, #1
 800c9aa:	e7f0      	b.n	800c98e <_vfiprintf_r+0x1da>
 800c9ac:	ab03      	add	r3, sp, #12
 800c9ae:	9300      	str	r3, [sp, #0]
 800c9b0:	462a      	mov	r2, r5
 800c9b2:	4b16      	ldr	r3, [pc, #88]	; (800ca0c <_vfiprintf_r+0x258>)
 800c9b4:	a904      	add	r1, sp, #16
 800c9b6:	4630      	mov	r0, r6
 800c9b8:	f7fd fe24 	bl	800a604 <_printf_float>
 800c9bc:	4607      	mov	r7, r0
 800c9be:	1c78      	adds	r0, r7, #1
 800c9c0:	d1d6      	bne.n	800c970 <_vfiprintf_r+0x1bc>
 800c9c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c9c4:	07d9      	lsls	r1, r3, #31
 800c9c6:	d405      	bmi.n	800c9d4 <_vfiprintf_r+0x220>
 800c9c8:	89ab      	ldrh	r3, [r5, #12]
 800c9ca:	059a      	lsls	r2, r3, #22
 800c9cc:	d402      	bmi.n	800c9d4 <_vfiprintf_r+0x220>
 800c9ce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c9d0:	f000 faaf 	bl	800cf32 <__retarget_lock_release_recursive>
 800c9d4:	89ab      	ldrh	r3, [r5, #12]
 800c9d6:	065b      	lsls	r3, r3, #25
 800c9d8:	f53f af12 	bmi.w	800c800 <_vfiprintf_r+0x4c>
 800c9dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c9de:	e711      	b.n	800c804 <_vfiprintf_r+0x50>
 800c9e0:	ab03      	add	r3, sp, #12
 800c9e2:	9300      	str	r3, [sp, #0]
 800c9e4:	462a      	mov	r2, r5
 800c9e6:	4b09      	ldr	r3, [pc, #36]	; (800ca0c <_vfiprintf_r+0x258>)
 800c9e8:	a904      	add	r1, sp, #16
 800c9ea:	4630      	mov	r0, r6
 800c9ec:	f7fe f8ae 	bl	800ab4c <_printf_i>
 800c9f0:	e7e4      	b.n	800c9bc <_vfiprintf_r+0x208>
 800c9f2:	bf00      	nop
 800c9f4:	0800e66c 	.word	0x0800e66c
 800c9f8:	0800e68c 	.word	0x0800e68c
 800c9fc:	0800e64c 	.word	0x0800e64c
 800ca00:	0800e4f4 	.word	0x0800e4f4
 800ca04:	0800e4fe 	.word	0x0800e4fe
 800ca08:	0800a605 	.word	0x0800a605
 800ca0c:	0800c78f 	.word	0x0800c78f
 800ca10:	0800e4fa 	.word	0x0800e4fa

0800ca14 <__swbuf_r>:
 800ca14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca16:	460e      	mov	r6, r1
 800ca18:	4614      	mov	r4, r2
 800ca1a:	4605      	mov	r5, r0
 800ca1c:	b118      	cbz	r0, 800ca26 <__swbuf_r+0x12>
 800ca1e:	6983      	ldr	r3, [r0, #24]
 800ca20:	b90b      	cbnz	r3, 800ca26 <__swbuf_r+0x12>
 800ca22:	f000 f9e7 	bl	800cdf4 <__sinit>
 800ca26:	4b21      	ldr	r3, [pc, #132]	; (800caac <__swbuf_r+0x98>)
 800ca28:	429c      	cmp	r4, r3
 800ca2a:	d12b      	bne.n	800ca84 <__swbuf_r+0x70>
 800ca2c:	686c      	ldr	r4, [r5, #4]
 800ca2e:	69a3      	ldr	r3, [r4, #24]
 800ca30:	60a3      	str	r3, [r4, #8]
 800ca32:	89a3      	ldrh	r3, [r4, #12]
 800ca34:	071a      	lsls	r2, r3, #28
 800ca36:	d52f      	bpl.n	800ca98 <__swbuf_r+0x84>
 800ca38:	6923      	ldr	r3, [r4, #16]
 800ca3a:	b36b      	cbz	r3, 800ca98 <__swbuf_r+0x84>
 800ca3c:	6923      	ldr	r3, [r4, #16]
 800ca3e:	6820      	ldr	r0, [r4, #0]
 800ca40:	1ac0      	subs	r0, r0, r3
 800ca42:	6963      	ldr	r3, [r4, #20]
 800ca44:	b2f6      	uxtb	r6, r6
 800ca46:	4283      	cmp	r3, r0
 800ca48:	4637      	mov	r7, r6
 800ca4a:	dc04      	bgt.n	800ca56 <__swbuf_r+0x42>
 800ca4c:	4621      	mov	r1, r4
 800ca4e:	4628      	mov	r0, r5
 800ca50:	f000 f93c 	bl	800cccc <_fflush_r>
 800ca54:	bb30      	cbnz	r0, 800caa4 <__swbuf_r+0x90>
 800ca56:	68a3      	ldr	r3, [r4, #8]
 800ca58:	3b01      	subs	r3, #1
 800ca5a:	60a3      	str	r3, [r4, #8]
 800ca5c:	6823      	ldr	r3, [r4, #0]
 800ca5e:	1c5a      	adds	r2, r3, #1
 800ca60:	6022      	str	r2, [r4, #0]
 800ca62:	701e      	strb	r6, [r3, #0]
 800ca64:	6963      	ldr	r3, [r4, #20]
 800ca66:	3001      	adds	r0, #1
 800ca68:	4283      	cmp	r3, r0
 800ca6a:	d004      	beq.n	800ca76 <__swbuf_r+0x62>
 800ca6c:	89a3      	ldrh	r3, [r4, #12]
 800ca6e:	07db      	lsls	r3, r3, #31
 800ca70:	d506      	bpl.n	800ca80 <__swbuf_r+0x6c>
 800ca72:	2e0a      	cmp	r6, #10
 800ca74:	d104      	bne.n	800ca80 <__swbuf_r+0x6c>
 800ca76:	4621      	mov	r1, r4
 800ca78:	4628      	mov	r0, r5
 800ca7a:	f000 f927 	bl	800cccc <_fflush_r>
 800ca7e:	b988      	cbnz	r0, 800caa4 <__swbuf_r+0x90>
 800ca80:	4638      	mov	r0, r7
 800ca82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca84:	4b0a      	ldr	r3, [pc, #40]	; (800cab0 <__swbuf_r+0x9c>)
 800ca86:	429c      	cmp	r4, r3
 800ca88:	d101      	bne.n	800ca8e <__swbuf_r+0x7a>
 800ca8a:	68ac      	ldr	r4, [r5, #8]
 800ca8c:	e7cf      	b.n	800ca2e <__swbuf_r+0x1a>
 800ca8e:	4b09      	ldr	r3, [pc, #36]	; (800cab4 <__swbuf_r+0xa0>)
 800ca90:	429c      	cmp	r4, r3
 800ca92:	bf08      	it	eq
 800ca94:	68ec      	ldreq	r4, [r5, #12]
 800ca96:	e7ca      	b.n	800ca2e <__swbuf_r+0x1a>
 800ca98:	4621      	mov	r1, r4
 800ca9a:	4628      	mov	r0, r5
 800ca9c:	f000 f81a 	bl	800cad4 <__swsetup_r>
 800caa0:	2800      	cmp	r0, #0
 800caa2:	d0cb      	beq.n	800ca3c <__swbuf_r+0x28>
 800caa4:	f04f 37ff 	mov.w	r7, #4294967295
 800caa8:	e7ea      	b.n	800ca80 <__swbuf_r+0x6c>
 800caaa:	bf00      	nop
 800caac:	0800e66c 	.word	0x0800e66c
 800cab0:	0800e68c 	.word	0x0800e68c
 800cab4:	0800e64c 	.word	0x0800e64c

0800cab8 <__ascii_wctomb>:
 800cab8:	b149      	cbz	r1, 800cace <__ascii_wctomb+0x16>
 800caba:	2aff      	cmp	r2, #255	; 0xff
 800cabc:	bf85      	ittet	hi
 800cabe:	238a      	movhi	r3, #138	; 0x8a
 800cac0:	6003      	strhi	r3, [r0, #0]
 800cac2:	700a      	strbls	r2, [r1, #0]
 800cac4:	f04f 30ff 	movhi.w	r0, #4294967295
 800cac8:	bf98      	it	ls
 800caca:	2001      	movls	r0, #1
 800cacc:	4770      	bx	lr
 800cace:	4608      	mov	r0, r1
 800cad0:	4770      	bx	lr
	...

0800cad4 <__swsetup_r>:
 800cad4:	4b32      	ldr	r3, [pc, #200]	; (800cba0 <__swsetup_r+0xcc>)
 800cad6:	b570      	push	{r4, r5, r6, lr}
 800cad8:	681d      	ldr	r5, [r3, #0]
 800cada:	4606      	mov	r6, r0
 800cadc:	460c      	mov	r4, r1
 800cade:	b125      	cbz	r5, 800caea <__swsetup_r+0x16>
 800cae0:	69ab      	ldr	r3, [r5, #24]
 800cae2:	b913      	cbnz	r3, 800caea <__swsetup_r+0x16>
 800cae4:	4628      	mov	r0, r5
 800cae6:	f000 f985 	bl	800cdf4 <__sinit>
 800caea:	4b2e      	ldr	r3, [pc, #184]	; (800cba4 <__swsetup_r+0xd0>)
 800caec:	429c      	cmp	r4, r3
 800caee:	d10f      	bne.n	800cb10 <__swsetup_r+0x3c>
 800caf0:	686c      	ldr	r4, [r5, #4]
 800caf2:	89a3      	ldrh	r3, [r4, #12]
 800caf4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800caf8:	0719      	lsls	r1, r3, #28
 800cafa:	d42c      	bmi.n	800cb56 <__swsetup_r+0x82>
 800cafc:	06dd      	lsls	r5, r3, #27
 800cafe:	d411      	bmi.n	800cb24 <__swsetup_r+0x50>
 800cb00:	2309      	movs	r3, #9
 800cb02:	6033      	str	r3, [r6, #0]
 800cb04:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cb08:	81a3      	strh	r3, [r4, #12]
 800cb0a:	f04f 30ff 	mov.w	r0, #4294967295
 800cb0e:	e03e      	b.n	800cb8e <__swsetup_r+0xba>
 800cb10:	4b25      	ldr	r3, [pc, #148]	; (800cba8 <__swsetup_r+0xd4>)
 800cb12:	429c      	cmp	r4, r3
 800cb14:	d101      	bne.n	800cb1a <__swsetup_r+0x46>
 800cb16:	68ac      	ldr	r4, [r5, #8]
 800cb18:	e7eb      	b.n	800caf2 <__swsetup_r+0x1e>
 800cb1a:	4b24      	ldr	r3, [pc, #144]	; (800cbac <__swsetup_r+0xd8>)
 800cb1c:	429c      	cmp	r4, r3
 800cb1e:	bf08      	it	eq
 800cb20:	68ec      	ldreq	r4, [r5, #12]
 800cb22:	e7e6      	b.n	800caf2 <__swsetup_r+0x1e>
 800cb24:	0758      	lsls	r0, r3, #29
 800cb26:	d512      	bpl.n	800cb4e <__swsetup_r+0x7a>
 800cb28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cb2a:	b141      	cbz	r1, 800cb3e <__swsetup_r+0x6a>
 800cb2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cb30:	4299      	cmp	r1, r3
 800cb32:	d002      	beq.n	800cb3a <__swsetup_r+0x66>
 800cb34:	4630      	mov	r0, r6
 800cb36:	f7ff fb6f 	bl	800c218 <_free_r>
 800cb3a:	2300      	movs	r3, #0
 800cb3c:	6363      	str	r3, [r4, #52]	; 0x34
 800cb3e:	89a3      	ldrh	r3, [r4, #12]
 800cb40:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cb44:	81a3      	strh	r3, [r4, #12]
 800cb46:	2300      	movs	r3, #0
 800cb48:	6063      	str	r3, [r4, #4]
 800cb4a:	6923      	ldr	r3, [r4, #16]
 800cb4c:	6023      	str	r3, [r4, #0]
 800cb4e:	89a3      	ldrh	r3, [r4, #12]
 800cb50:	f043 0308 	orr.w	r3, r3, #8
 800cb54:	81a3      	strh	r3, [r4, #12]
 800cb56:	6923      	ldr	r3, [r4, #16]
 800cb58:	b94b      	cbnz	r3, 800cb6e <__swsetup_r+0x9a>
 800cb5a:	89a3      	ldrh	r3, [r4, #12]
 800cb5c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cb60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cb64:	d003      	beq.n	800cb6e <__swsetup_r+0x9a>
 800cb66:	4621      	mov	r1, r4
 800cb68:	4630      	mov	r0, r6
 800cb6a:	f000 fa07 	bl	800cf7c <__smakebuf_r>
 800cb6e:	89a0      	ldrh	r0, [r4, #12]
 800cb70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cb74:	f010 0301 	ands.w	r3, r0, #1
 800cb78:	d00a      	beq.n	800cb90 <__swsetup_r+0xbc>
 800cb7a:	2300      	movs	r3, #0
 800cb7c:	60a3      	str	r3, [r4, #8]
 800cb7e:	6963      	ldr	r3, [r4, #20]
 800cb80:	425b      	negs	r3, r3
 800cb82:	61a3      	str	r3, [r4, #24]
 800cb84:	6923      	ldr	r3, [r4, #16]
 800cb86:	b943      	cbnz	r3, 800cb9a <__swsetup_r+0xc6>
 800cb88:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cb8c:	d1ba      	bne.n	800cb04 <__swsetup_r+0x30>
 800cb8e:	bd70      	pop	{r4, r5, r6, pc}
 800cb90:	0781      	lsls	r1, r0, #30
 800cb92:	bf58      	it	pl
 800cb94:	6963      	ldrpl	r3, [r4, #20]
 800cb96:	60a3      	str	r3, [r4, #8]
 800cb98:	e7f4      	b.n	800cb84 <__swsetup_r+0xb0>
 800cb9a:	2000      	movs	r0, #0
 800cb9c:	e7f7      	b.n	800cb8e <__swsetup_r+0xba>
 800cb9e:	bf00      	nop
 800cba0:	2000017c 	.word	0x2000017c
 800cba4:	0800e66c 	.word	0x0800e66c
 800cba8:	0800e68c 	.word	0x0800e68c
 800cbac:	0800e64c 	.word	0x0800e64c

0800cbb0 <abort>:
 800cbb0:	b508      	push	{r3, lr}
 800cbb2:	2006      	movs	r0, #6
 800cbb4:	f000 fa52 	bl	800d05c <raise>
 800cbb8:	2001      	movs	r0, #1
 800cbba:	f7f4 fe8f 	bl	80018dc <_exit>
	...

0800cbc0 <__sflush_r>:
 800cbc0:	898a      	ldrh	r2, [r1, #12]
 800cbc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbc6:	4605      	mov	r5, r0
 800cbc8:	0710      	lsls	r0, r2, #28
 800cbca:	460c      	mov	r4, r1
 800cbcc:	d458      	bmi.n	800cc80 <__sflush_r+0xc0>
 800cbce:	684b      	ldr	r3, [r1, #4]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	dc05      	bgt.n	800cbe0 <__sflush_r+0x20>
 800cbd4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	dc02      	bgt.n	800cbe0 <__sflush_r+0x20>
 800cbda:	2000      	movs	r0, #0
 800cbdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbe0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cbe2:	2e00      	cmp	r6, #0
 800cbe4:	d0f9      	beq.n	800cbda <__sflush_r+0x1a>
 800cbe6:	2300      	movs	r3, #0
 800cbe8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cbec:	682f      	ldr	r7, [r5, #0]
 800cbee:	602b      	str	r3, [r5, #0]
 800cbf0:	d032      	beq.n	800cc58 <__sflush_r+0x98>
 800cbf2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cbf4:	89a3      	ldrh	r3, [r4, #12]
 800cbf6:	075a      	lsls	r2, r3, #29
 800cbf8:	d505      	bpl.n	800cc06 <__sflush_r+0x46>
 800cbfa:	6863      	ldr	r3, [r4, #4]
 800cbfc:	1ac0      	subs	r0, r0, r3
 800cbfe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cc00:	b10b      	cbz	r3, 800cc06 <__sflush_r+0x46>
 800cc02:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cc04:	1ac0      	subs	r0, r0, r3
 800cc06:	2300      	movs	r3, #0
 800cc08:	4602      	mov	r2, r0
 800cc0a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cc0c:	6a21      	ldr	r1, [r4, #32]
 800cc0e:	4628      	mov	r0, r5
 800cc10:	47b0      	blx	r6
 800cc12:	1c43      	adds	r3, r0, #1
 800cc14:	89a3      	ldrh	r3, [r4, #12]
 800cc16:	d106      	bne.n	800cc26 <__sflush_r+0x66>
 800cc18:	6829      	ldr	r1, [r5, #0]
 800cc1a:	291d      	cmp	r1, #29
 800cc1c:	d82c      	bhi.n	800cc78 <__sflush_r+0xb8>
 800cc1e:	4a2a      	ldr	r2, [pc, #168]	; (800ccc8 <__sflush_r+0x108>)
 800cc20:	40ca      	lsrs	r2, r1
 800cc22:	07d6      	lsls	r6, r2, #31
 800cc24:	d528      	bpl.n	800cc78 <__sflush_r+0xb8>
 800cc26:	2200      	movs	r2, #0
 800cc28:	6062      	str	r2, [r4, #4]
 800cc2a:	04d9      	lsls	r1, r3, #19
 800cc2c:	6922      	ldr	r2, [r4, #16]
 800cc2e:	6022      	str	r2, [r4, #0]
 800cc30:	d504      	bpl.n	800cc3c <__sflush_r+0x7c>
 800cc32:	1c42      	adds	r2, r0, #1
 800cc34:	d101      	bne.n	800cc3a <__sflush_r+0x7a>
 800cc36:	682b      	ldr	r3, [r5, #0]
 800cc38:	b903      	cbnz	r3, 800cc3c <__sflush_r+0x7c>
 800cc3a:	6560      	str	r0, [r4, #84]	; 0x54
 800cc3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cc3e:	602f      	str	r7, [r5, #0]
 800cc40:	2900      	cmp	r1, #0
 800cc42:	d0ca      	beq.n	800cbda <__sflush_r+0x1a>
 800cc44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cc48:	4299      	cmp	r1, r3
 800cc4a:	d002      	beq.n	800cc52 <__sflush_r+0x92>
 800cc4c:	4628      	mov	r0, r5
 800cc4e:	f7ff fae3 	bl	800c218 <_free_r>
 800cc52:	2000      	movs	r0, #0
 800cc54:	6360      	str	r0, [r4, #52]	; 0x34
 800cc56:	e7c1      	b.n	800cbdc <__sflush_r+0x1c>
 800cc58:	6a21      	ldr	r1, [r4, #32]
 800cc5a:	2301      	movs	r3, #1
 800cc5c:	4628      	mov	r0, r5
 800cc5e:	47b0      	blx	r6
 800cc60:	1c41      	adds	r1, r0, #1
 800cc62:	d1c7      	bne.n	800cbf4 <__sflush_r+0x34>
 800cc64:	682b      	ldr	r3, [r5, #0]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d0c4      	beq.n	800cbf4 <__sflush_r+0x34>
 800cc6a:	2b1d      	cmp	r3, #29
 800cc6c:	d001      	beq.n	800cc72 <__sflush_r+0xb2>
 800cc6e:	2b16      	cmp	r3, #22
 800cc70:	d101      	bne.n	800cc76 <__sflush_r+0xb6>
 800cc72:	602f      	str	r7, [r5, #0]
 800cc74:	e7b1      	b.n	800cbda <__sflush_r+0x1a>
 800cc76:	89a3      	ldrh	r3, [r4, #12]
 800cc78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc7c:	81a3      	strh	r3, [r4, #12]
 800cc7e:	e7ad      	b.n	800cbdc <__sflush_r+0x1c>
 800cc80:	690f      	ldr	r7, [r1, #16]
 800cc82:	2f00      	cmp	r7, #0
 800cc84:	d0a9      	beq.n	800cbda <__sflush_r+0x1a>
 800cc86:	0793      	lsls	r3, r2, #30
 800cc88:	680e      	ldr	r6, [r1, #0]
 800cc8a:	bf08      	it	eq
 800cc8c:	694b      	ldreq	r3, [r1, #20]
 800cc8e:	600f      	str	r7, [r1, #0]
 800cc90:	bf18      	it	ne
 800cc92:	2300      	movne	r3, #0
 800cc94:	eba6 0807 	sub.w	r8, r6, r7
 800cc98:	608b      	str	r3, [r1, #8]
 800cc9a:	f1b8 0f00 	cmp.w	r8, #0
 800cc9e:	dd9c      	ble.n	800cbda <__sflush_r+0x1a>
 800cca0:	6a21      	ldr	r1, [r4, #32]
 800cca2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cca4:	4643      	mov	r3, r8
 800cca6:	463a      	mov	r2, r7
 800cca8:	4628      	mov	r0, r5
 800ccaa:	47b0      	blx	r6
 800ccac:	2800      	cmp	r0, #0
 800ccae:	dc06      	bgt.n	800ccbe <__sflush_r+0xfe>
 800ccb0:	89a3      	ldrh	r3, [r4, #12]
 800ccb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ccb6:	81a3      	strh	r3, [r4, #12]
 800ccb8:	f04f 30ff 	mov.w	r0, #4294967295
 800ccbc:	e78e      	b.n	800cbdc <__sflush_r+0x1c>
 800ccbe:	4407      	add	r7, r0
 800ccc0:	eba8 0800 	sub.w	r8, r8, r0
 800ccc4:	e7e9      	b.n	800cc9a <__sflush_r+0xda>
 800ccc6:	bf00      	nop
 800ccc8:	20400001 	.word	0x20400001

0800cccc <_fflush_r>:
 800cccc:	b538      	push	{r3, r4, r5, lr}
 800ccce:	690b      	ldr	r3, [r1, #16]
 800ccd0:	4605      	mov	r5, r0
 800ccd2:	460c      	mov	r4, r1
 800ccd4:	b913      	cbnz	r3, 800ccdc <_fflush_r+0x10>
 800ccd6:	2500      	movs	r5, #0
 800ccd8:	4628      	mov	r0, r5
 800ccda:	bd38      	pop	{r3, r4, r5, pc}
 800ccdc:	b118      	cbz	r0, 800cce6 <_fflush_r+0x1a>
 800ccde:	6983      	ldr	r3, [r0, #24]
 800cce0:	b90b      	cbnz	r3, 800cce6 <_fflush_r+0x1a>
 800cce2:	f000 f887 	bl	800cdf4 <__sinit>
 800cce6:	4b14      	ldr	r3, [pc, #80]	; (800cd38 <_fflush_r+0x6c>)
 800cce8:	429c      	cmp	r4, r3
 800ccea:	d11b      	bne.n	800cd24 <_fflush_r+0x58>
 800ccec:	686c      	ldr	r4, [r5, #4]
 800ccee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d0ef      	beq.n	800ccd6 <_fflush_r+0xa>
 800ccf6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ccf8:	07d0      	lsls	r0, r2, #31
 800ccfa:	d404      	bmi.n	800cd06 <_fflush_r+0x3a>
 800ccfc:	0599      	lsls	r1, r3, #22
 800ccfe:	d402      	bmi.n	800cd06 <_fflush_r+0x3a>
 800cd00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cd02:	f000 f915 	bl	800cf30 <__retarget_lock_acquire_recursive>
 800cd06:	4628      	mov	r0, r5
 800cd08:	4621      	mov	r1, r4
 800cd0a:	f7ff ff59 	bl	800cbc0 <__sflush_r>
 800cd0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cd10:	07da      	lsls	r2, r3, #31
 800cd12:	4605      	mov	r5, r0
 800cd14:	d4e0      	bmi.n	800ccd8 <_fflush_r+0xc>
 800cd16:	89a3      	ldrh	r3, [r4, #12]
 800cd18:	059b      	lsls	r3, r3, #22
 800cd1a:	d4dd      	bmi.n	800ccd8 <_fflush_r+0xc>
 800cd1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cd1e:	f000 f908 	bl	800cf32 <__retarget_lock_release_recursive>
 800cd22:	e7d9      	b.n	800ccd8 <_fflush_r+0xc>
 800cd24:	4b05      	ldr	r3, [pc, #20]	; (800cd3c <_fflush_r+0x70>)
 800cd26:	429c      	cmp	r4, r3
 800cd28:	d101      	bne.n	800cd2e <_fflush_r+0x62>
 800cd2a:	68ac      	ldr	r4, [r5, #8]
 800cd2c:	e7df      	b.n	800ccee <_fflush_r+0x22>
 800cd2e:	4b04      	ldr	r3, [pc, #16]	; (800cd40 <_fflush_r+0x74>)
 800cd30:	429c      	cmp	r4, r3
 800cd32:	bf08      	it	eq
 800cd34:	68ec      	ldreq	r4, [r5, #12]
 800cd36:	e7da      	b.n	800ccee <_fflush_r+0x22>
 800cd38:	0800e66c 	.word	0x0800e66c
 800cd3c:	0800e68c 	.word	0x0800e68c
 800cd40:	0800e64c 	.word	0x0800e64c

0800cd44 <std>:
 800cd44:	2300      	movs	r3, #0
 800cd46:	b510      	push	{r4, lr}
 800cd48:	4604      	mov	r4, r0
 800cd4a:	e9c0 3300 	strd	r3, r3, [r0]
 800cd4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cd52:	6083      	str	r3, [r0, #8]
 800cd54:	8181      	strh	r1, [r0, #12]
 800cd56:	6643      	str	r3, [r0, #100]	; 0x64
 800cd58:	81c2      	strh	r2, [r0, #14]
 800cd5a:	6183      	str	r3, [r0, #24]
 800cd5c:	4619      	mov	r1, r3
 800cd5e:	2208      	movs	r2, #8
 800cd60:	305c      	adds	r0, #92	; 0x5c
 800cd62:	f7fd fba7 	bl	800a4b4 <memset>
 800cd66:	4b05      	ldr	r3, [pc, #20]	; (800cd7c <std+0x38>)
 800cd68:	6263      	str	r3, [r4, #36]	; 0x24
 800cd6a:	4b05      	ldr	r3, [pc, #20]	; (800cd80 <std+0x3c>)
 800cd6c:	62a3      	str	r3, [r4, #40]	; 0x28
 800cd6e:	4b05      	ldr	r3, [pc, #20]	; (800cd84 <std+0x40>)
 800cd70:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cd72:	4b05      	ldr	r3, [pc, #20]	; (800cd88 <std+0x44>)
 800cd74:	6224      	str	r4, [r4, #32]
 800cd76:	6323      	str	r3, [r4, #48]	; 0x30
 800cd78:	bd10      	pop	{r4, pc}
 800cd7a:	bf00      	nop
 800cd7c:	0800d095 	.word	0x0800d095
 800cd80:	0800d0b7 	.word	0x0800d0b7
 800cd84:	0800d0ef 	.word	0x0800d0ef
 800cd88:	0800d113 	.word	0x0800d113

0800cd8c <_cleanup_r>:
 800cd8c:	4901      	ldr	r1, [pc, #4]	; (800cd94 <_cleanup_r+0x8>)
 800cd8e:	f000 b8af 	b.w	800cef0 <_fwalk_reent>
 800cd92:	bf00      	nop
 800cd94:	0800cccd 	.word	0x0800cccd

0800cd98 <__sfmoreglue>:
 800cd98:	b570      	push	{r4, r5, r6, lr}
 800cd9a:	1e4a      	subs	r2, r1, #1
 800cd9c:	2568      	movs	r5, #104	; 0x68
 800cd9e:	4355      	muls	r5, r2
 800cda0:	460e      	mov	r6, r1
 800cda2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cda6:	f7ff fa87 	bl	800c2b8 <_malloc_r>
 800cdaa:	4604      	mov	r4, r0
 800cdac:	b140      	cbz	r0, 800cdc0 <__sfmoreglue+0x28>
 800cdae:	2100      	movs	r1, #0
 800cdb0:	e9c0 1600 	strd	r1, r6, [r0]
 800cdb4:	300c      	adds	r0, #12
 800cdb6:	60a0      	str	r0, [r4, #8]
 800cdb8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cdbc:	f7fd fb7a 	bl	800a4b4 <memset>
 800cdc0:	4620      	mov	r0, r4
 800cdc2:	bd70      	pop	{r4, r5, r6, pc}

0800cdc4 <__sfp_lock_acquire>:
 800cdc4:	4801      	ldr	r0, [pc, #4]	; (800cdcc <__sfp_lock_acquire+0x8>)
 800cdc6:	f000 b8b3 	b.w	800cf30 <__retarget_lock_acquire_recursive>
 800cdca:	bf00      	nop
 800cdcc:	20001628 	.word	0x20001628

0800cdd0 <__sfp_lock_release>:
 800cdd0:	4801      	ldr	r0, [pc, #4]	; (800cdd8 <__sfp_lock_release+0x8>)
 800cdd2:	f000 b8ae 	b.w	800cf32 <__retarget_lock_release_recursive>
 800cdd6:	bf00      	nop
 800cdd8:	20001628 	.word	0x20001628

0800cddc <__sinit_lock_acquire>:
 800cddc:	4801      	ldr	r0, [pc, #4]	; (800cde4 <__sinit_lock_acquire+0x8>)
 800cdde:	f000 b8a7 	b.w	800cf30 <__retarget_lock_acquire_recursive>
 800cde2:	bf00      	nop
 800cde4:	20001623 	.word	0x20001623

0800cde8 <__sinit_lock_release>:
 800cde8:	4801      	ldr	r0, [pc, #4]	; (800cdf0 <__sinit_lock_release+0x8>)
 800cdea:	f000 b8a2 	b.w	800cf32 <__retarget_lock_release_recursive>
 800cdee:	bf00      	nop
 800cdf0:	20001623 	.word	0x20001623

0800cdf4 <__sinit>:
 800cdf4:	b510      	push	{r4, lr}
 800cdf6:	4604      	mov	r4, r0
 800cdf8:	f7ff fff0 	bl	800cddc <__sinit_lock_acquire>
 800cdfc:	69a3      	ldr	r3, [r4, #24]
 800cdfe:	b11b      	cbz	r3, 800ce08 <__sinit+0x14>
 800ce00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce04:	f7ff bff0 	b.w	800cde8 <__sinit_lock_release>
 800ce08:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ce0c:	6523      	str	r3, [r4, #80]	; 0x50
 800ce0e:	4b13      	ldr	r3, [pc, #76]	; (800ce5c <__sinit+0x68>)
 800ce10:	4a13      	ldr	r2, [pc, #76]	; (800ce60 <__sinit+0x6c>)
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	62a2      	str	r2, [r4, #40]	; 0x28
 800ce16:	42a3      	cmp	r3, r4
 800ce18:	bf04      	itt	eq
 800ce1a:	2301      	moveq	r3, #1
 800ce1c:	61a3      	streq	r3, [r4, #24]
 800ce1e:	4620      	mov	r0, r4
 800ce20:	f000 f820 	bl	800ce64 <__sfp>
 800ce24:	6060      	str	r0, [r4, #4]
 800ce26:	4620      	mov	r0, r4
 800ce28:	f000 f81c 	bl	800ce64 <__sfp>
 800ce2c:	60a0      	str	r0, [r4, #8]
 800ce2e:	4620      	mov	r0, r4
 800ce30:	f000 f818 	bl	800ce64 <__sfp>
 800ce34:	2200      	movs	r2, #0
 800ce36:	60e0      	str	r0, [r4, #12]
 800ce38:	2104      	movs	r1, #4
 800ce3a:	6860      	ldr	r0, [r4, #4]
 800ce3c:	f7ff ff82 	bl	800cd44 <std>
 800ce40:	68a0      	ldr	r0, [r4, #8]
 800ce42:	2201      	movs	r2, #1
 800ce44:	2109      	movs	r1, #9
 800ce46:	f7ff ff7d 	bl	800cd44 <std>
 800ce4a:	68e0      	ldr	r0, [r4, #12]
 800ce4c:	2202      	movs	r2, #2
 800ce4e:	2112      	movs	r1, #18
 800ce50:	f7ff ff78 	bl	800cd44 <std>
 800ce54:	2301      	movs	r3, #1
 800ce56:	61a3      	str	r3, [r4, #24]
 800ce58:	e7d2      	b.n	800ce00 <__sinit+0xc>
 800ce5a:	bf00      	nop
 800ce5c:	0800e2c8 	.word	0x0800e2c8
 800ce60:	0800cd8d 	.word	0x0800cd8d

0800ce64 <__sfp>:
 800ce64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce66:	4607      	mov	r7, r0
 800ce68:	f7ff ffac 	bl	800cdc4 <__sfp_lock_acquire>
 800ce6c:	4b1e      	ldr	r3, [pc, #120]	; (800cee8 <__sfp+0x84>)
 800ce6e:	681e      	ldr	r6, [r3, #0]
 800ce70:	69b3      	ldr	r3, [r6, #24]
 800ce72:	b913      	cbnz	r3, 800ce7a <__sfp+0x16>
 800ce74:	4630      	mov	r0, r6
 800ce76:	f7ff ffbd 	bl	800cdf4 <__sinit>
 800ce7a:	3648      	adds	r6, #72	; 0x48
 800ce7c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ce80:	3b01      	subs	r3, #1
 800ce82:	d503      	bpl.n	800ce8c <__sfp+0x28>
 800ce84:	6833      	ldr	r3, [r6, #0]
 800ce86:	b30b      	cbz	r3, 800cecc <__sfp+0x68>
 800ce88:	6836      	ldr	r6, [r6, #0]
 800ce8a:	e7f7      	b.n	800ce7c <__sfp+0x18>
 800ce8c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ce90:	b9d5      	cbnz	r5, 800cec8 <__sfp+0x64>
 800ce92:	4b16      	ldr	r3, [pc, #88]	; (800ceec <__sfp+0x88>)
 800ce94:	60e3      	str	r3, [r4, #12]
 800ce96:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ce9a:	6665      	str	r5, [r4, #100]	; 0x64
 800ce9c:	f000 f847 	bl	800cf2e <__retarget_lock_init_recursive>
 800cea0:	f7ff ff96 	bl	800cdd0 <__sfp_lock_release>
 800cea4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cea8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ceac:	6025      	str	r5, [r4, #0]
 800ceae:	61a5      	str	r5, [r4, #24]
 800ceb0:	2208      	movs	r2, #8
 800ceb2:	4629      	mov	r1, r5
 800ceb4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ceb8:	f7fd fafc 	bl	800a4b4 <memset>
 800cebc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cec0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cec4:	4620      	mov	r0, r4
 800cec6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cec8:	3468      	adds	r4, #104	; 0x68
 800ceca:	e7d9      	b.n	800ce80 <__sfp+0x1c>
 800cecc:	2104      	movs	r1, #4
 800cece:	4638      	mov	r0, r7
 800ced0:	f7ff ff62 	bl	800cd98 <__sfmoreglue>
 800ced4:	4604      	mov	r4, r0
 800ced6:	6030      	str	r0, [r6, #0]
 800ced8:	2800      	cmp	r0, #0
 800ceda:	d1d5      	bne.n	800ce88 <__sfp+0x24>
 800cedc:	f7ff ff78 	bl	800cdd0 <__sfp_lock_release>
 800cee0:	230c      	movs	r3, #12
 800cee2:	603b      	str	r3, [r7, #0]
 800cee4:	e7ee      	b.n	800cec4 <__sfp+0x60>
 800cee6:	bf00      	nop
 800cee8:	0800e2c8 	.word	0x0800e2c8
 800ceec:	ffff0001 	.word	0xffff0001

0800cef0 <_fwalk_reent>:
 800cef0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cef4:	4606      	mov	r6, r0
 800cef6:	4688      	mov	r8, r1
 800cef8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cefc:	2700      	movs	r7, #0
 800cefe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cf02:	f1b9 0901 	subs.w	r9, r9, #1
 800cf06:	d505      	bpl.n	800cf14 <_fwalk_reent+0x24>
 800cf08:	6824      	ldr	r4, [r4, #0]
 800cf0a:	2c00      	cmp	r4, #0
 800cf0c:	d1f7      	bne.n	800cefe <_fwalk_reent+0xe>
 800cf0e:	4638      	mov	r0, r7
 800cf10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf14:	89ab      	ldrh	r3, [r5, #12]
 800cf16:	2b01      	cmp	r3, #1
 800cf18:	d907      	bls.n	800cf2a <_fwalk_reent+0x3a>
 800cf1a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cf1e:	3301      	adds	r3, #1
 800cf20:	d003      	beq.n	800cf2a <_fwalk_reent+0x3a>
 800cf22:	4629      	mov	r1, r5
 800cf24:	4630      	mov	r0, r6
 800cf26:	47c0      	blx	r8
 800cf28:	4307      	orrs	r7, r0
 800cf2a:	3568      	adds	r5, #104	; 0x68
 800cf2c:	e7e9      	b.n	800cf02 <_fwalk_reent+0x12>

0800cf2e <__retarget_lock_init_recursive>:
 800cf2e:	4770      	bx	lr

0800cf30 <__retarget_lock_acquire_recursive>:
 800cf30:	4770      	bx	lr

0800cf32 <__retarget_lock_release_recursive>:
 800cf32:	4770      	bx	lr

0800cf34 <__swhatbuf_r>:
 800cf34:	b570      	push	{r4, r5, r6, lr}
 800cf36:	460e      	mov	r6, r1
 800cf38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf3c:	2900      	cmp	r1, #0
 800cf3e:	b096      	sub	sp, #88	; 0x58
 800cf40:	4614      	mov	r4, r2
 800cf42:	461d      	mov	r5, r3
 800cf44:	da07      	bge.n	800cf56 <__swhatbuf_r+0x22>
 800cf46:	2300      	movs	r3, #0
 800cf48:	602b      	str	r3, [r5, #0]
 800cf4a:	89b3      	ldrh	r3, [r6, #12]
 800cf4c:	061a      	lsls	r2, r3, #24
 800cf4e:	d410      	bmi.n	800cf72 <__swhatbuf_r+0x3e>
 800cf50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cf54:	e00e      	b.n	800cf74 <__swhatbuf_r+0x40>
 800cf56:	466a      	mov	r2, sp
 800cf58:	f000 f902 	bl	800d160 <_fstat_r>
 800cf5c:	2800      	cmp	r0, #0
 800cf5e:	dbf2      	blt.n	800cf46 <__swhatbuf_r+0x12>
 800cf60:	9a01      	ldr	r2, [sp, #4]
 800cf62:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cf66:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cf6a:	425a      	negs	r2, r3
 800cf6c:	415a      	adcs	r2, r3
 800cf6e:	602a      	str	r2, [r5, #0]
 800cf70:	e7ee      	b.n	800cf50 <__swhatbuf_r+0x1c>
 800cf72:	2340      	movs	r3, #64	; 0x40
 800cf74:	2000      	movs	r0, #0
 800cf76:	6023      	str	r3, [r4, #0]
 800cf78:	b016      	add	sp, #88	; 0x58
 800cf7a:	bd70      	pop	{r4, r5, r6, pc}

0800cf7c <__smakebuf_r>:
 800cf7c:	898b      	ldrh	r3, [r1, #12]
 800cf7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cf80:	079d      	lsls	r5, r3, #30
 800cf82:	4606      	mov	r6, r0
 800cf84:	460c      	mov	r4, r1
 800cf86:	d507      	bpl.n	800cf98 <__smakebuf_r+0x1c>
 800cf88:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cf8c:	6023      	str	r3, [r4, #0]
 800cf8e:	6123      	str	r3, [r4, #16]
 800cf90:	2301      	movs	r3, #1
 800cf92:	6163      	str	r3, [r4, #20]
 800cf94:	b002      	add	sp, #8
 800cf96:	bd70      	pop	{r4, r5, r6, pc}
 800cf98:	ab01      	add	r3, sp, #4
 800cf9a:	466a      	mov	r2, sp
 800cf9c:	f7ff ffca 	bl	800cf34 <__swhatbuf_r>
 800cfa0:	9900      	ldr	r1, [sp, #0]
 800cfa2:	4605      	mov	r5, r0
 800cfa4:	4630      	mov	r0, r6
 800cfa6:	f7ff f987 	bl	800c2b8 <_malloc_r>
 800cfaa:	b948      	cbnz	r0, 800cfc0 <__smakebuf_r+0x44>
 800cfac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cfb0:	059a      	lsls	r2, r3, #22
 800cfb2:	d4ef      	bmi.n	800cf94 <__smakebuf_r+0x18>
 800cfb4:	f023 0303 	bic.w	r3, r3, #3
 800cfb8:	f043 0302 	orr.w	r3, r3, #2
 800cfbc:	81a3      	strh	r3, [r4, #12]
 800cfbe:	e7e3      	b.n	800cf88 <__smakebuf_r+0xc>
 800cfc0:	4b0d      	ldr	r3, [pc, #52]	; (800cff8 <__smakebuf_r+0x7c>)
 800cfc2:	62b3      	str	r3, [r6, #40]	; 0x28
 800cfc4:	89a3      	ldrh	r3, [r4, #12]
 800cfc6:	6020      	str	r0, [r4, #0]
 800cfc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cfcc:	81a3      	strh	r3, [r4, #12]
 800cfce:	9b00      	ldr	r3, [sp, #0]
 800cfd0:	6163      	str	r3, [r4, #20]
 800cfd2:	9b01      	ldr	r3, [sp, #4]
 800cfd4:	6120      	str	r0, [r4, #16]
 800cfd6:	b15b      	cbz	r3, 800cff0 <__smakebuf_r+0x74>
 800cfd8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cfdc:	4630      	mov	r0, r6
 800cfde:	f000 f8d1 	bl	800d184 <_isatty_r>
 800cfe2:	b128      	cbz	r0, 800cff0 <__smakebuf_r+0x74>
 800cfe4:	89a3      	ldrh	r3, [r4, #12]
 800cfe6:	f023 0303 	bic.w	r3, r3, #3
 800cfea:	f043 0301 	orr.w	r3, r3, #1
 800cfee:	81a3      	strh	r3, [r4, #12]
 800cff0:	89a0      	ldrh	r0, [r4, #12]
 800cff2:	4305      	orrs	r5, r0
 800cff4:	81a5      	strh	r5, [r4, #12]
 800cff6:	e7cd      	b.n	800cf94 <__smakebuf_r+0x18>
 800cff8:	0800cd8d 	.word	0x0800cd8d

0800cffc <_malloc_usable_size_r>:
 800cffc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d000:	1f18      	subs	r0, r3, #4
 800d002:	2b00      	cmp	r3, #0
 800d004:	bfbc      	itt	lt
 800d006:	580b      	ldrlt	r3, [r1, r0]
 800d008:	18c0      	addlt	r0, r0, r3
 800d00a:	4770      	bx	lr

0800d00c <_raise_r>:
 800d00c:	291f      	cmp	r1, #31
 800d00e:	b538      	push	{r3, r4, r5, lr}
 800d010:	4604      	mov	r4, r0
 800d012:	460d      	mov	r5, r1
 800d014:	d904      	bls.n	800d020 <_raise_r+0x14>
 800d016:	2316      	movs	r3, #22
 800d018:	6003      	str	r3, [r0, #0]
 800d01a:	f04f 30ff 	mov.w	r0, #4294967295
 800d01e:	bd38      	pop	{r3, r4, r5, pc}
 800d020:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d022:	b112      	cbz	r2, 800d02a <_raise_r+0x1e>
 800d024:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d028:	b94b      	cbnz	r3, 800d03e <_raise_r+0x32>
 800d02a:	4620      	mov	r0, r4
 800d02c:	f000 f830 	bl	800d090 <_getpid_r>
 800d030:	462a      	mov	r2, r5
 800d032:	4601      	mov	r1, r0
 800d034:	4620      	mov	r0, r4
 800d036:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d03a:	f000 b817 	b.w	800d06c <_kill_r>
 800d03e:	2b01      	cmp	r3, #1
 800d040:	d00a      	beq.n	800d058 <_raise_r+0x4c>
 800d042:	1c59      	adds	r1, r3, #1
 800d044:	d103      	bne.n	800d04e <_raise_r+0x42>
 800d046:	2316      	movs	r3, #22
 800d048:	6003      	str	r3, [r0, #0]
 800d04a:	2001      	movs	r0, #1
 800d04c:	e7e7      	b.n	800d01e <_raise_r+0x12>
 800d04e:	2400      	movs	r4, #0
 800d050:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d054:	4628      	mov	r0, r5
 800d056:	4798      	blx	r3
 800d058:	2000      	movs	r0, #0
 800d05a:	e7e0      	b.n	800d01e <_raise_r+0x12>

0800d05c <raise>:
 800d05c:	4b02      	ldr	r3, [pc, #8]	; (800d068 <raise+0xc>)
 800d05e:	4601      	mov	r1, r0
 800d060:	6818      	ldr	r0, [r3, #0]
 800d062:	f7ff bfd3 	b.w	800d00c <_raise_r>
 800d066:	bf00      	nop
 800d068:	2000017c 	.word	0x2000017c

0800d06c <_kill_r>:
 800d06c:	b538      	push	{r3, r4, r5, lr}
 800d06e:	4d07      	ldr	r5, [pc, #28]	; (800d08c <_kill_r+0x20>)
 800d070:	2300      	movs	r3, #0
 800d072:	4604      	mov	r4, r0
 800d074:	4608      	mov	r0, r1
 800d076:	4611      	mov	r1, r2
 800d078:	602b      	str	r3, [r5, #0]
 800d07a:	f7f4 fc1f 	bl	80018bc <_kill>
 800d07e:	1c43      	adds	r3, r0, #1
 800d080:	d102      	bne.n	800d088 <_kill_r+0x1c>
 800d082:	682b      	ldr	r3, [r5, #0]
 800d084:	b103      	cbz	r3, 800d088 <_kill_r+0x1c>
 800d086:	6023      	str	r3, [r4, #0]
 800d088:	bd38      	pop	{r3, r4, r5, pc}
 800d08a:	bf00      	nop
 800d08c:	2000161c 	.word	0x2000161c

0800d090 <_getpid_r>:
 800d090:	f7f4 bc0c 	b.w	80018ac <_getpid>

0800d094 <__sread>:
 800d094:	b510      	push	{r4, lr}
 800d096:	460c      	mov	r4, r1
 800d098:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d09c:	f000 f894 	bl	800d1c8 <_read_r>
 800d0a0:	2800      	cmp	r0, #0
 800d0a2:	bfab      	itete	ge
 800d0a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d0a6:	89a3      	ldrhlt	r3, [r4, #12]
 800d0a8:	181b      	addge	r3, r3, r0
 800d0aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d0ae:	bfac      	ite	ge
 800d0b0:	6563      	strge	r3, [r4, #84]	; 0x54
 800d0b2:	81a3      	strhlt	r3, [r4, #12]
 800d0b4:	bd10      	pop	{r4, pc}

0800d0b6 <__swrite>:
 800d0b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0ba:	461f      	mov	r7, r3
 800d0bc:	898b      	ldrh	r3, [r1, #12]
 800d0be:	05db      	lsls	r3, r3, #23
 800d0c0:	4605      	mov	r5, r0
 800d0c2:	460c      	mov	r4, r1
 800d0c4:	4616      	mov	r6, r2
 800d0c6:	d505      	bpl.n	800d0d4 <__swrite+0x1e>
 800d0c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0cc:	2302      	movs	r3, #2
 800d0ce:	2200      	movs	r2, #0
 800d0d0:	f000 f868 	bl	800d1a4 <_lseek_r>
 800d0d4:	89a3      	ldrh	r3, [r4, #12]
 800d0d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d0da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d0de:	81a3      	strh	r3, [r4, #12]
 800d0e0:	4632      	mov	r2, r6
 800d0e2:	463b      	mov	r3, r7
 800d0e4:	4628      	mov	r0, r5
 800d0e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d0ea:	f000 b817 	b.w	800d11c <_write_r>

0800d0ee <__sseek>:
 800d0ee:	b510      	push	{r4, lr}
 800d0f0:	460c      	mov	r4, r1
 800d0f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0f6:	f000 f855 	bl	800d1a4 <_lseek_r>
 800d0fa:	1c43      	adds	r3, r0, #1
 800d0fc:	89a3      	ldrh	r3, [r4, #12]
 800d0fe:	bf15      	itete	ne
 800d100:	6560      	strne	r0, [r4, #84]	; 0x54
 800d102:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d106:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d10a:	81a3      	strheq	r3, [r4, #12]
 800d10c:	bf18      	it	ne
 800d10e:	81a3      	strhne	r3, [r4, #12]
 800d110:	bd10      	pop	{r4, pc}

0800d112 <__sclose>:
 800d112:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d116:	f000 b813 	b.w	800d140 <_close_r>
	...

0800d11c <_write_r>:
 800d11c:	b538      	push	{r3, r4, r5, lr}
 800d11e:	4d07      	ldr	r5, [pc, #28]	; (800d13c <_write_r+0x20>)
 800d120:	4604      	mov	r4, r0
 800d122:	4608      	mov	r0, r1
 800d124:	4611      	mov	r1, r2
 800d126:	2200      	movs	r2, #0
 800d128:	602a      	str	r2, [r5, #0]
 800d12a:	461a      	mov	r2, r3
 800d12c:	f7f4 fbfd 	bl	800192a <_write>
 800d130:	1c43      	adds	r3, r0, #1
 800d132:	d102      	bne.n	800d13a <_write_r+0x1e>
 800d134:	682b      	ldr	r3, [r5, #0]
 800d136:	b103      	cbz	r3, 800d13a <_write_r+0x1e>
 800d138:	6023      	str	r3, [r4, #0]
 800d13a:	bd38      	pop	{r3, r4, r5, pc}
 800d13c:	2000161c 	.word	0x2000161c

0800d140 <_close_r>:
 800d140:	b538      	push	{r3, r4, r5, lr}
 800d142:	4d06      	ldr	r5, [pc, #24]	; (800d15c <_close_r+0x1c>)
 800d144:	2300      	movs	r3, #0
 800d146:	4604      	mov	r4, r0
 800d148:	4608      	mov	r0, r1
 800d14a:	602b      	str	r3, [r5, #0]
 800d14c:	f7f4 fc09 	bl	8001962 <_close>
 800d150:	1c43      	adds	r3, r0, #1
 800d152:	d102      	bne.n	800d15a <_close_r+0x1a>
 800d154:	682b      	ldr	r3, [r5, #0]
 800d156:	b103      	cbz	r3, 800d15a <_close_r+0x1a>
 800d158:	6023      	str	r3, [r4, #0]
 800d15a:	bd38      	pop	{r3, r4, r5, pc}
 800d15c:	2000161c 	.word	0x2000161c

0800d160 <_fstat_r>:
 800d160:	b538      	push	{r3, r4, r5, lr}
 800d162:	4d07      	ldr	r5, [pc, #28]	; (800d180 <_fstat_r+0x20>)
 800d164:	2300      	movs	r3, #0
 800d166:	4604      	mov	r4, r0
 800d168:	4608      	mov	r0, r1
 800d16a:	4611      	mov	r1, r2
 800d16c:	602b      	str	r3, [r5, #0]
 800d16e:	f7f4 fc04 	bl	800197a <_fstat>
 800d172:	1c43      	adds	r3, r0, #1
 800d174:	d102      	bne.n	800d17c <_fstat_r+0x1c>
 800d176:	682b      	ldr	r3, [r5, #0]
 800d178:	b103      	cbz	r3, 800d17c <_fstat_r+0x1c>
 800d17a:	6023      	str	r3, [r4, #0]
 800d17c:	bd38      	pop	{r3, r4, r5, pc}
 800d17e:	bf00      	nop
 800d180:	2000161c 	.word	0x2000161c

0800d184 <_isatty_r>:
 800d184:	b538      	push	{r3, r4, r5, lr}
 800d186:	4d06      	ldr	r5, [pc, #24]	; (800d1a0 <_isatty_r+0x1c>)
 800d188:	2300      	movs	r3, #0
 800d18a:	4604      	mov	r4, r0
 800d18c:	4608      	mov	r0, r1
 800d18e:	602b      	str	r3, [r5, #0]
 800d190:	f7f4 fc03 	bl	800199a <_isatty>
 800d194:	1c43      	adds	r3, r0, #1
 800d196:	d102      	bne.n	800d19e <_isatty_r+0x1a>
 800d198:	682b      	ldr	r3, [r5, #0]
 800d19a:	b103      	cbz	r3, 800d19e <_isatty_r+0x1a>
 800d19c:	6023      	str	r3, [r4, #0]
 800d19e:	bd38      	pop	{r3, r4, r5, pc}
 800d1a0:	2000161c 	.word	0x2000161c

0800d1a4 <_lseek_r>:
 800d1a4:	b538      	push	{r3, r4, r5, lr}
 800d1a6:	4d07      	ldr	r5, [pc, #28]	; (800d1c4 <_lseek_r+0x20>)
 800d1a8:	4604      	mov	r4, r0
 800d1aa:	4608      	mov	r0, r1
 800d1ac:	4611      	mov	r1, r2
 800d1ae:	2200      	movs	r2, #0
 800d1b0:	602a      	str	r2, [r5, #0]
 800d1b2:	461a      	mov	r2, r3
 800d1b4:	f7f4 fbfc 	bl	80019b0 <_lseek>
 800d1b8:	1c43      	adds	r3, r0, #1
 800d1ba:	d102      	bne.n	800d1c2 <_lseek_r+0x1e>
 800d1bc:	682b      	ldr	r3, [r5, #0]
 800d1be:	b103      	cbz	r3, 800d1c2 <_lseek_r+0x1e>
 800d1c0:	6023      	str	r3, [r4, #0]
 800d1c2:	bd38      	pop	{r3, r4, r5, pc}
 800d1c4:	2000161c 	.word	0x2000161c

0800d1c8 <_read_r>:
 800d1c8:	b538      	push	{r3, r4, r5, lr}
 800d1ca:	4d07      	ldr	r5, [pc, #28]	; (800d1e8 <_read_r+0x20>)
 800d1cc:	4604      	mov	r4, r0
 800d1ce:	4608      	mov	r0, r1
 800d1d0:	4611      	mov	r1, r2
 800d1d2:	2200      	movs	r2, #0
 800d1d4:	602a      	str	r2, [r5, #0]
 800d1d6:	461a      	mov	r2, r3
 800d1d8:	f7f4 fb8a 	bl	80018f0 <_read>
 800d1dc:	1c43      	adds	r3, r0, #1
 800d1de:	d102      	bne.n	800d1e6 <_read_r+0x1e>
 800d1e0:	682b      	ldr	r3, [r5, #0]
 800d1e2:	b103      	cbz	r3, 800d1e6 <_read_r+0x1e>
 800d1e4:	6023      	str	r3, [r4, #0]
 800d1e6:	bd38      	pop	{r3, r4, r5, pc}
 800d1e8:	2000161c 	.word	0x2000161c

0800d1ec <pow>:
 800d1ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d1f0:	ec59 8b10 	vmov	r8, r9, d0
 800d1f4:	ec57 6b11 	vmov	r6, r7, d1
 800d1f8:	f000 f8da 	bl	800d3b0 <__ieee754_pow>
 800d1fc:	4b4e      	ldr	r3, [pc, #312]	; (800d338 <pow+0x14c>)
 800d1fe:	f993 3000 	ldrsb.w	r3, [r3]
 800d202:	3301      	adds	r3, #1
 800d204:	ec55 4b10 	vmov	r4, r5, d0
 800d208:	d015      	beq.n	800d236 <pow+0x4a>
 800d20a:	4632      	mov	r2, r6
 800d20c:	463b      	mov	r3, r7
 800d20e:	4630      	mov	r0, r6
 800d210:	4639      	mov	r1, r7
 800d212:	f7f3 fc8b 	bl	8000b2c <__aeabi_dcmpun>
 800d216:	b970      	cbnz	r0, 800d236 <pow+0x4a>
 800d218:	4642      	mov	r2, r8
 800d21a:	464b      	mov	r3, r9
 800d21c:	4640      	mov	r0, r8
 800d21e:	4649      	mov	r1, r9
 800d220:	f7f3 fc84 	bl	8000b2c <__aeabi_dcmpun>
 800d224:	2200      	movs	r2, #0
 800d226:	2300      	movs	r3, #0
 800d228:	b148      	cbz	r0, 800d23e <pow+0x52>
 800d22a:	4630      	mov	r0, r6
 800d22c:	4639      	mov	r1, r7
 800d22e:	f7f3 fc4b 	bl	8000ac8 <__aeabi_dcmpeq>
 800d232:	2800      	cmp	r0, #0
 800d234:	d17d      	bne.n	800d332 <pow+0x146>
 800d236:	ec45 4b10 	vmov	d0, r4, r5
 800d23a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d23e:	4640      	mov	r0, r8
 800d240:	4649      	mov	r1, r9
 800d242:	f7f3 fc41 	bl	8000ac8 <__aeabi_dcmpeq>
 800d246:	b1e0      	cbz	r0, 800d282 <pow+0x96>
 800d248:	2200      	movs	r2, #0
 800d24a:	2300      	movs	r3, #0
 800d24c:	4630      	mov	r0, r6
 800d24e:	4639      	mov	r1, r7
 800d250:	f7f3 fc3a 	bl	8000ac8 <__aeabi_dcmpeq>
 800d254:	2800      	cmp	r0, #0
 800d256:	d16c      	bne.n	800d332 <pow+0x146>
 800d258:	ec47 6b10 	vmov	d0, r6, r7
 800d25c:	f000 fe87 	bl	800df6e <finite>
 800d260:	2800      	cmp	r0, #0
 800d262:	d0e8      	beq.n	800d236 <pow+0x4a>
 800d264:	2200      	movs	r2, #0
 800d266:	2300      	movs	r3, #0
 800d268:	4630      	mov	r0, r6
 800d26a:	4639      	mov	r1, r7
 800d26c:	f7f3 fc36 	bl	8000adc <__aeabi_dcmplt>
 800d270:	2800      	cmp	r0, #0
 800d272:	d0e0      	beq.n	800d236 <pow+0x4a>
 800d274:	f7fd f8f4 	bl	800a460 <__errno>
 800d278:	2321      	movs	r3, #33	; 0x21
 800d27a:	6003      	str	r3, [r0, #0]
 800d27c:	2400      	movs	r4, #0
 800d27e:	4d2f      	ldr	r5, [pc, #188]	; (800d33c <pow+0x150>)
 800d280:	e7d9      	b.n	800d236 <pow+0x4a>
 800d282:	ec45 4b10 	vmov	d0, r4, r5
 800d286:	f000 fe72 	bl	800df6e <finite>
 800d28a:	bbb8      	cbnz	r0, 800d2fc <pow+0x110>
 800d28c:	ec49 8b10 	vmov	d0, r8, r9
 800d290:	f000 fe6d 	bl	800df6e <finite>
 800d294:	b390      	cbz	r0, 800d2fc <pow+0x110>
 800d296:	ec47 6b10 	vmov	d0, r6, r7
 800d29a:	f000 fe68 	bl	800df6e <finite>
 800d29e:	b368      	cbz	r0, 800d2fc <pow+0x110>
 800d2a0:	4622      	mov	r2, r4
 800d2a2:	462b      	mov	r3, r5
 800d2a4:	4620      	mov	r0, r4
 800d2a6:	4629      	mov	r1, r5
 800d2a8:	f7f3 fc40 	bl	8000b2c <__aeabi_dcmpun>
 800d2ac:	b160      	cbz	r0, 800d2c8 <pow+0xdc>
 800d2ae:	f7fd f8d7 	bl	800a460 <__errno>
 800d2b2:	2321      	movs	r3, #33	; 0x21
 800d2b4:	6003      	str	r3, [r0, #0]
 800d2b6:	2200      	movs	r2, #0
 800d2b8:	2300      	movs	r3, #0
 800d2ba:	4610      	mov	r0, r2
 800d2bc:	4619      	mov	r1, r3
 800d2be:	f7f3 fac5 	bl	800084c <__aeabi_ddiv>
 800d2c2:	4604      	mov	r4, r0
 800d2c4:	460d      	mov	r5, r1
 800d2c6:	e7b6      	b.n	800d236 <pow+0x4a>
 800d2c8:	f7fd f8ca 	bl	800a460 <__errno>
 800d2cc:	2322      	movs	r3, #34	; 0x22
 800d2ce:	6003      	str	r3, [r0, #0]
 800d2d0:	2200      	movs	r2, #0
 800d2d2:	2300      	movs	r3, #0
 800d2d4:	4640      	mov	r0, r8
 800d2d6:	4649      	mov	r1, r9
 800d2d8:	f7f3 fc00 	bl	8000adc <__aeabi_dcmplt>
 800d2dc:	2400      	movs	r4, #0
 800d2de:	b158      	cbz	r0, 800d2f8 <pow+0x10c>
 800d2e0:	ec47 6b10 	vmov	d0, r6, r7
 800d2e4:	f000 fe58 	bl	800df98 <rint>
 800d2e8:	4632      	mov	r2, r6
 800d2ea:	ec51 0b10 	vmov	r0, r1, d0
 800d2ee:	463b      	mov	r3, r7
 800d2f0:	f7f3 fbea 	bl	8000ac8 <__aeabi_dcmpeq>
 800d2f4:	2800      	cmp	r0, #0
 800d2f6:	d0c2      	beq.n	800d27e <pow+0x92>
 800d2f8:	4d11      	ldr	r5, [pc, #68]	; (800d340 <pow+0x154>)
 800d2fa:	e79c      	b.n	800d236 <pow+0x4a>
 800d2fc:	2200      	movs	r2, #0
 800d2fe:	2300      	movs	r3, #0
 800d300:	4620      	mov	r0, r4
 800d302:	4629      	mov	r1, r5
 800d304:	f7f3 fbe0 	bl	8000ac8 <__aeabi_dcmpeq>
 800d308:	2800      	cmp	r0, #0
 800d30a:	d094      	beq.n	800d236 <pow+0x4a>
 800d30c:	ec49 8b10 	vmov	d0, r8, r9
 800d310:	f000 fe2d 	bl	800df6e <finite>
 800d314:	2800      	cmp	r0, #0
 800d316:	d08e      	beq.n	800d236 <pow+0x4a>
 800d318:	ec47 6b10 	vmov	d0, r6, r7
 800d31c:	f000 fe27 	bl	800df6e <finite>
 800d320:	2800      	cmp	r0, #0
 800d322:	d088      	beq.n	800d236 <pow+0x4a>
 800d324:	f7fd f89c 	bl	800a460 <__errno>
 800d328:	2322      	movs	r3, #34	; 0x22
 800d32a:	6003      	str	r3, [r0, #0]
 800d32c:	2400      	movs	r4, #0
 800d32e:	2500      	movs	r5, #0
 800d330:	e781      	b.n	800d236 <pow+0x4a>
 800d332:	4d04      	ldr	r5, [pc, #16]	; (800d344 <pow+0x158>)
 800d334:	2400      	movs	r4, #0
 800d336:	e77e      	b.n	800d236 <pow+0x4a>
 800d338:	2000034c 	.word	0x2000034c
 800d33c:	fff00000 	.word	0xfff00000
 800d340:	7ff00000 	.word	0x7ff00000
 800d344:	3ff00000 	.word	0x3ff00000

0800d348 <sqrt>:
 800d348:	b538      	push	{r3, r4, r5, lr}
 800d34a:	ed2d 8b02 	vpush	{d8}
 800d34e:	ec55 4b10 	vmov	r4, r5, d0
 800d352:	f000 fd4f 	bl	800ddf4 <__ieee754_sqrt>
 800d356:	4b15      	ldr	r3, [pc, #84]	; (800d3ac <sqrt+0x64>)
 800d358:	eeb0 8a40 	vmov.f32	s16, s0
 800d35c:	eef0 8a60 	vmov.f32	s17, s1
 800d360:	f993 3000 	ldrsb.w	r3, [r3]
 800d364:	3301      	adds	r3, #1
 800d366:	d019      	beq.n	800d39c <sqrt+0x54>
 800d368:	4622      	mov	r2, r4
 800d36a:	462b      	mov	r3, r5
 800d36c:	4620      	mov	r0, r4
 800d36e:	4629      	mov	r1, r5
 800d370:	f7f3 fbdc 	bl	8000b2c <__aeabi_dcmpun>
 800d374:	b990      	cbnz	r0, 800d39c <sqrt+0x54>
 800d376:	2200      	movs	r2, #0
 800d378:	2300      	movs	r3, #0
 800d37a:	4620      	mov	r0, r4
 800d37c:	4629      	mov	r1, r5
 800d37e:	f7f3 fbad 	bl	8000adc <__aeabi_dcmplt>
 800d382:	b158      	cbz	r0, 800d39c <sqrt+0x54>
 800d384:	f7fd f86c 	bl	800a460 <__errno>
 800d388:	2321      	movs	r3, #33	; 0x21
 800d38a:	6003      	str	r3, [r0, #0]
 800d38c:	2200      	movs	r2, #0
 800d38e:	2300      	movs	r3, #0
 800d390:	4610      	mov	r0, r2
 800d392:	4619      	mov	r1, r3
 800d394:	f7f3 fa5a 	bl	800084c <__aeabi_ddiv>
 800d398:	ec41 0b18 	vmov	d8, r0, r1
 800d39c:	eeb0 0a48 	vmov.f32	s0, s16
 800d3a0:	eef0 0a68 	vmov.f32	s1, s17
 800d3a4:	ecbd 8b02 	vpop	{d8}
 800d3a8:	bd38      	pop	{r3, r4, r5, pc}
 800d3aa:	bf00      	nop
 800d3ac:	2000034c 	.word	0x2000034c

0800d3b0 <__ieee754_pow>:
 800d3b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3b4:	ed2d 8b06 	vpush	{d8-d10}
 800d3b8:	b08d      	sub	sp, #52	; 0x34
 800d3ba:	ed8d 1b02 	vstr	d1, [sp, #8]
 800d3be:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800d3c2:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800d3c6:	ea56 0100 	orrs.w	r1, r6, r0
 800d3ca:	ec53 2b10 	vmov	r2, r3, d0
 800d3ce:	f000 84d1 	beq.w	800dd74 <__ieee754_pow+0x9c4>
 800d3d2:	497f      	ldr	r1, [pc, #508]	; (800d5d0 <__ieee754_pow+0x220>)
 800d3d4:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800d3d8:	428c      	cmp	r4, r1
 800d3da:	ee10 8a10 	vmov	r8, s0
 800d3de:	4699      	mov	r9, r3
 800d3e0:	dc09      	bgt.n	800d3f6 <__ieee754_pow+0x46>
 800d3e2:	d103      	bne.n	800d3ec <__ieee754_pow+0x3c>
 800d3e4:	b97a      	cbnz	r2, 800d406 <__ieee754_pow+0x56>
 800d3e6:	42a6      	cmp	r6, r4
 800d3e8:	dd02      	ble.n	800d3f0 <__ieee754_pow+0x40>
 800d3ea:	e00c      	b.n	800d406 <__ieee754_pow+0x56>
 800d3ec:	428e      	cmp	r6, r1
 800d3ee:	dc02      	bgt.n	800d3f6 <__ieee754_pow+0x46>
 800d3f0:	428e      	cmp	r6, r1
 800d3f2:	d110      	bne.n	800d416 <__ieee754_pow+0x66>
 800d3f4:	b178      	cbz	r0, 800d416 <__ieee754_pow+0x66>
 800d3f6:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800d3fa:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d3fe:	ea54 0308 	orrs.w	r3, r4, r8
 800d402:	f000 84b7 	beq.w	800dd74 <__ieee754_pow+0x9c4>
 800d406:	4873      	ldr	r0, [pc, #460]	; (800d5d4 <__ieee754_pow+0x224>)
 800d408:	b00d      	add	sp, #52	; 0x34
 800d40a:	ecbd 8b06 	vpop	{d8-d10}
 800d40e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d412:	f000 bdb9 	b.w	800df88 <nan>
 800d416:	f1b9 0f00 	cmp.w	r9, #0
 800d41a:	da36      	bge.n	800d48a <__ieee754_pow+0xda>
 800d41c:	496e      	ldr	r1, [pc, #440]	; (800d5d8 <__ieee754_pow+0x228>)
 800d41e:	428e      	cmp	r6, r1
 800d420:	dc51      	bgt.n	800d4c6 <__ieee754_pow+0x116>
 800d422:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800d426:	428e      	cmp	r6, r1
 800d428:	f340 84af 	ble.w	800dd8a <__ieee754_pow+0x9da>
 800d42c:	1531      	asrs	r1, r6, #20
 800d42e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800d432:	2914      	cmp	r1, #20
 800d434:	dd0f      	ble.n	800d456 <__ieee754_pow+0xa6>
 800d436:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800d43a:	fa20 fc01 	lsr.w	ip, r0, r1
 800d43e:	fa0c f101 	lsl.w	r1, ip, r1
 800d442:	4281      	cmp	r1, r0
 800d444:	f040 84a1 	bne.w	800dd8a <__ieee754_pow+0x9da>
 800d448:	f00c 0c01 	and.w	ip, ip, #1
 800d44c:	f1cc 0102 	rsb	r1, ip, #2
 800d450:	9100      	str	r1, [sp, #0]
 800d452:	b180      	cbz	r0, 800d476 <__ieee754_pow+0xc6>
 800d454:	e059      	b.n	800d50a <__ieee754_pow+0x15a>
 800d456:	2800      	cmp	r0, #0
 800d458:	d155      	bne.n	800d506 <__ieee754_pow+0x156>
 800d45a:	f1c1 0114 	rsb	r1, r1, #20
 800d45e:	fa46 fc01 	asr.w	ip, r6, r1
 800d462:	fa0c f101 	lsl.w	r1, ip, r1
 800d466:	42b1      	cmp	r1, r6
 800d468:	f040 848c 	bne.w	800dd84 <__ieee754_pow+0x9d4>
 800d46c:	f00c 0c01 	and.w	ip, ip, #1
 800d470:	f1cc 0102 	rsb	r1, ip, #2
 800d474:	9100      	str	r1, [sp, #0]
 800d476:	4959      	ldr	r1, [pc, #356]	; (800d5dc <__ieee754_pow+0x22c>)
 800d478:	428e      	cmp	r6, r1
 800d47a:	d12d      	bne.n	800d4d8 <__ieee754_pow+0x128>
 800d47c:	2f00      	cmp	r7, #0
 800d47e:	da79      	bge.n	800d574 <__ieee754_pow+0x1c4>
 800d480:	4956      	ldr	r1, [pc, #344]	; (800d5dc <__ieee754_pow+0x22c>)
 800d482:	2000      	movs	r0, #0
 800d484:	f7f3 f9e2 	bl	800084c <__aeabi_ddiv>
 800d488:	e016      	b.n	800d4b8 <__ieee754_pow+0x108>
 800d48a:	2100      	movs	r1, #0
 800d48c:	9100      	str	r1, [sp, #0]
 800d48e:	2800      	cmp	r0, #0
 800d490:	d13b      	bne.n	800d50a <__ieee754_pow+0x15a>
 800d492:	494f      	ldr	r1, [pc, #316]	; (800d5d0 <__ieee754_pow+0x220>)
 800d494:	428e      	cmp	r6, r1
 800d496:	d1ee      	bne.n	800d476 <__ieee754_pow+0xc6>
 800d498:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800d49c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800d4a0:	ea53 0308 	orrs.w	r3, r3, r8
 800d4a4:	f000 8466 	beq.w	800dd74 <__ieee754_pow+0x9c4>
 800d4a8:	4b4d      	ldr	r3, [pc, #308]	; (800d5e0 <__ieee754_pow+0x230>)
 800d4aa:	429c      	cmp	r4, r3
 800d4ac:	dd0d      	ble.n	800d4ca <__ieee754_pow+0x11a>
 800d4ae:	2f00      	cmp	r7, #0
 800d4b0:	f280 8464 	bge.w	800dd7c <__ieee754_pow+0x9cc>
 800d4b4:	2000      	movs	r0, #0
 800d4b6:	2100      	movs	r1, #0
 800d4b8:	ec41 0b10 	vmov	d0, r0, r1
 800d4bc:	b00d      	add	sp, #52	; 0x34
 800d4be:	ecbd 8b06 	vpop	{d8-d10}
 800d4c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4c6:	2102      	movs	r1, #2
 800d4c8:	e7e0      	b.n	800d48c <__ieee754_pow+0xdc>
 800d4ca:	2f00      	cmp	r7, #0
 800d4cc:	daf2      	bge.n	800d4b4 <__ieee754_pow+0x104>
 800d4ce:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800d4d2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d4d6:	e7ef      	b.n	800d4b8 <__ieee754_pow+0x108>
 800d4d8:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800d4dc:	d104      	bne.n	800d4e8 <__ieee754_pow+0x138>
 800d4de:	4610      	mov	r0, r2
 800d4e0:	4619      	mov	r1, r3
 800d4e2:	f7f3 f889 	bl	80005f8 <__aeabi_dmul>
 800d4e6:	e7e7      	b.n	800d4b8 <__ieee754_pow+0x108>
 800d4e8:	493e      	ldr	r1, [pc, #248]	; (800d5e4 <__ieee754_pow+0x234>)
 800d4ea:	428f      	cmp	r7, r1
 800d4ec:	d10d      	bne.n	800d50a <__ieee754_pow+0x15a>
 800d4ee:	f1b9 0f00 	cmp.w	r9, #0
 800d4f2:	db0a      	blt.n	800d50a <__ieee754_pow+0x15a>
 800d4f4:	ec43 2b10 	vmov	d0, r2, r3
 800d4f8:	b00d      	add	sp, #52	; 0x34
 800d4fa:	ecbd 8b06 	vpop	{d8-d10}
 800d4fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d502:	f000 bc77 	b.w	800ddf4 <__ieee754_sqrt>
 800d506:	2100      	movs	r1, #0
 800d508:	9100      	str	r1, [sp, #0]
 800d50a:	ec43 2b10 	vmov	d0, r2, r3
 800d50e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d512:	f000 fd23 	bl	800df5c <fabs>
 800d516:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d51a:	ec51 0b10 	vmov	r0, r1, d0
 800d51e:	f1b8 0f00 	cmp.w	r8, #0
 800d522:	d12a      	bne.n	800d57a <__ieee754_pow+0x1ca>
 800d524:	b12c      	cbz	r4, 800d532 <__ieee754_pow+0x182>
 800d526:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800d5dc <__ieee754_pow+0x22c>
 800d52a:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800d52e:	45e6      	cmp	lr, ip
 800d530:	d123      	bne.n	800d57a <__ieee754_pow+0x1ca>
 800d532:	2f00      	cmp	r7, #0
 800d534:	da05      	bge.n	800d542 <__ieee754_pow+0x192>
 800d536:	4602      	mov	r2, r0
 800d538:	460b      	mov	r3, r1
 800d53a:	2000      	movs	r0, #0
 800d53c:	4927      	ldr	r1, [pc, #156]	; (800d5dc <__ieee754_pow+0x22c>)
 800d53e:	f7f3 f985 	bl	800084c <__aeabi_ddiv>
 800d542:	f1b9 0f00 	cmp.w	r9, #0
 800d546:	dab7      	bge.n	800d4b8 <__ieee754_pow+0x108>
 800d548:	9b00      	ldr	r3, [sp, #0]
 800d54a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800d54e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d552:	4323      	orrs	r3, r4
 800d554:	d108      	bne.n	800d568 <__ieee754_pow+0x1b8>
 800d556:	4602      	mov	r2, r0
 800d558:	460b      	mov	r3, r1
 800d55a:	4610      	mov	r0, r2
 800d55c:	4619      	mov	r1, r3
 800d55e:	f7f2 fe93 	bl	8000288 <__aeabi_dsub>
 800d562:	4602      	mov	r2, r0
 800d564:	460b      	mov	r3, r1
 800d566:	e78d      	b.n	800d484 <__ieee754_pow+0xd4>
 800d568:	9b00      	ldr	r3, [sp, #0]
 800d56a:	2b01      	cmp	r3, #1
 800d56c:	d1a4      	bne.n	800d4b8 <__ieee754_pow+0x108>
 800d56e:	4602      	mov	r2, r0
 800d570:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d574:	4610      	mov	r0, r2
 800d576:	4619      	mov	r1, r3
 800d578:	e79e      	b.n	800d4b8 <__ieee754_pow+0x108>
 800d57a:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800d57e:	f10c 35ff 	add.w	r5, ip, #4294967295
 800d582:	950a      	str	r5, [sp, #40]	; 0x28
 800d584:	9d00      	ldr	r5, [sp, #0]
 800d586:	46ac      	mov	ip, r5
 800d588:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800d58a:	ea5c 0505 	orrs.w	r5, ip, r5
 800d58e:	d0e4      	beq.n	800d55a <__ieee754_pow+0x1aa>
 800d590:	4b15      	ldr	r3, [pc, #84]	; (800d5e8 <__ieee754_pow+0x238>)
 800d592:	429e      	cmp	r6, r3
 800d594:	f340 80fc 	ble.w	800d790 <__ieee754_pow+0x3e0>
 800d598:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800d59c:	429e      	cmp	r6, r3
 800d59e:	4b10      	ldr	r3, [pc, #64]	; (800d5e0 <__ieee754_pow+0x230>)
 800d5a0:	dd07      	ble.n	800d5b2 <__ieee754_pow+0x202>
 800d5a2:	429c      	cmp	r4, r3
 800d5a4:	dc0a      	bgt.n	800d5bc <__ieee754_pow+0x20c>
 800d5a6:	2f00      	cmp	r7, #0
 800d5a8:	da84      	bge.n	800d4b4 <__ieee754_pow+0x104>
 800d5aa:	a307      	add	r3, pc, #28	; (adr r3, 800d5c8 <__ieee754_pow+0x218>)
 800d5ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5b0:	e795      	b.n	800d4de <__ieee754_pow+0x12e>
 800d5b2:	429c      	cmp	r4, r3
 800d5b4:	dbf7      	blt.n	800d5a6 <__ieee754_pow+0x1f6>
 800d5b6:	4b09      	ldr	r3, [pc, #36]	; (800d5dc <__ieee754_pow+0x22c>)
 800d5b8:	429c      	cmp	r4, r3
 800d5ba:	dd17      	ble.n	800d5ec <__ieee754_pow+0x23c>
 800d5bc:	2f00      	cmp	r7, #0
 800d5be:	dcf4      	bgt.n	800d5aa <__ieee754_pow+0x1fa>
 800d5c0:	e778      	b.n	800d4b4 <__ieee754_pow+0x104>
 800d5c2:	bf00      	nop
 800d5c4:	f3af 8000 	nop.w
 800d5c8:	8800759c 	.word	0x8800759c
 800d5cc:	7e37e43c 	.word	0x7e37e43c
 800d5d0:	7ff00000 	.word	0x7ff00000
 800d5d4:	0800e540 	.word	0x0800e540
 800d5d8:	433fffff 	.word	0x433fffff
 800d5dc:	3ff00000 	.word	0x3ff00000
 800d5e0:	3fefffff 	.word	0x3fefffff
 800d5e4:	3fe00000 	.word	0x3fe00000
 800d5e8:	41e00000 	.word	0x41e00000
 800d5ec:	4b64      	ldr	r3, [pc, #400]	; (800d780 <__ieee754_pow+0x3d0>)
 800d5ee:	2200      	movs	r2, #0
 800d5f0:	f7f2 fe4a 	bl	8000288 <__aeabi_dsub>
 800d5f4:	a356      	add	r3, pc, #344	; (adr r3, 800d750 <__ieee754_pow+0x3a0>)
 800d5f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5fa:	4604      	mov	r4, r0
 800d5fc:	460d      	mov	r5, r1
 800d5fe:	f7f2 fffb 	bl	80005f8 <__aeabi_dmul>
 800d602:	a355      	add	r3, pc, #340	; (adr r3, 800d758 <__ieee754_pow+0x3a8>)
 800d604:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d608:	4606      	mov	r6, r0
 800d60a:	460f      	mov	r7, r1
 800d60c:	4620      	mov	r0, r4
 800d60e:	4629      	mov	r1, r5
 800d610:	f7f2 fff2 	bl	80005f8 <__aeabi_dmul>
 800d614:	4b5b      	ldr	r3, [pc, #364]	; (800d784 <__ieee754_pow+0x3d4>)
 800d616:	4682      	mov	sl, r0
 800d618:	468b      	mov	fp, r1
 800d61a:	2200      	movs	r2, #0
 800d61c:	4620      	mov	r0, r4
 800d61e:	4629      	mov	r1, r5
 800d620:	f7f2 ffea 	bl	80005f8 <__aeabi_dmul>
 800d624:	4602      	mov	r2, r0
 800d626:	460b      	mov	r3, r1
 800d628:	a14d      	add	r1, pc, #308	; (adr r1, 800d760 <__ieee754_pow+0x3b0>)
 800d62a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d62e:	f7f2 fe2b 	bl	8000288 <__aeabi_dsub>
 800d632:	4622      	mov	r2, r4
 800d634:	462b      	mov	r3, r5
 800d636:	f7f2 ffdf 	bl	80005f8 <__aeabi_dmul>
 800d63a:	4602      	mov	r2, r0
 800d63c:	460b      	mov	r3, r1
 800d63e:	2000      	movs	r0, #0
 800d640:	4951      	ldr	r1, [pc, #324]	; (800d788 <__ieee754_pow+0x3d8>)
 800d642:	f7f2 fe21 	bl	8000288 <__aeabi_dsub>
 800d646:	4622      	mov	r2, r4
 800d648:	4680      	mov	r8, r0
 800d64a:	4689      	mov	r9, r1
 800d64c:	462b      	mov	r3, r5
 800d64e:	4620      	mov	r0, r4
 800d650:	4629      	mov	r1, r5
 800d652:	f7f2 ffd1 	bl	80005f8 <__aeabi_dmul>
 800d656:	4602      	mov	r2, r0
 800d658:	460b      	mov	r3, r1
 800d65a:	4640      	mov	r0, r8
 800d65c:	4649      	mov	r1, r9
 800d65e:	f7f2 ffcb 	bl	80005f8 <__aeabi_dmul>
 800d662:	a341      	add	r3, pc, #260	; (adr r3, 800d768 <__ieee754_pow+0x3b8>)
 800d664:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d668:	f7f2 ffc6 	bl	80005f8 <__aeabi_dmul>
 800d66c:	4602      	mov	r2, r0
 800d66e:	460b      	mov	r3, r1
 800d670:	4650      	mov	r0, sl
 800d672:	4659      	mov	r1, fp
 800d674:	f7f2 fe08 	bl	8000288 <__aeabi_dsub>
 800d678:	4602      	mov	r2, r0
 800d67a:	460b      	mov	r3, r1
 800d67c:	4680      	mov	r8, r0
 800d67e:	4689      	mov	r9, r1
 800d680:	4630      	mov	r0, r6
 800d682:	4639      	mov	r1, r7
 800d684:	f7f2 fe02 	bl	800028c <__adddf3>
 800d688:	2400      	movs	r4, #0
 800d68a:	4632      	mov	r2, r6
 800d68c:	463b      	mov	r3, r7
 800d68e:	4620      	mov	r0, r4
 800d690:	460d      	mov	r5, r1
 800d692:	f7f2 fdf9 	bl	8000288 <__aeabi_dsub>
 800d696:	4602      	mov	r2, r0
 800d698:	460b      	mov	r3, r1
 800d69a:	4640      	mov	r0, r8
 800d69c:	4649      	mov	r1, r9
 800d69e:	f7f2 fdf3 	bl	8000288 <__aeabi_dsub>
 800d6a2:	9b00      	ldr	r3, [sp, #0]
 800d6a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d6a6:	3b01      	subs	r3, #1
 800d6a8:	4313      	orrs	r3, r2
 800d6aa:	4682      	mov	sl, r0
 800d6ac:	468b      	mov	fp, r1
 800d6ae:	f040 81f1 	bne.w	800da94 <__ieee754_pow+0x6e4>
 800d6b2:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800d770 <__ieee754_pow+0x3c0>
 800d6b6:	eeb0 8a47 	vmov.f32	s16, s14
 800d6ba:	eef0 8a67 	vmov.f32	s17, s15
 800d6be:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d6c2:	2600      	movs	r6, #0
 800d6c4:	4632      	mov	r2, r6
 800d6c6:	463b      	mov	r3, r7
 800d6c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d6cc:	f7f2 fddc 	bl	8000288 <__aeabi_dsub>
 800d6d0:	4622      	mov	r2, r4
 800d6d2:	462b      	mov	r3, r5
 800d6d4:	f7f2 ff90 	bl	80005f8 <__aeabi_dmul>
 800d6d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d6dc:	4680      	mov	r8, r0
 800d6de:	4689      	mov	r9, r1
 800d6e0:	4650      	mov	r0, sl
 800d6e2:	4659      	mov	r1, fp
 800d6e4:	f7f2 ff88 	bl	80005f8 <__aeabi_dmul>
 800d6e8:	4602      	mov	r2, r0
 800d6ea:	460b      	mov	r3, r1
 800d6ec:	4640      	mov	r0, r8
 800d6ee:	4649      	mov	r1, r9
 800d6f0:	f7f2 fdcc 	bl	800028c <__adddf3>
 800d6f4:	4632      	mov	r2, r6
 800d6f6:	463b      	mov	r3, r7
 800d6f8:	4680      	mov	r8, r0
 800d6fa:	4689      	mov	r9, r1
 800d6fc:	4620      	mov	r0, r4
 800d6fe:	4629      	mov	r1, r5
 800d700:	f7f2 ff7a 	bl	80005f8 <__aeabi_dmul>
 800d704:	460b      	mov	r3, r1
 800d706:	4604      	mov	r4, r0
 800d708:	460d      	mov	r5, r1
 800d70a:	4602      	mov	r2, r0
 800d70c:	4649      	mov	r1, r9
 800d70e:	4640      	mov	r0, r8
 800d710:	f7f2 fdbc 	bl	800028c <__adddf3>
 800d714:	4b1d      	ldr	r3, [pc, #116]	; (800d78c <__ieee754_pow+0x3dc>)
 800d716:	4299      	cmp	r1, r3
 800d718:	ec45 4b19 	vmov	d9, r4, r5
 800d71c:	4606      	mov	r6, r0
 800d71e:	460f      	mov	r7, r1
 800d720:	468b      	mov	fp, r1
 800d722:	f340 82fe 	ble.w	800dd22 <__ieee754_pow+0x972>
 800d726:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800d72a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800d72e:	4303      	orrs	r3, r0
 800d730:	f000 81f0 	beq.w	800db14 <__ieee754_pow+0x764>
 800d734:	a310      	add	r3, pc, #64	; (adr r3, 800d778 <__ieee754_pow+0x3c8>)
 800d736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d73a:	ec51 0b18 	vmov	r0, r1, d8
 800d73e:	f7f2 ff5b 	bl	80005f8 <__aeabi_dmul>
 800d742:	a30d      	add	r3, pc, #52	; (adr r3, 800d778 <__ieee754_pow+0x3c8>)
 800d744:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d748:	e6cb      	b.n	800d4e2 <__ieee754_pow+0x132>
 800d74a:	bf00      	nop
 800d74c:	f3af 8000 	nop.w
 800d750:	60000000 	.word	0x60000000
 800d754:	3ff71547 	.word	0x3ff71547
 800d758:	f85ddf44 	.word	0xf85ddf44
 800d75c:	3e54ae0b 	.word	0x3e54ae0b
 800d760:	55555555 	.word	0x55555555
 800d764:	3fd55555 	.word	0x3fd55555
 800d768:	652b82fe 	.word	0x652b82fe
 800d76c:	3ff71547 	.word	0x3ff71547
 800d770:	00000000 	.word	0x00000000
 800d774:	bff00000 	.word	0xbff00000
 800d778:	8800759c 	.word	0x8800759c
 800d77c:	7e37e43c 	.word	0x7e37e43c
 800d780:	3ff00000 	.word	0x3ff00000
 800d784:	3fd00000 	.word	0x3fd00000
 800d788:	3fe00000 	.word	0x3fe00000
 800d78c:	408fffff 	.word	0x408fffff
 800d790:	4bd7      	ldr	r3, [pc, #860]	; (800daf0 <__ieee754_pow+0x740>)
 800d792:	ea03 0309 	and.w	r3, r3, r9
 800d796:	2200      	movs	r2, #0
 800d798:	b92b      	cbnz	r3, 800d7a6 <__ieee754_pow+0x3f6>
 800d79a:	4bd6      	ldr	r3, [pc, #856]	; (800daf4 <__ieee754_pow+0x744>)
 800d79c:	f7f2 ff2c 	bl	80005f8 <__aeabi_dmul>
 800d7a0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800d7a4:	460c      	mov	r4, r1
 800d7a6:	1523      	asrs	r3, r4, #20
 800d7a8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d7ac:	4413      	add	r3, r2
 800d7ae:	9309      	str	r3, [sp, #36]	; 0x24
 800d7b0:	4bd1      	ldr	r3, [pc, #836]	; (800daf8 <__ieee754_pow+0x748>)
 800d7b2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800d7b6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800d7ba:	429c      	cmp	r4, r3
 800d7bc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800d7c0:	dd08      	ble.n	800d7d4 <__ieee754_pow+0x424>
 800d7c2:	4bce      	ldr	r3, [pc, #824]	; (800dafc <__ieee754_pow+0x74c>)
 800d7c4:	429c      	cmp	r4, r3
 800d7c6:	f340 8163 	ble.w	800da90 <__ieee754_pow+0x6e0>
 800d7ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d7cc:	3301      	adds	r3, #1
 800d7ce:	9309      	str	r3, [sp, #36]	; 0x24
 800d7d0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800d7d4:	2400      	movs	r4, #0
 800d7d6:	00e3      	lsls	r3, r4, #3
 800d7d8:	930b      	str	r3, [sp, #44]	; 0x2c
 800d7da:	4bc9      	ldr	r3, [pc, #804]	; (800db00 <__ieee754_pow+0x750>)
 800d7dc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d7e0:	ed93 7b00 	vldr	d7, [r3]
 800d7e4:	4629      	mov	r1, r5
 800d7e6:	ec53 2b17 	vmov	r2, r3, d7
 800d7ea:	eeb0 8a47 	vmov.f32	s16, s14
 800d7ee:	eef0 8a67 	vmov.f32	s17, s15
 800d7f2:	4682      	mov	sl, r0
 800d7f4:	f7f2 fd48 	bl	8000288 <__aeabi_dsub>
 800d7f8:	4652      	mov	r2, sl
 800d7fa:	4606      	mov	r6, r0
 800d7fc:	460f      	mov	r7, r1
 800d7fe:	462b      	mov	r3, r5
 800d800:	ec51 0b18 	vmov	r0, r1, d8
 800d804:	f7f2 fd42 	bl	800028c <__adddf3>
 800d808:	4602      	mov	r2, r0
 800d80a:	460b      	mov	r3, r1
 800d80c:	2000      	movs	r0, #0
 800d80e:	49bd      	ldr	r1, [pc, #756]	; (800db04 <__ieee754_pow+0x754>)
 800d810:	f7f3 f81c 	bl	800084c <__aeabi_ddiv>
 800d814:	ec41 0b19 	vmov	d9, r0, r1
 800d818:	4602      	mov	r2, r0
 800d81a:	460b      	mov	r3, r1
 800d81c:	4630      	mov	r0, r6
 800d81e:	4639      	mov	r1, r7
 800d820:	f7f2 feea 	bl	80005f8 <__aeabi_dmul>
 800d824:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d828:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d82c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d830:	2300      	movs	r3, #0
 800d832:	9304      	str	r3, [sp, #16]
 800d834:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800d838:	46ab      	mov	fp, r5
 800d83a:	106d      	asrs	r5, r5, #1
 800d83c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800d840:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800d844:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800d848:	2200      	movs	r2, #0
 800d84a:	4640      	mov	r0, r8
 800d84c:	4649      	mov	r1, r9
 800d84e:	4614      	mov	r4, r2
 800d850:	461d      	mov	r5, r3
 800d852:	f7f2 fed1 	bl	80005f8 <__aeabi_dmul>
 800d856:	4602      	mov	r2, r0
 800d858:	460b      	mov	r3, r1
 800d85a:	4630      	mov	r0, r6
 800d85c:	4639      	mov	r1, r7
 800d85e:	f7f2 fd13 	bl	8000288 <__aeabi_dsub>
 800d862:	ec53 2b18 	vmov	r2, r3, d8
 800d866:	4606      	mov	r6, r0
 800d868:	460f      	mov	r7, r1
 800d86a:	4620      	mov	r0, r4
 800d86c:	4629      	mov	r1, r5
 800d86e:	f7f2 fd0b 	bl	8000288 <__aeabi_dsub>
 800d872:	4602      	mov	r2, r0
 800d874:	460b      	mov	r3, r1
 800d876:	4650      	mov	r0, sl
 800d878:	4659      	mov	r1, fp
 800d87a:	f7f2 fd05 	bl	8000288 <__aeabi_dsub>
 800d87e:	4642      	mov	r2, r8
 800d880:	464b      	mov	r3, r9
 800d882:	f7f2 feb9 	bl	80005f8 <__aeabi_dmul>
 800d886:	4602      	mov	r2, r0
 800d888:	460b      	mov	r3, r1
 800d88a:	4630      	mov	r0, r6
 800d88c:	4639      	mov	r1, r7
 800d88e:	f7f2 fcfb 	bl	8000288 <__aeabi_dsub>
 800d892:	ec53 2b19 	vmov	r2, r3, d9
 800d896:	f7f2 feaf 	bl	80005f8 <__aeabi_dmul>
 800d89a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d89e:	ec41 0b18 	vmov	d8, r0, r1
 800d8a2:	4610      	mov	r0, r2
 800d8a4:	4619      	mov	r1, r3
 800d8a6:	f7f2 fea7 	bl	80005f8 <__aeabi_dmul>
 800d8aa:	a37d      	add	r3, pc, #500	; (adr r3, 800daa0 <__ieee754_pow+0x6f0>)
 800d8ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8b0:	4604      	mov	r4, r0
 800d8b2:	460d      	mov	r5, r1
 800d8b4:	f7f2 fea0 	bl	80005f8 <__aeabi_dmul>
 800d8b8:	a37b      	add	r3, pc, #492	; (adr r3, 800daa8 <__ieee754_pow+0x6f8>)
 800d8ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8be:	f7f2 fce5 	bl	800028c <__adddf3>
 800d8c2:	4622      	mov	r2, r4
 800d8c4:	462b      	mov	r3, r5
 800d8c6:	f7f2 fe97 	bl	80005f8 <__aeabi_dmul>
 800d8ca:	a379      	add	r3, pc, #484	; (adr r3, 800dab0 <__ieee754_pow+0x700>)
 800d8cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8d0:	f7f2 fcdc 	bl	800028c <__adddf3>
 800d8d4:	4622      	mov	r2, r4
 800d8d6:	462b      	mov	r3, r5
 800d8d8:	f7f2 fe8e 	bl	80005f8 <__aeabi_dmul>
 800d8dc:	a376      	add	r3, pc, #472	; (adr r3, 800dab8 <__ieee754_pow+0x708>)
 800d8de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8e2:	f7f2 fcd3 	bl	800028c <__adddf3>
 800d8e6:	4622      	mov	r2, r4
 800d8e8:	462b      	mov	r3, r5
 800d8ea:	f7f2 fe85 	bl	80005f8 <__aeabi_dmul>
 800d8ee:	a374      	add	r3, pc, #464	; (adr r3, 800dac0 <__ieee754_pow+0x710>)
 800d8f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8f4:	f7f2 fcca 	bl	800028c <__adddf3>
 800d8f8:	4622      	mov	r2, r4
 800d8fa:	462b      	mov	r3, r5
 800d8fc:	f7f2 fe7c 	bl	80005f8 <__aeabi_dmul>
 800d900:	a371      	add	r3, pc, #452	; (adr r3, 800dac8 <__ieee754_pow+0x718>)
 800d902:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d906:	f7f2 fcc1 	bl	800028c <__adddf3>
 800d90a:	4622      	mov	r2, r4
 800d90c:	4606      	mov	r6, r0
 800d90e:	460f      	mov	r7, r1
 800d910:	462b      	mov	r3, r5
 800d912:	4620      	mov	r0, r4
 800d914:	4629      	mov	r1, r5
 800d916:	f7f2 fe6f 	bl	80005f8 <__aeabi_dmul>
 800d91a:	4602      	mov	r2, r0
 800d91c:	460b      	mov	r3, r1
 800d91e:	4630      	mov	r0, r6
 800d920:	4639      	mov	r1, r7
 800d922:	f7f2 fe69 	bl	80005f8 <__aeabi_dmul>
 800d926:	4642      	mov	r2, r8
 800d928:	4604      	mov	r4, r0
 800d92a:	460d      	mov	r5, r1
 800d92c:	464b      	mov	r3, r9
 800d92e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d932:	f7f2 fcab 	bl	800028c <__adddf3>
 800d936:	ec53 2b18 	vmov	r2, r3, d8
 800d93a:	f7f2 fe5d 	bl	80005f8 <__aeabi_dmul>
 800d93e:	4622      	mov	r2, r4
 800d940:	462b      	mov	r3, r5
 800d942:	f7f2 fca3 	bl	800028c <__adddf3>
 800d946:	4642      	mov	r2, r8
 800d948:	4682      	mov	sl, r0
 800d94a:	468b      	mov	fp, r1
 800d94c:	464b      	mov	r3, r9
 800d94e:	4640      	mov	r0, r8
 800d950:	4649      	mov	r1, r9
 800d952:	f7f2 fe51 	bl	80005f8 <__aeabi_dmul>
 800d956:	4b6c      	ldr	r3, [pc, #432]	; (800db08 <__ieee754_pow+0x758>)
 800d958:	2200      	movs	r2, #0
 800d95a:	4606      	mov	r6, r0
 800d95c:	460f      	mov	r7, r1
 800d95e:	f7f2 fc95 	bl	800028c <__adddf3>
 800d962:	4652      	mov	r2, sl
 800d964:	465b      	mov	r3, fp
 800d966:	f7f2 fc91 	bl	800028c <__adddf3>
 800d96a:	9c04      	ldr	r4, [sp, #16]
 800d96c:	460d      	mov	r5, r1
 800d96e:	4622      	mov	r2, r4
 800d970:	460b      	mov	r3, r1
 800d972:	4640      	mov	r0, r8
 800d974:	4649      	mov	r1, r9
 800d976:	f7f2 fe3f 	bl	80005f8 <__aeabi_dmul>
 800d97a:	4b63      	ldr	r3, [pc, #396]	; (800db08 <__ieee754_pow+0x758>)
 800d97c:	4680      	mov	r8, r0
 800d97e:	4689      	mov	r9, r1
 800d980:	2200      	movs	r2, #0
 800d982:	4620      	mov	r0, r4
 800d984:	4629      	mov	r1, r5
 800d986:	f7f2 fc7f 	bl	8000288 <__aeabi_dsub>
 800d98a:	4632      	mov	r2, r6
 800d98c:	463b      	mov	r3, r7
 800d98e:	f7f2 fc7b 	bl	8000288 <__aeabi_dsub>
 800d992:	4602      	mov	r2, r0
 800d994:	460b      	mov	r3, r1
 800d996:	4650      	mov	r0, sl
 800d998:	4659      	mov	r1, fp
 800d99a:	f7f2 fc75 	bl	8000288 <__aeabi_dsub>
 800d99e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d9a2:	f7f2 fe29 	bl	80005f8 <__aeabi_dmul>
 800d9a6:	4622      	mov	r2, r4
 800d9a8:	4606      	mov	r6, r0
 800d9aa:	460f      	mov	r7, r1
 800d9ac:	462b      	mov	r3, r5
 800d9ae:	ec51 0b18 	vmov	r0, r1, d8
 800d9b2:	f7f2 fe21 	bl	80005f8 <__aeabi_dmul>
 800d9b6:	4602      	mov	r2, r0
 800d9b8:	460b      	mov	r3, r1
 800d9ba:	4630      	mov	r0, r6
 800d9bc:	4639      	mov	r1, r7
 800d9be:	f7f2 fc65 	bl	800028c <__adddf3>
 800d9c2:	4606      	mov	r6, r0
 800d9c4:	460f      	mov	r7, r1
 800d9c6:	4602      	mov	r2, r0
 800d9c8:	460b      	mov	r3, r1
 800d9ca:	4640      	mov	r0, r8
 800d9cc:	4649      	mov	r1, r9
 800d9ce:	f7f2 fc5d 	bl	800028c <__adddf3>
 800d9d2:	9c04      	ldr	r4, [sp, #16]
 800d9d4:	a33e      	add	r3, pc, #248	; (adr r3, 800dad0 <__ieee754_pow+0x720>)
 800d9d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9da:	4620      	mov	r0, r4
 800d9dc:	460d      	mov	r5, r1
 800d9de:	f7f2 fe0b 	bl	80005f8 <__aeabi_dmul>
 800d9e2:	4642      	mov	r2, r8
 800d9e4:	ec41 0b18 	vmov	d8, r0, r1
 800d9e8:	464b      	mov	r3, r9
 800d9ea:	4620      	mov	r0, r4
 800d9ec:	4629      	mov	r1, r5
 800d9ee:	f7f2 fc4b 	bl	8000288 <__aeabi_dsub>
 800d9f2:	4602      	mov	r2, r0
 800d9f4:	460b      	mov	r3, r1
 800d9f6:	4630      	mov	r0, r6
 800d9f8:	4639      	mov	r1, r7
 800d9fa:	f7f2 fc45 	bl	8000288 <__aeabi_dsub>
 800d9fe:	a336      	add	r3, pc, #216	; (adr r3, 800dad8 <__ieee754_pow+0x728>)
 800da00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da04:	f7f2 fdf8 	bl	80005f8 <__aeabi_dmul>
 800da08:	a335      	add	r3, pc, #212	; (adr r3, 800dae0 <__ieee754_pow+0x730>)
 800da0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da0e:	4606      	mov	r6, r0
 800da10:	460f      	mov	r7, r1
 800da12:	4620      	mov	r0, r4
 800da14:	4629      	mov	r1, r5
 800da16:	f7f2 fdef 	bl	80005f8 <__aeabi_dmul>
 800da1a:	4602      	mov	r2, r0
 800da1c:	460b      	mov	r3, r1
 800da1e:	4630      	mov	r0, r6
 800da20:	4639      	mov	r1, r7
 800da22:	f7f2 fc33 	bl	800028c <__adddf3>
 800da26:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800da28:	4b38      	ldr	r3, [pc, #224]	; (800db0c <__ieee754_pow+0x75c>)
 800da2a:	4413      	add	r3, r2
 800da2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da30:	f7f2 fc2c 	bl	800028c <__adddf3>
 800da34:	4682      	mov	sl, r0
 800da36:	9809      	ldr	r0, [sp, #36]	; 0x24
 800da38:	468b      	mov	fp, r1
 800da3a:	f7f2 fd73 	bl	8000524 <__aeabi_i2d>
 800da3e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800da40:	4b33      	ldr	r3, [pc, #204]	; (800db10 <__ieee754_pow+0x760>)
 800da42:	4413      	add	r3, r2
 800da44:	e9d3 8900 	ldrd	r8, r9, [r3]
 800da48:	4606      	mov	r6, r0
 800da4a:	460f      	mov	r7, r1
 800da4c:	4652      	mov	r2, sl
 800da4e:	465b      	mov	r3, fp
 800da50:	ec51 0b18 	vmov	r0, r1, d8
 800da54:	f7f2 fc1a 	bl	800028c <__adddf3>
 800da58:	4642      	mov	r2, r8
 800da5a:	464b      	mov	r3, r9
 800da5c:	f7f2 fc16 	bl	800028c <__adddf3>
 800da60:	4632      	mov	r2, r6
 800da62:	463b      	mov	r3, r7
 800da64:	f7f2 fc12 	bl	800028c <__adddf3>
 800da68:	9c04      	ldr	r4, [sp, #16]
 800da6a:	4632      	mov	r2, r6
 800da6c:	463b      	mov	r3, r7
 800da6e:	4620      	mov	r0, r4
 800da70:	460d      	mov	r5, r1
 800da72:	f7f2 fc09 	bl	8000288 <__aeabi_dsub>
 800da76:	4642      	mov	r2, r8
 800da78:	464b      	mov	r3, r9
 800da7a:	f7f2 fc05 	bl	8000288 <__aeabi_dsub>
 800da7e:	ec53 2b18 	vmov	r2, r3, d8
 800da82:	f7f2 fc01 	bl	8000288 <__aeabi_dsub>
 800da86:	4602      	mov	r2, r0
 800da88:	460b      	mov	r3, r1
 800da8a:	4650      	mov	r0, sl
 800da8c:	4659      	mov	r1, fp
 800da8e:	e606      	b.n	800d69e <__ieee754_pow+0x2ee>
 800da90:	2401      	movs	r4, #1
 800da92:	e6a0      	b.n	800d7d6 <__ieee754_pow+0x426>
 800da94:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800dae8 <__ieee754_pow+0x738>
 800da98:	e60d      	b.n	800d6b6 <__ieee754_pow+0x306>
 800da9a:	bf00      	nop
 800da9c:	f3af 8000 	nop.w
 800daa0:	4a454eef 	.word	0x4a454eef
 800daa4:	3fca7e28 	.word	0x3fca7e28
 800daa8:	93c9db65 	.word	0x93c9db65
 800daac:	3fcd864a 	.word	0x3fcd864a
 800dab0:	a91d4101 	.word	0xa91d4101
 800dab4:	3fd17460 	.word	0x3fd17460
 800dab8:	518f264d 	.word	0x518f264d
 800dabc:	3fd55555 	.word	0x3fd55555
 800dac0:	db6fabff 	.word	0xdb6fabff
 800dac4:	3fdb6db6 	.word	0x3fdb6db6
 800dac8:	33333303 	.word	0x33333303
 800dacc:	3fe33333 	.word	0x3fe33333
 800dad0:	e0000000 	.word	0xe0000000
 800dad4:	3feec709 	.word	0x3feec709
 800dad8:	dc3a03fd 	.word	0xdc3a03fd
 800dadc:	3feec709 	.word	0x3feec709
 800dae0:	145b01f5 	.word	0x145b01f5
 800dae4:	be3e2fe0 	.word	0xbe3e2fe0
 800dae8:	00000000 	.word	0x00000000
 800daec:	3ff00000 	.word	0x3ff00000
 800daf0:	7ff00000 	.word	0x7ff00000
 800daf4:	43400000 	.word	0x43400000
 800daf8:	0003988e 	.word	0x0003988e
 800dafc:	000bb679 	.word	0x000bb679
 800db00:	0800e6b0 	.word	0x0800e6b0
 800db04:	3ff00000 	.word	0x3ff00000
 800db08:	40080000 	.word	0x40080000
 800db0c:	0800e6d0 	.word	0x0800e6d0
 800db10:	0800e6c0 	.word	0x0800e6c0
 800db14:	a3b5      	add	r3, pc, #724	; (adr r3, 800ddec <__ieee754_pow+0xa3c>)
 800db16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db1a:	4640      	mov	r0, r8
 800db1c:	4649      	mov	r1, r9
 800db1e:	f7f2 fbb5 	bl	800028c <__adddf3>
 800db22:	4622      	mov	r2, r4
 800db24:	ec41 0b1a 	vmov	d10, r0, r1
 800db28:	462b      	mov	r3, r5
 800db2a:	4630      	mov	r0, r6
 800db2c:	4639      	mov	r1, r7
 800db2e:	f7f2 fbab 	bl	8000288 <__aeabi_dsub>
 800db32:	4602      	mov	r2, r0
 800db34:	460b      	mov	r3, r1
 800db36:	ec51 0b1a 	vmov	r0, r1, d10
 800db3a:	f7f2 ffed 	bl	8000b18 <__aeabi_dcmpgt>
 800db3e:	2800      	cmp	r0, #0
 800db40:	f47f adf8 	bne.w	800d734 <__ieee754_pow+0x384>
 800db44:	4aa4      	ldr	r2, [pc, #656]	; (800ddd8 <__ieee754_pow+0xa28>)
 800db46:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800db4a:	4293      	cmp	r3, r2
 800db4c:	f340 810b 	ble.w	800dd66 <__ieee754_pow+0x9b6>
 800db50:	151b      	asrs	r3, r3, #20
 800db52:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800db56:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800db5a:	fa4a f303 	asr.w	r3, sl, r3
 800db5e:	445b      	add	r3, fp
 800db60:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800db64:	4e9d      	ldr	r6, [pc, #628]	; (800dddc <__ieee754_pow+0xa2c>)
 800db66:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800db6a:	4116      	asrs	r6, r2
 800db6c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800db70:	2000      	movs	r0, #0
 800db72:	ea23 0106 	bic.w	r1, r3, r6
 800db76:	f1c2 0214 	rsb	r2, r2, #20
 800db7a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800db7e:	fa4a fa02 	asr.w	sl, sl, r2
 800db82:	f1bb 0f00 	cmp.w	fp, #0
 800db86:	4602      	mov	r2, r0
 800db88:	460b      	mov	r3, r1
 800db8a:	4620      	mov	r0, r4
 800db8c:	4629      	mov	r1, r5
 800db8e:	bfb8      	it	lt
 800db90:	f1ca 0a00 	rsblt	sl, sl, #0
 800db94:	f7f2 fb78 	bl	8000288 <__aeabi_dsub>
 800db98:	ec41 0b19 	vmov	d9, r0, r1
 800db9c:	4642      	mov	r2, r8
 800db9e:	464b      	mov	r3, r9
 800dba0:	ec51 0b19 	vmov	r0, r1, d9
 800dba4:	f7f2 fb72 	bl	800028c <__adddf3>
 800dba8:	2400      	movs	r4, #0
 800dbaa:	a379      	add	r3, pc, #484	; (adr r3, 800dd90 <__ieee754_pow+0x9e0>)
 800dbac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbb0:	4620      	mov	r0, r4
 800dbb2:	460d      	mov	r5, r1
 800dbb4:	f7f2 fd20 	bl	80005f8 <__aeabi_dmul>
 800dbb8:	ec53 2b19 	vmov	r2, r3, d9
 800dbbc:	4606      	mov	r6, r0
 800dbbe:	460f      	mov	r7, r1
 800dbc0:	4620      	mov	r0, r4
 800dbc2:	4629      	mov	r1, r5
 800dbc4:	f7f2 fb60 	bl	8000288 <__aeabi_dsub>
 800dbc8:	4602      	mov	r2, r0
 800dbca:	460b      	mov	r3, r1
 800dbcc:	4640      	mov	r0, r8
 800dbce:	4649      	mov	r1, r9
 800dbd0:	f7f2 fb5a 	bl	8000288 <__aeabi_dsub>
 800dbd4:	a370      	add	r3, pc, #448	; (adr r3, 800dd98 <__ieee754_pow+0x9e8>)
 800dbd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbda:	f7f2 fd0d 	bl	80005f8 <__aeabi_dmul>
 800dbde:	a370      	add	r3, pc, #448	; (adr r3, 800dda0 <__ieee754_pow+0x9f0>)
 800dbe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbe4:	4680      	mov	r8, r0
 800dbe6:	4689      	mov	r9, r1
 800dbe8:	4620      	mov	r0, r4
 800dbea:	4629      	mov	r1, r5
 800dbec:	f7f2 fd04 	bl	80005f8 <__aeabi_dmul>
 800dbf0:	4602      	mov	r2, r0
 800dbf2:	460b      	mov	r3, r1
 800dbf4:	4640      	mov	r0, r8
 800dbf6:	4649      	mov	r1, r9
 800dbf8:	f7f2 fb48 	bl	800028c <__adddf3>
 800dbfc:	4604      	mov	r4, r0
 800dbfe:	460d      	mov	r5, r1
 800dc00:	4602      	mov	r2, r0
 800dc02:	460b      	mov	r3, r1
 800dc04:	4630      	mov	r0, r6
 800dc06:	4639      	mov	r1, r7
 800dc08:	f7f2 fb40 	bl	800028c <__adddf3>
 800dc0c:	4632      	mov	r2, r6
 800dc0e:	463b      	mov	r3, r7
 800dc10:	4680      	mov	r8, r0
 800dc12:	4689      	mov	r9, r1
 800dc14:	f7f2 fb38 	bl	8000288 <__aeabi_dsub>
 800dc18:	4602      	mov	r2, r0
 800dc1a:	460b      	mov	r3, r1
 800dc1c:	4620      	mov	r0, r4
 800dc1e:	4629      	mov	r1, r5
 800dc20:	f7f2 fb32 	bl	8000288 <__aeabi_dsub>
 800dc24:	4642      	mov	r2, r8
 800dc26:	4606      	mov	r6, r0
 800dc28:	460f      	mov	r7, r1
 800dc2a:	464b      	mov	r3, r9
 800dc2c:	4640      	mov	r0, r8
 800dc2e:	4649      	mov	r1, r9
 800dc30:	f7f2 fce2 	bl	80005f8 <__aeabi_dmul>
 800dc34:	a35c      	add	r3, pc, #368	; (adr r3, 800dda8 <__ieee754_pow+0x9f8>)
 800dc36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc3a:	4604      	mov	r4, r0
 800dc3c:	460d      	mov	r5, r1
 800dc3e:	f7f2 fcdb 	bl	80005f8 <__aeabi_dmul>
 800dc42:	a35b      	add	r3, pc, #364	; (adr r3, 800ddb0 <__ieee754_pow+0xa00>)
 800dc44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc48:	f7f2 fb1e 	bl	8000288 <__aeabi_dsub>
 800dc4c:	4622      	mov	r2, r4
 800dc4e:	462b      	mov	r3, r5
 800dc50:	f7f2 fcd2 	bl	80005f8 <__aeabi_dmul>
 800dc54:	a358      	add	r3, pc, #352	; (adr r3, 800ddb8 <__ieee754_pow+0xa08>)
 800dc56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc5a:	f7f2 fb17 	bl	800028c <__adddf3>
 800dc5e:	4622      	mov	r2, r4
 800dc60:	462b      	mov	r3, r5
 800dc62:	f7f2 fcc9 	bl	80005f8 <__aeabi_dmul>
 800dc66:	a356      	add	r3, pc, #344	; (adr r3, 800ddc0 <__ieee754_pow+0xa10>)
 800dc68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc6c:	f7f2 fb0c 	bl	8000288 <__aeabi_dsub>
 800dc70:	4622      	mov	r2, r4
 800dc72:	462b      	mov	r3, r5
 800dc74:	f7f2 fcc0 	bl	80005f8 <__aeabi_dmul>
 800dc78:	a353      	add	r3, pc, #332	; (adr r3, 800ddc8 <__ieee754_pow+0xa18>)
 800dc7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc7e:	f7f2 fb05 	bl	800028c <__adddf3>
 800dc82:	4622      	mov	r2, r4
 800dc84:	462b      	mov	r3, r5
 800dc86:	f7f2 fcb7 	bl	80005f8 <__aeabi_dmul>
 800dc8a:	4602      	mov	r2, r0
 800dc8c:	460b      	mov	r3, r1
 800dc8e:	4640      	mov	r0, r8
 800dc90:	4649      	mov	r1, r9
 800dc92:	f7f2 faf9 	bl	8000288 <__aeabi_dsub>
 800dc96:	4604      	mov	r4, r0
 800dc98:	460d      	mov	r5, r1
 800dc9a:	4602      	mov	r2, r0
 800dc9c:	460b      	mov	r3, r1
 800dc9e:	4640      	mov	r0, r8
 800dca0:	4649      	mov	r1, r9
 800dca2:	f7f2 fca9 	bl	80005f8 <__aeabi_dmul>
 800dca6:	2200      	movs	r2, #0
 800dca8:	ec41 0b19 	vmov	d9, r0, r1
 800dcac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800dcb0:	4620      	mov	r0, r4
 800dcb2:	4629      	mov	r1, r5
 800dcb4:	f7f2 fae8 	bl	8000288 <__aeabi_dsub>
 800dcb8:	4602      	mov	r2, r0
 800dcba:	460b      	mov	r3, r1
 800dcbc:	ec51 0b19 	vmov	r0, r1, d9
 800dcc0:	f7f2 fdc4 	bl	800084c <__aeabi_ddiv>
 800dcc4:	4632      	mov	r2, r6
 800dcc6:	4604      	mov	r4, r0
 800dcc8:	460d      	mov	r5, r1
 800dcca:	463b      	mov	r3, r7
 800dccc:	4640      	mov	r0, r8
 800dcce:	4649      	mov	r1, r9
 800dcd0:	f7f2 fc92 	bl	80005f8 <__aeabi_dmul>
 800dcd4:	4632      	mov	r2, r6
 800dcd6:	463b      	mov	r3, r7
 800dcd8:	f7f2 fad8 	bl	800028c <__adddf3>
 800dcdc:	4602      	mov	r2, r0
 800dcde:	460b      	mov	r3, r1
 800dce0:	4620      	mov	r0, r4
 800dce2:	4629      	mov	r1, r5
 800dce4:	f7f2 fad0 	bl	8000288 <__aeabi_dsub>
 800dce8:	4642      	mov	r2, r8
 800dcea:	464b      	mov	r3, r9
 800dcec:	f7f2 facc 	bl	8000288 <__aeabi_dsub>
 800dcf0:	460b      	mov	r3, r1
 800dcf2:	4602      	mov	r2, r0
 800dcf4:	493a      	ldr	r1, [pc, #232]	; (800dde0 <__ieee754_pow+0xa30>)
 800dcf6:	2000      	movs	r0, #0
 800dcf8:	f7f2 fac6 	bl	8000288 <__aeabi_dsub>
 800dcfc:	e9cd 0100 	strd	r0, r1, [sp]
 800dd00:	9b01      	ldr	r3, [sp, #4]
 800dd02:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800dd06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dd0a:	da2f      	bge.n	800dd6c <__ieee754_pow+0x9bc>
 800dd0c:	4650      	mov	r0, sl
 800dd0e:	ed9d 0b00 	vldr	d0, [sp]
 800dd12:	f000 f9cd 	bl	800e0b0 <scalbn>
 800dd16:	ec51 0b10 	vmov	r0, r1, d0
 800dd1a:	ec53 2b18 	vmov	r2, r3, d8
 800dd1e:	f7ff bbe0 	b.w	800d4e2 <__ieee754_pow+0x132>
 800dd22:	4b30      	ldr	r3, [pc, #192]	; (800dde4 <__ieee754_pow+0xa34>)
 800dd24:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800dd28:	429e      	cmp	r6, r3
 800dd2a:	f77f af0b 	ble.w	800db44 <__ieee754_pow+0x794>
 800dd2e:	4b2e      	ldr	r3, [pc, #184]	; (800dde8 <__ieee754_pow+0xa38>)
 800dd30:	440b      	add	r3, r1
 800dd32:	4303      	orrs	r3, r0
 800dd34:	d00b      	beq.n	800dd4e <__ieee754_pow+0x99e>
 800dd36:	a326      	add	r3, pc, #152	; (adr r3, 800ddd0 <__ieee754_pow+0xa20>)
 800dd38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd3c:	ec51 0b18 	vmov	r0, r1, d8
 800dd40:	f7f2 fc5a 	bl	80005f8 <__aeabi_dmul>
 800dd44:	a322      	add	r3, pc, #136	; (adr r3, 800ddd0 <__ieee754_pow+0xa20>)
 800dd46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd4a:	f7ff bbca 	b.w	800d4e2 <__ieee754_pow+0x132>
 800dd4e:	4622      	mov	r2, r4
 800dd50:	462b      	mov	r3, r5
 800dd52:	f7f2 fa99 	bl	8000288 <__aeabi_dsub>
 800dd56:	4642      	mov	r2, r8
 800dd58:	464b      	mov	r3, r9
 800dd5a:	f7f2 fed3 	bl	8000b04 <__aeabi_dcmpge>
 800dd5e:	2800      	cmp	r0, #0
 800dd60:	f43f aef0 	beq.w	800db44 <__ieee754_pow+0x794>
 800dd64:	e7e7      	b.n	800dd36 <__ieee754_pow+0x986>
 800dd66:	f04f 0a00 	mov.w	sl, #0
 800dd6a:	e717      	b.n	800db9c <__ieee754_pow+0x7ec>
 800dd6c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dd70:	4619      	mov	r1, r3
 800dd72:	e7d2      	b.n	800dd1a <__ieee754_pow+0x96a>
 800dd74:	491a      	ldr	r1, [pc, #104]	; (800dde0 <__ieee754_pow+0xa30>)
 800dd76:	2000      	movs	r0, #0
 800dd78:	f7ff bb9e 	b.w	800d4b8 <__ieee754_pow+0x108>
 800dd7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dd80:	f7ff bb9a 	b.w	800d4b8 <__ieee754_pow+0x108>
 800dd84:	9000      	str	r0, [sp, #0]
 800dd86:	f7ff bb76 	b.w	800d476 <__ieee754_pow+0xc6>
 800dd8a:	2100      	movs	r1, #0
 800dd8c:	f7ff bb60 	b.w	800d450 <__ieee754_pow+0xa0>
 800dd90:	00000000 	.word	0x00000000
 800dd94:	3fe62e43 	.word	0x3fe62e43
 800dd98:	fefa39ef 	.word	0xfefa39ef
 800dd9c:	3fe62e42 	.word	0x3fe62e42
 800dda0:	0ca86c39 	.word	0x0ca86c39
 800dda4:	be205c61 	.word	0xbe205c61
 800dda8:	72bea4d0 	.word	0x72bea4d0
 800ddac:	3e663769 	.word	0x3e663769
 800ddb0:	c5d26bf1 	.word	0xc5d26bf1
 800ddb4:	3ebbbd41 	.word	0x3ebbbd41
 800ddb8:	af25de2c 	.word	0xaf25de2c
 800ddbc:	3f11566a 	.word	0x3f11566a
 800ddc0:	16bebd93 	.word	0x16bebd93
 800ddc4:	3f66c16c 	.word	0x3f66c16c
 800ddc8:	5555553e 	.word	0x5555553e
 800ddcc:	3fc55555 	.word	0x3fc55555
 800ddd0:	c2f8f359 	.word	0xc2f8f359
 800ddd4:	01a56e1f 	.word	0x01a56e1f
 800ddd8:	3fe00000 	.word	0x3fe00000
 800dddc:	000fffff 	.word	0x000fffff
 800dde0:	3ff00000 	.word	0x3ff00000
 800dde4:	4090cbff 	.word	0x4090cbff
 800dde8:	3f6f3400 	.word	0x3f6f3400
 800ddec:	652b82fe 	.word	0x652b82fe
 800ddf0:	3c971547 	.word	0x3c971547

0800ddf4 <__ieee754_sqrt>:
 800ddf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ddf8:	ec55 4b10 	vmov	r4, r5, d0
 800ddfc:	4e56      	ldr	r6, [pc, #344]	; (800df58 <__ieee754_sqrt+0x164>)
 800ddfe:	43ae      	bics	r6, r5
 800de00:	ee10 0a10 	vmov	r0, s0
 800de04:	ee10 3a10 	vmov	r3, s0
 800de08:	4629      	mov	r1, r5
 800de0a:	462a      	mov	r2, r5
 800de0c:	d110      	bne.n	800de30 <__ieee754_sqrt+0x3c>
 800de0e:	ee10 2a10 	vmov	r2, s0
 800de12:	462b      	mov	r3, r5
 800de14:	f7f2 fbf0 	bl	80005f8 <__aeabi_dmul>
 800de18:	4602      	mov	r2, r0
 800de1a:	460b      	mov	r3, r1
 800de1c:	4620      	mov	r0, r4
 800de1e:	4629      	mov	r1, r5
 800de20:	f7f2 fa34 	bl	800028c <__adddf3>
 800de24:	4604      	mov	r4, r0
 800de26:	460d      	mov	r5, r1
 800de28:	ec45 4b10 	vmov	d0, r4, r5
 800de2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de30:	2d00      	cmp	r5, #0
 800de32:	dc10      	bgt.n	800de56 <__ieee754_sqrt+0x62>
 800de34:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800de38:	4330      	orrs	r0, r6
 800de3a:	d0f5      	beq.n	800de28 <__ieee754_sqrt+0x34>
 800de3c:	b15d      	cbz	r5, 800de56 <__ieee754_sqrt+0x62>
 800de3e:	ee10 2a10 	vmov	r2, s0
 800de42:	462b      	mov	r3, r5
 800de44:	ee10 0a10 	vmov	r0, s0
 800de48:	f7f2 fa1e 	bl	8000288 <__aeabi_dsub>
 800de4c:	4602      	mov	r2, r0
 800de4e:	460b      	mov	r3, r1
 800de50:	f7f2 fcfc 	bl	800084c <__aeabi_ddiv>
 800de54:	e7e6      	b.n	800de24 <__ieee754_sqrt+0x30>
 800de56:	1509      	asrs	r1, r1, #20
 800de58:	d076      	beq.n	800df48 <__ieee754_sqrt+0x154>
 800de5a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800de5e:	07ce      	lsls	r6, r1, #31
 800de60:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800de64:	bf5e      	ittt	pl
 800de66:	0fda      	lsrpl	r2, r3, #31
 800de68:	005b      	lslpl	r3, r3, #1
 800de6a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800de6e:	0fda      	lsrs	r2, r3, #31
 800de70:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800de74:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800de78:	2000      	movs	r0, #0
 800de7a:	106d      	asrs	r5, r5, #1
 800de7c:	005b      	lsls	r3, r3, #1
 800de7e:	f04f 0e16 	mov.w	lr, #22
 800de82:	4684      	mov	ip, r0
 800de84:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800de88:	eb0c 0401 	add.w	r4, ip, r1
 800de8c:	4294      	cmp	r4, r2
 800de8e:	bfde      	ittt	le
 800de90:	1b12      	suble	r2, r2, r4
 800de92:	eb04 0c01 	addle.w	ip, r4, r1
 800de96:	1840      	addle	r0, r0, r1
 800de98:	0052      	lsls	r2, r2, #1
 800de9a:	f1be 0e01 	subs.w	lr, lr, #1
 800de9e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800dea2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800dea6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800deaa:	d1ed      	bne.n	800de88 <__ieee754_sqrt+0x94>
 800deac:	4671      	mov	r1, lr
 800deae:	2720      	movs	r7, #32
 800deb0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800deb4:	4562      	cmp	r2, ip
 800deb6:	eb04 060e 	add.w	r6, r4, lr
 800deba:	dc02      	bgt.n	800dec2 <__ieee754_sqrt+0xce>
 800debc:	d113      	bne.n	800dee6 <__ieee754_sqrt+0xf2>
 800debe:	429e      	cmp	r6, r3
 800dec0:	d811      	bhi.n	800dee6 <__ieee754_sqrt+0xf2>
 800dec2:	2e00      	cmp	r6, #0
 800dec4:	eb06 0e04 	add.w	lr, r6, r4
 800dec8:	da43      	bge.n	800df52 <__ieee754_sqrt+0x15e>
 800deca:	f1be 0f00 	cmp.w	lr, #0
 800dece:	db40      	blt.n	800df52 <__ieee754_sqrt+0x15e>
 800ded0:	f10c 0801 	add.w	r8, ip, #1
 800ded4:	eba2 020c 	sub.w	r2, r2, ip
 800ded8:	429e      	cmp	r6, r3
 800deda:	bf88      	it	hi
 800dedc:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800dee0:	1b9b      	subs	r3, r3, r6
 800dee2:	4421      	add	r1, r4
 800dee4:	46c4      	mov	ip, r8
 800dee6:	0052      	lsls	r2, r2, #1
 800dee8:	3f01      	subs	r7, #1
 800deea:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800deee:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800def2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800def6:	d1dd      	bne.n	800deb4 <__ieee754_sqrt+0xc0>
 800def8:	4313      	orrs	r3, r2
 800defa:	d006      	beq.n	800df0a <__ieee754_sqrt+0x116>
 800defc:	1c4c      	adds	r4, r1, #1
 800defe:	bf13      	iteet	ne
 800df00:	3101      	addne	r1, #1
 800df02:	3001      	addeq	r0, #1
 800df04:	4639      	moveq	r1, r7
 800df06:	f021 0101 	bicne.w	r1, r1, #1
 800df0a:	1043      	asrs	r3, r0, #1
 800df0c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800df10:	0849      	lsrs	r1, r1, #1
 800df12:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800df16:	07c2      	lsls	r2, r0, #31
 800df18:	bf48      	it	mi
 800df1a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800df1e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800df22:	460c      	mov	r4, r1
 800df24:	463d      	mov	r5, r7
 800df26:	e77f      	b.n	800de28 <__ieee754_sqrt+0x34>
 800df28:	0ada      	lsrs	r2, r3, #11
 800df2a:	3815      	subs	r0, #21
 800df2c:	055b      	lsls	r3, r3, #21
 800df2e:	2a00      	cmp	r2, #0
 800df30:	d0fa      	beq.n	800df28 <__ieee754_sqrt+0x134>
 800df32:	02d7      	lsls	r7, r2, #11
 800df34:	d50a      	bpl.n	800df4c <__ieee754_sqrt+0x158>
 800df36:	f1c1 0420 	rsb	r4, r1, #32
 800df3a:	fa23 f404 	lsr.w	r4, r3, r4
 800df3e:	1e4d      	subs	r5, r1, #1
 800df40:	408b      	lsls	r3, r1
 800df42:	4322      	orrs	r2, r4
 800df44:	1b41      	subs	r1, r0, r5
 800df46:	e788      	b.n	800de5a <__ieee754_sqrt+0x66>
 800df48:	4608      	mov	r0, r1
 800df4a:	e7f0      	b.n	800df2e <__ieee754_sqrt+0x13a>
 800df4c:	0052      	lsls	r2, r2, #1
 800df4e:	3101      	adds	r1, #1
 800df50:	e7ef      	b.n	800df32 <__ieee754_sqrt+0x13e>
 800df52:	46e0      	mov	r8, ip
 800df54:	e7be      	b.n	800ded4 <__ieee754_sqrt+0xe0>
 800df56:	bf00      	nop
 800df58:	7ff00000 	.word	0x7ff00000

0800df5c <fabs>:
 800df5c:	ec51 0b10 	vmov	r0, r1, d0
 800df60:	ee10 2a10 	vmov	r2, s0
 800df64:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800df68:	ec43 2b10 	vmov	d0, r2, r3
 800df6c:	4770      	bx	lr

0800df6e <finite>:
 800df6e:	b082      	sub	sp, #8
 800df70:	ed8d 0b00 	vstr	d0, [sp]
 800df74:	9801      	ldr	r0, [sp, #4]
 800df76:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800df7a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800df7e:	0fc0      	lsrs	r0, r0, #31
 800df80:	b002      	add	sp, #8
 800df82:	4770      	bx	lr
 800df84:	0000      	movs	r0, r0
	...

0800df88 <nan>:
 800df88:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800df90 <nan+0x8>
 800df8c:	4770      	bx	lr
 800df8e:	bf00      	nop
 800df90:	00000000 	.word	0x00000000
 800df94:	7ff80000 	.word	0x7ff80000

0800df98 <rint>:
 800df98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800df9a:	ec51 0b10 	vmov	r0, r1, d0
 800df9e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800dfa2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800dfa6:	2e13      	cmp	r6, #19
 800dfa8:	ee10 4a10 	vmov	r4, s0
 800dfac:	460b      	mov	r3, r1
 800dfae:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800dfb2:	dc58      	bgt.n	800e066 <rint+0xce>
 800dfb4:	2e00      	cmp	r6, #0
 800dfb6:	da2b      	bge.n	800e010 <rint+0x78>
 800dfb8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800dfbc:	4302      	orrs	r2, r0
 800dfbe:	d023      	beq.n	800e008 <rint+0x70>
 800dfc0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800dfc4:	4302      	orrs	r2, r0
 800dfc6:	4254      	negs	r4, r2
 800dfc8:	4314      	orrs	r4, r2
 800dfca:	0c4b      	lsrs	r3, r1, #17
 800dfcc:	0b24      	lsrs	r4, r4, #12
 800dfce:	045b      	lsls	r3, r3, #17
 800dfd0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800dfd4:	ea44 0103 	orr.w	r1, r4, r3
 800dfd8:	4b32      	ldr	r3, [pc, #200]	; (800e0a4 <rint+0x10c>)
 800dfda:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800dfde:	e9d3 6700 	ldrd	r6, r7, [r3]
 800dfe2:	4602      	mov	r2, r0
 800dfe4:	460b      	mov	r3, r1
 800dfe6:	4630      	mov	r0, r6
 800dfe8:	4639      	mov	r1, r7
 800dfea:	f7f2 f94f 	bl	800028c <__adddf3>
 800dfee:	e9cd 0100 	strd	r0, r1, [sp]
 800dff2:	463b      	mov	r3, r7
 800dff4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dff8:	4632      	mov	r2, r6
 800dffa:	f7f2 f945 	bl	8000288 <__aeabi_dsub>
 800dffe:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e002:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800e006:	4639      	mov	r1, r7
 800e008:	ec41 0b10 	vmov	d0, r0, r1
 800e00c:	b003      	add	sp, #12
 800e00e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e010:	4a25      	ldr	r2, [pc, #148]	; (800e0a8 <rint+0x110>)
 800e012:	4132      	asrs	r2, r6
 800e014:	ea01 0702 	and.w	r7, r1, r2
 800e018:	4307      	orrs	r7, r0
 800e01a:	d0f5      	beq.n	800e008 <rint+0x70>
 800e01c:	0851      	lsrs	r1, r2, #1
 800e01e:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800e022:	4314      	orrs	r4, r2
 800e024:	d00c      	beq.n	800e040 <rint+0xa8>
 800e026:	ea23 0201 	bic.w	r2, r3, r1
 800e02a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800e02e:	2e13      	cmp	r6, #19
 800e030:	fa43 f606 	asr.w	r6, r3, r6
 800e034:	bf0c      	ite	eq
 800e036:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800e03a:	2400      	movne	r4, #0
 800e03c:	ea42 0306 	orr.w	r3, r2, r6
 800e040:	4918      	ldr	r1, [pc, #96]	; (800e0a4 <rint+0x10c>)
 800e042:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800e046:	4622      	mov	r2, r4
 800e048:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e04c:	4620      	mov	r0, r4
 800e04e:	4629      	mov	r1, r5
 800e050:	f7f2 f91c 	bl	800028c <__adddf3>
 800e054:	e9cd 0100 	strd	r0, r1, [sp]
 800e058:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e05c:	4622      	mov	r2, r4
 800e05e:	462b      	mov	r3, r5
 800e060:	f7f2 f912 	bl	8000288 <__aeabi_dsub>
 800e064:	e7d0      	b.n	800e008 <rint+0x70>
 800e066:	2e33      	cmp	r6, #51	; 0x33
 800e068:	dd07      	ble.n	800e07a <rint+0xe2>
 800e06a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800e06e:	d1cb      	bne.n	800e008 <rint+0x70>
 800e070:	ee10 2a10 	vmov	r2, s0
 800e074:	f7f2 f90a 	bl	800028c <__adddf3>
 800e078:	e7c6      	b.n	800e008 <rint+0x70>
 800e07a:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800e07e:	f04f 36ff 	mov.w	r6, #4294967295
 800e082:	40d6      	lsrs	r6, r2
 800e084:	4230      	tst	r0, r6
 800e086:	d0bf      	beq.n	800e008 <rint+0x70>
 800e088:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800e08c:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800e090:	bf1f      	itttt	ne
 800e092:	ea24 0101 	bicne.w	r1, r4, r1
 800e096:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800e09a:	fa44 f202 	asrne.w	r2, r4, r2
 800e09e:	ea41 0402 	orrne.w	r4, r1, r2
 800e0a2:	e7cd      	b.n	800e040 <rint+0xa8>
 800e0a4:	0800e6e0 	.word	0x0800e6e0
 800e0a8:	000fffff 	.word	0x000fffff
 800e0ac:	00000000 	.word	0x00000000

0800e0b0 <scalbn>:
 800e0b0:	b570      	push	{r4, r5, r6, lr}
 800e0b2:	ec55 4b10 	vmov	r4, r5, d0
 800e0b6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800e0ba:	4606      	mov	r6, r0
 800e0bc:	462b      	mov	r3, r5
 800e0be:	b99a      	cbnz	r2, 800e0e8 <scalbn+0x38>
 800e0c0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e0c4:	4323      	orrs	r3, r4
 800e0c6:	d036      	beq.n	800e136 <scalbn+0x86>
 800e0c8:	4b39      	ldr	r3, [pc, #228]	; (800e1b0 <scalbn+0x100>)
 800e0ca:	4629      	mov	r1, r5
 800e0cc:	ee10 0a10 	vmov	r0, s0
 800e0d0:	2200      	movs	r2, #0
 800e0d2:	f7f2 fa91 	bl	80005f8 <__aeabi_dmul>
 800e0d6:	4b37      	ldr	r3, [pc, #220]	; (800e1b4 <scalbn+0x104>)
 800e0d8:	429e      	cmp	r6, r3
 800e0da:	4604      	mov	r4, r0
 800e0dc:	460d      	mov	r5, r1
 800e0de:	da10      	bge.n	800e102 <scalbn+0x52>
 800e0e0:	a32b      	add	r3, pc, #172	; (adr r3, 800e190 <scalbn+0xe0>)
 800e0e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0e6:	e03a      	b.n	800e15e <scalbn+0xae>
 800e0e8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800e0ec:	428a      	cmp	r2, r1
 800e0ee:	d10c      	bne.n	800e10a <scalbn+0x5a>
 800e0f0:	ee10 2a10 	vmov	r2, s0
 800e0f4:	4620      	mov	r0, r4
 800e0f6:	4629      	mov	r1, r5
 800e0f8:	f7f2 f8c8 	bl	800028c <__adddf3>
 800e0fc:	4604      	mov	r4, r0
 800e0fe:	460d      	mov	r5, r1
 800e100:	e019      	b.n	800e136 <scalbn+0x86>
 800e102:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e106:	460b      	mov	r3, r1
 800e108:	3a36      	subs	r2, #54	; 0x36
 800e10a:	4432      	add	r2, r6
 800e10c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800e110:	428a      	cmp	r2, r1
 800e112:	dd08      	ble.n	800e126 <scalbn+0x76>
 800e114:	2d00      	cmp	r5, #0
 800e116:	a120      	add	r1, pc, #128	; (adr r1, 800e198 <scalbn+0xe8>)
 800e118:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e11c:	da1c      	bge.n	800e158 <scalbn+0xa8>
 800e11e:	a120      	add	r1, pc, #128	; (adr r1, 800e1a0 <scalbn+0xf0>)
 800e120:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e124:	e018      	b.n	800e158 <scalbn+0xa8>
 800e126:	2a00      	cmp	r2, #0
 800e128:	dd08      	ble.n	800e13c <scalbn+0x8c>
 800e12a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e12e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e132:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e136:	ec45 4b10 	vmov	d0, r4, r5
 800e13a:	bd70      	pop	{r4, r5, r6, pc}
 800e13c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800e140:	da19      	bge.n	800e176 <scalbn+0xc6>
 800e142:	f24c 3350 	movw	r3, #50000	; 0xc350
 800e146:	429e      	cmp	r6, r3
 800e148:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800e14c:	dd0a      	ble.n	800e164 <scalbn+0xb4>
 800e14e:	a112      	add	r1, pc, #72	; (adr r1, 800e198 <scalbn+0xe8>)
 800e150:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e154:	2b00      	cmp	r3, #0
 800e156:	d1e2      	bne.n	800e11e <scalbn+0x6e>
 800e158:	a30f      	add	r3, pc, #60	; (adr r3, 800e198 <scalbn+0xe8>)
 800e15a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e15e:	f7f2 fa4b 	bl	80005f8 <__aeabi_dmul>
 800e162:	e7cb      	b.n	800e0fc <scalbn+0x4c>
 800e164:	a10a      	add	r1, pc, #40	; (adr r1, 800e190 <scalbn+0xe0>)
 800e166:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d0b8      	beq.n	800e0e0 <scalbn+0x30>
 800e16e:	a10e      	add	r1, pc, #56	; (adr r1, 800e1a8 <scalbn+0xf8>)
 800e170:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e174:	e7b4      	b.n	800e0e0 <scalbn+0x30>
 800e176:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e17a:	3236      	adds	r2, #54	; 0x36
 800e17c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e180:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800e184:	4620      	mov	r0, r4
 800e186:	4b0c      	ldr	r3, [pc, #48]	; (800e1b8 <scalbn+0x108>)
 800e188:	2200      	movs	r2, #0
 800e18a:	e7e8      	b.n	800e15e <scalbn+0xae>
 800e18c:	f3af 8000 	nop.w
 800e190:	c2f8f359 	.word	0xc2f8f359
 800e194:	01a56e1f 	.word	0x01a56e1f
 800e198:	8800759c 	.word	0x8800759c
 800e19c:	7e37e43c 	.word	0x7e37e43c
 800e1a0:	8800759c 	.word	0x8800759c
 800e1a4:	fe37e43c 	.word	0xfe37e43c
 800e1a8:	c2f8f359 	.word	0xc2f8f359
 800e1ac:	81a56e1f 	.word	0x81a56e1f
 800e1b0:	43500000 	.word	0x43500000
 800e1b4:	ffff3cb0 	.word	0xffff3cb0
 800e1b8:	3c900000 	.word	0x3c900000

0800e1bc <_init>:
 800e1bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1be:	bf00      	nop
 800e1c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e1c2:	bc08      	pop	{r3}
 800e1c4:	469e      	mov	lr, r3
 800e1c6:	4770      	bx	lr

0800e1c8 <_fini>:
 800e1c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1ca:	bf00      	nop
 800e1cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e1ce:	bc08      	pop	{r3}
 800e1d0:	469e      	mov	lr, r3
 800e1d2:	4770      	bx	lr
