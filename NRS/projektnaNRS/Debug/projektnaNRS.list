
projektnaNRS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000df9c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000510  0800e130  0800e130  0001e130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e640  0800e640  00020350  2**0
                  CONTENTS
  4 .ARM          00000000  0800e640  0800e640  00020350  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e640  0800e640  00020350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e640  0800e640  0001e640  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e644  0800e644  0001e644  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000350  20000000  0800e648  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020350  2**0
                  CONTENTS
 10 .bss          000012dc  20000350  20000350  00020350  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000162c  2000162c  00020350  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020350  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ea81  00000000  00000000  00020380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003fab  00000000  00000000  0003ee01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001570  00000000  00000000  00042db0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000013b8  00000000  00000000  00044320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002246f  00000000  00000000  000456d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ba44  00000000  00000000  00067b47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bc236  00000000  00000000  0008358b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0013f7c1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006d78  00000000  00000000  0013f814  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000350 	.word	0x20000350
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e114 	.word	0x0800e114

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000354 	.word	0x20000354
 80001cc:	0800e114 	.word	0x0800e114

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <i2c1_pisiRegister>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint8_t i2c1_pisiRegister(uint8_t naprava, uint8_t reg, uint8_t podatek)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b086      	sub	sp, #24
 8000c4c:	af04      	add	r7, sp, #16
 8000c4e:	4603      	mov	r3, r0
 8000c50:	71fb      	strb	r3, [r7, #7]
 8000c52:	460b      	mov	r3, r1
 8000c54:	71bb      	strb	r3, [r7, #6]
 8000c56:	4613      	mov	r3, r2
 8000c58:	717b      	strb	r3, [r7, #5]
  naprava <<= 1;
 8000c5a:	79fb      	ldrb	r3, [r7, #7]
 8000c5c:	005b      	lsls	r3, r3, #1
 8000c5e:	71fb      	strb	r3, [r7, #7]
  return HAL_I2C_Mem_Write(&hi2c1, naprava, reg, I2C_MEMADD_SIZE_8BIT, &podatek, 1, 10);
 8000c60:	79fb      	ldrb	r3, [r7, #7]
 8000c62:	b299      	uxth	r1, r3
 8000c64:	79bb      	ldrb	r3, [r7, #6]
 8000c66:	b29a      	uxth	r2, r3
 8000c68:	230a      	movs	r3, #10
 8000c6a:	9302      	str	r3, [sp, #8]
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	9301      	str	r3, [sp, #4]
 8000c70:	1d7b      	adds	r3, r7, #5
 8000c72:	9300      	str	r3, [sp, #0]
 8000c74:	2301      	movs	r3, #1
 8000c76:	4804      	ldr	r0, [pc, #16]	; (8000c88 <i2c1_pisiRegister+0x40>)
 8000c78:	f001 fa9a 	bl	80021b0 <HAL_I2C_Mem_Write>
 8000c7c:	4603      	mov	r3, r0
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	2000059c 	.word	0x2000059c

08000c8c <i2c1_beriRegistre>:

void i2c1_beriRegistre(uint8_t naprava, uint8_t reg, uint8_t* podatek, uint8_t dolzina)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b086      	sub	sp, #24
 8000c90:	af04      	add	r7, sp, #16
 8000c92:	603a      	str	r2, [r7, #0]
 8000c94:	461a      	mov	r2, r3
 8000c96:	4603      	mov	r3, r0
 8000c98:	71fb      	strb	r3, [r7, #7]
 8000c9a:	460b      	mov	r3, r1
 8000c9c:	71bb      	strb	r3, [r7, #6]
 8000c9e:	4613      	mov	r3, r2
 8000ca0:	717b      	strb	r3, [r7, #5]
  if ((dolzina>1)&&(naprava==0x19))  // ce je naprava 0x19 moramo postaviti ta bit, ce zelimo brati vec zlogov
 8000ca2:	797b      	ldrb	r3, [r7, #5]
 8000ca4:	2b01      	cmp	r3, #1
 8000ca6:	d906      	bls.n	8000cb6 <i2c1_beriRegistre+0x2a>
 8000ca8:	79fb      	ldrb	r3, [r7, #7]
 8000caa:	2b19      	cmp	r3, #25
 8000cac:	d103      	bne.n	8000cb6 <i2c1_beriRegistre+0x2a>
    reg |= 0x80;
 8000cae:	79bb      	ldrb	r3, [r7, #6]
 8000cb0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000cb4:	71bb      	strb	r3, [r7, #6]
  naprava <<= 1;
 8000cb6:	79fb      	ldrb	r3, [r7, #7]
 8000cb8:	005b      	lsls	r3, r3, #1
 8000cba:	71fb      	strb	r3, [r7, #7]
  HAL_I2C_Mem_Read(&hi2c1, naprava, reg, I2C_MEMADD_SIZE_8BIT, podatek, dolzina, dolzina);
 8000cbc:	79fb      	ldrb	r3, [r7, #7]
 8000cbe:	b299      	uxth	r1, r3
 8000cc0:	79bb      	ldrb	r3, [r7, #6]
 8000cc2:	b298      	uxth	r0, r3
 8000cc4:	797b      	ldrb	r3, [r7, #5]
 8000cc6:	b29b      	uxth	r3, r3
 8000cc8:	797a      	ldrb	r2, [r7, #5]
 8000cca:	9202      	str	r2, [sp, #8]
 8000ccc:	9301      	str	r3, [sp, #4]
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	9300      	str	r3, [sp, #0]
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	4602      	mov	r2, r0
 8000cd6:	4803      	ldr	r0, [pc, #12]	; (8000ce4 <i2c1_beriRegistre+0x58>)
 8000cd8:	f001 fb7e 	bl	80023d8 <HAL_I2C_Mem_Read>
}
 8000cdc:	bf00      	nop
 8000cde:	3708      	adds	r7, #8
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	2000059c 	.word	0x2000059c

08000ce8 <initLSM303DLHC>:

void initLSM303DLHC()
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  HAL_Delay(10);
 8000cec:	200a      	movs	r0, #10
 8000cee:	f000 feef 	bl	8001ad0 <HAL_Delay>
  // Za potrebe testa, moramo testni napravi sporociti kateri senzor imamo
  #define OLD_SENSOR 0x73 // Odkomentiramo za LSM303DLHC / stari senzor
  //#define NEW_SENSOR 0x6E // Odkomentiramo za LSM303AGR / novi senzor

  #if defined(OLD_SENSOR) && !defined(NEW_SENSOR)
  i2c1_pisiRegister(0x1e, 0x4F, OLD_SENSOR); // Povemo testni napravi, da imamo stari senzor
 8000cf2:	2273      	movs	r2, #115	; 0x73
 8000cf4:	214f      	movs	r1, #79	; 0x4f
 8000cf6:	201e      	movs	r0, #30
 8000cf8:	f7ff ffa6 	bl	8000c48 <i2c1_pisiRegister>
  #elif !defined(OLD_SENSOR) && defined(NEW_SENSOR)
  i2c1_pisiRegister(0x1e, 0x4F, NEW_SENSOR); // Povemo testni napravi, da imamo novi senzor
  #else
  for(;;); // V primeru napake, pocakamo tukaj
  #endif
  HAL_Delay(100);
 8000cfc:	2064      	movs	r0, #100	; 0x64
 8000cfe:	f000 fee7 	bl	8001ad0 <HAL_Delay>

  // inicializiraj pospeskometer
  i2c1_pisiRegister(0x19, 0x20, 0x27);  // zbudi pospeskometer in omogoci osi
 8000d02:	2227      	movs	r2, #39	; 0x27
 8000d04:	2120      	movs	r1, #32
 8000d06:	2019      	movs	r0, #25
 8000d08:	f7ff ff9e 	bl	8000c48 <i2c1_pisiRegister>
  i2c1_pisiRegister(0x19, 0x23, 0x88);  // nastavi posodobitev samo ko se prebere vrednost ter visoko locljivost
 8000d0c:	2288      	movs	r2, #136	; 0x88
 8000d0e:	2123      	movs	r1, #35	; 0x23
 8000d10:	2019      	movs	r0, #25
 8000d12:	f7ff ff99 	bl	8000c48 <i2c1_pisiRegister>
  i2c1_pisiRegister(0x19, 0x20, 0x47);	//odzivnost
 8000d16:	2247      	movs	r2, #71	; 0x47
 8000d18:	2120      	movs	r1, #32
 8000d1a:	2019      	movs	r0, #25
 8000d1c:	f7ff ff94 	bl	8000c48 <i2c1_pisiRegister>
  i2c1_pisiRegister(0x19, 0x23, 0x10);	//obcutljivost
 8000d20:	2210      	movs	r2, #16
 8000d22:	2123      	movs	r1, #35	; 0x23
 8000d24:	2019      	movs	r0, #25
 8000d26:	f7ff ff8f 	bl	8000c48 <i2c1_pisiRegister>
}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}
	...

08000d30 <getAxis.10267>:
  MX_SPI1_Init();
  MX_TIM3_Init();
  MX_USB_DEVICE_Init();
  /* USER CODE BEGIN 2 */

  float getAxis(float X, float Y, float Z) {
 8000d30:	b480      	push	{r7}
 8000d32:	b085      	sub	sp, #20
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	ed87 0a03 	vstr	s0, [r7, #12]
 8000d3a:	edc7 0a02 	vstr	s1, [r7, #8]
 8000d3e:	ed87 1a01 	vstr	s2, [r7, #4]
 8000d42:	f8c7 c000 	str.w	ip, [r7]
      X = abs(X);
 8000d46:	edd7 7a03 	vldr	s15, [r7, #12]
 8000d4a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d4e:	ee17 3a90 	vmov	r3, s15
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	bfb8      	it	lt
 8000d56:	425b      	neglt	r3, r3
 8000d58:	ee07 3a90 	vmov	s15, r3
 8000d5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d60:	edc7 7a03 	vstr	s15, [r7, #12]
      Y = abs(Y);
 8000d64:	edd7 7a02 	vldr	s15, [r7, #8]
 8000d68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d6c:	ee17 3a90 	vmov	r3, s15
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	bfb8      	it	lt
 8000d74:	425b      	neglt	r3, r3
 8000d76:	ee07 3a90 	vmov	s15, r3
 8000d7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d7e:	edc7 7a02 	vstr	s15, [r7, #8]
      Z = abs(Z);
 8000d82:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d8a:	ee17 3a90 	vmov	r3, s15
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	bfb8      	it	lt
 8000d92:	425b      	neglt	r3, r3
 8000d94:	ee07 3a90 	vmov	s15, r3
 8000d98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d9c:	edc7 7a01 	vstr	s15, [r7, #4]
      if (X > Y) {
 8000da0:	ed97 7a03 	vldr	s14, [r7, #12]
 8000da4:	edd7 7a02 	vldr	s15, [r7, #8]
 8000da8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000dac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000db0:	dd0b      	ble.n	8000dca <getAxis.10267+0x9a>
          if (X > Z){
 8000db2:	ed97 7a03 	vldr	s14, [r7, #12]
 8000db6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000dba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000dbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dc2:	dd11      	ble.n	8000de8 <getAxis.10267+0xb8>
        	  return 0;
 8000dc4:	f04f 0300 	mov.w	r3, #0
 8000dc8:	e00f      	b.n	8000dea <getAxis.10267+0xba>
          }
      }
      else if (Y > Z){
 8000dca:	ed97 7a02 	vldr	s14, [r7, #8]
 8000dce:	edd7 7a01 	vldr	s15, [r7, #4]
 8000dd2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000dd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dda:	dd02      	ble.n	8000de2 <getAxis.10267+0xb2>
    	  return 1;
 8000ddc:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000de0:	e003      	b.n	8000dea <getAxis.10267+0xba>
      }
      else{
    	  return 2;
 8000de2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000de6:	e000      	b.n	8000dea <getAxis.10267+0xba>
      }

      return -1;
 8000de8:	4b04      	ldr	r3, [pc, #16]	; (8000dfc <getAxis.10267+0xcc>)
 8000dea:	ee07 3a90 	vmov	s15, r3
  }
 8000dee:	eeb0 0a67 	vmov.f32	s0, s15
 8000df2:	3714      	adds	r7, #20
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr
 8000dfc:	bf800000 	.word	0xbf800000

08000e00 <main>:
{
 8000e00:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000e04:	b0de      	sub	sp, #376	; 0x178
 8000e06:	af06      	add	r7, sp, #24
int main(void)
 8000e08:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8000e0c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  HAL_Init();
 8000e10:	f000 fdf8 	bl	8001a04 <HAL_Init>
  SystemClock_Config();
 8000e14:	f000 fa46 	bl	80012a4 <SystemClock_Config>
  MX_GPIO_Init();
 8000e18:	f000 fb70 	bl	80014fc <MX_GPIO_Init>
  MX_I2C1_Init();
 8000e1c:	f000 faa2 	bl	8001364 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000e20:	f000 fade 	bl	80013e0 <MX_SPI1_Init>
  MX_TIM3_Init();
 8000e24:	f000 fb1a 	bl	800145c <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 8000e28:	f008 fdfa 	bl	8009a20 <MX_USB_DEVICE_Init>

  // zazenemo casovnik ter cakamo do preliva vrednosti
  HAL_TIM_Base_Start(&htim3);
 8000e2c:	48ce      	ldr	r0, [pc, #824]	; (8001168 <main+0x368>)
 8000e2e:	f004 ff3b 	bl	8005ca8 <HAL_TIM_Base_Start>

  // pocistimo zastavico za preliv vrednosti
  __HAL_TIM_CLEAR_FLAG(&htim3, TIM_FLAG_UPDATE);
 8000e32:	4bcd      	ldr	r3, [pc, #820]	; (8001168 <main+0x368>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f06f 0201 	mvn.w	r2, #1
 8000e3a:	611a      	str	r2, [r3, #16]

  __HAL_I2C_ENABLE(&hi2c1);
 8000e3c:	4bcb      	ldr	r3, [pc, #812]	; (800116c <main+0x36c>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	4bca      	ldr	r3, [pc, #808]	; (800116c <main+0x36c>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f042 0201 	orr.w	r2, r2, #1
 8000e4a:	601a      	str	r2, [r3, #0]

  initLSM303DLHC(); //zazeni init posp.
 8000e4c:	f7ff ff4c 	bl	8000ce8 <initLSM303DLHC>

  int16_t meritev[6];
  meritev[0] = 0xaaab;// glava za zaznamek zacetek paketa
 8000e50:	f64a 23ab 	movw	r3, #43691	; 0xaaab
 8000e54:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c

  int8_t cordZLow;
  int8_t cordZHigh;
  float cordZ;

  int bumpsX = 0;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  int bumpsY = 0;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
  int bumpsZ = 0;
 8000e64:	2300      	movs	r3, #0
 8000e66:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
  int counter = 0;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
  int paket = -1;
 8000e70:	f04f 33ff 	mov.w	r3, #4294967295
 8000e74:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
  float currentAccel = 0.0;
 8000e78:	f04f 0300 	mov.w	r3, #0
 8000e7c:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
  float lastAccel = 0.0;
 8000e80:	f04f 0300 	mov.w	r3, #0
 8000e84:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  int secondCounter = 0;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  int axis = 0;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  int once = 0;
 8000e94:	2300      	movs	r3, #0
 8000e96:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
  int once2 = 0;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(10);
 8000ea0:	200a      	movs	r0, #10
 8000ea2:	f000 fe15 	bl	8001ad0 <HAL_Delay>
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)){
 8000ea6:	2101      	movs	r1, #1
 8000ea8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eac:	f001 f8c0 	bl	8002030 <HAL_GPIO_ReadPin>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d036      	beq.n	8000f24 <main+0x124>
		  counter++;
 8000eb6:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8000eba:	3301      	adds	r3, #1
 8000ebc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
		 if(counter > 3){
 8000ec0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8000ec4:	2b03      	cmp	r3, #3
 8000ec6:	dd2d      	ble.n	8000f24 <main+0x124>
			 counter = 0;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
			 once = 0;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
			 once2 = 0;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
			 bumpsX = 0;
 8000eda:	2300      	movs	r3, #0
 8000edc:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
			 bumpsY = 0;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
			 bumpsZ = 0;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
			 paket = -1;
 8000eec:	f04f 33ff 	mov.w	r3, #4294967295
 8000ef0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
			    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000efa:	489d      	ldr	r0, [pc, #628]	; (8001170 <main+0x370>)
 8000efc:	f001 f8b0 	bl	8002060 <HAL_GPIO_WritePin>
			    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_RESET);
 8000f00:	2200      	movs	r2, #0
 8000f02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f06:	489a      	ldr	r0, [pc, #616]	; (8001170 <main+0x370>)
 8000f08:	f001 f8aa 	bl	8002060 <HAL_GPIO_WritePin>
			    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f12:	4897      	ldr	r0, [pc, #604]	; (8001170 <main+0x370>)
 8000f14:	f001 f8a4 	bl	8002060 <HAL_GPIO_WritePin>
			    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 8000f18:	2200      	movs	r2, #0
 8000f1a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f1e:	4894      	ldr	r0, [pc, #592]	; (8001170 <main+0x370>)
 8000f20:	f001 f89e 	bl	8002060 <HAL_GPIO_WritePin>
		__HAL_TIM_CLEAR_FLAG(&htim3, TIM_FLAG_UPDATE);
		//stanje LED lucke
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_10);
		*/

		if(counter == 1){	//ZBIRANJE PODATKOV
 8000f24:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	f040 8162 	bne.w	80011f2 <main+0x3f2>

		    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 8000f2e:	2201      	movs	r2, #1
 8000f30:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f34:	488e      	ldr	r0, [pc, #568]	; (8001170 <main+0x370>)
 8000f36:	f001 f893 	bl	8002060 <HAL_GPIO_WritePin>

			//PAKET
			paket = paket + 1;
 8000f3a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8000f3e:	3301      	adds	r3, #1
 8000f40:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
			meritev[1] = paket;
 8000f44:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8000f48:	b21b      	sxth	r3, r3
 8000f4a:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

			//X-os
			i2c1_beriRegistre(0x19, 0x29, (uint8_t *)&cordXHigh, 1);
 8000f4e:	f507 7285 	add.w	r2, r7, #266	; 0x10a
 8000f52:	2301      	movs	r3, #1
 8000f54:	2129      	movs	r1, #41	; 0x29
 8000f56:	2019      	movs	r0, #25
 8000f58:	f7ff fe98 	bl	8000c8c <i2c1_beriRegistre>
			i2c1_beriRegistre(0x19, 0x28, (uint8_t *)&cordXLow, 1);
 8000f5c:	f207 120b 	addw	r2, r7, #267	; 0x10b
 8000f60:	2301      	movs	r3, #1
 8000f62:	2128      	movs	r1, #40	; 0x28
 8000f64:	2019      	movs	r0, #25
 8000f66:	f7ff fe91 	bl	8000c8c <i2c1_beriRegistre>
			meritev[1] = (cordXHigh << 8) | (cordXLow & 0xff);
 8000f6a:	f997 310a 	ldrsb.w	r3, [r7, #266]	; 0x10a
 8000f6e:	021b      	lsls	r3, r3, #8
 8000f70:	b21a      	sxth	r2, r3
 8000f72:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8000f76:	b21b      	sxth	r3, r3
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	b21b      	sxth	r3, r3
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	b21b      	sxth	r3, r3
 8000f80:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
			cordX = (meritev[1] >> 3) / 1000.0f;
 8000f84:	f9b7 310e 	ldrsh.w	r3, [r7, #270]	; 0x10e
 8000f88:	10db      	asrs	r3, r3, #3
 8000f8a:	b21b      	sxth	r3, r3
 8000f8c:	ee07 3a90 	vmov	s15, r3
 8000f90:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f94:	eddf 6a77 	vldr	s13, [pc, #476]	; 8001174 <main+0x374>
 8000f98:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f9c:	edc7 7a4a 	vstr	s15, [r7, #296]	; 0x128

			//Y-os
			i2c1_beriRegistre(0x19, 0x2B, (uint8_t *)&cordYHigh, 1);
 8000fa0:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	212b      	movs	r1, #43	; 0x2b
 8000fa8:	2019      	movs	r0, #25
 8000faa:	f7ff fe6f 	bl	8000c8c <i2c1_beriRegistre>
			i2c1_beriRegistre(0x19, 0x2A, (uint8_t *)&cordYLow, 1);
 8000fae:	f207 1209 	addw	r2, r7, #265	; 0x109
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	212a      	movs	r1, #42	; 0x2a
 8000fb6:	2019      	movs	r0, #25
 8000fb8:	f7ff fe68 	bl	8000c8c <i2c1_beriRegistre>
			meritev[2] = (cordYHigh << 8) | (cordYLow & 0xff);
 8000fbc:	f997 3108 	ldrsb.w	r3, [r7, #264]	; 0x108
 8000fc0:	021b      	lsls	r3, r3, #8
 8000fc2:	b21a      	sxth	r2, r3
 8000fc4:	f997 3109 	ldrsb.w	r3, [r7, #265]	; 0x109
 8000fc8:	b21b      	sxth	r3, r3
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	b21b      	sxth	r3, r3
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	b21b      	sxth	r3, r3
 8000fd2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
			cordY = (meritev[2] >> 3) / 1000.0f;
 8000fd6:	f9b7 3110 	ldrsh.w	r3, [r7, #272]	; 0x110
 8000fda:	10db      	asrs	r3, r3, #3
 8000fdc:	b21b      	sxth	r3, r3
 8000fde:	ee07 3a90 	vmov	s15, r3
 8000fe2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fe6:	eddf 6a63 	vldr	s13, [pc, #396]	; 8001174 <main+0x374>
 8000fea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fee:	edc7 7a49 	vstr	s15, [r7, #292]	; 0x124

			//Z-os
			i2c1_beriRegistre(0x19, 0x2D, (uint8_t *)&cordZHigh, 1);
 8000ff2:	f507 7283 	add.w	r2, r7, #262	; 0x106
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	212d      	movs	r1, #45	; 0x2d
 8000ffa:	2019      	movs	r0, #25
 8000ffc:	f7ff fe46 	bl	8000c8c <i2c1_beriRegistre>
			i2c1_beriRegistre(0x19, 0x2C, (uint8_t *)&cordZLow, 1);
 8001000:	f207 1207 	addw	r2, r7, #263	; 0x107
 8001004:	2301      	movs	r3, #1
 8001006:	212c      	movs	r1, #44	; 0x2c
 8001008:	2019      	movs	r0, #25
 800100a:	f7ff fe3f 	bl	8000c8c <i2c1_beriRegistre>
			meritev[3] = (cordZHigh << 8) | (cordZLow & 0xff);
 800100e:	f997 3106 	ldrsb.w	r3, [r7, #262]	; 0x106
 8001012:	021b      	lsls	r3, r3, #8
 8001014:	b21a      	sxth	r2, r3
 8001016:	f997 3107 	ldrsb.w	r3, [r7, #263]	; 0x107
 800101a:	b21b      	sxth	r3, r3
 800101c:	b2db      	uxtb	r3, r3
 800101e:	b21b      	sxth	r3, r3
 8001020:	4313      	orrs	r3, r2
 8001022:	b21b      	sxth	r3, r3
 8001024:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
			cordZ = (meritev[3] >> 3) / 1000.0f;
 8001028:	f9b7 3112 	ldrsh.w	r3, [r7, #274]	; 0x112
 800102c:	10db      	asrs	r3, r3, #3
 800102e:	b21b      	sxth	r3, r3
 8001030:	ee07 3a90 	vmov	s15, r3
 8001034:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001038:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8001174 <main+0x374>
 800103c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001040:	edc7 7a48 	vstr	s15, [r7, #288]	; 0x120

			lastAccel = currentAccel;
 8001044:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8001048:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
			currentAccel = sqrt(pow(cordX, 2) + pow(cordY, 2) + pow(cordZ, 2));
 800104c:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 8001050:	f7ff fa7a 	bl	8000548 <__aeabi_f2d>
 8001054:	4602      	mov	r2, r0
 8001056:	460b      	mov	r3, r1
 8001058:	ed9f 1b41 	vldr	d1, [pc, #260]	; 8001160 <main+0x360>
 800105c:	ec43 2b10 	vmov	d0, r2, r3
 8001060:	f00c f870 	bl	800d144 <pow>
 8001064:	ec55 4b10 	vmov	r4, r5, d0
 8001068:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800106c:	f7ff fa6c 	bl	8000548 <__aeabi_f2d>
 8001070:	4602      	mov	r2, r0
 8001072:	460b      	mov	r3, r1
 8001074:	ed9f 1b3a 	vldr	d1, [pc, #232]	; 8001160 <main+0x360>
 8001078:	ec43 2b10 	vmov	d0, r2, r3
 800107c:	f00c f862 	bl	800d144 <pow>
 8001080:	ec53 2b10 	vmov	r2, r3, d0
 8001084:	4620      	mov	r0, r4
 8001086:	4629      	mov	r1, r5
 8001088:	f7ff f900 	bl	800028c <__adddf3>
 800108c:	4602      	mov	r2, r0
 800108e:	460b      	mov	r3, r1
 8001090:	4614      	mov	r4, r2
 8001092:	461d      	mov	r5, r3
 8001094:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8001098:	f7ff fa56 	bl	8000548 <__aeabi_f2d>
 800109c:	4602      	mov	r2, r0
 800109e:	460b      	mov	r3, r1
 80010a0:	ed9f 1b2f 	vldr	d1, [pc, #188]	; 8001160 <main+0x360>
 80010a4:	ec43 2b10 	vmov	d0, r2, r3
 80010a8:	f00c f84c 	bl	800d144 <pow>
 80010ac:	ec53 2b10 	vmov	r2, r3, d0
 80010b0:	4620      	mov	r0, r4
 80010b2:	4629      	mov	r1, r5
 80010b4:	f7ff f8ea 	bl	800028c <__adddf3>
 80010b8:	4602      	mov	r2, r0
 80010ba:	460b      	mov	r3, r1
 80010bc:	ec43 2b17 	vmov	d7, r2, r3
 80010c0:	eeb0 0a47 	vmov.f32	s0, s14
 80010c4:	eef0 0a67 	vmov.f32	s1, s15
 80010c8:	f00c f8ea 	bl	800d2a0 <sqrt>
 80010cc:	ec53 2b10 	vmov	r2, r3, d0
 80010d0:	4610      	mov	r0, r2
 80010d2:	4619      	mov	r1, r3
 80010d4:	f7ff fd68 	bl	8000ba8 <__aeabi_d2f>
 80010d8:	4603      	mov	r3, r0
 80010da:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
			axis = getAxis(cordX, cordY, cordZ);
 80010de:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80010e2:	469c      	mov	ip, r3
 80010e4:	ed97 1a48 	vldr	s2, [r7, #288]	; 0x120
 80010e8:	edd7 0a49 	vldr	s1, [r7, #292]	; 0x124
 80010ec:	ed97 0a4a 	vldr	s0, [r7, #296]	; 0x128
 80010f0:	f7ff fe1e 	bl	8000d30 <getAxis.10267>
 80010f4:	eef0 7a40 	vmov.f32	s15, s0
 80010f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010fc:	ee17 3a90 	vmov	r3, s15
 8001100:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

			if (axis == 0) {
 8001104:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001108:	2b00      	cmp	r3, #0
 800110a:	d112      	bne.n	8001132 <main+0x332>
				if ((lastAccel - currentAccel) > 0.50) {
 800110c:	ed97 7a4f 	vldr	s14, [r7, #316]	; 0x13c
 8001110:	edd7 7a52 	vldr	s15, [r7, #328]	; 0x148
 8001114:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001118:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800111c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001124:	dd3e      	ble.n	80011a4 <main+0x3a4>
					bumpsX++;
 8001126:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800112a:	3301      	adds	r3, #1
 800112c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8001130:	e038      	b.n	80011a4 <main+0x3a4>
				}
			}
			else if (axis == 1) {
 8001132:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001136:	2b01      	cmp	r3, #1
 8001138:	d11e      	bne.n	8001178 <main+0x378>
				if ((lastAccel - currentAccel) > 0.50) {
 800113a:	ed97 7a4f 	vldr	s14, [r7, #316]	; 0x13c
 800113e:	edd7 7a52 	vldr	s15, [r7, #328]	; 0x148
 8001142:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001146:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800114a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800114e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001152:	dd27      	ble.n	80011a4 <main+0x3a4>
					bumpsY++;
 8001154:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001158:	3301      	adds	r3, #1
 800115a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800115e:	e021      	b.n	80011a4 <main+0x3a4>
 8001160:	00000000 	.word	0x00000000
 8001164:	40000000 	.word	0x40000000
 8001168:	200005e8 	.word	0x200005e8
 800116c:	2000059c 	.word	0x2000059c
 8001170:	48001000 	.word	0x48001000
 8001174:	447a0000 	.word	0x447a0000
				}
			}
			else if (axis == 2) {
 8001178:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800117c:	2b02      	cmp	r3, #2
 800117e:	d111      	bne.n	80011a4 <main+0x3a4>
				if ((lastAccel - currentAccel) > 0.50) {
 8001180:	ed97 7a4f 	vldr	s14, [r7, #316]	; 0x13c
 8001184:	edd7 7a52 	vldr	s15, [r7, #328]	; 0x148
 8001188:	ee77 7a67 	vsub.f32	s15, s14, s15
 800118c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001190:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001198:	dd04      	ble.n	80011a4 <main+0x3a4>
					bumpsZ++;
 800119a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800119e:	3301      	adds	r3, #1
 80011a0:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
				}
			}

			int len = sprintf(buff, "{Pospeskometer[%i]-> \"X\":[%.3f],  \"Y\":[%.3f], \"Z\":[%.3f]}\n\r", paket, cordX, cordY, cordZ);
 80011a4:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 80011a8:	f7ff f9ce 	bl	8000548 <__aeabi_f2d>
 80011ac:	4604      	mov	r4, r0
 80011ae:	460d      	mov	r5, r1
 80011b0:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 80011b4:	f7ff f9c8 	bl	8000548 <__aeabi_f2d>
 80011b8:	4680      	mov	r8, r0
 80011ba:	4689      	mov	r9, r1
 80011bc:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 80011c0:	f7ff f9c2 	bl	8000548 <__aeabi_f2d>
 80011c4:	4602      	mov	r2, r0
 80011c6:	460b      	mov	r3, r1
 80011c8:	1d38      	adds	r0, r7, #4
 80011ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80011ce:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80011d2:	e9cd 4500 	strd	r4, r5, [sp]
 80011d6:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80011da:	492e      	ldr	r1, [pc, #184]	; (8001294 <main+0x494>)
 80011dc:	f009 fd86 	bl	800acec <siprintf>
 80011e0:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
			CDC_Transmit_FS((uint8_t*)&buff, len);
 80011e4:	1d3b      	adds	r3, r7, #4
 80011e6:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 80011ea:	4618      	mov	r0, r3
 80011ec:	f008 fcd6 	bl	8009b9c <CDC_Transmit_FS>
 80011f0:	e046      	b.n	8001280 <main+0x480>

		}

		else if(counter == 2){
 80011f2:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80011f6:	2b02      	cmp	r3, #2
 80011f8:	d122      	bne.n	8001240 <main+0x440>
			if(once2 < 1){
 80011fa:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80011fe:	2b00      	cmp	r3, #0
 8001200:	dc3e      	bgt.n	8001280 <main+0x480>
			    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_SET);
 8001202:	2201      	movs	r2, #1
 8001204:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001208:	4823      	ldr	r0, [pc, #140]	; (8001298 <main+0x498>)
 800120a:	f000 ff29 	bl	8002060 <HAL_GPIO_WritePin>
				int len = sprintf(buff, "{\"Bumps X\":[%i],  \"Bumps Y\":[%i], \"Bumps Z\":[%i]}\n\r}", bumpsX, bumpsY, bumpsZ);
 800120e:	1d38      	adds	r0, r7, #4
 8001210:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001214:	9300      	str	r3, [sp, #0]
 8001216:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800121a:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 800121e:	491f      	ldr	r1, [pc, #124]	; (800129c <main+0x49c>)
 8001220:	f009 fd64 	bl	800acec <siprintf>
 8001224:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
				CDC_Transmit_FS((uint8_t*)&buff, len);
 8001228:	1d3b      	adds	r3, r7, #4
 800122a:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 800122e:	4618      	mov	r0, r3
 8001230:	f008 fcb4 	bl	8009b9c <CDC_Transmit_FS>
				once2++;
 8001234:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8001238:	3301      	adds	r3, #1
 800123a:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 800123e:	e01f      	b.n	8001280 <main+0x480>
			}
		}

		else if(counter == 3){
 8001240:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001244:	2b03      	cmp	r3, #3
 8001246:	d11b      	bne.n	8001280 <main+0x480>
		    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 8001248:	2201      	movs	r2, #1
 800124a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800124e:	4812      	ldr	r0, [pc, #72]	; (8001298 <main+0x498>)
 8001250:	f000 ff06 	bl	8002060 <HAL_GPIO_WritePin>

			if(once < 1){
 8001254:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8001258:	2b00      	cmp	r3, #0
 800125a:	dc11      	bgt.n	8001280 <main+0x480>
				int len = sprintf(buff, "{STOP}\n\r");
 800125c:	1d3b      	adds	r3, r7, #4
 800125e:	4910      	ldr	r1, [pc, #64]	; (80012a0 <main+0x4a0>)
 8001260:	4618      	mov	r0, r3
 8001262:	f009 fd43 	bl	800acec <siprintf>
 8001266:	f8c7 0130 	str.w	r0, [r7, #304]	; 0x130
				CDC_Transmit_FS((uint8_t*)&buff, len);
 800126a:	1d3b      	adds	r3, r7, #4
 800126c:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8001270:	4618      	mov	r0, r3
 8001272:	f008 fc93 	bl	8009b9c <CDC_Transmit_FS>
				once++;
 8001276:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800127a:	3301      	adds	r3, #1
 800127c:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
			}

		}

		while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)){};
 8001280:	bf00      	nop
 8001282:	2101      	movs	r1, #1
 8001284:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001288:	f000 fed2 	bl	8002030 <HAL_GPIO_ReadPin>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d1f7      	bne.n	8001282 <main+0x482>
	  HAL_Delay(10);
 8001292:	e605      	b.n	8000ea0 <main+0xa0>
 8001294:	0800e130 	.word	0x0800e130
 8001298:	48001000 	.word	0x48001000
 800129c:	0800e16c 	.word	0x0800e16c
 80012a0:	0800e1a4 	.word	0x0800e1a4

080012a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b09e      	sub	sp, #120	; 0x78
 80012a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012aa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80012ae:	2228      	movs	r2, #40	; 0x28
 80012b0:	2100      	movs	r1, #0
 80012b2:	4618      	mov	r0, r3
 80012b4:	f009 f8a8 	bl	800a408 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012b8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	605a      	str	r2, [r3, #4]
 80012c2:	609a      	str	r2, [r3, #8]
 80012c4:	60da      	str	r2, [r3, #12]
 80012c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012c8:	463b      	mov	r3, r7
 80012ca:	223c      	movs	r2, #60	; 0x3c
 80012cc:	2100      	movs	r1, #0
 80012ce:	4618      	mov	r0, r3
 80012d0:	f009 f89a 	bl	800a408 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80012d4:	2303      	movs	r3, #3
 80012d6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80012d8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80012dc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80012de:	2300      	movs	r3, #0
 80012e0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012e2:	2301      	movs	r3, #1
 80012e4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012e6:	2310      	movs	r3, #16
 80012e8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012ea:	2302      	movs	r3, #2
 80012ec:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012f2:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80012f4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80012f8:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012fa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80012fe:	4618      	mov	r0, r3
 8001300:	f003 f932 	bl	8004568 <HAL_RCC_OscConfig>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800130a:	f000 f975 	bl	80015f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800130e:	230f      	movs	r3, #15
 8001310:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001312:	2302      	movs	r3, #2
 8001314:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001316:	2300      	movs	r3, #0
 8001318:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800131a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800131e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001320:	2300      	movs	r3, #0
 8001322:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001324:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001328:	2102      	movs	r1, #2
 800132a:	4618      	mov	r0, r3
 800132c:	f004 f824 	bl	8005378 <HAL_RCC_ClockConfig>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001336:	f000 f95f 	bl	80015f8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 800133a:	4b09      	ldr	r3, [pc, #36]	; (8001360 <SystemClock_Config+0xbc>)
 800133c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800133e:	2300      	movs	r3, #0
 8001340:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001342:	2300      	movs	r3, #0
 8001344:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001346:	463b      	mov	r3, r7
 8001348:	4618      	mov	r0, r3
 800134a:	f004 f9fb 	bl	8005744 <HAL_RCCEx_PeriphCLKConfig>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001354:	f000 f950 	bl	80015f8 <Error_Handler>
  }
}
 8001358:	bf00      	nop
 800135a:	3778      	adds	r7, #120	; 0x78
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	00020020 	.word	0x00020020

08001364 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001368:	4b1b      	ldr	r3, [pc, #108]	; (80013d8 <MX_I2C1_Init+0x74>)
 800136a:	4a1c      	ldr	r2, [pc, #112]	; (80013dc <MX_I2C1_Init+0x78>)
 800136c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 800136e:	4b1a      	ldr	r3, [pc, #104]	; (80013d8 <MX_I2C1_Init+0x74>)
 8001370:	f240 220b 	movw	r2, #523	; 0x20b
 8001374:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001376:	4b18      	ldr	r3, [pc, #96]	; (80013d8 <MX_I2C1_Init+0x74>)
 8001378:	2200      	movs	r2, #0
 800137a:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800137c:	4b16      	ldr	r3, [pc, #88]	; (80013d8 <MX_I2C1_Init+0x74>)
 800137e:	2201      	movs	r2, #1
 8001380:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001382:	4b15      	ldr	r3, [pc, #84]	; (80013d8 <MX_I2C1_Init+0x74>)
 8001384:	2200      	movs	r2, #0
 8001386:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001388:	4b13      	ldr	r3, [pc, #76]	; (80013d8 <MX_I2C1_Init+0x74>)
 800138a:	2200      	movs	r2, #0
 800138c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800138e:	4b12      	ldr	r3, [pc, #72]	; (80013d8 <MX_I2C1_Init+0x74>)
 8001390:	2200      	movs	r2, #0
 8001392:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001394:	4b10      	ldr	r3, [pc, #64]	; (80013d8 <MX_I2C1_Init+0x74>)
 8001396:	2200      	movs	r2, #0
 8001398:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800139a:	4b0f      	ldr	r3, [pc, #60]	; (80013d8 <MX_I2C1_Init+0x74>)
 800139c:	2200      	movs	r2, #0
 800139e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013a0:	480d      	ldr	r0, [pc, #52]	; (80013d8 <MX_I2C1_Init+0x74>)
 80013a2:	f000 fe75 	bl	8002090 <HAL_I2C_Init>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80013ac:	f000 f924 	bl	80015f8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80013b0:	2100      	movs	r1, #0
 80013b2:	4809      	ldr	r0, [pc, #36]	; (80013d8 <MX_I2C1_Init+0x74>)
 80013b4:	f001 fb56 	bl	8002a64 <HAL_I2CEx_ConfigAnalogFilter>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80013be:	f000 f91b 	bl	80015f8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80013c2:	2100      	movs	r1, #0
 80013c4:	4804      	ldr	r0, [pc, #16]	; (80013d8 <MX_I2C1_Init+0x74>)
 80013c6:	f001 fb98 	bl	8002afa <HAL_I2CEx_ConfigDigitalFilter>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80013d0:	f000 f912 	bl	80015f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013d4:	bf00      	nop
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	2000059c 	.word	0x2000059c
 80013dc:	40005400 	.word	0x40005400

080013e0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80013e4:	4b1b      	ldr	r3, [pc, #108]	; (8001454 <MX_SPI1_Init+0x74>)
 80013e6:	4a1c      	ldr	r2, [pc, #112]	; (8001458 <MX_SPI1_Init+0x78>)
 80013e8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80013ea:	4b1a      	ldr	r3, [pc, #104]	; (8001454 <MX_SPI1_Init+0x74>)
 80013ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013f0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80013f2:	4b18      	ldr	r3, [pc, #96]	; (8001454 <MX_SPI1_Init+0x74>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80013f8:	4b16      	ldr	r3, [pc, #88]	; (8001454 <MX_SPI1_Init+0x74>)
 80013fa:	f44f 7240 	mov.w	r2, #768	; 0x300
 80013fe:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001400:	4b14      	ldr	r3, [pc, #80]	; (8001454 <MX_SPI1_Init+0x74>)
 8001402:	2200      	movs	r2, #0
 8001404:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001406:	4b13      	ldr	r3, [pc, #76]	; (8001454 <MX_SPI1_Init+0x74>)
 8001408:	2200      	movs	r2, #0
 800140a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800140c:	4b11      	ldr	r3, [pc, #68]	; (8001454 <MX_SPI1_Init+0x74>)
 800140e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001412:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001414:	4b0f      	ldr	r3, [pc, #60]	; (8001454 <MX_SPI1_Init+0x74>)
 8001416:	2208      	movs	r2, #8
 8001418:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800141a:	4b0e      	ldr	r3, [pc, #56]	; (8001454 <MX_SPI1_Init+0x74>)
 800141c:	2200      	movs	r2, #0
 800141e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001420:	4b0c      	ldr	r3, [pc, #48]	; (8001454 <MX_SPI1_Init+0x74>)
 8001422:	2200      	movs	r2, #0
 8001424:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001426:	4b0b      	ldr	r3, [pc, #44]	; (8001454 <MX_SPI1_Init+0x74>)
 8001428:	2200      	movs	r2, #0
 800142a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800142c:	4b09      	ldr	r3, [pc, #36]	; (8001454 <MX_SPI1_Init+0x74>)
 800142e:	2207      	movs	r2, #7
 8001430:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001432:	4b08      	ldr	r3, [pc, #32]	; (8001454 <MX_SPI1_Init+0x74>)
 8001434:	2200      	movs	r2, #0
 8001436:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001438:	4b06      	ldr	r3, [pc, #24]	; (8001454 <MX_SPI1_Init+0x74>)
 800143a:	2208      	movs	r2, #8
 800143c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800143e:	4805      	ldr	r0, [pc, #20]	; (8001454 <MX_SPI1_Init+0x74>)
 8001440:	f004 fb30 	bl	8005aa4 <HAL_SPI_Init>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800144a:	f000 f8d5 	bl	80015f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800144e:	bf00      	nop
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	20000634 	.word	0x20000634
 8001458:	40013000 	.word	0x40013000

0800145c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b088      	sub	sp, #32
 8001460:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001462:	f107 0310 	add.w	r3, r7, #16
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	605a      	str	r2, [r3, #4]
 800146c:	609a      	str	r2, [r3, #8]
 800146e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001470:	1d3b      	adds	r3, r7, #4
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	605a      	str	r2, [r3, #4]
 8001478:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800147a:	4b1e      	ldr	r3, [pc, #120]	; (80014f4 <MX_TIM3_Init+0x98>)
 800147c:	4a1e      	ldr	r2, [pc, #120]	; (80014f8 <MX_TIM3_Init+0x9c>)
 800147e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 59999;
 8001480:	4b1c      	ldr	r3, [pc, #112]	; (80014f4 <MX_TIM3_Init+0x98>)
 8001482:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8001486:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001488:	4b1a      	ldr	r3, [pc, #104]	; (80014f4 <MX_TIM3_Init+0x98>)
 800148a:	2200      	movs	r2, #0
 800148c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800148e:	4b19      	ldr	r3, [pc, #100]	; (80014f4 <MX_TIM3_Init+0x98>)
 8001490:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001494:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001496:	4b17      	ldr	r3, [pc, #92]	; (80014f4 <MX_TIM3_Init+0x98>)
 8001498:	2200      	movs	r2, #0
 800149a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800149c:	4b15      	ldr	r3, [pc, #84]	; (80014f4 <MX_TIM3_Init+0x98>)
 800149e:	2200      	movs	r2, #0
 80014a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80014a2:	4814      	ldr	r0, [pc, #80]	; (80014f4 <MX_TIM3_Init+0x98>)
 80014a4:	f004 fba9 	bl	8005bfa <HAL_TIM_Base_Init>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 80014ae:	f000 f8a3 	bl	80015f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014b6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80014b8:	f107 0310 	add.w	r3, r7, #16
 80014bc:	4619      	mov	r1, r3
 80014be:	480d      	ldr	r0, [pc, #52]	; (80014f4 <MX_TIM3_Init+0x98>)
 80014c0:	f004 fc54 	bl	8005d6c <HAL_TIM_ConfigClockSource>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 80014ca:	f000 f895 	bl	80015f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014ce:	2300      	movs	r3, #0
 80014d0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014d2:	2300      	movs	r3, #0
 80014d4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014d6:	1d3b      	adds	r3, r7, #4
 80014d8:	4619      	mov	r1, r3
 80014da:	4806      	ldr	r0, [pc, #24]	; (80014f4 <MX_TIM3_Init+0x98>)
 80014dc:	f004 fe3a 	bl	8006154 <HAL_TIMEx_MasterConfigSynchronization>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 80014e6:	f000 f887 	bl	80015f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80014ea:	bf00      	nop
 80014ec:	3720      	adds	r7, #32
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	200005e8 	.word	0x200005e8
 80014f8:	40000400 	.word	0x40000400

080014fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b08a      	sub	sp, #40	; 0x28
 8001500:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001502:	f107 0314 	add.w	r3, r7, #20
 8001506:	2200      	movs	r2, #0
 8001508:	601a      	str	r2, [r3, #0]
 800150a:	605a      	str	r2, [r3, #4]
 800150c:	609a      	str	r2, [r3, #8]
 800150e:	60da      	str	r2, [r3, #12]
 8001510:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001512:	4b37      	ldr	r3, [pc, #220]	; (80015f0 <MX_GPIO_Init+0xf4>)
 8001514:	695b      	ldr	r3, [r3, #20]
 8001516:	4a36      	ldr	r2, [pc, #216]	; (80015f0 <MX_GPIO_Init+0xf4>)
 8001518:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800151c:	6153      	str	r3, [r2, #20]
 800151e:	4b34      	ldr	r3, [pc, #208]	; (80015f0 <MX_GPIO_Init+0xf4>)
 8001520:	695b      	ldr	r3, [r3, #20]
 8001522:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001526:	613b      	str	r3, [r7, #16]
 8001528:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800152a:	4b31      	ldr	r3, [pc, #196]	; (80015f0 <MX_GPIO_Init+0xf4>)
 800152c:	695b      	ldr	r3, [r3, #20]
 800152e:	4a30      	ldr	r2, [pc, #192]	; (80015f0 <MX_GPIO_Init+0xf4>)
 8001530:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001534:	6153      	str	r3, [r2, #20]
 8001536:	4b2e      	ldr	r3, [pc, #184]	; (80015f0 <MX_GPIO_Init+0xf4>)
 8001538:	695b      	ldr	r3, [r3, #20]
 800153a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001542:	4b2b      	ldr	r3, [pc, #172]	; (80015f0 <MX_GPIO_Init+0xf4>)
 8001544:	695b      	ldr	r3, [r3, #20]
 8001546:	4a2a      	ldr	r2, [pc, #168]	; (80015f0 <MX_GPIO_Init+0xf4>)
 8001548:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800154c:	6153      	str	r3, [r2, #20]
 800154e:	4b28      	ldr	r3, [pc, #160]	; (80015f0 <MX_GPIO_Init+0xf4>)
 8001550:	695b      	ldr	r3, [r3, #20]
 8001552:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001556:	60bb      	str	r3, [r7, #8]
 8001558:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800155a:	4b25      	ldr	r3, [pc, #148]	; (80015f0 <MX_GPIO_Init+0xf4>)
 800155c:	695b      	ldr	r3, [r3, #20]
 800155e:	4a24      	ldr	r2, [pc, #144]	; (80015f0 <MX_GPIO_Init+0xf4>)
 8001560:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001564:	6153      	str	r3, [r2, #20]
 8001566:	4b22      	ldr	r3, [pc, #136]	; (80015f0 <MX_GPIO_Init+0xf4>)
 8001568:	695b      	ldr	r3, [r3, #20]
 800156a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800156e:	607b      	str	r3, [r7, #4]
 8001570:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001572:	4b1f      	ldr	r3, [pc, #124]	; (80015f0 <MX_GPIO_Init+0xf4>)
 8001574:	695b      	ldr	r3, [r3, #20]
 8001576:	4a1e      	ldr	r2, [pc, #120]	; (80015f0 <MX_GPIO_Init+0xf4>)
 8001578:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800157c:	6153      	str	r3, [r2, #20]
 800157e:	4b1c      	ldr	r3, [pc, #112]	; (80015f0 <MX_GPIO_Init+0xf4>)
 8001580:	695b      	ldr	r3, [r3, #20]
 8001582:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001586:	603b      	str	r3, [r7, #0]
 8001588:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800158a:	2200      	movs	r2, #0
 800158c:	f64f 7108 	movw	r1, #65288	; 0xff08
 8001590:	4818      	ldr	r0, [pc, #96]	; (80015f4 <MX_GPIO_Init+0xf8>)
 8001592:	f000 fd65 	bl	8002060 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8001596:	2337      	movs	r3, #55	; 0x37
 8001598:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800159a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800159e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a0:	2300      	movs	r3, #0
 80015a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015a4:	f107 0314 	add.w	r3, r7, #20
 80015a8:	4619      	mov	r1, r3
 80015aa:	4812      	ldr	r0, [pc, #72]	; (80015f4 <MX_GPIO_Init+0xf8>)
 80015ac:	f000 fbc6 	bl	8001d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80015b0:	f64f 7308 	movw	r3, #65288	; 0xff08
 80015b4:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b6:	2301      	movs	r3, #1
 80015b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ba:	2300      	movs	r3, #0
 80015bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015be:	2300      	movs	r3, #0
 80015c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015c2:	f107 0314 	add.w	r3, r7, #20
 80015c6:	4619      	mov	r1, r3
 80015c8:	480a      	ldr	r0, [pc, #40]	; (80015f4 <MX_GPIO_Init+0xf8>)
 80015ca:	f000 fbb7 	bl	8001d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80015ce:	2301      	movs	r3, #1
 80015d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015d2:	2300      	movs	r3, #0
 80015d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d6:	2300      	movs	r3, #0
 80015d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015da:	f107 0314 	add.w	r3, r7, #20
 80015de:	4619      	mov	r1, r3
 80015e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015e4:	f000 fbaa 	bl	8001d3c <HAL_GPIO_Init>

}
 80015e8:	bf00      	nop
 80015ea:	3728      	adds	r7, #40	; 0x28
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	40021000 	.word	0x40021000
 80015f4:	48001000 	.word	0x48001000

080015f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015fc:	b672      	cpsid	i
}
 80015fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001600:	e7fe      	b.n	8001600 <Error_Handler+0x8>
	...

08001604 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800160a:	4b0f      	ldr	r3, [pc, #60]	; (8001648 <HAL_MspInit+0x44>)
 800160c:	699b      	ldr	r3, [r3, #24]
 800160e:	4a0e      	ldr	r2, [pc, #56]	; (8001648 <HAL_MspInit+0x44>)
 8001610:	f043 0301 	orr.w	r3, r3, #1
 8001614:	6193      	str	r3, [r2, #24]
 8001616:	4b0c      	ldr	r3, [pc, #48]	; (8001648 <HAL_MspInit+0x44>)
 8001618:	699b      	ldr	r3, [r3, #24]
 800161a:	f003 0301 	and.w	r3, r3, #1
 800161e:	607b      	str	r3, [r7, #4]
 8001620:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001622:	4b09      	ldr	r3, [pc, #36]	; (8001648 <HAL_MspInit+0x44>)
 8001624:	69db      	ldr	r3, [r3, #28]
 8001626:	4a08      	ldr	r2, [pc, #32]	; (8001648 <HAL_MspInit+0x44>)
 8001628:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800162c:	61d3      	str	r3, [r2, #28]
 800162e:	4b06      	ldr	r3, [pc, #24]	; (8001648 <HAL_MspInit+0x44>)
 8001630:	69db      	ldr	r3, [r3, #28]
 8001632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001636:	603b      	str	r3, [r7, #0]
 8001638:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800163a:	2007      	movs	r0, #7
 800163c:	f000 fb3c 	bl	8001cb8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001640:	bf00      	nop
 8001642:	3708      	adds	r7, #8
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	40021000 	.word	0x40021000

0800164c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b08a      	sub	sp, #40	; 0x28
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001654:	f107 0314 	add.w	r3, r7, #20
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	605a      	str	r2, [r3, #4]
 800165e:	609a      	str	r2, [r3, #8]
 8001660:	60da      	str	r2, [r3, #12]
 8001662:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a17      	ldr	r2, [pc, #92]	; (80016c8 <HAL_I2C_MspInit+0x7c>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d127      	bne.n	80016be <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800166e:	4b17      	ldr	r3, [pc, #92]	; (80016cc <HAL_I2C_MspInit+0x80>)
 8001670:	695b      	ldr	r3, [r3, #20]
 8001672:	4a16      	ldr	r2, [pc, #88]	; (80016cc <HAL_I2C_MspInit+0x80>)
 8001674:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001678:	6153      	str	r3, [r2, #20]
 800167a:	4b14      	ldr	r3, [pc, #80]	; (80016cc <HAL_I2C_MspInit+0x80>)
 800167c:	695b      	ldr	r3, [r3, #20]
 800167e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001682:	613b      	str	r3, [r7, #16]
 8001684:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001686:	23c0      	movs	r3, #192	; 0xc0
 8001688:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800168a:	2312      	movs	r3, #18
 800168c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800168e:	2301      	movs	r3, #1
 8001690:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001692:	2303      	movs	r3, #3
 8001694:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001696:	2304      	movs	r3, #4
 8001698:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800169a:	f107 0314 	add.w	r3, r7, #20
 800169e:	4619      	mov	r1, r3
 80016a0:	480b      	ldr	r0, [pc, #44]	; (80016d0 <HAL_I2C_MspInit+0x84>)
 80016a2:	f000 fb4b 	bl	8001d3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016a6:	4b09      	ldr	r3, [pc, #36]	; (80016cc <HAL_I2C_MspInit+0x80>)
 80016a8:	69db      	ldr	r3, [r3, #28]
 80016aa:	4a08      	ldr	r2, [pc, #32]	; (80016cc <HAL_I2C_MspInit+0x80>)
 80016ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016b0:	61d3      	str	r3, [r2, #28]
 80016b2:	4b06      	ldr	r3, [pc, #24]	; (80016cc <HAL_I2C_MspInit+0x80>)
 80016b4:	69db      	ldr	r3, [r3, #28]
 80016b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016ba:	60fb      	str	r3, [r7, #12]
 80016bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80016be:	bf00      	nop
 80016c0:	3728      	adds	r7, #40	; 0x28
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	40005400 	.word	0x40005400
 80016cc:	40021000 	.word	0x40021000
 80016d0:	48000400 	.word	0x48000400

080016d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b08a      	sub	sp, #40	; 0x28
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016dc:	f107 0314 	add.w	r3, r7, #20
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]
 80016e4:	605a      	str	r2, [r3, #4]
 80016e6:	609a      	str	r2, [r3, #8]
 80016e8:	60da      	str	r2, [r3, #12]
 80016ea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a17      	ldr	r2, [pc, #92]	; (8001750 <HAL_SPI_MspInit+0x7c>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d128      	bne.n	8001748 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016f6:	4b17      	ldr	r3, [pc, #92]	; (8001754 <HAL_SPI_MspInit+0x80>)
 80016f8:	699b      	ldr	r3, [r3, #24]
 80016fa:	4a16      	ldr	r2, [pc, #88]	; (8001754 <HAL_SPI_MspInit+0x80>)
 80016fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001700:	6193      	str	r3, [r2, #24]
 8001702:	4b14      	ldr	r3, [pc, #80]	; (8001754 <HAL_SPI_MspInit+0x80>)
 8001704:	699b      	ldr	r3, [r3, #24]
 8001706:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800170a:	613b      	str	r3, [r7, #16]
 800170c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800170e:	4b11      	ldr	r3, [pc, #68]	; (8001754 <HAL_SPI_MspInit+0x80>)
 8001710:	695b      	ldr	r3, [r3, #20]
 8001712:	4a10      	ldr	r2, [pc, #64]	; (8001754 <HAL_SPI_MspInit+0x80>)
 8001714:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001718:	6153      	str	r3, [r2, #20]
 800171a:	4b0e      	ldr	r3, [pc, #56]	; (8001754 <HAL_SPI_MspInit+0x80>)
 800171c:	695b      	ldr	r3, [r3, #20]
 800171e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001722:	60fb      	str	r3, [r7, #12]
 8001724:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8001726:	23e0      	movs	r3, #224	; 0xe0
 8001728:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172a:	2302      	movs	r3, #2
 800172c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172e:	2300      	movs	r3, #0
 8001730:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001732:	2303      	movs	r3, #3
 8001734:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001736:	2305      	movs	r3, #5
 8001738:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800173a:	f107 0314 	add.w	r3, r7, #20
 800173e:	4619      	mov	r1, r3
 8001740:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001744:	f000 fafa 	bl	8001d3c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001748:	bf00      	nop
 800174a:	3728      	adds	r7, #40	; 0x28
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	40013000 	.word	0x40013000
 8001754:	40021000 	.word	0x40021000

08001758 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a0a      	ldr	r2, [pc, #40]	; (8001790 <HAL_TIM_Base_MspInit+0x38>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d10b      	bne.n	8001782 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800176a:	4b0a      	ldr	r3, [pc, #40]	; (8001794 <HAL_TIM_Base_MspInit+0x3c>)
 800176c:	69db      	ldr	r3, [r3, #28]
 800176e:	4a09      	ldr	r2, [pc, #36]	; (8001794 <HAL_TIM_Base_MspInit+0x3c>)
 8001770:	f043 0302 	orr.w	r3, r3, #2
 8001774:	61d3      	str	r3, [r2, #28]
 8001776:	4b07      	ldr	r3, [pc, #28]	; (8001794 <HAL_TIM_Base_MspInit+0x3c>)
 8001778:	69db      	ldr	r3, [r3, #28]
 800177a:	f003 0302 	and.w	r3, r3, #2
 800177e:	60fb      	str	r3, [r7, #12]
 8001780:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001782:	bf00      	nop
 8001784:	3714      	adds	r7, #20
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	40000400 	.word	0x40000400
 8001794:	40021000 	.word	0x40021000

08001798 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800179c:	e7fe      	b.n	800179c <NMI_Handler+0x4>

0800179e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800179e:	b480      	push	{r7}
 80017a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017a2:	e7fe      	b.n	80017a2 <HardFault_Handler+0x4>

080017a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017a8:	e7fe      	b.n	80017a8 <MemManage_Handler+0x4>

080017aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017aa:	b480      	push	{r7}
 80017ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017ae:	e7fe      	b.n	80017ae <BusFault_Handler+0x4>

080017b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017b4:	e7fe      	b.n	80017b4 <UsageFault_Handler+0x4>

080017b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017b6:	b480      	push	{r7}
 80017b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017ba:	bf00      	nop
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr

080017c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017c8:	bf00      	nop
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr

080017d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017d2:	b480      	push	{r7}
 80017d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017d6:	bf00      	nop
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017e4:	f000 f954 	bl	8001a90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017e8:	bf00      	nop
 80017ea:	bd80      	pop	{r7, pc}

080017ec <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80017f0:	4802      	ldr	r0, [pc, #8]	; (80017fc <USB_LP_CAN_RX0_IRQHandler+0x10>)
 80017f2:	f001 fad2 	bl	8002d9a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 80017f6:	bf00      	nop
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	20001330 	.word	0x20001330

08001800 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
	return 1;
 8001804:	2301      	movs	r3, #1
}
 8001806:	4618      	mov	r0, r3
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <_kill>:

int _kill(int pid, int sig)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800181a:	f008 fdcb 	bl	800a3b4 <__errno>
 800181e:	4603      	mov	r3, r0
 8001820:	2216      	movs	r2, #22
 8001822:	601a      	str	r2, [r3, #0]
	return -1;
 8001824:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001828:	4618      	mov	r0, r3
 800182a:	3708      	adds	r7, #8
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}

08001830 <_exit>:

void _exit (int status)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001838:	f04f 31ff 	mov.w	r1, #4294967295
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f7ff ffe7 	bl	8001810 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001842:	e7fe      	b.n	8001842 <_exit+0x12>

08001844 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b086      	sub	sp, #24
 8001848:	af00      	add	r7, sp, #0
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	60b9      	str	r1, [r7, #8]
 800184e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001850:	2300      	movs	r3, #0
 8001852:	617b      	str	r3, [r7, #20]
 8001854:	e00a      	b.n	800186c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001856:	f3af 8000 	nop.w
 800185a:	4601      	mov	r1, r0
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	1c5a      	adds	r2, r3, #1
 8001860:	60ba      	str	r2, [r7, #8]
 8001862:	b2ca      	uxtb	r2, r1
 8001864:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	3301      	adds	r3, #1
 800186a:	617b      	str	r3, [r7, #20]
 800186c:	697a      	ldr	r2, [r7, #20]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	429a      	cmp	r2, r3
 8001872:	dbf0      	blt.n	8001856 <_read+0x12>
	}

return len;
 8001874:	687b      	ldr	r3, [r7, #4]
}
 8001876:	4618      	mov	r0, r3
 8001878:	3718      	adds	r7, #24
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}

0800187e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800187e:	b580      	push	{r7, lr}
 8001880:	b086      	sub	sp, #24
 8001882:	af00      	add	r7, sp, #0
 8001884:	60f8      	str	r0, [r7, #12]
 8001886:	60b9      	str	r1, [r7, #8]
 8001888:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800188a:	2300      	movs	r3, #0
 800188c:	617b      	str	r3, [r7, #20]
 800188e:	e009      	b.n	80018a4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	1c5a      	adds	r2, r3, #1
 8001894:	60ba      	str	r2, [r7, #8]
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	4618      	mov	r0, r3
 800189a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	3301      	adds	r3, #1
 80018a2:	617b      	str	r3, [r7, #20]
 80018a4:	697a      	ldr	r2, [r7, #20]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	dbf1      	blt.n	8001890 <_write+0x12>
	}
	return len;
 80018ac:	687b      	ldr	r3, [r7, #4]
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3718      	adds	r7, #24
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}

080018b6 <_close>:

int _close(int file)
{
 80018b6:	b480      	push	{r7}
 80018b8:	b083      	sub	sp, #12
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	6078      	str	r0, [r7, #4]
	return -1;
 80018be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	370c      	adds	r7, #12
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr

080018ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018ce:	b480      	push	{r7}
 80018d0:	b083      	sub	sp, #12
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	6078      	str	r0, [r7, #4]
 80018d6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018de:	605a      	str	r2, [r3, #4]
	return 0;
 80018e0:	2300      	movs	r3, #0
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	370c      	adds	r7, #12
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr

080018ee <_isatty>:

int _isatty(int file)
{
 80018ee:	b480      	push	{r7}
 80018f0:	b083      	sub	sp, #12
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	6078      	str	r0, [r7, #4]
	return 1;
 80018f6:	2301      	movs	r3, #1
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001904:	b480      	push	{r7}
 8001906:	b085      	sub	sp, #20
 8001908:	af00      	add	r7, sp, #0
 800190a:	60f8      	str	r0, [r7, #12]
 800190c:	60b9      	str	r1, [r7, #8]
 800190e:	607a      	str	r2, [r7, #4]
	return 0;
 8001910:	2300      	movs	r3, #0
}
 8001912:	4618      	mov	r0, r3
 8001914:	3714      	adds	r7, #20
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
	...

08001920 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b086      	sub	sp, #24
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001928:	4a14      	ldr	r2, [pc, #80]	; (800197c <_sbrk+0x5c>)
 800192a:	4b15      	ldr	r3, [pc, #84]	; (8001980 <_sbrk+0x60>)
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001934:	4b13      	ldr	r3, [pc, #76]	; (8001984 <_sbrk+0x64>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d102      	bne.n	8001942 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800193c:	4b11      	ldr	r3, [pc, #68]	; (8001984 <_sbrk+0x64>)
 800193e:	4a12      	ldr	r2, [pc, #72]	; (8001988 <_sbrk+0x68>)
 8001940:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001942:	4b10      	ldr	r3, [pc, #64]	; (8001984 <_sbrk+0x64>)
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4413      	add	r3, r2
 800194a:	693a      	ldr	r2, [r7, #16]
 800194c:	429a      	cmp	r2, r3
 800194e:	d207      	bcs.n	8001960 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001950:	f008 fd30 	bl	800a3b4 <__errno>
 8001954:	4603      	mov	r3, r0
 8001956:	220c      	movs	r2, #12
 8001958:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800195a:	f04f 33ff 	mov.w	r3, #4294967295
 800195e:	e009      	b.n	8001974 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001960:	4b08      	ldr	r3, [pc, #32]	; (8001984 <_sbrk+0x64>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001966:	4b07      	ldr	r3, [pc, #28]	; (8001984 <_sbrk+0x64>)
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4413      	add	r3, r2
 800196e:	4a05      	ldr	r2, [pc, #20]	; (8001984 <_sbrk+0x64>)
 8001970:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001972:	68fb      	ldr	r3, [r7, #12]
}
 8001974:	4618      	mov	r0, r3
 8001976:	3718      	adds	r7, #24
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	2000a000 	.word	0x2000a000
 8001980:	00000400 	.word	0x00000400
 8001984:	2000036c 	.word	0x2000036c
 8001988:	20001630 	.word	0x20001630

0800198c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001990:	4b06      	ldr	r3, [pc, #24]	; (80019ac <SystemInit+0x20>)
 8001992:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001996:	4a05      	ldr	r2, [pc, #20]	; (80019ac <SystemInit+0x20>)
 8001998:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800199c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019a0:	bf00      	nop
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	e000ed00 	.word	0xe000ed00

080019b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80019b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019e8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019b4:	480d      	ldr	r0, [pc, #52]	; (80019ec <LoopForever+0x6>)
  ldr r1, =_edata
 80019b6:	490e      	ldr	r1, [pc, #56]	; (80019f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80019b8:	4a0e      	ldr	r2, [pc, #56]	; (80019f4 <LoopForever+0xe>)
  movs r3, #0
 80019ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019bc:	e002      	b.n	80019c4 <LoopCopyDataInit>

080019be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019c2:	3304      	adds	r3, #4

080019c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019c8:	d3f9      	bcc.n	80019be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019ca:	4a0b      	ldr	r2, [pc, #44]	; (80019f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80019cc:	4c0b      	ldr	r4, [pc, #44]	; (80019fc <LoopForever+0x16>)
  movs r3, #0
 80019ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019d0:	e001      	b.n	80019d6 <LoopFillZerobss>

080019d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019d4:	3204      	adds	r2, #4

080019d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019d8:	d3fb      	bcc.n	80019d2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80019da:	f7ff ffd7 	bl	800198c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019de:	f008 fcef 	bl	800a3c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019e2:	f7ff fa0d 	bl	8000e00 <main>

080019e6 <LoopForever>:

LoopForever:
    b LoopForever
 80019e6:	e7fe      	b.n	80019e6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80019e8:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80019ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019f0:	20000350 	.word	0x20000350
  ldr r2, =_sidata
 80019f4:	0800e648 	.word	0x0800e648
  ldr r2, =_sbss
 80019f8:	20000350 	.word	0x20000350
  ldr r4, =_ebss
 80019fc:	2000162c 	.word	0x2000162c

08001a00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a00:	e7fe      	b.n	8001a00 <ADC1_2_IRQHandler>
	...

08001a04 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a08:	4b08      	ldr	r3, [pc, #32]	; (8001a2c <HAL_Init+0x28>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a07      	ldr	r2, [pc, #28]	; (8001a2c <HAL_Init+0x28>)
 8001a0e:	f043 0310 	orr.w	r3, r3, #16
 8001a12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a14:	2003      	movs	r0, #3
 8001a16:	f000 f94f 	bl	8001cb8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a1a:	2000      	movs	r0, #0
 8001a1c:	f000 f808 	bl	8001a30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a20:	f7ff fdf0 	bl	8001604 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a24:	2300      	movs	r3, #0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	40022000 	.word	0x40022000

08001a30 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a38:	4b12      	ldr	r3, [pc, #72]	; (8001a84 <HAL_InitTick+0x54>)
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	4b12      	ldr	r3, [pc, #72]	; (8001a88 <HAL_InitTick+0x58>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	4619      	mov	r1, r3
 8001a42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a46:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f000 f967 	bl	8001d22 <HAL_SYSTICK_Config>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e00e      	b.n	8001a7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2b0f      	cmp	r3, #15
 8001a62:	d80a      	bhi.n	8001a7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a64:	2200      	movs	r2, #0
 8001a66:	6879      	ldr	r1, [r7, #4]
 8001a68:	f04f 30ff 	mov.w	r0, #4294967295
 8001a6c:	f000 f92f 	bl	8001cce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a70:	4a06      	ldr	r2, [pc, #24]	; (8001a8c <HAL_InitTick+0x5c>)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001a76:	2300      	movs	r3, #0
 8001a78:	e000      	b.n	8001a7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3708      	adds	r7, #8
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	20000000 	.word	0x20000000
 8001a88:	20000008 	.word	0x20000008
 8001a8c:	20000004 	.word	0x20000004

08001a90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a94:	4b06      	ldr	r3, [pc, #24]	; (8001ab0 <HAL_IncTick+0x20>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	461a      	mov	r2, r3
 8001a9a:	4b06      	ldr	r3, [pc, #24]	; (8001ab4 <HAL_IncTick+0x24>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4413      	add	r3, r2
 8001aa0:	4a04      	ldr	r2, [pc, #16]	; (8001ab4 <HAL_IncTick+0x24>)
 8001aa2:	6013      	str	r3, [r2, #0]
}
 8001aa4:	bf00      	nop
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	20000008 	.word	0x20000008
 8001ab4:	20000698 	.word	0x20000698

08001ab8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  return uwTick;  
 8001abc:	4b03      	ldr	r3, [pc, #12]	; (8001acc <HAL_GetTick+0x14>)
 8001abe:	681b      	ldr	r3, [r3, #0]
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	20000698 	.word	0x20000698

08001ad0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ad8:	f7ff ffee 	bl	8001ab8 <HAL_GetTick>
 8001adc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ae8:	d005      	beq.n	8001af6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001aea:	4b0a      	ldr	r3, [pc, #40]	; (8001b14 <HAL_Delay+0x44>)
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	461a      	mov	r2, r3
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	4413      	add	r3, r2
 8001af4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001af6:	bf00      	nop
 8001af8:	f7ff ffde 	bl	8001ab8 <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	68fa      	ldr	r2, [r7, #12]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d8f7      	bhi.n	8001af8 <HAL_Delay+0x28>
  {
  }
}
 8001b08:	bf00      	nop
 8001b0a:	bf00      	nop
 8001b0c:	3710      	adds	r7, #16
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	20000008 	.word	0x20000008

08001b18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b085      	sub	sp, #20
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f003 0307 	and.w	r3, r3, #7
 8001b26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b28:	4b0c      	ldr	r3, [pc, #48]	; (8001b5c <__NVIC_SetPriorityGrouping+0x44>)
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b2e:	68ba      	ldr	r2, [r7, #8]
 8001b30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b34:	4013      	ands	r3, r2
 8001b36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b4a:	4a04      	ldr	r2, [pc, #16]	; (8001b5c <__NVIC_SetPriorityGrouping+0x44>)
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	60d3      	str	r3, [r2, #12]
}
 8001b50:	bf00      	nop
 8001b52:	3714      	adds	r7, #20
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr
 8001b5c:	e000ed00 	.word	0xe000ed00

08001b60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b64:	4b04      	ldr	r3, [pc, #16]	; (8001b78 <__NVIC_GetPriorityGrouping+0x18>)
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	0a1b      	lsrs	r3, r3, #8
 8001b6a:	f003 0307 	and.w	r3, r3, #7
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr
 8001b78:	e000ed00 	.word	0xe000ed00

08001b7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	4603      	mov	r3, r0
 8001b84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	db0b      	blt.n	8001ba6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b8e:	79fb      	ldrb	r3, [r7, #7]
 8001b90:	f003 021f 	and.w	r2, r3, #31
 8001b94:	4907      	ldr	r1, [pc, #28]	; (8001bb4 <__NVIC_EnableIRQ+0x38>)
 8001b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9a:	095b      	lsrs	r3, r3, #5
 8001b9c:	2001      	movs	r0, #1
 8001b9e:	fa00 f202 	lsl.w	r2, r0, r2
 8001ba2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ba6:	bf00      	nop
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	e000e100 	.word	0xe000e100

08001bb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	6039      	str	r1, [r7, #0]
 8001bc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	db0a      	blt.n	8001be2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	b2da      	uxtb	r2, r3
 8001bd0:	490c      	ldr	r1, [pc, #48]	; (8001c04 <__NVIC_SetPriority+0x4c>)
 8001bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd6:	0112      	lsls	r2, r2, #4
 8001bd8:	b2d2      	uxtb	r2, r2
 8001bda:	440b      	add	r3, r1
 8001bdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001be0:	e00a      	b.n	8001bf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	b2da      	uxtb	r2, r3
 8001be6:	4908      	ldr	r1, [pc, #32]	; (8001c08 <__NVIC_SetPriority+0x50>)
 8001be8:	79fb      	ldrb	r3, [r7, #7]
 8001bea:	f003 030f 	and.w	r3, r3, #15
 8001bee:	3b04      	subs	r3, #4
 8001bf0:	0112      	lsls	r2, r2, #4
 8001bf2:	b2d2      	uxtb	r2, r2
 8001bf4:	440b      	add	r3, r1
 8001bf6:	761a      	strb	r2, [r3, #24]
}
 8001bf8:	bf00      	nop
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr
 8001c04:	e000e100 	.word	0xe000e100
 8001c08:	e000ed00 	.word	0xe000ed00

08001c0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b089      	sub	sp, #36	; 0x24
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	60f8      	str	r0, [r7, #12]
 8001c14:	60b9      	str	r1, [r7, #8]
 8001c16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	f003 0307 	and.w	r3, r3, #7
 8001c1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	f1c3 0307 	rsb	r3, r3, #7
 8001c26:	2b04      	cmp	r3, #4
 8001c28:	bf28      	it	cs
 8001c2a:	2304      	movcs	r3, #4
 8001c2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	3304      	adds	r3, #4
 8001c32:	2b06      	cmp	r3, #6
 8001c34:	d902      	bls.n	8001c3c <NVIC_EncodePriority+0x30>
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	3b03      	subs	r3, #3
 8001c3a:	e000      	b.n	8001c3e <NVIC_EncodePriority+0x32>
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c40:	f04f 32ff 	mov.w	r2, #4294967295
 8001c44:	69bb      	ldr	r3, [r7, #24]
 8001c46:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4a:	43da      	mvns	r2, r3
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	401a      	ands	r2, r3
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c54:	f04f 31ff 	mov.w	r1, #4294967295
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c5e:	43d9      	mvns	r1, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c64:	4313      	orrs	r3, r2
         );
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3724      	adds	r7, #36	; 0x24
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
	...

08001c74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c84:	d301      	bcc.n	8001c8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c86:	2301      	movs	r3, #1
 8001c88:	e00f      	b.n	8001caa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c8a:	4a0a      	ldr	r2, [pc, #40]	; (8001cb4 <SysTick_Config+0x40>)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c92:	210f      	movs	r1, #15
 8001c94:	f04f 30ff 	mov.w	r0, #4294967295
 8001c98:	f7ff ff8e 	bl	8001bb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c9c:	4b05      	ldr	r3, [pc, #20]	; (8001cb4 <SysTick_Config+0x40>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ca2:	4b04      	ldr	r3, [pc, #16]	; (8001cb4 <SysTick_Config+0x40>)
 8001ca4:	2207      	movs	r2, #7
 8001ca6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ca8:	2300      	movs	r3, #0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	e000e010 	.word	0xe000e010

08001cb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f7ff ff29 	bl	8001b18 <__NVIC_SetPriorityGrouping>
}
 8001cc6:	bf00      	nop
 8001cc8:	3708      	adds	r7, #8
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b086      	sub	sp, #24
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	60b9      	str	r1, [r7, #8]
 8001cd8:	607a      	str	r2, [r7, #4]
 8001cda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ce0:	f7ff ff3e 	bl	8001b60 <__NVIC_GetPriorityGrouping>
 8001ce4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	68b9      	ldr	r1, [r7, #8]
 8001cea:	6978      	ldr	r0, [r7, #20]
 8001cec:	f7ff ff8e 	bl	8001c0c <NVIC_EncodePriority>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cf6:	4611      	mov	r1, r2
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7ff ff5d 	bl	8001bb8 <__NVIC_SetPriority>
}
 8001cfe:	bf00      	nop
 8001d00:	3718      	adds	r7, #24
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d06:	b580      	push	{r7, lr}
 8001d08:	b082      	sub	sp, #8
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7ff ff31 	bl	8001b7c <__NVIC_EnableIRQ>
}
 8001d1a:	bf00      	nop
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d22:	b580      	push	{r7, lr}
 8001d24:	b082      	sub	sp, #8
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f7ff ffa2 	bl	8001c74 <SysTick_Config>
 8001d30:	4603      	mov	r3, r0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
	...

08001d3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b087      	sub	sp, #28
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d46:	2300      	movs	r3, #0
 8001d48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d4a:	e154      	b.n	8001ff6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	2101      	movs	r1, #1
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	fa01 f303 	lsl.w	r3, r1, r3
 8001d58:	4013      	ands	r3, r2
 8001d5a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	f000 8146 	beq.w	8001ff0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f003 0303 	and.w	r3, r3, #3
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d005      	beq.n	8001d7c <HAL_GPIO_Init+0x40>
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f003 0303 	and.w	r3, r3, #3
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d130      	bne.n	8001dde <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	2203      	movs	r2, #3
 8001d88:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8c:	43db      	mvns	r3, r3
 8001d8e:	693a      	ldr	r2, [r7, #16]
 8001d90:	4013      	ands	r3, r2
 8001d92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	68da      	ldr	r2, [r3, #12]
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001da0:	693a      	ldr	r2, [r7, #16]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	693a      	ldr	r2, [r7, #16]
 8001daa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001db2:	2201      	movs	r2, #1
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dba:	43db      	mvns	r3, r3
 8001dbc:	693a      	ldr	r2, [r7, #16]
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	091b      	lsrs	r3, r3, #4
 8001dc8:	f003 0201 	and.w	r2, r3, #1
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd2:	693a      	ldr	r2, [r7, #16]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	693a      	ldr	r2, [r7, #16]
 8001ddc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f003 0303 	and.w	r3, r3, #3
 8001de6:	2b03      	cmp	r3, #3
 8001de8:	d017      	beq.n	8001e1a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	68db      	ldr	r3, [r3, #12]
 8001dee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	005b      	lsls	r3, r3, #1
 8001df4:	2203      	movs	r2, #3
 8001df6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfa:	43db      	mvns	r3, r3
 8001dfc:	693a      	ldr	r2, [r7, #16]
 8001dfe:	4013      	ands	r3, r2
 8001e00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	689a      	ldr	r2, [r3, #8]
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0e:	693a      	ldr	r2, [r7, #16]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	693a      	ldr	r2, [r7, #16]
 8001e18:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f003 0303 	and.w	r3, r3, #3
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d123      	bne.n	8001e6e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	08da      	lsrs	r2, r3, #3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	3208      	adds	r2, #8
 8001e2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e32:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	f003 0307 	and.w	r3, r3, #7
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	220f      	movs	r2, #15
 8001e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e42:	43db      	mvns	r3, r3
 8001e44:	693a      	ldr	r2, [r7, #16]
 8001e46:	4013      	ands	r3, r2
 8001e48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	691a      	ldr	r2, [r3, #16]
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	f003 0307 	and.w	r3, r3, #7
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5a:	693a      	ldr	r2, [r7, #16]
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	08da      	lsrs	r2, r3, #3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	3208      	adds	r2, #8
 8001e68:	6939      	ldr	r1, [r7, #16]
 8001e6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	005b      	lsls	r3, r3, #1
 8001e78:	2203      	movs	r2, #3
 8001e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7e:	43db      	mvns	r3, r3
 8001e80:	693a      	ldr	r2, [r7, #16]
 8001e82:	4013      	ands	r3, r2
 8001e84:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f003 0203 	and.w	r2, r3, #3
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	fa02 f303 	lsl.w	r3, r2, r3
 8001e96:	693a      	ldr	r2, [r7, #16]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	693a      	ldr	r2, [r7, #16]
 8001ea0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	f000 80a0 	beq.w	8001ff0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eb0:	4b58      	ldr	r3, [pc, #352]	; (8002014 <HAL_GPIO_Init+0x2d8>)
 8001eb2:	699b      	ldr	r3, [r3, #24]
 8001eb4:	4a57      	ldr	r2, [pc, #348]	; (8002014 <HAL_GPIO_Init+0x2d8>)
 8001eb6:	f043 0301 	orr.w	r3, r3, #1
 8001eba:	6193      	str	r3, [r2, #24]
 8001ebc:	4b55      	ldr	r3, [pc, #340]	; (8002014 <HAL_GPIO_Init+0x2d8>)
 8001ebe:	699b      	ldr	r3, [r3, #24]
 8001ec0:	f003 0301 	and.w	r3, r3, #1
 8001ec4:	60bb      	str	r3, [r7, #8]
 8001ec6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ec8:	4a53      	ldr	r2, [pc, #332]	; (8002018 <HAL_GPIO_Init+0x2dc>)
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	089b      	lsrs	r3, r3, #2
 8001ece:	3302      	adds	r3, #2
 8001ed0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ed4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	f003 0303 	and.w	r3, r3, #3
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	220f      	movs	r2, #15
 8001ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee4:	43db      	mvns	r3, r3
 8001ee6:	693a      	ldr	r2, [r7, #16]
 8001ee8:	4013      	ands	r3, r2
 8001eea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001ef2:	d019      	beq.n	8001f28 <HAL_GPIO_Init+0x1ec>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	4a49      	ldr	r2, [pc, #292]	; (800201c <HAL_GPIO_Init+0x2e0>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d013      	beq.n	8001f24 <HAL_GPIO_Init+0x1e8>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	4a48      	ldr	r2, [pc, #288]	; (8002020 <HAL_GPIO_Init+0x2e4>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d00d      	beq.n	8001f20 <HAL_GPIO_Init+0x1e4>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	4a47      	ldr	r2, [pc, #284]	; (8002024 <HAL_GPIO_Init+0x2e8>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d007      	beq.n	8001f1c <HAL_GPIO_Init+0x1e0>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	4a46      	ldr	r2, [pc, #280]	; (8002028 <HAL_GPIO_Init+0x2ec>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d101      	bne.n	8001f18 <HAL_GPIO_Init+0x1dc>
 8001f14:	2304      	movs	r3, #4
 8001f16:	e008      	b.n	8001f2a <HAL_GPIO_Init+0x1ee>
 8001f18:	2305      	movs	r3, #5
 8001f1a:	e006      	b.n	8001f2a <HAL_GPIO_Init+0x1ee>
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	e004      	b.n	8001f2a <HAL_GPIO_Init+0x1ee>
 8001f20:	2302      	movs	r3, #2
 8001f22:	e002      	b.n	8001f2a <HAL_GPIO_Init+0x1ee>
 8001f24:	2301      	movs	r3, #1
 8001f26:	e000      	b.n	8001f2a <HAL_GPIO_Init+0x1ee>
 8001f28:	2300      	movs	r3, #0
 8001f2a:	697a      	ldr	r2, [r7, #20]
 8001f2c:	f002 0203 	and.w	r2, r2, #3
 8001f30:	0092      	lsls	r2, r2, #2
 8001f32:	4093      	lsls	r3, r2
 8001f34:	693a      	ldr	r2, [r7, #16]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f3a:	4937      	ldr	r1, [pc, #220]	; (8002018 <HAL_GPIO_Init+0x2dc>)
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	089b      	lsrs	r3, r3, #2
 8001f40:	3302      	adds	r3, #2
 8001f42:	693a      	ldr	r2, [r7, #16]
 8001f44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f48:	4b38      	ldr	r3, [pc, #224]	; (800202c <HAL_GPIO_Init+0x2f0>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	43db      	mvns	r3, r3
 8001f52:	693a      	ldr	r2, [r7, #16]
 8001f54:	4013      	ands	r3, r2
 8001f56:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d003      	beq.n	8001f6c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001f64:	693a      	ldr	r2, [r7, #16]
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001f6c:	4a2f      	ldr	r2, [pc, #188]	; (800202c <HAL_GPIO_Init+0x2f0>)
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001f72:	4b2e      	ldr	r3, [pc, #184]	; (800202c <HAL_GPIO_Init+0x2f0>)
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	43db      	mvns	r3, r3
 8001f7c:	693a      	ldr	r2, [r7, #16]
 8001f7e:	4013      	ands	r3, r2
 8001f80:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d003      	beq.n	8001f96 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001f8e:	693a      	ldr	r2, [r7, #16]
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001f96:	4a25      	ldr	r2, [pc, #148]	; (800202c <HAL_GPIO_Init+0x2f0>)
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f9c:	4b23      	ldr	r3, [pc, #140]	; (800202c <HAL_GPIO_Init+0x2f0>)
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	43db      	mvns	r3, r3
 8001fa6:	693a      	ldr	r2, [r7, #16]
 8001fa8:	4013      	ands	r3, r2
 8001faa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d003      	beq.n	8001fc0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001fb8:	693a      	ldr	r2, [r7, #16]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001fc0:	4a1a      	ldr	r2, [pc, #104]	; (800202c <HAL_GPIO_Init+0x2f0>)
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fc6:	4b19      	ldr	r3, [pc, #100]	; (800202c <HAL_GPIO_Init+0x2f0>)
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	43db      	mvns	r3, r3
 8001fd0:	693a      	ldr	r2, [r7, #16]
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d003      	beq.n	8001fea <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001fe2:	693a      	ldr	r2, [r7, #16]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001fea:	4a10      	ldr	r2, [pc, #64]	; (800202c <HAL_GPIO_Init+0x2f0>)
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	fa22 f303 	lsr.w	r3, r2, r3
 8002000:	2b00      	cmp	r3, #0
 8002002:	f47f aea3 	bne.w	8001d4c <HAL_GPIO_Init+0x10>
  }
}
 8002006:	bf00      	nop
 8002008:	bf00      	nop
 800200a:	371c      	adds	r7, #28
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr
 8002014:	40021000 	.word	0x40021000
 8002018:	40010000 	.word	0x40010000
 800201c:	48000400 	.word	0x48000400
 8002020:	48000800 	.word	0x48000800
 8002024:	48000c00 	.word	0x48000c00
 8002028:	48001000 	.word	0x48001000
 800202c:	40010400 	.word	0x40010400

08002030 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002030:	b480      	push	{r7}
 8002032:	b085      	sub	sp, #20
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	460b      	mov	r3, r1
 800203a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	691a      	ldr	r2, [r3, #16]
 8002040:	887b      	ldrh	r3, [r7, #2]
 8002042:	4013      	ands	r3, r2
 8002044:	2b00      	cmp	r3, #0
 8002046:	d002      	beq.n	800204e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002048:	2301      	movs	r3, #1
 800204a:	73fb      	strb	r3, [r7, #15]
 800204c:	e001      	b.n	8002052 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800204e:	2300      	movs	r3, #0
 8002050:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002052:	7bfb      	ldrb	r3, [r7, #15]
}
 8002054:	4618      	mov	r0, r3
 8002056:	3714      	adds	r7, #20
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	460b      	mov	r3, r1
 800206a:	807b      	strh	r3, [r7, #2]
 800206c:	4613      	mov	r3, r2
 800206e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002070:	787b      	ldrb	r3, [r7, #1]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d003      	beq.n	800207e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002076:	887a      	ldrh	r2, [r7, #2]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800207c:	e002      	b.n	8002084 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800207e:	887a      	ldrh	r2, [r7, #2]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002084:	bf00      	nop
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d101      	bne.n	80020a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e081      	b.n	80021a6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d106      	bne.n	80020bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f7ff fac8 	bl	800164c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2224      	movs	r2, #36	; 0x24
 80020c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f022 0201 	bic.w	r2, r2, #1
 80020d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	685a      	ldr	r2, [r3, #4]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80020e0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	689a      	ldr	r2, [r3, #8]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80020f0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	68db      	ldr	r3, [r3, #12]
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d107      	bne.n	800210a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	689a      	ldr	r2, [r3, #8]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002106:	609a      	str	r2, [r3, #8]
 8002108:	e006      	b.n	8002118 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	689a      	ldr	r2, [r3, #8]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002116:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	2b02      	cmp	r3, #2
 800211e:	d104      	bne.n	800212a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002128:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	6812      	ldr	r2, [r2, #0]
 8002134:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002138:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800213c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	68da      	ldr	r2, [r3, #12]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800214c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	691a      	ldr	r2, [r3, #16]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	695b      	ldr	r3, [r3, #20]
 8002156:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	699b      	ldr	r3, [r3, #24]
 800215e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	430a      	orrs	r2, r1
 8002166:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	69d9      	ldr	r1, [r3, #28]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6a1a      	ldr	r2, [r3, #32]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	430a      	orrs	r2, r1
 8002176:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f042 0201 	orr.w	r2, r2, #1
 8002186:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2200      	movs	r2, #0
 800218c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2220      	movs	r2, #32
 8002192:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80021a4:	2300      	movs	r3, #0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3708      	adds	r7, #8
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
	...

080021b0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b088      	sub	sp, #32
 80021b4:	af02      	add	r7, sp, #8
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	4608      	mov	r0, r1
 80021ba:	4611      	mov	r1, r2
 80021bc:	461a      	mov	r2, r3
 80021be:	4603      	mov	r3, r0
 80021c0:	817b      	strh	r3, [r7, #10]
 80021c2:	460b      	mov	r3, r1
 80021c4:	813b      	strh	r3, [r7, #8]
 80021c6:	4613      	mov	r3, r2
 80021c8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	2b20      	cmp	r3, #32
 80021d4:	f040 80f9 	bne.w	80023ca <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80021d8:	6a3b      	ldr	r3, [r7, #32]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d002      	beq.n	80021e4 <HAL_I2C_Mem_Write+0x34>
 80021de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d105      	bne.n	80021f0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021ea:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e0ed      	b.n	80023cc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d101      	bne.n	80021fe <HAL_I2C_Mem_Write+0x4e>
 80021fa:	2302      	movs	r3, #2
 80021fc:	e0e6      	b.n	80023cc <HAL_I2C_Mem_Write+0x21c>
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2201      	movs	r2, #1
 8002202:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002206:	f7ff fc57 	bl	8001ab8 <HAL_GetTick>
 800220a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	9300      	str	r3, [sp, #0]
 8002210:	2319      	movs	r3, #25
 8002212:	2201      	movs	r2, #1
 8002214:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002218:	68f8      	ldr	r0, [r7, #12]
 800221a:	f000 fac3 	bl	80027a4 <I2C_WaitOnFlagUntilTimeout>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d001      	beq.n	8002228 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e0d1      	b.n	80023cc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2221      	movs	r2, #33	; 0x21
 800222c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2240      	movs	r2, #64	; 0x40
 8002234:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2200      	movs	r2, #0
 800223c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	6a3a      	ldr	r2, [r7, #32]
 8002242:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002248:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2200      	movs	r2, #0
 800224e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002250:	88f8      	ldrh	r0, [r7, #6]
 8002252:	893a      	ldrh	r2, [r7, #8]
 8002254:	8979      	ldrh	r1, [r7, #10]
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	9301      	str	r3, [sp, #4]
 800225a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800225c:	9300      	str	r3, [sp, #0]
 800225e:	4603      	mov	r3, r0
 8002260:	68f8      	ldr	r0, [r7, #12]
 8002262:	f000 f9d3 	bl	800260c <I2C_RequestMemoryWrite>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d005      	beq.n	8002278 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2200      	movs	r2, #0
 8002270:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e0a9      	b.n	80023cc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800227c:	b29b      	uxth	r3, r3
 800227e:	2bff      	cmp	r3, #255	; 0xff
 8002280:	d90e      	bls.n	80022a0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	22ff      	movs	r2, #255	; 0xff
 8002286:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800228c:	b2da      	uxtb	r2, r3
 800228e:	8979      	ldrh	r1, [r7, #10]
 8002290:	2300      	movs	r3, #0
 8002292:	9300      	str	r3, [sp, #0]
 8002294:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002298:	68f8      	ldr	r0, [r7, #12]
 800229a:	f000 fbb5 	bl	8002a08 <I2C_TransferConfig>
 800229e:	e00f      	b.n	80022c0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022a4:	b29a      	uxth	r2, r3
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ae:	b2da      	uxtb	r2, r3
 80022b0:	8979      	ldrh	r1, [r7, #10]
 80022b2:	2300      	movs	r3, #0
 80022b4:	9300      	str	r3, [sp, #0]
 80022b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022ba:	68f8      	ldr	r0, [r7, #12]
 80022bc:	f000 fba4 	bl	8002a08 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022c0:	697a      	ldr	r2, [r7, #20]
 80022c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80022c4:	68f8      	ldr	r0, [r7, #12]
 80022c6:	f000 faad 	bl	8002824 <I2C_WaitOnTXISFlagUntilTimeout>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d001      	beq.n	80022d4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e07b      	b.n	80023cc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d8:	781a      	ldrb	r2, [r3, #0]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e4:	1c5a      	adds	r2, r3, #1
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	3b01      	subs	r3, #1
 80022f2:	b29a      	uxth	r2, r3
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022fc:	3b01      	subs	r3, #1
 80022fe:	b29a      	uxth	r2, r3
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002308:	b29b      	uxth	r3, r3
 800230a:	2b00      	cmp	r3, #0
 800230c:	d034      	beq.n	8002378 <HAL_I2C_Mem_Write+0x1c8>
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002312:	2b00      	cmp	r3, #0
 8002314:	d130      	bne.n	8002378 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	9300      	str	r3, [sp, #0]
 800231a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800231c:	2200      	movs	r2, #0
 800231e:	2180      	movs	r1, #128	; 0x80
 8002320:	68f8      	ldr	r0, [r7, #12]
 8002322:	f000 fa3f 	bl	80027a4 <I2C_WaitOnFlagUntilTimeout>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d001      	beq.n	8002330 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e04d      	b.n	80023cc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002334:	b29b      	uxth	r3, r3
 8002336:	2bff      	cmp	r3, #255	; 0xff
 8002338:	d90e      	bls.n	8002358 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	22ff      	movs	r2, #255	; 0xff
 800233e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002344:	b2da      	uxtb	r2, r3
 8002346:	8979      	ldrh	r1, [r7, #10]
 8002348:	2300      	movs	r3, #0
 800234a:	9300      	str	r3, [sp, #0]
 800234c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002350:	68f8      	ldr	r0, [r7, #12]
 8002352:	f000 fb59 	bl	8002a08 <I2C_TransferConfig>
 8002356:	e00f      	b.n	8002378 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800235c:	b29a      	uxth	r2, r3
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002366:	b2da      	uxtb	r2, r3
 8002368:	8979      	ldrh	r1, [r7, #10]
 800236a:	2300      	movs	r3, #0
 800236c:	9300      	str	r3, [sp, #0]
 800236e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002372:	68f8      	ldr	r0, [r7, #12]
 8002374:	f000 fb48 	bl	8002a08 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800237c:	b29b      	uxth	r3, r3
 800237e:	2b00      	cmp	r3, #0
 8002380:	d19e      	bne.n	80022c0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002382:	697a      	ldr	r2, [r7, #20]
 8002384:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002386:	68f8      	ldr	r0, [r7, #12]
 8002388:	f000 fa8c 	bl	80028a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e01a      	b.n	80023cc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	2220      	movs	r2, #32
 800239c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	6859      	ldr	r1, [r3, #4]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	4b0a      	ldr	r3, [pc, #40]	; (80023d4 <HAL_I2C_Mem_Write+0x224>)
 80023aa:	400b      	ands	r3, r1
 80023ac:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2220      	movs	r2, #32
 80023b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2200      	movs	r2, #0
 80023ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2200      	movs	r2, #0
 80023c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80023c6:	2300      	movs	r3, #0
 80023c8:	e000      	b.n	80023cc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80023ca:	2302      	movs	r3, #2
  }
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3718      	adds	r7, #24
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	fe00e800 	.word	0xfe00e800

080023d8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b088      	sub	sp, #32
 80023dc:	af02      	add	r7, sp, #8
 80023de:	60f8      	str	r0, [r7, #12]
 80023e0:	4608      	mov	r0, r1
 80023e2:	4611      	mov	r1, r2
 80023e4:	461a      	mov	r2, r3
 80023e6:	4603      	mov	r3, r0
 80023e8:	817b      	strh	r3, [r7, #10]
 80023ea:	460b      	mov	r3, r1
 80023ec:	813b      	strh	r3, [r7, #8]
 80023ee:	4613      	mov	r3, r2
 80023f0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	2b20      	cmp	r3, #32
 80023fc:	f040 80fd 	bne.w	80025fa <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002400:	6a3b      	ldr	r3, [r7, #32]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d002      	beq.n	800240c <HAL_I2C_Mem_Read+0x34>
 8002406:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002408:	2b00      	cmp	r3, #0
 800240a:	d105      	bne.n	8002418 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002412:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e0f1      	b.n	80025fc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800241e:	2b01      	cmp	r3, #1
 8002420:	d101      	bne.n	8002426 <HAL_I2C_Mem_Read+0x4e>
 8002422:	2302      	movs	r3, #2
 8002424:	e0ea      	b.n	80025fc <HAL_I2C_Mem_Read+0x224>
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2201      	movs	r2, #1
 800242a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800242e:	f7ff fb43 	bl	8001ab8 <HAL_GetTick>
 8002432:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	9300      	str	r3, [sp, #0]
 8002438:	2319      	movs	r3, #25
 800243a:	2201      	movs	r2, #1
 800243c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002440:	68f8      	ldr	r0, [r7, #12]
 8002442:	f000 f9af 	bl	80027a4 <I2C_WaitOnFlagUntilTimeout>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d001      	beq.n	8002450 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e0d5      	b.n	80025fc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2222      	movs	r2, #34	; 0x22
 8002454:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2240      	movs	r2, #64	; 0x40
 800245c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2200      	movs	r2, #0
 8002464:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	6a3a      	ldr	r2, [r7, #32]
 800246a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002470:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2200      	movs	r2, #0
 8002476:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002478:	88f8      	ldrh	r0, [r7, #6]
 800247a:	893a      	ldrh	r2, [r7, #8]
 800247c:	8979      	ldrh	r1, [r7, #10]
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	9301      	str	r3, [sp, #4]
 8002482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002484:	9300      	str	r3, [sp, #0]
 8002486:	4603      	mov	r3, r0
 8002488:	68f8      	ldr	r0, [r7, #12]
 800248a:	f000 f913 	bl	80026b4 <I2C_RequestMemoryRead>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d005      	beq.n	80024a0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2200      	movs	r2, #0
 8002498:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e0ad      	b.n	80025fc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	2bff      	cmp	r3, #255	; 0xff
 80024a8:	d90e      	bls.n	80024c8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	22ff      	movs	r2, #255	; 0xff
 80024ae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024b4:	b2da      	uxtb	r2, r3
 80024b6:	8979      	ldrh	r1, [r7, #10]
 80024b8:	4b52      	ldr	r3, [pc, #328]	; (8002604 <HAL_I2C_Mem_Read+0x22c>)
 80024ba:	9300      	str	r3, [sp, #0]
 80024bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024c0:	68f8      	ldr	r0, [r7, #12]
 80024c2:	f000 faa1 	bl	8002a08 <I2C_TransferConfig>
 80024c6:	e00f      	b.n	80024e8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024cc:	b29a      	uxth	r2, r3
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024d6:	b2da      	uxtb	r2, r3
 80024d8:	8979      	ldrh	r1, [r7, #10]
 80024da:	4b4a      	ldr	r3, [pc, #296]	; (8002604 <HAL_I2C_Mem_Read+0x22c>)
 80024dc:	9300      	str	r3, [sp, #0]
 80024de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024e2:	68f8      	ldr	r0, [r7, #12]
 80024e4:	f000 fa90 	bl	8002a08 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	9300      	str	r3, [sp, #0]
 80024ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ee:	2200      	movs	r2, #0
 80024f0:	2104      	movs	r1, #4
 80024f2:	68f8      	ldr	r0, [r7, #12]
 80024f4:	f000 f956 	bl	80027a4 <I2C_WaitOnFlagUntilTimeout>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d001      	beq.n	8002502 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e07c      	b.n	80025fc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250c:	b2d2      	uxtb	r2, r2
 800250e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002514:	1c5a      	adds	r2, r3, #1
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800251e:	3b01      	subs	r3, #1
 8002520:	b29a      	uxth	r2, r3
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800252a:	b29b      	uxth	r3, r3
 800252c:	3b01      	subs	r3, #1
 800252e:	b29a      	uxth	r2, r3
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002538:	b29b      	uxth	r3, r3
 800253a:	2b00      	cmp	r3, #0
 800253c:	d034      	beq.n	80025a8 <HAL_I2C_Mem_Read+0x1d0>
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002542:	2b00      	cmp	r3, #0
 8002544:	d130      	bne.n	80025a8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	9300      	str	r3, [sp, #0]
 800254a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800254c:	2200      	movs	r2, #0
 800254e:	2180      	movs	r1, #128	; 0x80
 8002550:	68f8      	ldr	r0, [r7, #12]
 8002552:	f000 f927 	bl	80027a4 <I2C_WaitOnFlagUntilTimeout>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d001      	beq.n	8002560 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e04d      	b.n	80025fc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002564:	b29b      	uxth	r3, r3
 8002566:	2bff      	cmp	r3, #255	; 0xff
 8002568:	d90e      	bls.n	8002588 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	22ff      	movs	r2, #255	; 0xff
 800256e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002574:	b2da      	uxtb	r2, r3
 8002576:	8979      	ldrh	r1, [r7, #10]
 8002578:	2300      	movs	r3, #0
 800257a:	9300      	str	r3, [sp, #0]
 800257c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002580:	68f8      	ldr	r0, [r7, #12]
 8002582:	f000 fa41 	bl	8002a08 <I2C_TransferConfig>
 8002586:	e00f      	b.n	80025a8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800258c:	b29a      	uxth	r2, r3
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002596:	b2da      	uxtb	r2, r3
 8002598:	8979      	ldrh	r1, [r7, #10]
 800259a:	2300      	movs	r3, #0
 800259c:	9300      	str	r3, [sp, #0]
 800259e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025a2:	68f8      	ldr	r0, [r7, #12]
 80025a4:	f000 fa30 	bl	8002a08 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d19a      	bne.n	80024e8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025b2:	697a      	ldr	r2, [r7, #20]
 80025b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025b6:	68f8      	ldr	r0, [r7, #12]
 80025b8:	f000 f974 	bl	80028a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e01a      	b.n	80025fc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	2220      	movs	r2, #32
 80025cc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	6859      	ldr	r1, [r3, #4]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	4b0b      	ldr	r3, [pc, #44]	; (8002608 <HAL_I2C_Mem_Read+0x230>)
 80025da:	400b      	ands	r3, r1
 80025dc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2220      	movs	r2, #32
 80025e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2200      	movs	r2, #0
 80025ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2200      	movs	r2, #0
 80025f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80025f6:	2300      	movs	r3, #0
 80025f8:	e000      	b.n	80025fc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80025fa:	2302      	movs	r3, #2
  }
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3718      	adds	r7, #24
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	80002400 	.word	0x80002400
 8002608:	fe00e800 	.word	0xfe00e800

0800260c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b086      	sub	sp, #24
 8002610:	af02      	add	r7, sp, #8
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	4608      	mov	r0, r1
 8002616:	4611      	mov	r1, r2
 8002618:	461a      	mov	r2, r3
 800261a:	4603      	mov	r3, r0
 800261c:	817b      	strh	r3, [r7, #10]
 800261e:	460b      	mov	r3, r1
 8002620:	813b      	strh	r3, [r7, #8]
 8002622:	4613      	mov	r3, r2
 8002624:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002626:	88fb      	ldrh	r3, [r7, #6]
 8002628:	b2da      	uxtb	r2, r3
 800262a:	8979      	ldrh	r1, [r7, #10]
 800262c:	4b20      	ldr	r3, [pc, #128]	; (80026b0 <I2C_RequestMemoryWrite+0xa4>)
 800262e:	9300      	str	r3, [sp, #0]
 8002630:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002634:	68f8      	ldr	r0, [r7, #12]
 8002636:	f000 f9e7 	bl	8002a08 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800263a:	69fa      	ldr	r2, [r7, #28]
 800263c:	69b9      	ldr	r1, [r7, #24]
 800263e:	68f8      	ldr	r0, [r7, #12]
 8002640:	f000 f8f0 	bl	8002824 <I2C_WaitOnTXISFlagUntilTimeout>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d001      	beq.n	800264e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e02c      	b.n	80026a8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800264e:	88fb      	ldrh	r3, [r7, #6]
 8002650:	2b01      	cmp	r3, #1
 8002652:	d105      	bne.n	8002660 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002654:	893b      	ldrh	r3, [r7, #8]
 8002656:	b2da      	uxtb	r2, r3
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	629a      	str	r2, [r3, #40]	; 0x28
 800265e:	e015      	b.n	800268c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002660:	893b      	ldrh	r3, [r7, #8]
 8002662:	0a1b      	lsrs	r3, r3, #8
 8002664:	b29b      	uxth	r3, r3
 8002666:	b2da      	uxtb	r2, r3
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800266e:	69fa      	ldr	r2, [r7, #28]
 8002670:	69b9      	ldr	r1, [r7, #24]
 8002672:	68f8      	ldr	r0, [r7, #12]
 8002674:	f000 f8d6 	bl	8002824 <I2C_WaitOnTXISFlagUntilTimeout>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d001      	beq.n	8002682 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e012      	b.n	80026a8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002682:	893b      	ldrh	r3, [r7, #8]
 8002684:	b2da      	uxtb	r2, r3
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	9300      	str	r3, [sp, #0]
 8002690:	69bb      	ldr	r3, [r7, #24]
 8002692:	2200      	movs	r2, #0
 8002694:	2180      	movs	r1, #128	; 0x80
 8002696:	68f8      	ldr	r0, [r7, #12]
 8002698:	f000 f884 	bl	80027a4 <I2C_WaitOnFlagUntilTimeout>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e000      	b.n	80026a8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80026a6:	2300      	movs	r3, #0
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3710      	adds	r7, #16
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	80002000 	.word	0x80002000

080026b4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b086      	sub	sp, #24
 80026b8:	af02      	add	r7, sp, #8
 80026ba:	60f8      	str	r0, [r7, #12]
 80026bc:	4608      	mov	r0, r1
 80026be:	4611      	mov	r1, r2
 80026c0:	461a      	mov	r2, r3
 80026c2:	4603      	mov	r3, r0
 80026c4:	817b      	strh	r3, [r7, #10]
 80026c6:	460b      	mov	r3, r1
 80026c8:	813b      	strh	r3, [r7, #8]
 80026ca:	4613      	mov	r3, r2
 80026cc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80026ce:	88fb      	ldrh	r3, [r7, #6]
 80026d0:	b2da      	uxtb	r2, r3
 80026d2:	8979      	ldrh	r1, [r7, #10]
 80026d4:	4b20      	ldr	r3, [pc, #128]	; (8002758 <I2C_RequestMemoryRead+0xa4>)
 80026d6:	9300      	str	r3, [sp, #0]
 80026d8:	2300      	movs	r3, #0
 80026da:	68f8      	ldr	r0, [r7, #12]
 80026dc:	f000 f994 	bl	8002a08 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026e0:	69fa      	ldr	r2, [r7, #28]
 80026e2:	69b9      	ldr	r1, [r7, #24]
 80026e4:	68f8      	ldr	r0, [r7, #12]
 80026e6:	f000 f89d 	bl	8002824 <I2C_WaitOnTXISFlagUntilTimeout>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d001      	beq.n	80026f4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e02c      	b.n	800274e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80026f4:	88fb      	ldrh	r3, [r7, #6]
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d105      	bne.n	8002706 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80026fa:	893b      	ldrh	r3, [r7, #8]
 80026fc:	b2da      	uxtb	r2, r3
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	629a      	str	r2, [r3, #40]	; 0x28
 8002704:	e015      	b.n	8002732 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002706:	893b      	ldrh	r3, [r7, #8]
 8002708:	0a1b      	lsrs	r3, r3, #8
 800270a:	b29b      	uxth	r3, r3
 800270c:	b2da      	uxtb	r2, r3
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002714:	69fa      	ldr	r2, [r7, #28]
 8002716:	69b9      	ldr	r1, [r7, #24]
 8002718:	68f8      	ldr	r0, [r7, #12]
 800271a:	f000 f883 	bl	8002824 <I2C_WaitOnTXISFlagUntilTimeout>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d001      	beq.n	8002728 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e012      	b.n	800274e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002728:	893b      	ldrh	r3, [r7, #8]
 800272a:	b2da      	uxtb	r2, r3
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	9300      	str	r3, [sp, #0]
 8002736:	69bb      	ldr	r3, [r7, #24]
 8002738:	2200      	movs	r2, #0
 800273a:	2140      	movs	r1, #64	; 0x40
 800273c:	68f8      	ldr	r0, [r7, #12]
 800273e:	f000 f831 	bl	80027a4 <I2C_WaitOnFlagUntilTimeout>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d001      	beq.n	800274c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e000      	b.n	800274e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800274c:	2300      	movs	r3, #0
}
 800274e:	4618      	mov	r0, r3
 8002750:	3710      	adds	r7, #16
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	80002000 	.word	0x80002000

0800275c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	699b      	ldr	r3, [r3, #24]
 800276a:	f003 0302 	and.w	r3, r3, #2
 800276e:	2b02      	cmp	r3, #2
 8002770:	d103      	bne.n	800277a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	2200      	movs	r2, #0
 8002778:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	699b      	ldr	r3, [r3, #24]
 8002780:	f003 0301 	and.w	r3, r3, #1
 8002784:	2b01      	cmp	r3, #1
 8002786:	d007      	beq.n	8002798 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	699a      	ldr	r2, [r3, #24]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f042 0201 	orr.w	r2, r2, #1
 8002796:	619a      	str	r2, [r3, #24]
  }
}
 8002798:	bf00      	nop
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	60b9      	str	r1, [r7, #8]
 80027ae:	603b      	str	r3, [r7, #0]
 80027b0:	4613      	mov	r3, r2
 80027b2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027b4:	e022      	b.n	80027fc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027bc:	d01e      	beq.n	80027fc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027be:	f7ff f97b 	bl	8001ab8 <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	69bb      	ldr	r3, [r7, #24]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	683a      	ldr	r2, [r7, #0]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d302      	bcc.n	80027d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d113      	bne.n	80027fc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d8:	f043 0220 	orr.w	r2, r3, #32
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2220      	movs	r2, #32
 80027e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2200      	movs	r2, #0
 80027ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2200      	movs	r2, #0
 80027f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e00f      	b.n	800281c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	699a      	ldr	r2, [r3, #24]
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	4013      	ands	r3, r2
 8002806:	68ba      	ldr	r2, [r7, #8]
 8002808:	429a      	cmp	r2, r3
 800280a:	bf0c      	ite	eq
 800280c:	2301      	moveq	r3, #1
 800280e:	2300      	movne	r3, #0
 8002810:	b2db      	uxtb	r3, r3
 8002812:	461a      	mov	r2, r3
 8002814:	79fb      	ldrb	r3, [r7, #7]
 8002816:	429a      	cmp	r2, r3
 8002818:	d0cd      	beq.n	80027b6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800281a:	2300      	movs	r3, #0
}
 800281c:	4618      	mov	r0, r3
 800281e:	3710      	adds	r7, #16
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}

08002824 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
 800282a:	60f8      	str	r0, [r7, #12]
 800282c:	60b9      	str	r1, [r7, #8]
 800282e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002830:	e02c      	b.n	800288c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	68b9      	ldr	r1, [r7, #8]
 8002836:	68f8      	ldr	r0, [r7, #12]
 8002838:	f000 f870 	bl	800291c <I2C_IsAcknowledgeFailed>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d001      	beq.n	8002846 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e02a      	b.n	800289c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800284c:	d01e      	beq.n	800288c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800284e:	f7ff f933 	bl	8001ab8 <HAL_GetTick>
 8002852:	4602      	mov	r2, r0
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	68ba      	ldr	r2, [r7, #8]
 800285a:	429a      	cmp	r2, r3
 800285c:	d302      	bcc.n	8002864 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d113      	bne.n	800288c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002868:	f043 0220 	orr.w	r2, r3, #32
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2220      	movs	r2, #32
 8002874:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2200      	movs	r2, #0
 800287c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2200      	movs	r2, #0
 8002884:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e007      	b.n	800289c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	699b      	ldr	r3, [r3, #24]
 8002892:	f003 0302 	and.w	r3, r3, #2
 8002896:	2b02      	cmp	r3, #2
 8002898:	d1cb      	bne.n	8002832 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800289a:	2300      	movs	r3, #0
}
 800289c:	4618      	mov	r0, r3
 800289e:	3710      	adds	r7, #16
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}

080028a4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	60b9      	str	r1, [r7, #8]
 80028ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80028b0:	e028      	b.n	8002904 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	68b9      	ldr	r1, [r7, #8]
 80028b6:	68f8      	ldr	r0, [r7, #12]
 80028b8:	f000 f830 	bl	800291c <I2C_IsAcknowledgeFailed>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d001      	beq.n	80028c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e026      	b.n	8002914 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028c6:	f7ff f8f7 	bl	8001ab8 <HAL_GetTick>
 80028ca:	4602      	mov	r2, r0
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	68ba      	ldr	r2, [r7, #8]
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d302      	bcc.n	80028dc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d113      	bne.n	8002904 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e0:	f043 0220 	orr.w	r2, r3, #32
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2220      	movs	r2, #32
 80028ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2200      	movs	r2, #0
 80028f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2200      	movs	r2, #0
 80028fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e007      	b.n	8002914 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	699b      	ldr	r3, [r3, #24]
 800290a:	f003 0320 	and.w	r3, r3, #32
 800290e:	2b20      	cmp	r3, #32
 8002910:	d1cf      	bne.n	80028b2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002912:	2300      	movs	r3, #0
}
 8002914:	4618      	mov	r0, r3
 8002916:	3710      	adds	r7, #16
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}

0800291c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	60f8      	str	r0, [r7, #12]
 8002924:	60b9      	str	r1, [r7, #8]
 8002926:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	699b      	ldr	r3, [r3, #24]
 800292e:	f003 0310 	and.w	r3, r3, #16
 8002932:	2b10      	cmp	r3, #16
 8002934:	d161      	bne.n	80029fa <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002940:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002944:	d02b      	beq.n	800299e <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	685a      	ldr	r2, [r3, #4]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002954:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002956:	e022      	b.n	800299e <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800295e:	d01e      	beq.n	800299e <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002960:	f7ff f8aa 	bl	8001ab8 <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	68ba      	ldr	r2, [r7, #8]
 800296c:	429a      	cmp	r2, r3
 800296e:	d302      	bcc.n	8002976 <I2C_IsAcknowledgeFailed+0x5a>
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d113      	bne.n	800299e <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800297a:	f043 0220 	orr.w	r2, r3, #32
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2220      	movs	r2, #32
 8002986:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2200      	movs	r2, #0
 800298e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e02e      	b.n	80029fc <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	699b      	ldr	r3, [r3, #24]
 80029a4:	f003 0320 	and.w	r3, r3, #32
 80029a8:	2b20      	cmp	r3, #32
 80029aa:	d1d5      	bne.n	8002958 <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2210      	movs	r2, #16
 80029b2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	2220      	movs	r2, #32
 80029ba:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80029bc:	68f8      	ldr	r0, [r7, #12]
 80029be:	f7ff fecd 	bl	800275c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	6859      	ldr	r1, [r3, #4]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	4b0d      	ldr	r3, [pc, #52]	; (8002a04 <I2C_IsAcknowledgeFailed+0xe8>)
 80029ce:	400b      	ands	r3, r1
 80029d0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d6:	f043 0204 	orr.w	r2, r3, #4
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2220      	movs	r2, #32
 80029e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2200      	movs	r2, #0
 80029ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2200      	movs	r2, #0
 80029f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e000      	b.n	80029fc <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 80029fa:	2300      	movs	r3, #0
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3710      	adds	r7, #16
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	fe00e800 	.word	0xfe00e800

08002a08 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b085      	sub	sp, #20
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	607b      	str	r3, [r7, #4]
 8002a12:	460b      	mov	r3, r1
 8002a14:	817b      	strh	r3, [r7, #10]
 8002a16:	4613      	mov	r3, r2
 8002a18:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	685a      	ldr	r2, [r3, #4]
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	0d5b      	lsrs	r3, r3, #21
 8002a24:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002a28:	4b0d      	ldr	r3, [pc, #52]	; (8002a60 <I2C_TransferConfig+0x58>)
 8002a2a:	430b      	orrs	r3, r1
 8002a2c:	43db      	mvns	r3, r3
 8002a2e:	ea02 0103 	and.w	r1, r2, r3
 8002a32:	897b      	ldrh	r3, [r7, #10]
 8002a34:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002a38:	7a7b      	ldrb	r3, [r7, #9]
 8002a3a:	041b      	lsls	r3, r3, #16
 8002a3c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002a40:	431a      	orrs	r2, r3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	431a      	orrs	r2, r3
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	431a      	orrs	r2, r3
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	430a      	orrs	r2, r1
 8002a50:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8002a52:	bf00      	nop
 8002a54:	3714      	adds	r7, #20
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr
 8002a5e:	bf00      	nop
 8002a60:	03ff63ff 	.word	0x03ff63ff

08002a64 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	2b20      	cmp	r3, #32
 8002a78:	d138      	bne.n	8002aec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d101      	bne.n	8002a88 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002a84:	2302      	movs	r3, #2
 8002a86:	e032      	b.n	8002aee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2224      	movs	r2, #36	; 0x24
 8002a94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f022 0201 	bic.w	r2, r2, #1
 8002aa6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002ab6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	6819      	ldr	r1, [r3, #0]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	683a      	ldr	r2, [r7, #0]
 8002ac4:	430a      	orrs	r2, r1
 8002ac6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f042 0201 	orr.w	r2, r2, #1
 8002ad6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2220      	movs	r2, #32
 8002adc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	e000      	b.n	8002aee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002aec:	2302      	movs	r3, #2
  }
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	370c      	adds	r7, #12
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr

08002afa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002afa:	b480      	push	{r7}
 8002afc:	b085      	sub	sp, #20
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6078      	str	r0, [r7, #4]
 8002b02:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	2b20      	cmp	r3, #32
 8002b0e:	d139      	bne.n	8002b84 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d101      	bne.n	8002b1e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	e033      	b.n	8002b86 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2201      	movs	r2, #1
 8002b22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2224      	movs	r2, #36	; 0x24
 8002b2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f022 0201 	bic.w	r2, r2, #1
 8002b3c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002b4c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	021b      	lsls	r3, r3, #8
 8002b52:	68fa      	ldr	r2, [r7, #12]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	68fa      	ldr	r2, [r7, #12]
 8002b5e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f042 0201 	orr.w	r2, r2, #1
 8002b6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2220      	movs	r2, #32
 8002b74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b80:	2300      	movs	r3, #0
 8002b82:	e000      	b.n	8002b86 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002b84:	2302      	movs	r3, #2
  }
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3714      	adds	r7, #20
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr

08002b92 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002b92:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b94:	b08b      	sub	sp, #44	; 0x2c
 8002b96:	af06      	add	r7, sp, #24
 8002b98:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d101      	bne.n	8002ba4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e0d0      	b.n	8002d46 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d106      	bne.n	8002bbe <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f007 f925 	bl	8009e08 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2203      	movs	r2, #3
 8002bc2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f003 fb59 	bl	8006282 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	73fb      	strb	r3, [r7, #15]
 8002bd4:	e04c      	b.n	8002c70 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002bd6:	7bfb      	ldrb	r3, [r7, #15]
 8002bd8:	6879      	ldr	r1, [r7, #4]
 8002bda:	1c5a      	adds	r2, r3, #1
 8002bdc:	4613      	mov	r3, r2
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	4413      	add	r3, r2
 8002be2:	00db      	lsls	r3, r3, #3
 8002be4:	440b      	add	r3, r1
 8002be6:	3301      	adds	r3, #1
 8002be8:	2201      	movs	r2, #1
 8002bea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002bec:	7bfb      	ldrb	r3, [r7, #15]
 8002bee:	6879      	ldr	r1, [r7, #4]
 8002bf0:	1c5a      	adds	r2, r3, #1
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	4413      	add	r3, r2
 8002bf8:	00db      	lsls	r3, r3, #3
 8002bfa:	440b      	add	r3, r1
 8002bfc:	7bfa      	ldrb	r2, [r7, #15]
 8002bfe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002c00:	7bfa      	ldrb	r2, [r7, #15]
 8002c02:	7bfb      	ldrb	r3, [r7, #15]
 8002c04:	b298      	uxth	r0, r3
 8002c06:	6879      	ldr	r1, [r7, #4]
 8002c08:	4613      	mov	r3, r2
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	4413      	add	r3, r2
 8002c0e:	00db      	lsls	r3, r3, #3
 8002c10:	440b      	add	r3, r1
 8002c12:	3336      	adds	r3, #54	; 0x36
 8002c14:	4602      	mov	r2, r0
 8002c16:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002c18:	7bfb      	ldrb	r3, [r7, #15]
 8002c1a:	6879      	ldr	r1, [r7, #4]
 8002c1c:	1c5a      	adds	r2, r3, #1
 8002c1e:	4613      	mov	r3, r2
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	4413      	add	r3, r2
 8002c24:	00db      	lsls	r3, r3, #3
 8002c26:	440b      	add	r3, r1
 8002c28:	3303      	adds	r3, #3
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002c2e:	7bfa      	ldrb	r2, [r7, #15]
 8002c30:	6879      	ldr	r1, [r7, #4]
 8002c32:	4613      	mov	r3, r2
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	4413      	add	r3, r2
 8002c38:	00db      	lsls	r3, r3, #3
 8002c3a:	440b      	add	r3, r1
 8002c3c:	3338      	adds	r3, #56	; 0x38
 8002c3e:	2200      	movs	r2, #0
 8002c40:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002c42:	7bfa      	ldrb	r2, [r7, #15]
 8002c44:	6879      	ldr	r1, [r7, #4]
 8002c46:	4613      	mov	r3, r2
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	4413      	add	r3, r2
 8002c4c:	00db      	lsls	r3, r3, #3
 8002c4e:	440b      	add	r3, r1
 8002c50:	333c      	adds	r3, #60	; 0x3c
 8002c52:	2200      	movs	r2, #0
 8002c54:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002c56:	7bfa      	ldrb	r2, [r7, #15]
 8002c58:	6879      	ldr	r1, [r7, #4]
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	4413      	add	r3, r2
 8002c60:	00db      	lsls	r3, r3, #3
 8002c62:	440b      	add	r3, r1
 8002c64:	3340      	adds	r3, #64	; 0x40
 8002c66:	2200      	movs	r2, #0
 8002c68:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c6a:	7bfb      	ldrb	r3, [r7, #15]
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	73fb      	strb	r3, [r7, #15]
 8002c70:	7bfa      	ldrb	r2, [r7, #15]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d3ad      	bcc.n	8002bd6 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	73fb      	strb	r3, [r7, #15]
 8002c7e:	e044      	b.n	8002d0a <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c80:	7bfa      	ldrb	r2, [r7, #15]
 8002c82:	6879      	ldr	r1, [r7, #4]
 8002c84:	4613      	mov	r3, r2
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	4413      	add	r3, r2
 8002c8a:	00db      	lsls	r3, r3, #3
 8002c8c:	440b      	add	r3, r1
 8002c8e:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002c92:	2200      	movs	r2, #0
 8002c94:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002c96:	7bfa      	ldrb	r2, [r7, #15]
 8002c98:	6879      	ldr	r1, [r7, #4]
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	4413      	add	r3, r2
 8002ca0:	00db      	lsls	r3, r3, #3
 8002ca2:	440b      	add	r3, r1
 8002ca4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002ca8:	7bfa      	ldrb	r2, [r7, #15]
 8002caa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002cac:	7bfa      	ldrb	r2, [r7, #15]
 8002cae:	6879      	ldr	r1, [r7, #4]
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	4413      	add	r3, r2
 8002cb6:	00db      	lsls	r3, r3, #3
 8002cb8:	440b      	add	r3, r1
 8002cba:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002cc2:	7bfa      	ldrb	r2, [r7, #15]
 8002cc4:	6879      	ldr	r1, [r7, #4]
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	4413      	add	r3, r2
 8002ccc:	00db      	lsls	r3, r3, #3
 8002cce:	440b      	add	r3, r1
 8002cd0:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002cd8:	7bfa      	ldrb	r2, [r7, #15]
 8002cda:	6879      	ldr	r1, [r7, #4]
 8002cdc:	4613      	mov	r3, r2
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	4413      	add	r3, r2
 8002ce2:	00db      	lsls	r3, r3, #3
 8002ce4:	440b      	add	r3, r1
 8002ce6:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002cea:	2200      	movs	r2, #0
 8002cec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002cee:	7bfa      	ldrb	r2, [r7, #15]
 8002cf0:	6879      	ldr	r1, [r7, #4]
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	4413      	add	r3, r2
 8002cf8:	00db      	lsls	r3, r3, #3
 8002cfa:	440b      	add	r3, r1
 8002cfc:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002d00:	2200      	movs	r2, #0
 8002d02:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d04:	7bfb      	ldrb	r3, [r7, #15]
 8002d06:	3301      	adds	r3, #1
 8002d08:	73fb      	strb	r3, [r7, #15]
 8002d0a:	7bfa      	ldrb	r2, [r7, #15]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d3b5      	bcc.n	8002c80 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	603b      	str	r3, [r7, #0]
 8002d1a:	687e      	ldr	r6, [r7, #4]
 8002d1c:	466d      	mov	r5, sp
 8002d1e:	f106 0410 	add.w	r4, r6, #16
 8002d22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d26:	6823      	ldr	r3, [r4, #0]
 8002d28:	602b      	str	r3, [r5, #0]
 8002d2a:	1d33      	adds	r3, r6, #4
 8002d2c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d2e:	6838      	ldr	r0, [r7, #0]
 8002d30:	f003 fac2 	bl	80062b8 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2200      	movs	r2, #0
 8002d38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8002d44:	2300      	movs	r3, #0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3714      	adds	r7, #20
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d4e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002d4e:	b580      	push	{r7, lr}
 8002d50:	b082      	sub	sp, #8
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d101      	bne.n	8002d64 <HAL_PCD_Start+0x16>
 8002d60:	2302      	movs	r3, #2
 8002d62:	e016      	b.n	8002d92 <HAL_PCD_Start+0x44>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4618      	mov	r0, r3
 8002d72:	f003 fa6f 	bl	8006254 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002d76:	2101      	movs	r1, #1
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f007 fae3 	bl	800a344 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4618      	mov	r0, r3
 8002d84:	f005 fa20 	bl	80081c8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3708      	adds	r7, #8
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}

08002d9a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002d9a:	b580      	push	{r7, lr}
 8002d9c:	b082      	sub	sp, #8
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f005 fa19 	bl	80081de <USB_ReadInterrupts>
 8002dac:	4603      	mov	r3, r0
 8002dae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002db2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002db6:	d102      	bne.n	8002dbe <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	f000 faf6 	bl	80033aa <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f005 fa0b 	bl	80081de <USB_ReadInterrupts>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dd2:	d112      	bne.n	8002dfa <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ddc:	b29a      	uxth	r2, r3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002de6:	b292      	uxth	r2, r2
 8002de8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f007 f8ac 	bl	8009f4a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002df2:	2100      	movs	r1, #0
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f000 f8c7 	bl	8002f88 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f005 f9ed 	bl	80081de <USB_ReadInterrupts>
 8002e04:	4603      	mov	r3, r0
 8002e06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e0a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e0e:	d10b      	bne.n	8002e28 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e18:	b29a      	uxth	r2, r3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002e22:	b292      	uxth	r2, r2
 8002e24:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f005 f9d6 	bl	80081de <USB_ReadInterrupts>
 8002e32:	4603      	mov	r3, r0
 8002e34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e3c:	d10b      	bne.n	8002e56 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e46:	b29a      	uxth	r2, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e50:	b292      	uxth	r2, r2
 8002e52:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f005 f9bf 	bl	80081de <USB_ReadInterrupts>
 8002e60:	4603      	mov	r3, r0
 8002e62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e6a:	d126      	bne.n	8002eba <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002e74:	b29a      	uxth	r2, r3
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f022 0204 	bic.w	r2, r2, #4
 8002e7e:	b292      	uxth	r2, r2
 8002e80:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002e8c:	b29a      	uxth	r2, r3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f022 0208 	bic.w	r2, r2, #8
 8002e96:	b292      	uxth	r2, r2
 8002e98:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f007 f88d 	bl	8009fbc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002eaa:	b29a      	uxth	r2, r3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002eb4:	b292      	uxth	r2, r2
 8002eb6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f005 f98d 	bl	80081de <USB_ReadInterrupts>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002eca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ece:	d126      	bne.n	8002f1e <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002ed8:	b29a      	uxth	r2, r3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f042 0208 	orr.w	r2, r2, #8
 8002ee2:	b292      	uxth	r2, r2
 8002ee4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ef0:	b29a      	uxth	r2, r3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002efa:	b292      	uxth	r2, r2
 8002efc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002f08:	b29a      	uxth	r2, r3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f042 0204 	orr.w	r2, r2, #4
 8002f12:	b292      	uxth	r2, r2
 8002f14:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f007 f835 	bl	8009f88 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4618      	mov	r0, r3
 8002f24:	f005 f95b 	bl	80081de <USB_ReadInterrupts>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f32:	d10e      	bne.n	8002f52 <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f3c:	b29a      	uxth	r2, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002f46:	b292      	uxth	r2, r2
 8002f48:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f006 ffee 	bl	8009f2e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4618      	mov	r0, r3
 8002f58:	f005 f941 	bl	80081de <USB_ReadInterrupts>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f66:	d10b      	bne.n	8002f80 <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f70:	b29a      	uxth	r2, r3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f7a:	b292      	uxth	r2, r2
 8002f7c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002f80:	bf00      	nop
 8002f82:	3708      	adds	r7, #8
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	460b      	mov	r3, r1
 8002f92:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d101      	bne.n	8002fa2 <HAL_PCD_SetAddress+0x1a>
 8002f9e:	2302      	movs	r3, #2
 8002fa0:	e013      	b.n	8002fca <HAL_PCD_SetAddress+0x42>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	78fa      	ldrb	r2, [r7, #3]
 8002fae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	78fa      	ldrb	r2, [r7, #3]
 8002fb8:	4611      	mov	r1, r2
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f005 f8f0 	bl	80081a0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3708      	adds	r7, #8
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}

08002fd2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002fd2:	b580      	push	{r7, lr}
 8002fd4:	b084      	sub	sp, #16
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
 8002fda:	4608      	mov	r0, r1
 8002fdc:	4611      	mov	r1, r2
 8002fde:	461a      	mov	r2, r3
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	70fb      	strb	r3, [r7, #3]
 8002fe4:	460b      	mov	r3, r1
 8002fe6:	803b      	strh	r3, [r7, #0]
 8002fe8:	4613      	mov	r3, r2
 8002fea:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002fec:	2300      	movs	r3, #0
 8002fee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002ff0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	da0e      	bge.n	8003016 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ff8:	78fb      	ldrb	r3, [r7, #3]
 8002ffa:	f003 0307 	and.w	r3, r3, #7
 8002ffe:	1c5a      	adds	r2, r3, #1
 8003000:	4613      	mov	r3, r2
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	4413      	add	r3, r2
 8003006:	00db      	lsls	r3, r3, #3
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	4413      	add	r3, r2
 800300c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2201      	movs	r2, #1
 8003012:	705a      	strb	r2, [r3, #1]
 8003014:	e00e      	b.n	8003034 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003016:	78fb      	ldrb	r3, [r7, #3]
 8003018:	f003 0207 	and.w	r2, r3, #7
 800301c:	4613      	mov	r3, r2
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	4413      	add	r3, r2
 8003022:	00db      	lsls	r3, r3, #3
 8003024:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	4413      	add	r3, r2
 800302c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2200      	movs	r2, #0
 8003032:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003034:	78fb      	ldrb	r3, [r7, #3]
 8003036:	f003 0307 	and.w	r3, r3, #7
 800303a:	b2da      	uxtb	r2, r3
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003040:	883a      	ldrh	r2, [r7, #0]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	78ba      	ldrb	r2, [r7, #2]
 800304a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	785b      	ldrb	r3, [r3, #1]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d004      	beq.n	800305e <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	b29a      	uxth	r2, r3
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800305e:	78bb      	ldrb	r3, [r7, #2]
 8003060:	2b02      	cmp	r3, #2
 8003062:	d102      	bne.n	800306a <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2200      	movs	r2, #0
 8003068:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003070:	2b01      	cmp	r3, #1
 8003072:	d101      	bne.n	8003078 <HAL_PCD_EP_Open+0xa6>
 8003074:	2302      	movs	r3, #2
 8003076:	e00e      	b.n	8003096 <HAL_PCD_EP_Open+0xc4>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	68f9      	ldr	r1, [r7, #12]
 8003086:	4618      	mov	r0, r3
 8003088:	f003 f938 	bl	80062fc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2200      	movs	r2, #0
 8003090:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8003094:	7afb      	ldrb	r3, [r7, #11]
}
 8003096:	4618      	mov	r0, r3
 8003098:	3710      	adds	r7, #16
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}

0800309e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800309e:	b580      	push	{r7, lr}
 80030a0:	b084      	sub	sp, #16
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
 80030a6:	460b      	mov	r3, r1
 80030a8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80030aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	da0e      	bge.n	80030d0 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030b2:	78fb      	ldrb	r3, [r7, #3]
 80030b4:	f003 0307 	and.w	r3, r3, #7
 80030b8:	1c5a      	adds	r2, r3, #1
 80030ba:	4613      	mov	r3, r2
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	4413      	add	r3, r2
 80030c0:	00db      	lsls	r3, r3, #3
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	4413      	add	r3, r2
 80030c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2201      	movs	r2, #1
 80030cc:	705a      	strb	r2, [r3, #1]
 80030ce:	e00e      	b.n	80030ee <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030d0:	78fb      	ldrb	r3, [r7, #3]
 80030d2:	f003 0207 	and.w	r2, r3, #7
 80030d6:	4613      	mov	r3, r2
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	4413      	add	r3, r2
 80030dc:	00db      	lsls	r3, r3, #3
 80030de:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	4413      	add	r3, r2
 80030e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2200      	movs	r2, #0
 80030ec:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80030ee:	78fb      	ldrb	r3, [r7, #3]
 80030f0:	f003 0307 	and.w	r3, r3, #7
 80030f4:	b2da      	uxtb	r2, r3
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003100:	2b01      	cmp	r3, #1
 8003102:	d101      	bne.n	8003108 <HAL_PCD_EP_Close+0x6a>
 8003104:	2302      	movs	r3, #2
 8003106:	e00e      	b.n	8003126 <HAL_PCD_EP_Close+0x88>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	68f9      	ldr	r1, [r7, #12]
 8003116:	4618      	mov	r0, r3
 8003118:	f003 fc84 	bl	8006a24 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8003124:	2300      	movs	r3, #0
}
 8003126:	4618      	mov	r0, r3
 8003128:	3710      	adds	r7, #16
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}

0800312e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800312e:	b580      	push	{r7, lr}
 8003130:	b086      	sub	sp, #24
 8003132:	af00      	add	r7, sp, #0
 8003134:	60f8      	str	r0, [r7, #12]
 8003136:	607a      	str	r2, [r7, #4]
 8003138:	603b      	str	r3, [r7, #0]
 800313a:	460b      	mov	r3, r1
 800313c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800313e:	7afb      	ldrb	r3, [r7, #11]
 8003140:	f003 0207 	and.w	r2, r3, #7
 8003144:	4613      	mov	r3, r2
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	4413      	add	r3, r2
 800314a:	00db      	lsls	r3, r3, #3
 800314c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003150:	68fa      	ldr	r2, [r7, #12]
 8003152:	4413      	add	r3, r2
 8003154:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	683a      	ldr	r2, [r7, #0]
 8003160:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	2200      	movs	r2, #0
 8003166:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	2200      	movs	r2, #0
 800316c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800316e:	7afb      	ldrb	r3, [r7, #11]
 8003170:	f003 0307 	and.w	r3, r3, #7
 8003174:	b2da      	uxtb	r2, r3
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800317a:	7afb      	ldrb	r3, [r7, #11]
 800317c:	f003 0307 	and.w	r3, r3, #7
 8003180:	2b00      	cmp	r3, #0
 8003182:	d106      	bne.n	8003192 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	6979      	ldr	r1, [r7, #20]
 800318a:	4618      	mov	r0, r3
 800318c:	f003 fe37 	bl	8006dfe <USB_EPStartXfer>
 8003190:	e005      	b.n	800319e <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	6979      	ldr	r1, [r7, #20]
 8003198:	4618      	mov	r0, r3
 800319a:	f003 fe30 	bl	8006dfe <USB_EPStartXfer>
  }

  return HAL_OK;
 800319e:	2300      	movs	r3, #0
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3718      	adds	r7, #24
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	460b      	mov	r3, r1
 80031b2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80031b4:	78fb      	ldrb	r3, [r7, #3]
 80031b6:	f003 0207 	and.w	r2, r3, #7
 80031ba:	6879      	ldr	r1, [r7, #4]
 80031bc:	4613      	mov	r3, r2
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	4413      	add	r3, r2
 80031c2:	00db      	lsls	r3, r3, #3
 80031c4:	440b      	add	r3, r1
 80031c6:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80031ca:	681b      	ldr	r3, [r3, #0]
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	370c      	adds	r7, #12
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr

080031d8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b086      	sub	sp, #24
 80031dc:	af00      	add	r7, sp, #0
 80031de:	60f8      	str	r0, [r7, #12]
 80031e0:	607a      	str	r2, [r7, #4]
 80031e2:	603b      	str	r3, [r7, #0]
 80031e4:	460b      	mov	r3, r1
 80031e6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031e8:	7afb      	ldrb	r3, [r7, #11]
 80031ea:	f003 0307 	and.w	r3, r3, #7
 80031ee:	1c5a      	adds	r2, r3, #1
 80031f0:	4613      	mov	r3, r2
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	4413      	add	r3, r2
 80031f6:	00db      	lsls	r3, r3, #3
 80031f8:	68fa      	ldr	r2, [r7, #12]
 80031fa:	4413      	add	r3, r2
 80031fc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	683a      	ldr	r2, [r7, #0]
 8003208:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	2201      	movs	r2, #1
 800320e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	683a      	ldr	r2, [r7, #0]
 8003216:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	2200      	movs	r2, #0
 800321c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	2201      	movs	r2, #1
 8003222:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003224:	7afb      	ldrb	r3, [r7, #11]
 8003226:	f003 0307 	and.w	r3, r3, #7
 800322a:	b2da      	uxtb	r2, r3
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003230:	7afb      	ldrb	r3, [r7, #11]
 8003232:	f003 0307 	and.w	r3, r3, #7
 8003236:	2b00      	cmp	r3, #0
 8003238:	d106      	bne.n	8003248 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	6979      	ldr	r1, [r7, #20]
 8003240:	4618      	mov	r0, r3
 8003242:	f003 fddc 	bl	8006dfe <USB_EPStartXfer>
 8003246:	e005      	b.n	8003254 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	6979      	ldr	r1, [r7, #20]
 800324e:	4618      	mov	r0, r3
 8003250:	f003 fdd5 	bl	8006dfe <USB_EPStartXfer>
  }

  return HAL_OK;
 8003254:	2300      	movs	r3, #0
}
 8003256:	4618      	mov	r0, r3
 8003258:	3718      	adds	r7, #24
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}

0800325e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800325e:	b580      	push	{r7, lr}
 8003260:	b084      	sub	sp, #16
 8003262:	af00      	add	r7, sp, #0
 8003264:	6078      	str	r0, [r7, #4]
 8003266:	460b      	mov	r3, r1
 8003268:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800326a:	78fb      	ldrb	r3, [r7, #3]
 800326c:	f003 0207 	and.w	r2, r3, #7
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	429a      	cmp	r2, r3
 8003276:	d901      	bls.n	800327c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e03e      	b.n	80032fa <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800327c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003280:	2b00      	cmp	r3, #0
 8003282:	da0e      	bge.n	80032a2 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003284:	78fb      	ldrb	r3, [r7, #3]
 8003286:	f003 0307 	and.w	r3, r3, #7
 800328a:	1c5a      	adds	r2, r3, #1
 800328c:	4613      	mov	r3, r2
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	4413      	add	r3, r2
 8003292:	00db      	lsls	r3, r3, #3
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	4413      	add	r3, r2
 8003298:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2201      	movs	r2, #1
 800329e:	705a      	strb	r2, [r3, #1]
 80032a0:	e00c      	b.n	80032bc <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80032a2:	78fa      	ldrb	r2, [r7, #3]
 80032a4:	4613      	mov	r3, r2
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	4413      	add	r3, r2
 80032aa:	00db      	lsls	r3, r3, #3
 80032ac:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	4413      	add	r3, r2
 80032b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2200      	movs	r2, #0
 80032ba:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2201      	movs	r2, #1
 80032c0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032c2:	78fb      	ldrb	r3, [r7, #3]
 80032c4:	f003 0307 	and.w	r3, r3, #7
 80032c8:	b2da      	uxtb	r2, r3
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d101      	bne.n	80032dc <HAL_PCD_EP_SetStall+0x7e>
 80032d8:	2302      	movs	r3, #2
 80032da:	e00e      	b.n	80032fa <HAL_PCD_EP_SetStall+0x9c>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	68f9      	ldr	r1, [r7, #12]
 80032ea:	4618      	mov	r0, r3
 80032ec:	f004 fe59 	bl	8007fa2 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3710      	adds	r7, #16
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}

08003302 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003302:	b580      	push	{r7, lr}
 8003304:	b084      	sub	sp, #16
 8003306:	af00      	add	r7, sp, #0
 8003308:	6078      	str	r0, [r7, #4]
 800330a:	460b      	mov	r3, r1
 800330c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800330e:	78fb      	ldrb	r3, [r7, #3]
 8003310:	f003 020f 	and.w	r2, r3, #15
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	429a      	cmp	r2, r3
 800331a:	d901      	bls.n	8003320 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e040      	b.n	80033a2 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003320:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003324:	2b00      	cmp	r3, #0
 8003326:	da0e      	bge.n	8003346 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003328:	78fb      	ldrb	r3, [r7, #3]
 800332a:	f003 0307 	and.w	r3, r3, #7
 800332e:	1c5a      	adds	r2, r3, #1
 8003330:	4613      	mov	r3, r2
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	4413      	add	r3, r2
 8003336:	00db      	lsls	r3, r3, #3
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	4413      	add	r3, r2
 800333c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2201      	movs	r2, #1
 8003342:	705a      	strb	r2, [r3, #1]
 8003344:	e00e      	b.n	8003364 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003346:	78fb      	ldrb	r3, [r7, #3]
 8003348:	f003 0207 	and.w	r2, r3, #7
 800334c:	4613      	mov	r3, r2
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	4413      	add	r3, r2
 8003352:	00db      	lsls	r3, r3, #3
 8003354:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	4413      	add	r3, r2
 800335c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2200      	movs	r2, #0
 8003362:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2200      	movs	r2, #0
 8003368:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800336a:	78fb      	ldrb	r3, [r7, #3]
 800336c:	f003 0307 	and.w	r3, r3, #7
 8003370:	b2da      	uxtb	r2, r3
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800337c:	2b01      	cmp	r3, #1
 800337e:	d101      	bne.n	8003384 <HAL_PCD_EP_ClrStall+0x82>
 8003380:	2302      	movs	r3, #2
 8003382:	e00e      	b.n	80033a2 <HAL_PCD_EP_ClrStall+0xa0>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	68f9      	ldr	r1, [r7, #12]
 8003392:	4618      	mov	r0, r3
 8003394:	f004 fe56 	bl	8008044 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3710      	adds	r7, #16
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}

080033aa <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80033aa:	b580      	push	{r7, lr}
 80033ac:	b096      	sub	sp, #88	; 0x58
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80033b2:	e3a9      	b.n	8003b08 <PCD_EP_ISR_Handler+0x75e>
  {
    wIstr = hpcd->Instance->ISTR;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80033bc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80033c0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	f003 030f 	and.w	r3, r3, #15
 80033ca:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 80033ce:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	f040 8164 	bne.w	80036a0 <PCD_EP_ISR_Handler+0x2f6>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80033d8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80033dc:	f003 0310 	and.w	r3, r3, #16
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d152      	bne.n	800348a <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	881b      	ldrh	r3, [r3, #0]
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80033f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033f4:	81fb      	strh	r3, [r7, #14]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	89fb      	ldrh	r3, [r7, #14]
 80033fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003400:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003404:	b29b      	uxth	r3, r3
 8003406:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	3328      	adds	r3, #40	; 0x28
 800340c:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003416:	b29b      	uxth	r3, r3
 8003418:	461a      	mov	r2, r3
 800341a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800341c:	781b      	ldrb	r3, [r3, #0]
 800341e:	00db      	lsls	r3, r3, #3
 8003420:	4413      	add	r3, r2
 8003422:	3302      	adds	r3, #2
 8003424:	005b      	lsls	r3, r3, #1
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	6812      	ldr	r2, [r2, #0]
 800342a:	4413      	add	r3, r2
 800342c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003430:	881b      	ldrh	r3, [r3, #0]
 8003432:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003436:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003438:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800343a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800343c:	695a      	ldr	r2, [r3, #20]
 800343e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003440:	69db      	ldr	r3, [r3, #28]
 8003442:	441a      	add	r2, r3
 8003444:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003446:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003448:	2100      	movs	r1, #0
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f006 fd55 	bl	8009efa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003456:	b2db      	uxtb	r3, r3
 8003458:	2b00      	cmp	r3, #0
 800345a:	f000 8355 	beq.w	8003b08 <PCD_EP_ISR_Handler+0x75e>
 800345e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003460:	699b      	ldr	r3, [r3, #24]
 8003462:	2b00      	cmp	r3, #0
 8003464:	f040 8350 	bne.w	8003b08 <PCD_EP_ISR_Handler+0x75e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800346e:	b2db      	uxtb	r3, r3
 8003470:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003474:	b2da      	uxtb	r2, r3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	b292      	uxth	r2, r2
 800347c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2200      	movs	r2, #0
 8003484:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003488:	e33e      	b.n	8003b08 <PCD_EP_ISR_Handler+0x75e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003490:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	881b      	ldrh	r3, [r3, #0]
 8003498:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800349c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80034a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d034      	beq.n	8003512 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	461a      	mov	r2, r3
 80034b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	00db      	lsls	r3, r3, #3
 80034ba:	4413      	add	r3, r2
 80034bc:	3306      	adds	r3, #6
 80034be:	005b      	lsls	r3, r3, #1
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	6812      	ldr	r2, [r2, #0]
 80034c4:	4413      	add	r3, r2
 80034c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80034ca:	881b      	ldrh	r3, [r3, #0]
 80034cc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80034d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034d2:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6818      	ldr	r0, [r3, #0]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80034de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034e0:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80034e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034e4:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80034e6:	b29b      	uxth	r3, r3
 80034e8:	f004 fecf 	bl	800828a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	881b      	ldrh	r3, [r3, #0]
 80034f2:	b29a      	uxth	r2, r3
 80034f4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80034f8:	4013      	ands	r3, r2
 80034fa:	823b      	strh	r3, [r7, #16]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	8a3a      	ldrh	r2, [r7, #16]
 8003502:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003506:	b292      	uxth	r2, r2
 8003508:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f006 fcc8 	bl	8009ea0 <HAL_PCD_SetupStageCallback>
 8003510:	e2fa      	b.n	8003b08 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003512:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8003516:	2b00      	cmp	r3, #0
 8003518:	f280 82f6 	bge.w	8003b08 <PCD_EP_ISR_Handler+0x75e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	881b      	ldrh	r3, [r3, #0]
 8003522:	b29a      	uxth	r2, r3
 8003524:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003528:	4013      	ands	r3, r2
 800352a:	83fb      	strh	r3, [r7, #30]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	8bfa      	ldrh	r2, [r7, #30]
 8003532:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003536:	b292      	uxth	r2, r2
 8003538:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003542:	b29b      	uxth	r3, r3
 8003544:	461a      	mov	r2, r3
 8003546:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	00db      	lsls	r3, r3, #3
 800354c:	4413      	add	r3, r2
 800354e:	3306      	adds	r3, #6
 8003550:	005b      	lsls	r3, r3, #1
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	6812      	ldr	r2, [r2, #0]
 8003556:	4413      	add	r3, r2
 8003558:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800355c:	881b      	ldrh	r3, [r3, #0]
 800355e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003562:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003564:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003566:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003568:	69db      	ldr	r3, [r3, #28]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d019      	beq.n	80035a2 <PCD_EP_ISR_Handler+0x1f8>
 800356e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003570:	695b      	ldr	r3, [r3, #20]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d015      	beq.n	80035a2 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6818      	ldr	r0, [r3, #0]
 800357a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800357c:	6959      	ldr	r1, [r3, #20]
 800357e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003580:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003582:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003584:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003586:	b29b      	uxth	r3, r3
 8003588:	f004 fe7f 	bl	800828a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800358c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800358e:	695a      	ldr	r2, [r3, #20]
 8003590:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003592:	69db      	ldr	r3, [r3, #28]
 8003594:	441a      	add	r2, r3
 8003596:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003598:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800359a:	2100      	movs	r1, #0
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f006 fc91 	bl	8009ec4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	881b      	ldrh	r3, [r3, #0]
 80035a8:	b29b      	uxth	r3, r3
 80035aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	f040 82aa 	bne.w	8003b08 <PCD_EP_ISR_Handler+0x75e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	61bb      	str	r3, [r7, #24]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	461a      	mov	r2, r3
 80035c6:	69bb      	ldr	r3, [r7, #24]
 80035c8:	4413      	add	r3, r2
 80035ca:	61bb      	str	r3, [r7, #24]
 80035cc:	69bb      	ldr	r3, [r7, #24]
 80035ce:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80035d2:	617b      	str	r3, [r7, #20]
 80035d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035d6:	691b      	ldr	r3, [r3, #16]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d112      	bne.n	8003602 <PCD_EP_ISR_Handler+0x258>
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	881b      	ldrh	r3, [r3, #0]
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80035e6:	b29a      	uxth	r2, r3
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	801a      	strh	r2, [r3, #0]
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	881b      	ldrh	r3, [r3, #0]
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035fa:	b29a      	uxth	r2, r3
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	801a      	strh	r2, [r3, #0]
 8003600:	e02f      	b.n	8003662 <PCD_EP_ISR_Handler+0x2b8>
 8003602:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003604:	691b      	ldr	r3, [r3, #16]
 8003606:	2b3e      	cmp	r3, #62	; 0x3e
 8003608:	d813      	bhi.n	8003632 <PCD_EP_ISR_Handler+0x288>
 800360a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800360c:	691b      	ldr	r3, [r3, #16]
 800360e:	085b      	lsrs	r3, r3, #1
 8003610:	647b      	str	r3, [r7, #68]	; 0x44
 8003612:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003614:	691b      	ldr	r3, [r3, #16]
 8003616:	f003 0301 	and.w	r3, r3, #1
 800361a:	2b00      	cmp	r3, #0
 800361c:	d002      	beq.n	8003624 <PCD_EP_ISR_Handler+0x27a>
 800361e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003620:	3301      	adds	r3, #1
 8003622:	647b      	str	r3, [r7, #68]	; 0x44
 8003624:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003626:	b29b      	uxth	r3, r3
 8003628:	029b      	lsls	r3, r3, #10
 800362a:	b29a      	uxth	r2, r3
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	801a      	strh	r2, [r3, #0]
 8003630:	e017      	b.n	8003662 <PCD_EP_ISR_Handler+0x2b8>
 8003632:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	095b      	lsrs	r3, r3, #5
 8003638:	647b      	str	r3, [r7, #68]	; 0x44
 800363a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800363c:	691b      	ldr	r3, [r3, #16]
 800363e:	f003 031f 	and.w	r3, r3, #31
 8003642:	2b00      	cmp	r3, #0
 8003644:	d102      	bne.n	800364c <PCD_EP_ISR_Handler+0x2a2>
 8003646:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003648:	3b01      	subs	r3, #1
 800364a:	647b      	str	r3, [r7, #68]	; 0x44
 800364c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800364e:	b29b      	uxth	r3, r3
 8003650:	029b      	lsls	r3, r3, #10
 8003652:	b29b      	uxth	r3, r3
 8003654:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003658:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800365c:	b29a      	uxth	r2, r3
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	881b      	ldrh	r3, [r3, #0]
 8003668:	b29b      	uxth	r3, r3
 800366a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800366e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003672:	827b      	strh	r3, [r7, #18]
 8003674:	8a7b      	ldrh	r3, [r7, #18]
 8003676:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800367a:	827b      	strh	r3, [r7, #18]
 800367c:	8a7b      	ldrh	r3, [r7, #18]
 800367e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003682:	827b      	strh	r3, [r7, #18]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	8a7b      	ldrh	r3, [r7, #18]
 800368a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800368e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003692:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003696:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800369a:	b29b      	uxth	r3, r3
 800369c:	8013      	strh	r3, [r2, #0]
 800369e:	e233      	b.n	8003b08 <PCD_EP_ISR_Handler+0x75e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	461a      	mov	r2, r3
 80036a6:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	4413      	add	r3, r2
 80036ae:	881b      	ldrh	r3, [r3, #0]
 80036b0:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80036b4:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	f280 80fc 	bge.w	80038b6 <PCD_EP_ISR_Handler+0x50c>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	461a      	mov	r2, r3
 80036c4:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	4413      	add	r3, r2
 80036cc:	881b      	ldrh	r3, [r3, #0]
 80036ce:	b29a      	uxth	r2, r3
 80036d0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80036d4:	4013      	ands	r3, r2
 80036d6:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	461a      	mov	r2, r3
 80036e0:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	4413      	add	r3, r2
 80036e8:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80036ec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80036f0:	b292      	uxth	r2, r2
 80036f2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80036f4:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 80036f8:	4613      	mov	r3, r2
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	4413      	add	r3, r2
 80036fe:	00db      	lsls	r3, r3, #3
 8003700:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	4413      	add	r3, r2
 8003708:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800370a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800370c:	7b1b      	ldrb	r3, [r3, #12]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d125      	bne.n	800375e <PCD_EP_ISR_Handler+0x3b4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800371a:	b29b      	uxth	r3, r3
 800371c:	461a      	mov	r2, r3
 800371e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003720:	781b      	ldrb	r3, [r3, #0]
 8003722:	00db      	lsls	r3, r3, #3
 8003724:	4413      	add	r3, r2
 8003726:	3306      	adds	r3, #6
 8003728:	005b      	lsls	r3, r3, #1
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	6812      	ldr	r2, [r2, #0]
 800372e:	4413      	add	r3, r2
 8003730:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003734:	881b      	ldrh	r3, [r3, #0]
 8003736:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800373a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 800373e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003742:	2b00      	cmp	r3, #0
 8003744:	f000 8092 	beq.w	800386c <PCD_EP_ISR_Handler+0x4c2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6818      	ldr	r0, [r3, #0]
 800374c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800374e:	6959      	ldr	r1, [r3, #20]
 8003750:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003752:	88da      	ldrh	r2, [r3, #6]
 8003754:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003758:	f004 fd97 	bl	800828a <USB_ReadPMA>
 800375c:	e086      	b.n	800386c <PCD_EP_ISR_Handler+0x4c2>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800375e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003760:	78db      	ldrb	r3, [r3, #3]
 8003762:	2b02      	cmp	r3, #2
 8003764:	d10a      	bne.n	800377c <PCD_EP_ISR_Handler+0x3d2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003766:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800376a:	461a      	mov	r2, r3
 800376c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f000 f9d8 	bl	8003b24 <HAL_PCD_EP_DB_Receive>
 8003774:	4603      	mov	r3, r0
 8003776:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800377a:	e077      	b.n	800386c <PCD_EP_ISR_Handler+0x4c2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	461a      	mov	r2, r3
 8003782:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	4413      	add	r3, r2
 800378a:	881b      	ldrh	r3, [r3, #0]
 800378c:	b29b      	uxth	r3, r3
 800378e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003792:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003796:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	461a      	mov	r2, r3
 80037a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037a2:	781b      	ldrb	r3, [r3, #0]
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	441a      	add	r2, r3
 80037a8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80037ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037b8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80037bc:	b29b      	uxth	r3, r3
 80037be:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	461a      	mov	r2, r3
 80037c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037c8:	781b      	ldrb	r3, [r3, #0]
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	4413      	add	r3, r2
 80037ce:	881b      	ldrh	r3, [r3, #0]
 80037d0:	b29b      	uxth	r3, r3
 80037d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d024      	beq.n	8003824 <PCD_EP_ISR_Handler+0x47a>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	461a      	mov	r2, r3
 80037e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037e8:	781b      	ldrb	r3, [r3, #0]
 80037ea:	00db      	lsls	r3, r3, #3
 80037ec:	4413      	add	r3, r2
 80037ee:	3302      	adds	r3, #2
 80037f0:	005b      	lsls	r3, r3, #1
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	6812      	ldr	r2, [r2, #0]
 80037f6:	4413      	add	r3, r2
 80037f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80037fc:	881b      	ldrh	r3, [r3, #0]
 80037fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003802:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8003806:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800380a:	2b00      	cmp	r3, #0
 800380c:	d02e      	beq.n	800386c <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6818      	ldr	r0, [r3, #0]
 8003812:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003814:	6959      	ldr	r1, [r3, #20]
 8003816:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003818:	891a      	ldrh	r2, [r3, #8]
 800381a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800381e:	f004 fd34 	bl	800828a <USB_ReadPMA>
 8003822:	e023      	b.n	800386c <PCD_EP_ISR_Handler+0x4c2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800382c:	b29b      	uxth	r3, r3
 800382e:	461a      	mov	r2, r3
 8003830:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	00db      	lsls	r3, r3, #3
 8003836:	4413      	add	r3, r2
 8003838:	3306      	adds	r3, #6
 800383a:	005b      	lsls	r3, r3, #1
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	6812      	ldr	r2, [r2, #0]
 8003840:	4413      	add	r3, r2
 8003842:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003846:	881b      	ldrh	r3, [r3, #0]
 8003848:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800384c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8003850:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003854:	2b00      	cmp	r3, #0
 8003856:	d009      	beq.n	800386c <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6818      	ldr	r0, [r3, #0]
 800385c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800385e:	6959      	ldr	r1, [r3, #20]
 8003860:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003862:	895a      	ldrh	r2, [r3, #10]
 8003864:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003868:	f004 fd0f 	bl	800828a <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800386c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800386e:	69da      	ldr	r2, [r3, #28]
 8003870:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003874:	441a      	add	r2, r3
 8003876:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003878:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800387a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800387c:	695a      	ldr	r2, [r3, #20]
 800387e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003882:	441a      	add	r2, r3
 8003884:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003886:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003888:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800388a:	699b      	ldr	r3, [r3, #24]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d005      	beq.n	800389c <PCD_EP_ISR_Handler+0x4f2>
 8003890:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003894:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003896:	691b      	ldr	r3, [r3, #16]
 8003898:	429a      	cmp	r2, r3
 800389a:	d206      	bcs.n	80038aa <PCD_EP_ISR_Handler+0x500>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800389c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800389e:	781b      	ldrb	r3, [r3, #0]
 80038a0:	4619      	mov	r1, r3
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f006 fb0e 	bl	8009ec4 <HAL_PCD_DataOutStageCallback>
 80038a8:	e005      	b.n	80038b6 <PCD_EP_ISR_Handler+0x50c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80038b0:	4618      	mov	r0, r3
 80038b2:	f003 faa4 	bl	8006dfe <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80038b6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80038ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038be:	2b00      	cmp	r3, #0
 80038c0:	f000 8122 	beq.w	8003b08 <PCD_EP_ISR_Handler+0x75e>
      {
        ep = &hpcd->IN_ep[epindex];
 80038c4:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80038c8:	1c5a      	adds	r2, r3, #1
 80038ca:	4613      	mov	r3, r2
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	4413      	add	r3, r2
 80038d0:	00db      	lsls	r3, r3, #3
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	4413      	add	r3, r2
 80038d6:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	461a      	mov	r2, r3
 80038de:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	4413      	add	r3, r2
 80038e6:	881b      	ldrh	r3, [r3, #0]
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80038ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038f2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	461a      	mov	r2, r3
 80038fc:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	441a      	add	r2, r3
 8003904:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003908:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800390c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003910:	b29b      	uxth	r3, r3
 8003912:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 8003914:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003916:	78db      	ldrb	r3, [r3, #3]
 8003918:	2b02      	cmp	r3, #2
 800391a:	f000 809d 	beq.w	8003a58 <PCD_EP_ISR_Handler+0x6ae>
        {
          ep->xfer_len = 0U;
 800391e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003920:	2200      	movs	r2, #0
 8003922:	619a      	str	r2, [r3, #24]

          if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003924:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800392c:	2b00      	cmp	r3, #0
 800392e:	d046      	beq.n	80039be <PCD_EP_ISR_Handler+0x614>
          {
            PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003930:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003932:	785b      	ldrb	r3, [r3, #1]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d126      	bne.n	8003986 <PCD_EP_ISR_Handler+0x5dc>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	627b      	str	r3, [r7, #36]	; 0x24
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003946:	b29b      	uxth	r3, r3
 8003948:	461a      	mov	r2, r3
 800394a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394c:	4413      	add	r3, r2
 800394e:	627b      	str	r3, [r7, #36]	; 0x24
 8003950:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003952:	781b      	ldrb	r3, [r3, #0]
 8003954:	011a      	lsls	r2, r3, #4
 8003956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003958:	4413      	add	r3, r2
 800395a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800395e:	623b      	str	r3, [r7, #32]
 8003960:	6a3b      	ldr	r3, [r7, #32]
 8003962:	881b      	ldrh	r3, [r3, #0]
 8003964:	b29b      	uxth	r3, r3
 8003966:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800396a:	b29a      	uxth	r2, r3
 800396c:	6a3b      	ldr	r3, [r7, #32]
 800396e:	801a      	strh	r2, [r3, #0]
 8003970:	6a3b      	ldr	r3, [r7, #32]
 8003972:	881b      	ldrh	r3, [r3, #0]
 8003974:	b29b      	uxth	r3, r3
 8003976:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800397a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800397e:	b29a      	uxth	r2, r3
 8003980:	6a3b      	ldr	r3, [r7, #32]
 8003982:	801a      	strh	r2, [r3, #0]
 8003984:	e061      	b.n	8003a4a <PCD_EP_ISR_Handler+0x6a0>
 8003986:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003988:	785b      	ldrb	r3, [r3, #1]
 800398a:	2b01      	cmp	r3, #1
 800398c:	d15d      	bne.n	8003a4a <PCD_EP_ISR_Handler+0x6a0>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800399c:	b29b      	uxth	r3, r3
 800399e:	461a      	mov	r2, r3
 80039a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039a2:	4413      	add	r3, r2
 80039a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039a8:	781b      	ldrb	r3, [r3, #0]
 80039aa:	011a      	lsls	r2, r3, #4
 80039ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ae:	4413      	add	r3, r2
 80039b0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80039b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80039b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b8:	2200      	movs	r2, #0
 80039ba:	801a      	strh	r2, [r3, #0]
 80039bc:	e045      	b.n	8003a4a <PCD_EP_ISR_Handler+0x6a0>
          }
          else
          {
            PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039c6:	785b      	ldrb	r3, [r3, #1]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d126      	bne.n	8003a1a <PCD_EP_ISR_Handler+0x670>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	637b      	str	r3, [r7, #52]	; 0x34
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039da:	b29b      	uxth	r3, r3
 80039dc:	461a      	mov	r2, r3
 80039de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039e0:	4413      	add	r3, r2
 80039e2:	637b      	str	r3, [r7, #52]	; 0x34
 80039e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	011a      	lsls	r2, r3, #4
 80039ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039ec:	4413      	add	r3, r2
 80039ee:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80039f2:	633b      	str	r3, [r7, #48]	; 0x30
 80039f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039f6:	881b      	ldrh	r3, [r3, #0]
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80039fe:	b29a      	uxth	r2, r3
 8003a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a02:	801a      	strh	r2, [r3, #0]
 8003a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a06:	881b      	ldrh	r3, [r3, #0]
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a12:	b29a      	uxth	r2, r3
 8003a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a16:	801a      	strh	r2, [r3, #0]
 8003a18:	e017      	b.n	8003a4a <PCD_EP_ISR_Handler+0x6a0>
 8003a1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a1c:	785b      	ldrb	r3, [r3, #1]
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d113      	bne.n	8003a4a <PCD_EP_ISR_Handler+0x6a0>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a30:	4413      	add	r3, r2
 8003a32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a36:	781b      	ldrb	r3, [r3, #0]
 8003a38:	011a      	lsls	r2, r3, #4
 8003a3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a3c:	4413      	add	r3, r2
 8003a3e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003a42:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a46:	2200      	movs	r2, #0
 8003a48:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003a4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a4c:	781b      	ldrb	r3, [r3, #0]
 8003a4e:	4619      	mov	r1, r3
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f006 fa52 	bl	8009efa <HAL_PCD_DataInStageCallback>
 8003a56:	e057      	b.n	8003b08 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        /* Manage Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U))
 8003a58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a5a:	78db      	ldrb	r3, [r3, #3]
 8003a5c:	2b02      	cmp	r3, #2
 8003a5e:	d14c      	bne.n	8003afa <PCD_EP_ISR_Handler+0x750>
 8003a60:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003a64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d146      	bne.n	8003afa <PCD_EP_ISR_Handler+0x750>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	461a      	mov	r2, r3
 8003a78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	00db      	lsls	r3, r3, #3
 8003a7e:	4413      	add	r3, r2
 8003a80:	3302      	adds	r3, #2
 8003a82:	005b      	lsls	r3, r3, #1
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	6812      	ldr	r2, [r2, #0]
 8003a88:	4413      	add	r3, r2
 8003a8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a8e:	881b      	ldrh	r3, [r3, #0]
 8003a90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a94:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

          if (ep->xfer_len > TxByteNbre)
 8003a98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a9a:	699a      	ldr	r2, [r3, #24]
 8003a9c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d907      	bls.n	8003ab4 <PCD_EP_ISR_Handler+0x70a>
          {
            ep->xfer_len -= TxByteNbre;
 8003aa4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003aa6:	699a      	ldr	r2, [r3, #24]
 8003aa8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003aac:	1ad2      	subs	r2, r2, r3
 8003aae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ab0:	619a      	str	r2, [r3, #24]
 8003ab2:	e002      	b.n	8003aba <PCD_EP_ISR_Handler+0x710>
          }
          else
          {
            ep->xfer_len = 0U;
 8003ab4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8003aba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003abc:	699b      	ldr	r3, [r3, #24]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d106      	bne.n	8003ad0 <PCD_EP_ISR_Handler+0x726>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003ac2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ac4:	781b      	ldrb	r3, [r3, #0]
 8003ac6:	4619      	mov	r1, r3
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f006 fa16 	bl	8009efa <HAL_PCD_DataInStageCallback>
 8003ace:	e01b      	b.n	8003b08 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8003ad0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ad2:	695a      	ldr	r2, [r3, #20]
 8003ad4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003ad8:	441a      	add	r2, r3
 8003ada:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003adc:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8003ade:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ae0:	69da      	ldr	r2, [r3, #28]
 8003ae2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003ae6:	441a      	add	r2, r3
 8003ae8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003aea:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003af2:	4618      	mov	r0, r3
 8003af4:	f003 f983 	bl	8006dfe <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8003af8:	e006      	b.n	8003b08 <PCD_EP_ISR_Handler+0x75e>
          }
        }
        /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003afa:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003afe:	461a      	mov	r2, r3
 8003b00:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f000 f91b 	bl	8003d3e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	b21b      	sxth	r3, r3
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	f6ff ac4d 	blt.w	80033b4 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003b1a:	2300      	movs	r3, #0
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3758      	adds	r7, #88	; 0x58
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}

08003b24 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b088      	sub	sp, #32
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	60b9      	str	r1, [r7, #8]
 8003b2e:	4613      	mov	r3, r2
 8003b30:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003b32:	88fb      	ldrh	r3, [r7, #6]
 8003b34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d07e      	beq.n	8003c3a <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	461a      	mov	r2, r3
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	00db      	lsls	r3, r3, #3
 8003b4e:	4413      	add	r3, r2
 8003b50:	3302      	adds	r3, #2
 8003b52:	005b      	lsls	r3, r3, #1
 8003b54:	68fa      	ldr	r2, [r7, #12]
 8003b56:	6812      	ldr	r2, [r2, #0]
 8003b58:	4413      	add	r3, r2
 8003b5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b5e:	881b      	ldrh	r3, [r3, #0]
 8003b60:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b64:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	699a      	ldr	r2, [r3, #24]
 8003b6a:	8b7b      	ldrh	r3, [r7, #26]
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d306      	bcc.n	8003b7e <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	699a      	ldr	r2, [r3, #24]
 8003b74:	8b7b      	ldrh	r3, [r7, #26]
 8003b76:	1ad2      	subs	r2, r2, r3
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	619a      	str	r2, [r3, #24]
 8003b7c:	e002      	b.n	8003b84 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	2200      	movs	r2, #0
 8003b82:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	699b      	ldr	r3, [r3, #24]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d123      	bne.n	8003bd4 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	461a      	mov	r2, r3
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	4413      	add	r3, r2
 8003b9a:	881b      	ldrh	r3, [r3, #0]
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ba2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ba6:	833b      	strh	r3, [r7, #24]
 8003ba8:	8b3b      	ldrh	r3, [r7, #24]
 8003baa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003bae:	833b      	strh	r3, [r7, #24]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	781b      	ldrb	r3, [r3, #0]
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	441a      	add	r2, r3
 8003bbe:	8b3b      	ldrh	r3, [r7, #24]
 8003bc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003bc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003bc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003bd4:	88fb      	ldrh	r3, [r7, #6]
 8003bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d01f      	beq.n	8003c1e <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	461a      	mov	r2, r3
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	781b      	ldrb	r3, [r3, #0]
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	4413      	add	r3, r2
 8003bec:	881b      	ldrh	r3, [r3, #0]
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bf4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bf8:	82fb      	strh	r3, [r7, #22]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	461a      	mov	r2, r3
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	781b      	ldrb	r3, [r3, #0]
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	441a      	add	r2, r3
 8003c08:	8afb      	ldrh	r3, [r7, #22]
 8003c0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c16:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003c1e:	8b7b      	ldrh	r3, [r7, #26]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	f000 8087 	beq.w	8003d34 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	6818      	ldr	r0, [r3, #0]
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	6959      	ldr	r1, [r3, #20]
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	891a      	ldrh	r2, [r3, #8]
 8003c32:	8b7b      	ldrh	r3, [r7, #26]
 8003c34:	f004 fb29 	bl	800828a <USB_ReadPMA>
 8003c38:	e07c      	b.n	8003d34 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	461a      	mov	r2, r3
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	00db      	lsls	r3, r3, #3
 8003c4c:	4413      	add	r3, r2
 8003c4e:	3306      	adds	r3, #6
 8003c50:	005b      	lsls	r3, r3, #1
 8003c52:	68fa      	ldr	r2, [r7, #12]
 8003c54:	6812      	ldr	r2, [r2, #0]
 8003c56:	4413      	add	r3, r2
 8003c58:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c5c:	881b      	ldrh	r3, [r3, #0]
 8003c5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c62:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	699a      	ldr	r2, [r3, #24]
 8003c68:	8b7b      	ldrh	r3, [r7, #26]
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d306      	bcc.n	8003c7c <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	699a      	ldr	r2, [r3, #24]
 8003c72:	8b7b      	ldrh	r3, [r7, #26]
 8003c74:	1ad2      	subs	r2, r2, r3
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	619a      	str	r2, [r3, #24]
 8003c7a:	e002      	b.n	8003c82 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	699b      	ldr	r3, [r3, #24]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d123      	bne.n	8003cd2 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	461a      	mov	r2, r3
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	781b      	ldrb	r3, [r3, #0]
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	4413      	add	r3, r2
 8003c98:	881b      	ldrh	r3, [r3, #0]
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ca0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ca4:	83fb      	strh	r3, [r7, #30]
 8003ca6:	8bfb      	ldrh	r3, [r7, #30]
 8003ca8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003cac:	83fb      	strh	r3, [r7, #30]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	781b      	ldrb	r3, [r3, #0]
 8003cb8:	009b      	lsls	r3, r3, #2
 8003cba:	441a      	add	r2, r3
 8003cbc:	8bfb      	ldrh	r3, [r7, #30]
 8003cbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003cd2:	88fb      	ldrh	r3, [r7, #6]
 8003cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d11f      	bne.n	8003d1c <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	781b      	ldrb	r3, [r3, #0]
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	4413      	add	r3, r2
 8003cea:	881b      	ldrh	r3, [r3, #0]
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cf6:	83bb      	strh	r3, [r7, #28]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	781b      	ldrb	r3, [r3, #0]
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	441a      	add	r2, r3
 8003d06:	8bbb      	ldrh	r3, [r7, #28]
 8003d08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d14:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003d1c:	8b7b      	ldrh	r3, [r7, #26]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d008      	beq.n	8003d34 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6818      	ldr	r0, [r3, #0]
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	6959      	ldr	r1, [r3, #20]
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	895a      	ldrh	r2, [r3, #10]
 8003d2e:	8b7b      	ldrh	r3, [r7, #26]
 8003d30:	f004 faab 	bl	800828a <USB_ReadPMA>
    }
  }

  return count;
 8003d34:	8b7b      	ldrh	r3, [r7, #26]
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3720      	adds	r7, #32
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}

08003d3e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003d3e:	b580      	push	{r7, lr}
 8003d40:	b0a2      	sub	sp, #136	; 0x88
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	60f8      	str	r0, [r7, #12]
 8003d46:	60b9      	str	r1, [r7, #8]
 8003d48:	4613      	mov	r3, r2
 8003d4a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003d4c:	88fb      	ldrh	r3, [r7, #6]
 8003d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	f000 81c7 	beq.w	80040e6 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	461a      	mov	r2, r3
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	781b      	ldrb	r3, [r3, #0]
 8003d68:	00db      	lsls	r3, r3, #3
 8003d6a:	4413      	add	r3, r2
 8003d6c:	3302      	adds	r3, #2
 8003d6e:	005b      	lsls	r3, r3, #1
 8003d70:	68fa      	ldr	r2, [r7, #12]
 8003d72:	6812      	ldr	r2, [r2, #0]
 8003d74:	4413      	add	r3, r2
 8003d76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d7a:	881b      	ldrh	r3, [r3, #0]
 8003d7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d80:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	699a      	ldr	r2, [r3, #24]
 8003d88:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d907      	bls.n	8003da0 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	699a      	ldr	r2, [r3, #24]
 8003d94:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003d98:	1ad2      	subs	r2, r2, r3
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	619a      	str	r2, [r3, #24]
 8003d9e:	e002      	b.n	8003da6 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	2200      	movs	r2, #0
 8003da4:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	699b      	ldr	r3, [r3, #24]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	f040 80b9 	bne.w	8003f22 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	785b      	ldrb	r3, [r3, #1]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d126      	bne.n	8003e06 <HAL_PCD_EP_DB_Transmit+0xc8>
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	461a      	mov	r2, r3
 8003dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dcc:	4413      	add	r3, r2
 8003dce:	62bb      	str	r3, [r7, #40]	; 0x28
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	781b      	ldrb	r3, [r3, #0]
 8003dd4:	011a      	lsls	r2, r3, #4
 8003dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dd8:	4413      	add	r3, r2
 8003dda:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003dde:	627b      	str	r3, [r7, #36]	; 0x24
 8003de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de2:	881b      	ldrh	r3, [r3, #0]
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003dea:	b29a      	uxth	r2, r3
 8003dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dee:	801a      	strh	r2, [r3, #0]
 8003df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df2:	881b      	ldrh	r3, [r3, #0]
 8003df4:	b29b      	uxth	r3, r3
 8003df6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003dfa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003dfe:	b29a      	uxth	r2, r3
 8003e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e02:	801a      	strh	r2, [r3, #0]
 8003e04:	e01a      	b.n	8003e3c <HAL_PCD_EP_DB_Transmit+0xfe>
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	785b      	ldrb	r3, [r3, #1]
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d116      	bne.n	8003e3c <HAL_PCD_EP_DB_Transmit+0xfe>
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	633b      	str	r3, [r7, #48]	; 0x30
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	461a      	mov	r2, r3
 8003e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e22:	4413      	add	r3, r2
 8003e24:	633b      	str	r3, [r7, #48]	; 0x30
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	781b      	ldrb	r3, [r3, #0]
 8003e2a:	011a      	lsls	r2, r3, #4
 8003e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e2e:	4413      	add	r3, r2
 8003e30:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003e34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e38:	2200      	movs	r2, #0
 8003e3a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	623b      	str	r3, [r7, #32]
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	785b      	ldrb	r3, [r3, #1]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d126      	bne.n	8003e98 <HAL_PCD_EP_DB_Transmit+0x15a>
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	61bb      	str	r3, [r7, #24]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	69bb      	ldr	r3, [r7, #24]
 8003e5e:	4413      	add	r3, r2
 8003e60:	61bb      	str	r3, [r7, #24]
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	781b      	ldrb	r3, [r3, #0]
 8003e66:	011a      	lsls	r2, r3, #4
 8003e68:	69bb      	ldr	r3, [r7, #24]
 8003e6a:	4413      	add	r3, r2
 8003e6c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003e70:	617b      	str	r3, [r7, #20]
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	881b      	ldrh	r3, [r3, #0]
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003e7c:	b29a      	uxth	r2, r3
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	801a      	strh	r2, [r3, #0]
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	881b      	ldrh	r3, [r3, #0]
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e90:	b29a      	uxth	r2, r3
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	801a      	strh	r2, [r3, #0]
 8003e96:	e017      	b.n	8003ec8 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	785b      	ldrb	r3, [r3, #1]
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d113      	bne.n	8003ec8 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	461a      	mov	r2, r3
 8003eac:	6a3b      	ldr	r3, [r7, #32]
 8003eae:	4413      	add	r3, r2
 8003eb0:	623b      	str	r3, [r7, #32]
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	011a      	lsls	r2, r3, #4
 8003eb8:	6a3b      	ldr	r3, [r7, #32]
 8003eba:	4413      	add	r3, r2
 8003ebc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003ec0:	61fb      	str	r3, [r7, #28]
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	781b      	ldrb	r3, [r3, #0]
 8003ecc:	4619      	mov	r1, r3
 8003ece:	68f8      	ldr	r0, [r7, #12]
 8003ed0:	f006 f813 	bl	8009efa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003ed4:	88fb      	ldrh	r3, [r7, #6]
 8003ed6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	f000 82d4 	beq.w	8004488 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	4413      	add	r3, r2
 8003eee:	881b      	ldrh	r3, [r3, #0]
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ef6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003efa:	827b      	strh	r3, [r7, #18]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	461a      	mov	r2, r3
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	781b      	ldrb	r3, [r3, #0]
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	441a      	add	r2, r3
 8003f0a:	8a7b      	ldrh	r3, [r7, #18]
 8003f0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f14:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	8013      	strh	r3, [r2, #0]
 8003f20:	e2b2      	b.n	8004488 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003f22:	88fb      	ldrh	r3, [r7, #6]
 8003f24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d021      	beq.n	8003f70 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	461a      	mov	r2, r3
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	4413      	add	r3, r2
 8003f3a:	881b      	ldrh	r3, [r3, #0]
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f46:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	461a      	mov	r2, r3
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	781b      	ldrb	r3, [r3, #0]
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	441a      	add	r2, r3
 8003f58:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003f5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f64:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	f040 8286 	bne.w	8004488 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	695a      	ldr	r2, [r3, #20]
 8003f80:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003f84:	441a      	add	r2, r3
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	69da      	ldr	r2, [r3, #28]
 8003f8e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003f92:	441a      	add	r2, r3
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	6a1a      	ldr	r2, [r3, #32]
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	691b      	ldr	r3, [r3, #16]
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d309      	bcc.n	8003fb8 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	691b      	ldr	r3, [r3, #16]
 8003fa8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	6a1a      	ldr	r2, [r3, #32]
 8003fae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fb0:	1ad2      	subs	r2, r2, r3
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	621a      	str	r2, [r3, #32]
 8003fb6:	e015      	b.n	8003fe4 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	6a1b      	ldr	r3, [r3, #32]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d107      	bne.n	8003fd0 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8003fc0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003fc4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003fce:	e009      	b.n	8003fe4 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	6a1b      	ldr	r3, [r3, #32]
 8003fdc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	785b      	ldrb	r3, [r3, #1]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d155      	bne.n	8004098 <HAL_PCD_EP_DB_Transmit+0x35a>
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004000:	4413      	add	r3, r2
 8004002:	63bb      	str	r3, [r7, #56]	; 0x38
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	781b      	ldrb	r3, [r3, #0]
 8004008:	011a      	lsls	r2, r3, #4
 800400a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800400c:	4413      	add	r3, r2
 800400e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004012:	637b      	str	r3, [r7, #52]	; 0x34
 8004014:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004016:	2b00      	cmp	r3, #0
 8004018:	d112      	bne.n	8004040 <HAL_PCD_EP_DB_Transmit+0x302>
 800401a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800401c:	881b      	ldrh	r3, [r3, #0]
 800401e:	b29b      	uxth	r3, r3
 8004020:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004024:	b29a      	uxth	r2, r3
 8004026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004028:	801a      	strh	r2, [r3, #0]
 800402a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800402c:	881b      	ldrh	r3, [r3, #0]
 800402e:	b29b      	uxth	r3, r3
 8004030:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004034:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004038:	b29a      	uxth	r2, r3
 800403a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800403c:	801a      	strh	r2, [r3, #0]
 800403e:	e047      	b.n	80040d0 <HAL_PCD_EP_DB_Transmit+0x392>
 8004040:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004042:	2b3e      	cmp	r3, #62	; 0x3e
 8004044:	d811      	bhi.n	800406a <HAL_PCD_EP_DB_Transmit+0x32c>
 8004046:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004048:	085b      	lsrs	r3, r3, #1
 800404a:	64bb      	str	r3, [r7, #72]	; 0x48
 800404c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800404e:	f003 0301 	and.w	r3, r3, #1
 8004052:	2b00      	cmp	r3, #0
 8004054:	d002      	beq.n	800405c <HAL_PCD_EP_DB_Transmit+0x31e>
 8004056:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004058:	3301      	adds	r3, #1
 800405a:	64bb      	str	r3, [r7, #72]	; 0x48
 800405c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800405e:	b29b      	uxth	r3, r3
 8004060:	029b      	lsls	r3, r3, #10
 8004062:	b29a      	uxth	r2, r3
 8004064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004066:	801a      	strh	r2, [r3, #0]
 8004068:	e032      	b.n	80040d0 <HAL_PCD_EP_DB_Transmit+0x392>
 800406a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800406c:	095b      	lsrs	r3, r3, #5
 800406e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004070:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004072:	f003 031f 	and.w	r3, r3, #31
 8004076:	2b00      	cmp	r3, #0
 8004078:	d102      	bne.n	8004080 <HAL_PCD_EP_DB_Transmit+0x342>
 800407a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800407c:	3b01      	subs	r3, #1
 800407e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004080:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004082:	b29b      	uxth	r3, r3
 8004084:	029b      	lsls	r3, r3, #10
 8004086:	b29b      	uxth	r3, r3
 8004088:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800408c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004090:	b29a      	uxth	r2, r3
 8004092:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004094:	801a      	strh	r2, [r3, #0]
 8004096:	e01b      	b.n	80040d0 <HAL_PCD_EP_DB_Transmit+0x392>
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	785b      	ldrb	r3, [r3, #1]
 800409c:	2b01      	cmp	r3, #1
 800409e:	d117      	bne.n	80040d0 <HAL_PCD_EP_DB_Transmit+0x392>
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	643b      	str	r3, [r7, #64]	; 0x40
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	461a      	mov	r2, r3
 80040b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040b4:	4413      	add	r3, r2
 80040b6:	643b      	str	r3, [r7, #64]	; 0x40
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	011a      	lsls	r2, r3, #4
 80040be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040c0:	4413      	add	r3, r2
 80040c2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80040c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040ca:	b29a      	uxth	r2, r3
 80040cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040ce:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6818      	ldr	r0, [r3, #0]
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	6959      	ldr	r1, [r3, #20]
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	891a      	ldrh	r2, [r3, #8]
 80040dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040de:	b29b      	uxth	r3, r3
 80040e0:	f004 f88d 	bl	80081fe <USB_WritePMA>
 80040e4:	e1d0      	b.n	8004488 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	461a      	mov	r2, r3
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	781b      	ldrb	r3, [r3, #0]
 80040f6:	00db      	lsls	r3, r3, #3
 80040f8:	4413      	add	r3, r2
 80040fa:	3306      	adds	r3, #6
 80040fc:	005b      	lsls	r3, r3, #1
 80040fe:	68fa      	ldr	r2, [r7, #12]
 8004100:	6812      	ldr	r2, [r2, #0]
 8004102:	4413      	add	r3, r2
 8004104:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004108:	881b      	ldrh	r3, [r3, #0]
 800410a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800410e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	699a      	ldr	r2, [r3, #24]
 8004116:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800411a:	429a      	cmp	r2, r3
 800411c:	d307      	bcc.n	800412e <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	699a      	ldr	r2, [r3, #24]
 8004122:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004126:	1ad2      	subs	r2, r2, r3
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	619a      	str	r2, [r3, #24]
 800412c:	e002      	b.n	8004134 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	2200      	movs	r2, #0
 8004132:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	699b      	ldr	r3, [r3, #24]
 8004138:	2b00      	cmp	r3, #0
 800413a:	f040 80c4 	bne.w	80042c6 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	785b      	ldrb	r3, [r3, #1]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d126      	bne.n	8004194 <HAL_PCD_EP_DB_Transmit+0x456>
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004154:	b29b      	uxth	r3, r3
 8004156:	461a      	mov	r2, r3
 8004158:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800415a:	4413      	add	r3, r2
 800415c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	781b      	ldrb	r3, [r3, #0]
 8004162:	011a      	lsls	r2, r3, #4
 8004164:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004166:	4413      	add	r3, r2
 8004168:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800416c:	66bb      	str	r3, [r7, #104]	; 0x68
 800416e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004170:	881b      	ldrh	r3, [r3, #0]
 8004172:	b29b      	uxth	r3, r3
 8004174:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004178:	b29a      	uxth	r2, r3
 800417a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800417c:	801a      	strh	r2, [r3, #0]
 800417e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004180:	881b      	ldrh	r3, [r3, #0]
 8004182:	b29b      	uxth	r3, r3
 8004184:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004188:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800418c:	b29a      	uxth	r2, r3
 800418e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004190:	801a      	strh	r2, [r3, #0]
 8004192:	e01a      	b.n	80041ca <HAL_PCD_EP_DB_Transmit+0x48c>
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	785b      	ldrb	r3, [r3, #1]
 8004198:	2b01      	cmp	r3, #1
 800419a:	d116      	bne.n	80041ca <HAL_PCD_EP_DB_Transmit+0x48c>
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	677b      	str	r3, [r7, #116]	; 0x74
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	461a      	mov	r2, r3
 80041ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041b0:	4413      	add	r3, r2
 80041b2:	677b      	str	r3, [r7, #116]	; 0x74
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	781b      	ldrb	r3, [r3, #0]
 80041b8:	011a      	lsls	r2, r3, #4
 80041ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041bc:	4413      	add	r3, r2
 80041be:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80041c2:	673b      	str	r3, [r7, #112]	; 0x70
 80041c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041c6:	2200      	movs	r2, #0
 80041c8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	67bb      	str	r3, [r7, #120]	; 0x78
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	785b      	ldrb	r3, [r3, #1]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d12f      	bne.n	8004238 <HAL_PCD_EP_DB_Transmit+0x4fa>
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	461a      	mov	r2, r3
 80041ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80041f0:	4413      	add	r3, r2
 80041f2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	781b      	ldrb	r3, [r3, #0]
 80041fa:	011a      	lsls	r2, r3, #4
 80041fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004200:	4413      	add	r3, r2
 8004202:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004206:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800420a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800420e:	881b      	ldrh	r3, [r3, #0]
 8004210:	b29b      	uxth	r3, r3
 8004212:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004216:	b29a      	uxth	r2, r3
 8004218:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800421c:	801a      	strh	r2, [r3, #0]
 800421e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004222:	881b      	ldrh	r3, [r3, #0]
 8004224:	b29b      	uxth	r3, r3
 8004226:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800422a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800422e:	b29a      	uxth	r2, r3
 8004230:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004234:	801a      	strh	r2, [r3, #0]
 8004236:	e017      	b.n	8004268 <HAL_PCD_EP_DB_Transmit+0x52a>
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	785b      	ldrb	r3, [r3, #1]
 800423c:	2b01      	cmp	r3, #1
 800423e:	d113      	bne.n	8004268 <HAL_PCD_EP_DB_Transmit+0x52a>
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004248:	b29b      	uxth	r3, r3
 800424a:	461a      	mov	r2, r3
 800424c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800424e:	4413      	add	r3, r2
 8004250:	67bb      	str	r3, [r7, #120]	; 0x78
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	781b      	ldrb	r3, [r3, #0]
 8004256:	011a      	lsls	r2, r3, #4
 8004258:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800425a:	4413      	add	r3, r2
 800425c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004260:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004262:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004264:	2200      	movs	r2, #0
 8004266:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	4619      	mov	r1, r3
 800426e:	68f8      	ldr	r0, [r7, #12]
 8004270:	f005 fe43 	bl	8009efa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004274:	88fb      	ldrh	r3, [r7, #6]
 8004276:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800427a:	2b00      	cmp	r3, #0
 800427c:	f040 8104 	bne.w	8004488 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	461a      	mov	r2, r3
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	781b      	ldrb	r3, [r3, #0]
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	4413      	add	r3, r2
 800428e:	881b      	ldrh	r3, [r3, #0]
 8004290:	b29b      	uxth	r3, r3
 8004292:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004296:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800429a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	461a      	mov	r2, r3
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	441a      	add	r2, r3
 80042ac:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80042b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80042bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	8013      	strh	r3, [r2, #0]
 80042c4:	e0e0      	b.n	8004488 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80042c6:	88fb      	ldrh	r3, [r7, #6]
 80042c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d121      	bne.n	8004314 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	461a      	mov	r2, r3
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	781b      	ldrb	r3, [r3, #0]
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	4413      	add	r3, r2
 80042de:	881b      	ldrh	r3, [r3, #0]
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042ea:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	461a      	mov	r2, r3
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	781b      	ldrb	r3, [r3, #0]
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	441a      	add	r2, r3
 80042fc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004300:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004304:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004308:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800430c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004310:	b29b      	uxth	r3, r3
 8004312:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800431a:	2b01      	cmp	r3, #1
 800431c:	f040 80b4 	bne.w	8004488 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	695a      	ldr	r2, [r3, #20]
 8004324:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004328:	441a      	add	r2, r3
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	69da      	ldr	r2, [r3, #28]
 8004332:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004336:	441a      	add	r2, r3
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	6a1a      	ldr	r2, [r3, #32]
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	691b      	ldr	r3, [r3, #16]
 8004344:	429a      	cmp	r2, r3
 8004346:	d309      	bcc.n	800435c <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	691b      	ldr	r3, [r3, #16]
 800434c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	6a1a      	ldr	r2, [r3, #32]
 8004352:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004354:	1ad2      	subs	r2, r2, r3
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	621a      	str	r2, [r3, #32]
 800435a:	e015      	b.n	8004388 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	6a1b      	ldr	r3, [r3, #32]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d107      	bne.n	8004374 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8004364:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004368:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	2200      	movs	r2, #0
 800436e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004372:	e009      	b.n	8004388 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	6a1b      	ldr	r3, [r3, #32]
 8004378:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	2200      	movs	r2, #0
 800437e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	2200      	movs	r2, #0
 8004384:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	667b      	str	r3, [r7, #100]	; 0x64
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	785b      	ldrb	r3, [r3, #1]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d155      	bne.n	8004442 <HAL_PCD_EP_DB_Transmit+0x704>
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043a4:	b29b      	uxth	r3, r3
 80043a6:	461a      	mov	r2, r3
 80043a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043aa:	4413      	add	r3, r2
 80043ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	781b      	ldrb	r3, [r3, #0]
 80043b2:	011a      	lsls	r2, r3, #4
 80043b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043b6:	4413      	add	r3, r2
 80043b8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80043bc:	65bb      	str	r3, [r7, #88]	; 0x58
 80043be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d112      	bne.n	80043ea <HAL_PCD_EP_DB_Transmit+0x6ac>
 80043c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043c6:	881b      	ldrh	r3, [r3, #0]
 80043c8:	b29b      	uxth	r3, r3
 80043ca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80043ce:	b29a      	uxth	r2, r3
 80043d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043d2:	801a      	strh	r2, [r3, #0]
 80043d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043d6:	881b      	ldrh	r3, [r3, #0]
 80043d8:	b29b      	uxth	r3, r3
 80043da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043e2:	b29a      	uxth	r2, r3
 80043e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043e6:	801a      	strh	r2, [r3, #0]
 80043e8:	e044      	b.n	8004474 <HAL_PCD_EP_DB_Transmit+0x736>
 80043ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043ec:	2b3e      	cmp	r3, #62	; 0x3e
 80043ee:	d811      	bhi.n	8004414 <HAL_PCD_EP_DB_Transmit+0x6d6>
 80043f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043f2:	085b      	lsrs	r3, r3, #1
 80043f4:	657b      	str	r3, [r7, #84]	; 0x54
 80043f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043f8:	f003 0301 	and.w	r3, r3, #1
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d002      	beq.n	8004406 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8004400:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004402:	3301      	adds	r3, #1
 8004404:	657b      	str	r3, [r7, #84]	; 0x54
 8004406:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004408:	b29b      	uxth	r3, r3
 800440a:	029b      	lsls	r3, r3, #10
 800440c:	b29a      	uxth	r2, r3
 800440e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004410:	801a      	strh	r2, [r3, #0]
 8004412:	e02f      	b.n	8004474 <HAL_PCD_EP_DB_Transmit+0x736>
 8004414:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004416:	095b      	lsrs	r3, r3, #5
 8004418:	657b      	str	r3, [r7, #84]	; 0x54
 800441a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800441c:	f003 031f 	and.w	r3, r3, #31
 8004420:	2b00      	cmp	r3, #0
 8004422:	d102      	bne.n	800442a <HAL_PCD_EP_DB_Transmit+0x6ec>
 8004424:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004426:	3b01      	subs	r3, #1
 8004428:	657b      	str	r3, [r7, #84]	; 0x54
 800442a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800442c:	b29b      	uxth	r3, r3
 800442e:	029b      	lsls	r3, r3, #10
 8004430:	b29b      	uxth	r3, r3
 8004432:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004436:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800443a:	b29a      	uxth	r2, r3
 800443c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800443e:	801a      	strh	r2, [r3, #0]
 8004440:	e018      	b.n	8004474 <HAL_PCD_EP_DB_Transmit+0x736>
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	785b      	ldrb	r3, [r3, #1]
 8004446:	2b01      	cmp	r3, #1
 8004448:	d114      	bne.n	8004474 <HAL_PCD_EP_DB_Transmit+0x736>
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004452:	b29b      	uxth	r3, r3
 8004454:	461a      	mov	r2, r3
 8004456:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004458:	4413      	add	r3, r2
 800445a:	667b      	str	r3, [r7, #100]	; 0x64
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	781b      	ldrb	r3, [r3, #0]
 8004460:	011a      	lsls	r2, r3, #4
 8004462:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004464:	4413      	add	r3, r2
 8004466:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800446a:	663b      	str	r3, [r7, #96]	; 0x60
 800446c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800446e:	b29a      	uxth	r2, r3
 8004470:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004472:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6818      	ldr	r0, [r3, #0]
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	6959      	ldr	r1, [r3, #20]
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	895a      	ldrh	r2, [r3, #10]
 8004480:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004482:	b29b      	uxth	r3, r3
 8004484:	f003 febb 	bl	80081fe <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	461a      	mov	r2, r3
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	781b      	ldrb	r3, [r3, #0]
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	4413      	add	r3, r2
 8004496:	881b      	ldrh	r3, [r3, #0]
 8004498:	b29b      	uxth	r3, r3
 800449a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800449e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044a2:	823b      	strh	r3, [r7, #16]
 80044a4:	8a3b      	ldrh	r3, [r7, #16]
 80044a6:	f083 0310 	eor.w	r3, r3, #16
 80044aa:	823b      	strh	r3, [r7, #16]
 80044ac:	8a3b      	ldrh	r3, [r7, #16]
 80044ae:	f083 0320 	eor.w	r3, r3, #32
 80044b2:	823b      	strh	r3, [r7, #16]
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	461a      	mov	r2, r3
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	781b      	ldrb	r3, [r3, #0]
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	441a      	add	r2, r3
 80044c2:	8a3b      	ldrh	r3, [r7, #16]
 80044c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80044d8:	2300      	movs	r3, #0
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3788      	adds	r7, #136	; 0x88
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}

080044e2 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80044e2:	b480      	push	{r7}
 80044e4:	b087      	sub	sp, #28
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	60f8      	str	r0, [r7, #12]
 80044ea:	607b      	str	r3, [r7, #4]
 80044ec:	460b      	mov	r3, r1
 80044ee:	817b      	strh	r3, [r7, #10]
 80044f0:	4613      	mov	r3, r2
 80044f2:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80044f4:	897b      	ldrh	r3, [r7, #10]
 80044f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d00b      	beq.n	8004518 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004500:	897b      	ldrh	r3, [r7, #10]
 8004502:	f003 0307 	and.w	r3, r3, #7
 8004506:	1c5a      	adds	r2, r3, #1
 8004508:	4613      	mov	r3, r2
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	4413      	add	r3, r2
 800450e:	00db      	lsls	r3, r3, #3
 8004510:	68fa      	ldr	r2, [r7, #12]
 8004512:	4413      	add	r3, r2
 8004514:	617b      	str	r3, [r7, #20]
 8004516:	e009      	b.n	800452c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004518:	897a      	ldrh	r2, [r7, #10]
 800451a:	4613      	mov	r3, r2
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	4413      	add	r3, r2
 8004520:	00db      	lsls	r3, r3, #3
 8004522:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004526:	68fa      	ldr	r2, [r7, #12]
 8004528:	4413      	add	r3, r2
 800452a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800452c:	893b      	ldrh	r3, [r7, #8]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d107      	bne.n	8004542 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	2200      	movs	r2, #0
 8004536:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	b29a      	uxth	r2, r3
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	80da      	strh	r2, [r3, #6]
 8004540:	e00b      	b.n	800455a <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	2201      	movs	r2, #1
 8004546:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	b29a      	uxth	r2, r3
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	0c1b      	lsrs	r3, r3, #16
 8004554:	b29a      	uxth	r2, r3
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800455a:	2300      	movs	r3, #0
}
 800455c:	4618      	mov	r0, r3
 800455e:	371c      	adds	r7, #28
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr

08004568 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800456e:	af00      	add	r7, sp, #0
 8004570:	1d3b      	adds	r3, r7, #4
 8004572:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004574:	1d3b      	adds	r3, r7, #4
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d102      	bne.n	8004582 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	f000 bef4 	b.w	800536a <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004582:	1d3b      	adds	r3, r7, #4
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0301 	and.w	r3, r3, #1
 800458c:	2b00      	cmp	r3, #0
 800458e:	f000 816a 	beq.w	8004866 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004592:	4bb3      	ldr	r3, [pc, #716]	; (8004860 <HAL_RCC_OscConfig+0x2f8>)
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	f003 030c 	and.w	r3, r3, #12
 800459a:	2b04      	cmp	r3, #4
 800459c:	d00c      	beq.n	80045b8 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800459e:	4bb0      	ldr	r3, [pc, #704]	; (8004860 <HAL_RCC_OscConfig+0x2f8>)
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	f003 030c 	and.w	r3, r3, #12
 80045a6:	2b08      	cmp	r3, #8
 80045a8:	d159      	bne.n	800465e <HAL_RCC_OscConfig+0xf6>
 80045aa:	4bad      	ldr	r3, [pc, #692]	; (8004860 <HAL_RCC_OscConfig+0x2f8>)
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045b6:	d152      	bne.n	800465e <HAL_RCC_OscConfig+0xf6>
 80045b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80045bc:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045c0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80045c4:	fa93 f3a3 	rbit	r3, r3
 80045c8:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80045cc:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045d0:	fab3 f383 	clz	r3, r3
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	095b      	lsrs	r3, r3, #5
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	f043 0301 	orr.w	r3, r3, #1
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d102      	bne.n	80045ea <HAL_RCC_OscConfig+0x82>
 80045e4:	4b9e      	ldr	r3, [pc, #632]	; (8004860 <HAL_RCC_OscConfig+0x2f8>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	e015      	b.n	8004616 <HAL_RCC_OscConfig+0xae>
 80045ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80045ee:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045f2:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80045f6:	fa93 f3a3 	rbit	r3, r3
 80045fa:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80045fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004602:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004606:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800460a:	fa93 f3a3 	rbit	r3, r3
 800460e:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8004612:	4b93      	ldr	r3, [pc, #588]	; (8004860 <HAL_RCC_OscConfig+0x2f8>)
 8004614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004616:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800461a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800461e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8004622:	fa92 f2a2 	rbit	r2, r2
 8004626:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800462a:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800462e:	fab2 f282 	clz	r2, r2
 8004632:	b2d2      	uxtb	r2, r2
 8004634:	f042 0220 	orr.w	r2, r2, #32
 8004638:	b2d2      	uxtb	r2, r2
 800463a:	f002 021f 	and.w	r2, r2, #31
 800463e:	2101      	movs	r1, #1
 8004640:	fa01 f202 	lsl.w	r2, r1, r2
 8004644:	4013      	ands	r3, r2
 8004646:	2b00      	cmp	r3, #0
 8004648:	f000 810c 	beq.w	8004864 <HAL_RCC_OscConfig+0x2fc>
 800464c:	1d3b      	adds	r3, r7, #4
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	2b00      	cmp	r3, #0
 8004654:	f040 8106 	bne.w	8004864 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	f000 be86 	b.w	800536a <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800465e:	1d3b      	adds	r3, r7, #4
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004668:	d106      	bne.n	8004678 <HAL_RCC_OscConfig+0x110>
 800466a:	4b7d      	ldr	r3, [pc, #500]	; (8004860 <HAL_RCC_OscConfig+0x2f8>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a7c      	ldr	r2, [pc, #496]	; (8004860 <HAL_RCC_OscConfig+0x2f8>)
 8004670:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004674:	6013      	str	r3, [r2, #0]
 8004676:	e030      	b.n	80046da <HAL_RCC_OscConfig+0x172>
 8004678:	1d3b      	adds	r3, r7, #4
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d10c      	bne.n	800469c <HAL_RCC_OscConfig+0x134>
 8004682:	4b77      	ldr	r3, [pc, #476]	; (8004860 <HAL_RCC_OscConfig+0x2f8>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a76      	ldr	r2, [pc, #472]	; (8004860 <HAL_RCC_OscConfig+0x2f8>)
 8004688:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800468c:	6013      	str	r3, [r2, #0]
 800468e:	4b74      	ldr	r3, [pc, #464]	; (8004860 <HAL_RCC_OscConfig+0x2f8>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a73      	ldr	r2, [pc, #460]	; (8004860 <HAL_RCC_OscConfig+0x2f8>)
 8004694:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004698:	6013      	str	r3, [r2, #0]
 800469a:	e01e      	b.n	80046da <HAL_RCC_OscConfig+0x172>
 800469c:	1d3b      	adds	r3, r7, #4
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046a6:	d10c      	bne.n	80046c2 <HAL_RCC_OscConfig+0x15a>
 80046a8:	4b6d      	ldr	r3, [pc, #436]	; (8004860 <HAL_RCC_OscConfig+0x2f8>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a6c      	ldr	r2, [pc, #432]	; (8004860 <HAL_RCC_OscConfig+0x2f8>)
 80046ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046b2:	6013      	str	r3, [r2, #0]
 80046b4:	4b6a      	ldr	r3, [pc, #424]	; (8004860 <HAL_RCC_OscConfig+0x2f8>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a69      	ldr	r2, [pc, #420]	; (8004860 <HAL_RCC_OscConfig+0x2f8>)
 80046ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046be:	6013      	str	r3, [r2, #0]
 80046c0:	e00b      	b.n	80046da <HAL_RCC_OscConfig+0x172>
 80046c2:	4b67      	ldr	r3, [pc, #412]	; (8004860 <HAL_RCC_OscConfig+0x2f8>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a66      	ldr	r2, [pc, #408]	; (8004860 <HAL_RCC_OscConfig+0x2f8>)
 80046c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046cc:	6013      	str	r3, [r2, #0]
 80046ce:	4b64      	ldr	r3, [pc, #400]	; (8004860 <HAL_RCC_OscConfig+0x2f8>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a63      	ldr	r2, [pc, #396]	; (8004860 <HAL_RCC_OscConfig+0x2f8>)
 80046d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046d8:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80046da:	4b61      	ldr	r3, [pc, #388]	; (8004860 <HAL_RCC_OscConfig+0x2f8>)
 80046dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046de:	f023 020f 	bic.w	r2, r3, #15
 80046e2:	1d3b      	adds	r3, r7, #4
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	495d      	ldr	r1, [pc, #372]	; (8004860 <HAL_RCC_OscConfig+0x2f8>)
 80046ea:	4313      	orrs	r3, r2
 80046ec:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80046ee:	1d3b      	adds	r3, r7, #4
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d059      	beq.n	80047ac <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046f8:	f7fd f9de 	bl	8001ab8 <HAL_GetTick>
 80046fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004700:	e00a      	b.n	8004718 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004702:	f7fd f9d9 	bl	8001ab8 <HAL_GetTick>
 8004706:	4602      	mov	r2, r0
 8004708:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	2b64      	cmp	r3, #100	; 0x64
 8004710:	d902      	bls.n	8004718 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	f000 be29 	b.w	800536a <HAL_RCC_OscConfig+0xe02>
 8004718:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800471c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004720:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8004724:	fa93 f3a3 	rbit	r3, r3
 8004728:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800472c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004730:	fab3 f383 	clz	r3, r3
 8004734:	b2db      	uxtb	r3, r3
 8004736:	095b      	lsrs	r3, r3, #5
 8004738:	b2db      	uxtb	r3, r3
 800473a:	f043 0301 	orr.w	r3, r3, #1
 800473e:	b2db      	uxtb	r3, r3
 8004740:	2b01      	cmp	r3, #1
 8004742:	d102      	bne.n	800474a <HAL_RCC_OscConfig+0x1e2>
 8004744:	4b46      	ldr	r3, [pc, #280]	; (8004860 <HAL_RCC_OscConfig+0x2f8>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	e015      	b.n	8004776 <HAL_RCC_OscConfig+0x20e>
 800474a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800474e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004752:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8004756:	fa93 f3a3 	rbit	r3, r3
 800475a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800475e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004762:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004766:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800476a:	fa93 f3a3 	rbit	r3, r3
 800476e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8004772:	4b3b      	ldr	r3, [pc, #236]	; (8004860 <HAL_RCC_OscConfig+0x2f8>)
 8004774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004776:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800477a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800477e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004782:	fa92 f2a2 	rbit	r2, r2
 8004786:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800478a:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800478e:	fab2 f282 	clz	r2, r2
 8004792:	b2d2      	uxtb	r2, r2
 8004794:	f042 0220 	orr.w	r2, r2, #32
 8004798:	b2d2      	uxtb	r2, r2
 800479a:	f002 021f 	and.w	r2, r2, #31
 800479e:	2101      	movs	r1, #1
 80047a0:	fa01 f202 	lsl.w	r2, r1, r2
 80047a4:	4013      	ands	r3, r2
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d0ab      	beq.n	8004702 <HAL_RCC_OscConfig+0x19a>
 80047aa:	e05c      	b.n	8004866 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047ac:	f7fd f984 	bl	8001ab8 <HAL_GetTick>
 80047b0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047b4:	e00a      	b.n	80047cc <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047b6:	f7fd f97f 	bl	8001ab8 <HAL_GetTick>
 80047ba:	4602      	mov	r2, r0
 80047bc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	2b64      	cmp	r3, #100	; 0x64
 80047c4:	d902      	bls.n	80047cc <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	f000 bdcf 	b.w	800536a <HAL_RCC_OscConfig+0xe02>
 80047cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80047d0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047d4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80047d8:	fa93 f3a3 	rbit	r3, r3
 80047dc:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80047e0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047e4:	fab3 f383 	clz	r3, r3
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	095b      	lsrs	r3, r3, #5
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	f043 0301 	orr.w	r3, r3, #1
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d102      	bne.n	80047fe <HAL_RCC_OscConfig+0x296>
 80047f8:	4b19      	ldr	r3, [pc, #100]	; (8004860 <HAL_RCC_OscConfig+0x2f8>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	e015      	b.n	800482a <HAL_RCC_OscConfig+0x2c2>
 80047fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004802:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004806:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800480a:	fa93 f3a3 	rbit	r3, r3
 800480e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004812:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004816:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800481a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800481e:	fa93 f3a3 	rbit	r3, r3
 8004822:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8004826:	4b0e      	ldr	r3, [pc, #56]	; (8004860 <HAL_RCC_OscConfig+0x2f8>)
 8004828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800482e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8004832:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004836:	fa92 f2a2 	rbit	r2, r2
 800483a:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800483e:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8004842:	fab2 f282 	clz	r2, r2
 8004846:	b2d2      	uxtb	r2, r2
 8004848:	f042 0220 	orr.w	r2, r2, #32
 800484c:	b2d2      	uxtb	r2, r2
 800484e:	f002 021f 	and.w	r2, r2, #31
 8004852:	2101      	movs	r1, #1
 8004854:	fa01 f202 	lsl.w	r2, r1, r2
 8004858:	4013      	ands	r3, r2
 800485a:	2b00      	cmp	r3, #0
 800485c:	d1ab      	bne.n	80047b6 <HAL_RCC_OscConfig+0x24e>
 800485e:	e002      	b.n	8004866 <HAL_RCC_OscConfig+0x2fe>
 8004860:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004864:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004866:	1d3b      	adds	r3, r7, #4
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 0302 	and.w	r3, r3, #2
 8004870:	2b00      	cmp	r3, #0
 8004872:	f000 816f 	beq.w	8004b54 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004876:	4bd0      	ldr	r3, [pc, #832]	; (8004bb8 <HAL_RCC_OscConfig+0x650>)
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	f003 030c 	and.w	r3, r3, #12
 800487e:	2b00      	cmp	r3, #0
 8004880:	d00b      	beq.n	800489a <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004882:	4bcd      	ldr	r3, [pc, #820]	; (8004bb8 <HAL_RCC_OscConfig+0x650>)
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	f003 030c 	and.w	r3, r3, #12
 800488a:	2b08      	cmp	r3, #8
 800488c:	d16c      	bne.n	8004968 <HAL_RCC_OscConfig+0x400>
 800488e:	4bca      	ldr	r3, [pc, #808]	; (8004bb8 <HAL_RCC_OscConfig+0x650>)
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004896:	2b00      	cmp	r3, #0
 8004898:	d166      	bne.n	8004968 <HAL_RCC_OscConfig+0x400>
 800489a:	2302      	movs	r3, #2
 800489c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048a0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80048a4:	fa93 f3a3 	rbit	r3, r3
 80048a8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80048ac:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048b0:	fab3 f383 	clz	r3, r3
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	095b      	lsrs	r3, r3, #5
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	f043 0301 	orr.w	r3, r3, #1
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d102      	bne.n	80048ca <HAL_RCC_OscConfig+0x362>
 80048c4:	4bbc      	ldr	r3, [pc, #752]	; (8004bb8 <HAL_RCC_OscConfig+0x650>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	e013      	b.n	80048f2 <HAL_RCC_OscConfig+0x38a>
 80048ca:	2302      	movs	r3, #2
 80048cc:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048d0:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80048d4:	fa93 f3a3 	rbit	r3, r3
 80048d8:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80048dc:	2302      	movs	r3, #2
 80048de:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80048e2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80048e6:	fa93 f3a3 	rbit	r3, r3
 80048ea:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80048ee:	4bb2      	ldr	r3, [pc, #712]	; (8004bb8 <HAL_RCC_OscConfig+0x650>)
 80048f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f2:	2202      	movs	r2, #2
 80048f4:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80048f8:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80048fc:	fa92 f2a2 	rbit	r2, r2
 8004900:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8004904:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8004908:	fab2 f282 	clz	r2, r2
 800490c:	b2d2      	uxtb	r2, r2
 800490e:	f042 0220 	orr.w	r2, r2, #32
 8004912:	b2d2      	uxtb	r2, r2
 8004914:	f002 021f 	and.w	r2, r2, #31
 8004918:	2101      	movs	r1, #1
 800491a:	fa01 f202 	lsl.w	r2, r1, r2
 800491e:	4013      	ands	r3, r2
 8004920:	2b00      	cmp	r3, #0
 8004922:	d007      	beq.n	8004934 <HAL_RCC_OscConfig+0x3cc>
 8004924:	1d3b      	adds	r3, r7, #4
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	691b      	ldr	r3, [r3, #16]
 800492a:	2b01      	cmp	r3, #1
 800492c:	d002      	beq.n	8004934 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	f000 bd1b 	b.w	800536a <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004934:	4ba0      	ldr	r3, [pc, #640]	; (8004bb8 <HAL_RCC_OscConfig+0x650>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800493c:	1d3b      	adds	r3, r7, #4
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	695b      	ldr	r3, [r3, #20]
 8004942:	21f8      	movs	r1, #248	; 0xf8
 8004944:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004948:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800494c:	fa91 f1a1 	rbit	r1, r1
 8004950:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8004954:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8004958:	fab1 f181 	clz	r1, r1
 800495c:	b2c9      	uxtb	r1, r1
 800495e:	408b      	lsls	r3, r1
 8004960:	4995      	ldr	r1, [pc, #596]	; (8004bb8 <HAL_RCC_OscConfig+0x650>)
 8004962:	4313      	orrs	r3, r2
 8004964:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004966:	e0f5      	b.n	8004b54 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004968:	1d3b      	adds	r3, r7, #4
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	691b      	ldr	r3, [r3, #16]
 800496e:	2b00      	cmp	r3, #0
 8004970:	f000 8085 	beq.w	8004a7e <HAL_RCC_OscConfig+0x516>
 8004974:	2301      	movs	r3, #1
 8004976:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800497a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800497e:	fa93 f3a3 	rbit	r3, r3
 8004982:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8004986:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800498a:	fab3 f383 	clz	r3, r3
 800498e:	b2db      	uxtb	r3, r3
 8004990:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004994:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	461a      	mov	r2, r3
 800499c:	2301      	movs	r3, #1
 800499e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049a0:	f7fd f88a 	bl	8001ab8 <HAL_GetTick>
 80049a4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049a8:	e00a      	b.n	80049c0 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049aa:	f7fd f885 	bl	8001ab8 <HAL_GetTick>
 80049ae:	4602      	mov	r2, r0
 80049b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80049b4:	1ad3      	subs	r3, r2, r3
 80049b6:	2b02      	cmp	r3, #2
 80049b8:	d902      	bls.n	80049c0 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80049ba:	2303      	movs	r3, #3
 80049bc:	f000 bcd5 	b.w	800536a <HAL_RCC_OscConfig+0xe02>
 80049c0:	2302      	movs	r3, #2
 80049c2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049c6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80049ca:	fa93 f3a3 	rbit	r3, r3
 80049ce:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80049d2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049d6:	fab3 f383 	clz	r3, r3
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	095b      	lsrs	r3, r3, #5
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	f043 0301 	orr.w	r3, r3, #1
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d102      	bne.n	80049f0 <HAL_RCC_OscConfig+0x488>
 80049ea:	4b73      	ldr	r3, [pc, #460]	; (8004bb8 <HAL_RCC_OscConfig+0x650>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	e013      	b.n	8004a18 <HAL_RCC_OscConfig+0x4b0>
 80049f0:	2302      	movs	r3, #2
 80049f2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049f6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80049fa:	fa93 f3a3 	rbit	r3, r3
 80049fe:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004a02:	2302      	movs	r3, #2
 8004a04:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004a08:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004a0c:	fa93 f3a3 	rbit	r3, r3
 8004a10:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004a14:	4b68      	ldr	r3, [pc, #416]	; (8004bb8 <HAL_RCC_OscConfig+0x650>)
 8004a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a18:	2202      	movs	r2, #2
 8004a1a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8004a1e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004a22:	fa92 f2a2 	rbit	r2, r2
 8004a26:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8004a2a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8004a2e:	fab2 f282 	clz	r2, r2
 8004a32:	b2d2      	uxtb	r2, r2
 8004a34:	f042 0220 	orr.w	r2, r2, #32
 8004a38:	b2d2      	uxtb	r2, r2
 8004a3a:	f002 021f 	and.w	r2, r2, #31
 8004a3e:	2101      	movs	r1, #1
 8004a40:	fa01 f202 	lsl.w	r2, r1, r2
 8004a44:	4013      	ands	r3, r2
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d0af      	beq.n	80049aa <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a4a:	4b5b      	ldr	r3, [pc, #364]	; (8004bb8 <HAL_RCC_OscConfig+0x650>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a52:	1d3b      	adds	r3, r7, #4
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	695b      	ldr	r3, [r3, #20]
 8004a58:	21f8      	movs	r1, #248	; 0xf8
 8004a5a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a5e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004a62:	fa91 f1a1 	rbit	r1, r1
 8004a66:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8004a6a:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8004a6e:	fab1 f181 	clz	r1, r1
 8004a72:	b2c9      	uxtb	r1, r1
 8004a74:	408b      	lsls	r3, r1
 8004a76:	4950      	ldr	r1, [pc, #320]	; (8004bb8 <HAL_RCC_OscConfig+0x650>)
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	600b      	str	r3, [r1, #0]
 8004a7c:	e06a      	b.n	8004b54 <HAL_RCC_OscConfig+0x5ec>
 8004a7e:	2301      	movs	r3, #1
 8004a80:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a84:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004a88:	fa93 f3a3 	rbit	r3, r3
 8004a8c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8004a90:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a94:	fab3 f383 	clz	r3, r3
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004a9e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aaa:	f7fd f805 	bl	8001ab8 <HAL_GetTick>
 8004aae:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ab2:	e00a      	b.n	8004aca <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ab4:	f7fd f800 	bl	8001ab8 <HAL_GetTick>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004abe:	1ad3      	subs	r3, r2, r3
 8004ac0:	2b02      	cmp	r3, #2
 8004ac2:	d902      	bls.n	8004aca <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8004ac4:	2303      	movs	r3, #3
 8004ac6:	f000 bc50 	b.w	800536a <HAL_RCC_OscConfig+0xe02>
 8004aca:	2302      	movs	r3, #2
 8004acc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ad0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004ad4:	fa93 f3a3 	rbit	r3, r3
 8004ad8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8004adc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ae0:	fab3 f383 	clz	r3, r3
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	095b      	lsrs	r3, r3, #5
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	f043 0301 	orr.w	r3, r3, #1
 8004aee:	b2db      	uxtb	r3, r3
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d102      	bne.n	8004afa <HAL_RCC_OscConfig+0x592>
 8004af4:	4b30      	ldr	r3, [pc, #192]	; (8004bb8 <HAL_RCC_OscConfig+0x650>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	e013      	b.n	8004b22 <HAL_RCC_OscConfig+0x5ba>
 8004afa:	2302      	movs	r3, #2
 8004afc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b00:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004b04:	fa93 f3a3 	rbit	r3, r3
 8004b08:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004b0c:	2302      	movs	r3, #2
 8004b0e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004b12:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004b16:	fa93 f3a3 	rbit	r3, r3
 8004b1a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004b1e:	4b26      	ldr	r3, [pc, #152]	; (8004bb8 <HAL_RCC_OscConfig+0x650>)
 8004b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b22:	2202      	movs	r2, #2
 8004b24:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8004b28:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004b2c:	fa92 f2a2 	rbit	r2, r2
 8004b30:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8004b34:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004b38:	fab2 f282 	clz	r2, r2
 8004b3c:	b2d2      	uxtb	r2, r2
 8004b3e:	f042 0220 	orr.w	r2, r2, #32
 8004b42:	b2d2      	uxtb	r2, r2
 8004b44:	f002 021f 	and.w	r2, r2, #31
 8004b48:	2101      	movs	r1, #1
 8004b4a:	fa01 f202 	lsl.w	r2, r1, r2
 8004b4e:	4013      	ands	r3, r2
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d1af      	bne.n	8004ab4 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b54:	1d3b      	adds	r3, r7, #4
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 0308 	and.w	r3, r3, #8
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	f000 80da 	beq.w	8004d18 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b64:	1d3b      	adds	r3, r7, #4
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	699b      	ldr	r3, [r3, #24]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d069      	beq.n	8004c42 <HAL_RCC_OscConfig+0x6da>
 8004b6e:	2301      	movs	r3, #1
 8004b70:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b74:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004b78:	fa93 f3a3 	rbit	r3, r3
 8004b7c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8004b80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b84:	fab3 f383 	clz	r3, r3
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	4b0b      	ldr	r3, [pc, #44]	; (8004bbc <HAL_RCC_OscConfig+0x654>)
 8004b8e:	4413      	add	r3, r2
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	461a      	mov	r2, r3
 8004b94:	2301      	movs	r3, #1
 8004b96:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b98:	f7fc ff8e 	bl	8001ab8 <HAL_GetTick>
 8004b9c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ba0:	e00e      	b.n	8004bc0 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ba2:	f7fc ff89 	bl	8001ab8 <HAL_GetTick>
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	2b02      	cmp	r3, #2
 8004bb0:	d906      	bls.n	8004bc0 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	e3d9      	b.n	800536a <HAL_RCC_OscConfig+0xe02>
 8004bb6:	bf00      	nop
 8004bb8:	40021000 	.word	0x40021000
 8004bbc:	10908120 	.word	0x10908120
 8004bc0:	2302      	movs	r3, #2
 8004bc2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bc6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004bca:	fa93 f3a3 	rbit	r3, r3
 8004bce:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004bd2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8004bd6:	2202      	movs	r2, #2
 8004bd8:	601a      	str	r2, [r3, #0]
 8004bda:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	fa93 f2a3 	rbit	r2, r3
 8004be4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8004be8:	601a      	str	r2, [r3, #0]
 8004bea:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8004bee:	2202      	movs	r2, #2
 8004bf0:	601a      	str	r2, [r3, #0]
 8004bf2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	fa93 f2a3 	rbit	r2, r3
 8004bfc:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8004c00:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c02:	4ba5      	ldr	r3, [pc, #660]	; (8004e98 <HAL_RCC_OscConfig+0x930>)
 8004c04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c06:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8004c0a:	2102      	movs	r1, #2
 8004c0c:	6019      	str	r1, [r3, #0]
 8004c0e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	fa93 f1a3 	rbit	r1, r3
 8004c18:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004c1c:	6019      	str	r1, [r3, #0]
  return result;
 8004c1e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	fab3 f383 	clz	r3, r3
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	f003 031f 	and.w	r3, r3, #31
 8004c34:	2101      	movs	r1, #1
 8004c36:	fa01 f303 	lsl.w	r3, r1, r3
 8004c3a:	4013      	ands	r3, r2
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d0b0      	beq.n	8004ba2 <HAL_RCC_OscConfig+0x63a>
 8004c40:	e06a      	b.n	8004d18 <HAL_RCC_OscConfig+0x7b0>
 8004c42:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8004c46:	2201      	movs	r2, #1
 8004c48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c4a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	fa93 f2a3 	rbit	r2, r3
 8004c54:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004c58:	601a      	str	r2, [r3, #0]
  return result;
 8004c5a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004c5e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c60:	fab3 f383 	clz	r3, r3
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	461a      	mov	r2, r3
 8004c68:	4b8c      	ldr	r3, [pc, #560]	; (8004e9c <HAL_RCC_OscConfig+0x934>)
 8004c6a:	4413      	add	r3, r2
 8004c6c:	009b      	lsls	r3, r3, #2
 8004c6e:	461a      	mov	r2, r3
 8004c70:	2300      	movs	r3, #0
 8004c72:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c74:	f7fc ff20 	bl	8001ab8 <HAL_GetTick>
 8004c78:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c7c:	e009      	b.n	8004c92 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c7e:	f7fc ff1b 	bl	8001ab8 <HAL_GetTick>
 8004c82:	4602      	mov	r2, r0
 8004c84:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004c88:	1ad3      	subs	r3, r2, r3
 8004c8a:	2b02      	cmp	r3, #2
 8004c8c:	d901      	bls.n	8004c92 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	e36b      	b.n	800536a <HAL_RCC_OscConfig+0xe02>
 8004c92:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8004c96:	2202      	movs	r2, #2
 8004c98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c9a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	fa93 f2a3 	rbit	r2, r3
 8004ca4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004ca8:	601a      	str	r2, [r3, #0]
 8004caa:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8004cae:	2202      	movs	r2, #2
 8004cb0:	601a      	str	r2, [r3, #0]
 8004cb2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	fa93 f2a3 	rbit	r2, r3
 8004cbc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004cc0:	601a      	str	r2, [r3, #0]
 8004cc2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8004cc6:	2202      	movs	r2, #2
 8004cc8:	601a      	str	r2, [r3, #0]
 8004cca:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	fa93 f2a3 	rbit	r2, r3
 8004cd4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004cd8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cda:	4b6f      	ldr	r3, [pc, #444]	; (8004e98 <HAL_RCC_OscConfig+0x930>)
 8004cdc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004cde:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004ce2:	2102      	movs	r1, #2
 8004ce4:	6019      	str	r1, [r3, #0]
 8004ce6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	fa93 f1a3 	rbit	r1, r3
 8004cf0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004cf4:	6019      	str	r1, [r3, #0]
  return result;
 8004cf6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	fab3 f383 	clz	r3, r3
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004d06:	b2db      	uxtb	r3, r3
 8004d08:	f003 031f 	and.w	r3, r3, #31
 8004d0c:	2101      	movs	r1, #1
 8004d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8004d12:	4013      	ands	r3, r2
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d1b2      	bne.n	8004c7e <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d18:	1d3b      	adds	r3, r7, #4
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f003 0304 	and.w	r3, r3, #4
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	f000 8158 	beq.w	8004fd8 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d2e:	4b5a      	ldr	r3, [pc, #360]	; (8004e98 <HAL_RCC_OscConfig+0x930>)
 8004d30:	69db      	ldr	r3, [r3, #28]
 8004d32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d112      	bne.n	8004d60 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d3a:	4b57      	ldr	r3, [pc, #348]	; (8004e98 <HAL_RCC_OscConfig+0x930>)
 8004d3c:	69db      	ldr	r3, [r3, #28]
 8004d3e:	4a56      	ldr	r2, [pc, #344]	; (8004e98 <HAL_RCC_OscConfig+0x930>)
 8004d40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d44:	61d3      	str	r3, [r2, #28]
 8004d46:	4b54      	ldr	r3, [pc, #336]	; (8004e98 <HAL_RCC_OscConfig+0x930>)
 8004d48:	69db      	ldr	r3, [r3, #28]
 8004d4a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004d4e:	f107 0308 	add.w	r3, r7, #8
 8004d52:	601a      	str	r2, [r3, #0]
 8004d54:	f107 0308 	add.w	r3, r7, #8
 8004d58:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d60:	4b4f      	ldr	r3, [pc, #316]	; (8004ea0 <HAL_RCC_OscConfig+0x938>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d11a      	bne.n	8004da2 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d6c:	4b4c      	ldr	r3, [pc, #304]	; (8004ea0 <HAL_RCC_OscConfig+0x938>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a4b      	ldr	r2, [pc, #300]	; (8004ea0 <HAL_RCC_OscConfig+0x938>)
 8004d72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d76:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d78:	f7fc fe9e 	bl	8001ab8 <HAL_GetTick>
 8004d7c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d80:	e009      	b.n	8004d96 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d82:	f7fc fe99 	bl	8001ab8 <HAL_GetTick>
 8004d86:	4602      	mov	r2, r0
 8004d88:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	2b64      	cmp	r3, #100	; 0x64
 8004d90:	d901      	bls.n	8004d96 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8004d92:	2303      	movs	r3, #3
 8004d94:	e2e9      	b.n	800536a <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d96:	4b42      	ldr	r3, [pc, #264]	; (8004ea0 <HAL_RCC_OscConfig+0x938>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d0ef      	beq.n	8004d82 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004da2:	1d3b      	adds	r3, r7, #4
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d106      	bne.n	8004dba <HAL_RCC_OscConfig+0x852>
 8004dac:	4b3a      	ldr	r3, [pc, #232]	; (8004e98 <HAL_RCC_OscConfig+0x930>)
 8004dae:	6a1b      	ldr	r3, [r3, #32]
 8004db0:	4a39      	ldr	r2, [pc, #228]	; (8004e98 <HAL_RCC_OscConfig+0x930>)
 8004db2:	f043 0301 	orr.w	r3, r3, #1
 8004db6:	6213      	str	r3, [r2, #32]
 8004db8:	e02f      	b.n	8004e1a <HAL_RCC_OscConfig+0x8b2>
 8004dba:	1d3b      	adds	r3, r7, #4
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	68db      	ldr	r3, [r3, #12]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d10c      	bne.n	8004dde <HAL_RCC_OscConfig+0x876>
 8004dc4:	4b34      	ldr	r3, [pc, #208]	; (8004e98 <HAL_RCC_OscConfig+0x930>)
 8004dc6:	6a1b      	ldr	r3, [r3, #32]
 8004dc8:	4a33      	ldr	r2, [pc, #204]	; (8004e98 <HAL_RCC_OscConfig+0x930>)
 8004dca:	f023 0301 	bic.w	r3, r3, #1
 8004dce:	6213      	str	r3, [r2, #32]
 8004dd0:	4b31      	ldr	r3, [pc, #196]	; (8004e98 <HAL_RCC_OscConfig+0x930>)
 8004dd2:	6a1b      	ldr	r3, [r3, #32]
 8004dd4:	4a30      	ldr	r2, [pc, #192]	; (8004e98 <HAL_RCC_OscConfig+0x930>)
 8004dd6:	f023 0304 	bic.w	r3, r3, #4
 8004dda:	6213      	str	r3, [r2, #32]
 8004ddc:	e01d      	b.n	8004e1a <HAL_RCC_OscConfig+0x8b2>
 8004dde:	1d3b      	adds	r3, r7, #4
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	2b05      	cmp	r3, #5
 8004de6:	d10c      	bne.n	8004e02 <HAL_RCC_OscConfig+0x89a>
 8004de8:	4b2b      	ldr	r3, [pc, #172]	; (8004e98 <HAL_RCC_OscConfig+0x930>)
 8004dea:	6a1b      	ldr	r3, [r3, #32]
 8004dec:	4a2a      	ldr	r2, [pc, #168]	; (8004e98 <HAL_RCC_OscConfig+0x930>)
 8004dee:	f043 0304 	orr.w	r3, r3, #4
 8004df2:	6213      	str	r3, [r2, #32]
 8004df4:	4b28      	ldr	r3, [pc, #160]	; (8004e98 <HAL_RCC_OscConfig+0x930>)
 8004df6:	6a1b      	ldr	r3, [r3, #32]
 8004df8:	4a27      	ldr	r2, [pc, #156]	; (8004e98 <HAL_RCC_OscConfig+0x930>)
 8004dfa:	f043 0301 	orr.w	r3, r3, #1
 8004dfe:	6213      	str	r3, [r2, #32]
 8004e00:	e00b      	b.n	8004e1a <HAL_RCC_OscConfig+0x8b2>
 8004e02:	4b25      	ldr	r3, [pc, #148]	; (8004e98 <HAL_RCC_OscConfig+0x930>)
 8004e04:	6a1b      	ldr	r3, [r3, #32]
 8004e06:	4a24      	ldr	r2, [pc, #144]	; (8004e98 <HAL_RCC_OscConfig+0x930>)
 8004e08:	f023 0301 	bic.w	r3, r3, #1
 8004e0c:	6213      	str	r3, [r2, #32]
 8004e0e:	4b22      	ldr	r3, [pc, #136]	; (8004e98 <HAL_RCC_OscConfig+0x930>)
 8004e10:	6a1b      	ldr	r3, [r3, #32]
 8004e12:	4a21      	ldr	r2, [pc, #132]	; (8004e98 <HAL_RCC_OscConfig+0x930>)
 8004e14:	f023 0304 	bic.w	r3, r3, #4
 8004e18:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e1a:	1d3b      	adds	r3, r7, #4
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	68db      	ldr	r3, [r3, #12]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d06b      	beq.n	8004efc <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e24:	f7fc fe48 	bl	8001ab8 <HAL_GetTick>
 8004e28:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e2c:	e00b      	b.n	8004e46 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e2e:	f7fc fe43 	bl	8001ab8 <HAL_GetTick>
 8004e32:	4602      	mov	r2, r0
 8004e34:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004e38:	1ad3      	subs	r3, r2, r3
 8004e3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d901      	bls.n	8004e46 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8004e42:	2303      	movs	r3, #3
 8004e44:	e291      	b.n	800536a <HAL_RCC_OscConfig+0xe02>
 8004e46:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8004e4a:	2202      	movs	r2, #2
 8004e4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e4e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	fa93 f2a3 	rbit	r2, r3
 8004e58:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004e5c:	601a      	str	r2, [r3, #0]
 8004e5e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004e62:	2202      	movs	r2, #2
 8004e64:	601a      	str	r2, [r3, #0]
 8004e66:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	fa93 f2a3 	rbit	r2, r3
 8004e70:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004e74:	601a      	str	r2, [r3, #0]
  return result;
 8004e76:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004e7a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e7c:	fab3 f383 	clz	r3, r3
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	095b      	lsrs	r3, r3, #5
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	f043 0302 	orr.w	r3, r3, #2
 8004e8a:	b2db      	uxtb	r3, r3
 8004e8c:	2b02      	cmp	r3, #2
 8004e8e:	d109      	bne.n	8004ea4 <HAL_RCC_OscConfig+0x93c>
 8004e90:	4b01      	ldr	r3, [pc, #4]	; (8004e98 <HAL_RCC_OscConfig+0x930>)
 8004e92:	6a1b      	ldr	r3, [r3, #32]
 8004e94:	e014      	b.n	8004ec0 <HAL_RCC_OscConfig+0x958>
 8004e96:	bf00      	nop
 8004e98:	40021000 	.word	0x40021000
 8004e9c:	10908120 	.word	0x10908120
 8004ea0:	40007000 	.word	0x40007000
 8004ea4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004ea8:	2202      	movs	r2, #2
 8004eaa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eac:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	fa93 f2a3 	rbit	r2, r3
 8004eb6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004eba:	601a      	str	r2, [r3, #0]
 8004ebc:	4bbb      	ldr	r3, [pc, #748]	; (80051ac <HAL_RCC_OscConfig+0xc44>)
 8004ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8004ec4:	2102      	movs	r1, #2
 8004ec6:	6011      	str	r1, [r2, #0]
 8004ec8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8004ecc:	6812      	ldr	r2, [r2, #0]
 8004ece:	fa92 f1a2 	rbit	r1, r2
 8004ed2:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8004ed6:	6011      	str	r1, [r2, #0]
  return result;
 8004ed8:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8004edc:	6812      	ldr	r2, [r2, #0]
 8004ede:	fab2 f282 	clz	r2, r2
 8004ee2:	b2d2      	uxtb	r2, r2
 8004ee4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ee8:	b2d2      	uxtb	r2, r2
 8004eea:	f002 021f 	and.w	r2, r2, #31
 8004eee:	2101      	movs	r1, #1
 8004ef0:	fa01 f202 	lsl.w	r2, r1, r2
 8004ef4:	4013      	ands	r3, r2
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d099      	beq.n	8004e2e <HAL_RCC_OscConfig+0x8c6>
 8004efa:	e063      	b.n	8004fc4 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004efc:	f7fc fddc 	bl	8001ab8 <HAL_GetTick>
 8004f00:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f04:	e00b      	b.n	8004f1e <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f06:	f7fc fdd7 	bl	8001ab8 <HAL_GetTick>
 8004f0a:	4602      	mov	r2, r0
 8004f0c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004f10:	1ad3      	subs	r3, r2, r3
 8004f12:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d901      	bls.n	8004f1e <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8004f1a:	2303      	movs	r3, #3
 8004f1c:	e225      	b.n	800536a <HAL_RCC_OscConfig+0xe02>
 8004f1e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004f22:	2202      	movs	r2, #2
 8004f24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f26:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	fa93 f2a3 	rbit	r2, r3
 8004f30:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004f34:	601a      	str	r2, [r3, #0]
 8004f36:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004f3a:	2202      	movs	r2, #2
 8004f3c:	601a      	str	r2, [r3, #0]
 8004f3e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	fa93 f2a3 	rbit	r2, r3
 8004f48:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004f4c:	601a      	str	r2, [r3, #0]
  return result;
 8004f4e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004f52:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f54:	fab3 f383 	clz	r3, r3
 8004f58:	b2db      	uxtb	r3, r3
 8004f5a:	095b      	lsrs	r3, r3, #5
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	f043 0302 	orr.w	r3, r3, #2
 8004f62:	b2db      	uxtb	r3, r3
 8004f64:	2b02      	cmp	r3, #2
 8004f66:	d102      	bne.n	8004f6e <HAL_RCC_OscConfig+0xa06>
 8004f68:	4b90      	ldr	r3, [pc, #576]	; (80051ac <HAL_RCC_OscConfig+0xc44>)
 8004f6a:	6a1b      	ldr	r3, [r3, #32]
 8004f6c:	e00d      	b.n	8004f8a <HAL_RCC_OscConfig+0xa22>
 8004f6e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004f72:	2202      	movs	r2, #2
 8004f74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f76:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	fa93 f2a3 	rbit	r2, r3
 8004f80:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004f84:	601a      	str	r2, [r3, #0]
 8004f86:	4b89      	ldr	r3, [pc, #548]	; (80051ac <HAL_RCC_OscConfig+0xc44>)
 8004f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004f8e:	2102      	movs	r1, #2
 8004f90:	6011      	str	r1, [r2, #0]
 8004f92:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004f96:	6812      	ldr	r2, [r2, #0]
 8004f98:	fa92 f1a2 	rbit	r1, r2
 8004f9c:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8004fa0:	6011      	str	r1, [r2, #0]
  return result;
 8004fa2:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8004fa6:	6812      	ldr	r2, [r2, #0]
 8004fa8:	fab2 f282 	clz	r2, r2
 8004fac:	b2d2      	uxtb	r2, r2
 8004fae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004fb2:	b2d2      	uxtb	r2, r2
 8004fb4:	f002 021f 	and.w	r2, r2, #31
 8004fb8:	2101      	movs	r1, #1
 8004fba:	fa01 f202 	lsl.w	r2, r1, r2
 8004fbe:	4013      	ands	r3, r2
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d1a0      	bne.n	8004f06 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004fc4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	d105      	bne.n	8004fd8 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fcc:	4b77      	ldr	r3, [pc, #476]	; (80051ac <HAL_RCC_OscConfig+0xc44>)
 8004fce:	69db      	ldr	r3, [r3, #28]
 8004fd0:	4a76      	ldr	r2, [pc, #472]	; (80051ac <HAL_RCC_OscConfig+0xc44>)
 8004fd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fd6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004fd8:	1d3b      	adds	r3, r7, #4
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	69db      	ldr	r3, [r3, #28]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	f000 81c2 	beq.w	8005368 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004fe4:	4b71      	ldr	r3, [pc, #452]	; (80051ac <HAL_RCC_OscConfig+0xc44>)
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	f003 030c 	and.w	r3, r3, #12
 8004fec:	2b08      	cmp	r3, #8
 8004fee:	f000 819c 	beq.w	800532a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ff2:	1d3b      	adds	r3, r7, #4
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	69db      	ldr	r3, [r3, #28]
 8004ff8:	2b02      	cmp	r3, #2
 8004ffa:	f040 8114 	bne.w	8005226 <HAL_RCC_OscConfig+0xcbe>
 8004ffe:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005002:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005006:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005008:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	fa93 f2a3 	rbit	r2, r3
 8005012:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005016:	601a      	str	r2, [r3, #0]
  return result;
 8005018:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800501c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800501e:	fab3 f383 	clz	r3, r3
 8005022:	b2db      	uxtb	r3, r3
 8005024:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005028:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800502c:	009b      	lsls	r3, r3, #2
 800502e:	461a      	mov	r2, r3
 8005030:	2300      	movs	r3, #0
 8005032:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005034:	f7fc fd40 	bl	8001ab8 <HAL_GetTick>
 8005038:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800503c:	e009      	b.n	8005052 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800503e:	f7fc fd3b 	bl	8001ab8 <HAL_GetTick>
 8005042:	4602      	mov	r2, r0
 8005044:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005048:	1ad3      	subs	r3, r2, r3
 800504a:	2b02      	cmp	r3, #2
 800504c:	d901      	bls.n	8005052 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 800504e:	2303      	movs	r3, #3
 8005050:	e18b      	b.n	800536a <HAL_RCC_OscConfig+0xe02>
 8005052:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005056:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800505a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800505c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	fa93 f2a3 	rbit	r2, r3
 8005066:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800506a:	601a      	str	r2, [r3, #0]
  return result;
 800506c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005070:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005072:	fab3 f383 	clz	r3, r3
 8005076:	b2db      	uxtb	r3, r3
 8005078:	095b      	lsrs	r3, r3, #5
 800507a:	b2db      	uxtb	r3, r3
 800507c:	f043 0301 	orr.w	r3, r3, #1
 8005080:	b2db      	uxtb	r3, r3
 8005082:	2b01      	cmp	r3, #1
 8005084:	d102      	bne.n	800508c <HAL_RCC_OscConfig+0xb24>
 8005086:	4b49      	ldr	r3, [pc, #292]	; (80051ac <HAL_RCC_OscConfig+0xc44>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	e01b      	b.n	80050c4 <HAL_RCC_OscConfig+0xb5c>
 800508c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005090:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005094:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005096:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	fa93 f2a3 	rbit	r2, r3
 80050a0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80050a4:	601a      	str	r2, [r3, #0]
 80050a6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80050aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80050ae:	601a      	str	r2, [r3, #0]
 80050b0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	fa93 f2a3 	rbit	r2, r3
 80050ba:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80050be:	601a      	str	r2, [r3, #0]
 80050c0:	4b3a      	ldr	r3, [pc, #232]	; (80051ac <HAL_RCC_OscConfig+0xc44>)
 80050c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80050c8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80050cc:	6011      	str	r1, [r2, #0]
 80050ce:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80050d2:	6812      	ldr	r2, [r2, #0]
 80050d4:	fa92 f1a2 	rbit	r1, r2
 80050d8:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80050dc:	6011      	str	r1, [r2, #0]
  return result;
 80050de:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80050e2:	6812      	ldr	r2, [r2, #0]
 80050e4:	fab2 f282 	clz	r2, r2
 80050e8:	b2d2      	uxtb	r2, r2
 80050ea:	f042 0220 	orr.w	r2, r2, #32
 80050ee:	b2d2      	uxtb	r2, r2
 80050f0:	f002 021f 	and.w	r2, r2, #31
 80050f4:	2101      	movs	r1, #1
 80050f6:	fa01 f202 	lsl.w	r2, r1, r2
 80050fa:	4013      	ands	r3, r2
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d19e      	bne.n	800503e <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005100:	4b2a      	ldr	r3, [pc, #168]	; (80051ac <HAL_RCC_OscConfig+0xc44>)
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005108:	1d3b      	adds	r3, r7, #4
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800510e:	1d3b      	adds	r3, r7, #4
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	6a1b      	ldr	r3, [r3, #32]
 8005114:	430b      	orrs	r3, r1
 8005116:	4925      	ldr	r1, [pc, #148]	; (80051ac <HAL_RCC_OscConfig+0xc44>)
 8005118:	4313      	orrs	r3, r2
 800511a:	604b      	str	r3, [r1, #4]
 800511c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005120:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005124:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005126:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	fa93 f2a3 	rbit	r2, r3
 8005130:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005134:	601a      	str	r2, [r3, #0]
  return result;
 8005136:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800513a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800513c:	fab3 f383 	clz	r3, r3
 8005140:	b2db      	uxtb	r3, r3
 8005142:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005146:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	461a      	mov	r2, r3
 800514e:	2301      	movs	r3, #1
 8005150:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005152:	f7fc fcb1 	bl	8001ab8 <HAL_GetTick>
 8005156:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800515a:	e009      	b.n	8005170 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800515c:	f7fc fcac 	bl	8001ab8 <HAL_GetTick>
 8005160:	4602      	mov	r2, r0
 8005162:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005166:	1ad3      	subs	r3, r2, r3
 8005168:	2b02      	cmp	r3, #2
 800516a:	d901      	bls.n	8005170 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 800516c:	2303      	movs	r3, #3
 800516e:	e0fc      	b.n	800536a <HAL_RCC_OscConfig+0xe02>
 8005170:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005174:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005178:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800517a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	fa93 f2a3 	rbit	r2, r3
 8005184:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005188:	601a      	str	r2, [r3, #0]
  return result;
 800518a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800518e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005190:	fab3 f383 	clz	r3, r3
 8005194:	b2db      	uxtb	r3, r3
 8005196:	095b      	lsrs	r3, r3, #5
 8005198:	b2db      	uxtb	r3, r3
 800519a:	f043 0301 	orr.w	r3, r3, #1
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d105      	bne.n	80051b0 <HAL_RCC_OscConfig+0xc48>
 80051a4:	4b01      	ldr	r3, [pc, #4]	; (80051ac <HAL_RCC_OscConfig+0xc44>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	e01e      	b.n	80051e8 <HAL_RCC_OscConfig+0xc80>
 80051aa:	bf00      	nop
 80051ac:	40021000 	.word	0x40021000
 80051b0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80051b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80051b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051ba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	fa93 f2a3 	rbit	r2, r3
 80051c4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80051c8:	601a      	str	r2, [r3, #0]
 80051ca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80051ce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80051d2:	601a      	str	r2, [r3, #0]
 80051d4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	fa93 f2a3 	rbit	r2, r3
 80051de:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80051e2:	601a      	str	r2, [r3, #0]
 80051e4:	4b63      	ldr	r3, [pc, #396]	; (8005374 <HAL_RCC_OscConfig+0xe0c>)
 80051e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80051ec:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80051f0:	6011      	str	r1, [r2, #0]
 80051f2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80051f6:	6812      	ldr	r2, [r2, #0]
 80051f8:	fa92 f1a2 	rbit	r1, r2
 80051fc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8005200:	6011      	str	r1, [r2, #0]
  return result;
 8005202:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8005206:	6812      	ldr	r2, [r2, #0]
 8005208:	fab2 f282 	clz	r2, r2
 800520c:	b2d2      	uxtb	r2, r2
 800520e:	f042 0220 	orr.w	r2, r2, #32
 8005212:	b2d2      	uxtb	r2, r2
 8005214:	f002 021f 	and.w	r2, r2, #31
 8005218:	2101      	movs	r1, #1
 800521a:	fa01 f202 	lsl.w	r2, r1, r2
 800521e:	4013      	ands	r3, r2
 8005220:	2b00      	cmp	r3, #0
 8005222:	d09b      	beq.n	800515c <HAL_RCC_OscConfig+0xbf4>
 8005224:	e0a0      	b.n	8005368 <HAL_RCC_OscConfig+0xe00>
 8005226:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800522a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800522e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005230:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	fa93 f2a3 	rbit	r2, r3
 800523a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800523e:	601a      	str	r2, [r3, #0]
  return result;
 8005240:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005244:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005246:	fab3 f383 	clz	r3, r3
 800524a:	b2db      	uxtb	r3, r3
 800524c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005250:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	461a      	mov	r2, r3
 8005258:	2300      	movs	r3, #0
 800525a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800525c:	f7fc fc2c 	bl	8001ab8 <HAL_GetTick>
 8005260:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005264:	e009      	b.n	800527a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005266:	f7fc fc27 	bl	8001ab8 <HAL_GetTick>
 800526a:	4602      	mov	r2, r0
 800526c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005270:	1ad3      	subs	r3, r2, r3
 8005272:	2b02      	cmp	r3, #2
 8005274:	d901      	bls.n	800527a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8005276:	2303      	movs	r3, #3
 8005278:	e077      	b.n	800536a <HAL_RCC_OscConfig+0xe02>
 800527a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800527e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005282:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005284:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	fa93 f2a3 	rbit	r2, r3
 800528e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005292:	601a      	str	r2, [r3, #0]
  return result;
 8005294:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005298:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800529a:	fab3 f383 	clz	r3, r3
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	095b      	lsrs	r3, r3, #5
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	f043 0301 	orr.w	r3, r3, #1
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	d102      	bne.n	80052b4 <HAL_RCC_OscConfig+0xd4c>
 80052ae:	4b31      	ldr	r3, [pc, #196]	; (8005374 <HAL_RCC_OscConfig+0xe0c>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	e01b      	b.n	80052ec <HAL_RCC_OscConfig+0xd84>
 80052b4:	f107 0320 	add.w	r3, r7, #32
 80052b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80052bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052be:	f107 0320 	add.w	r3, r7, #32
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	fa93 f2a3 	rbit	r2, r3
 80052c8:	f107 031c 	add.w	r3, r7, #28
 80052cc:	601a      	str	r2, [r3, #0]
 80052ce:	f107 0318 	add.w	r3, r7, #24
 80052d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80052d6:	601a      	str	r2, [r3, #0]
 80052d8:	f107 0318 	add.w	r3, r7, #24
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	fa93 f2a3 	rbit	r2, r3
 80052e2:	f107 0314 	add.w	r3, r7, #20
 80052e6:	601a      	str	r2, [r3, #0]
 80052e8:	4b22      	ldr	r3, [pc, #136]	; (8005374 <HAL_RCC_OscConfig+0xe0c>)
 80052ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ec:	f107 0210 	add.w	r2, r7, #16
 80052f0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80052f4:	6011      	str	r1, [r2, #0]
 80052f6:	f107 0210 	add.w	r2, r7, #16
 80052fa:	6812      	ldr	r2, [r2, #0]
 80052fc:	fa92 f1a2 	rbit	r1, r2
 8005300:	f107 020c 	add.w	r2, r7, #12
 8005304:	6011      	str	r1, [r2, #0]
  return result;
 8005306:	f107 020c 	add.w	r2, r7, #12
 800530a:	6812      	ldr	r2, [r2, #0]
 800530c:	fab2 f282 	clz	r2, r2
 8005310:	b2d2      	uxtb	r2, r2
 8005312:	f042 0220 	orr.w	r2, r2, #32
 8005316:	b2d2      	uxtb	r2, r2
 8005318:	f002 021f 	and.w	r2, r2, #31
 800531c:	2101      	movs	r1, #1
 800531e:	fa01 f202 	lsl.w	r2, r1, r2
 8005322:	4013      	ands	r3, r2
 8005324:	2b00      	cmp	r3, #0
 8005326:	d19e      	bne.n	8005266 <HAL_RCC_OscConfig+0xcfe>
 8005328:	e01e      	b.n	8005368 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800532a:	1d3b      	adds	r3, r7, #4
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	69db      	ldr	r3, [r3, #28]
 8005330:	2b01      	cmp	r3, #1
 8005332:	d101      	bne.n	8005338 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	e018      	b.n	800536a <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005338:	4b0e      	ldr	r3, [pc, #56]	; (8005374 <HAL_RCC_OscConfig+0xe0c>)
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005340:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005344:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005348:	1d3b      	adds	r3, r7, #4
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	6a1b      	ldr	r3, [r3, #32]
 800534e:	429a      	cmp	r2, r3
 8005350:	d108      	bne.n	8005364 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8005352:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005356:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800535a:	1d3b      	adds	r3, r7, #4
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005360:	429a      	cmp	r2, r3
 8005362:	d001      	beq.n	8005368 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	e000      	b.n	800536a <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8005368:	2300      	movs	r3, #0
}
 800536a:	4618      	mov	r0, r3
 800536c:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}
 8005374:	40021000 	.word	0x40021000

08005378 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b09e      	sub	sp, #120	; 0x78
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005382:	2300      	movs	r3, #0
 8005384:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d101      	bne.n	8005390 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	e162      	b.n	8005656 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005390:	4b90      	ldr	r3, [pc, #576]	; (80055d4 <HAL_RCC_ClockConfig+0x25c>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f003 0307 	and.w	r3, r3, #7
 8005398:	683a      	ldr	r2, [r7, #0]
 800539a:	429a      	cmp	r2, r3
 800539c:	d910      	bls.n	80053c0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800539e:	4b8d      	ldr	r3, [pc, #564]	; (80055d4 <HAL_RCC_ClockConfig+0x25c>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f023 0207 	bic.w	r2, r3, #7
 80053a6:	498b      	ldr	r1, [pc, #556]	; (80055d4 <HAL_RCC_ClockConfig+0x25c>)
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	4313      	orrs	r3, r2
 80053ac:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053ae:	4b89      	ldr	r3, [pc, #548]	; (80055d4 <HAL_RCC_ClockConfig+0x25c>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f003 0307 	and.w	r3, r3, #7
 80053b6:	683a      	ldr	r2, [r7, #0]
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d001      	beq.n	80053c0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	e14a      	b.n	8005656 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f003 0302 	and.w	r3, r3, #2
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d008      	beq.n	80053de <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053cc:	4b82      	ldr	r3, [pc, #520]	; (80055d8 <HAL_RCC_ClockConfig+0x260>)
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	497f      	ldr	r1, [pc, #508]	; (80055d8 <HAL_RCC_ClockConfig+0x260>)
 80053da:	4313      	orrs	r3, r2
 80053dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f003 0301 	and.w	r3, r3, #1
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	f000 80dc 	beq.w	80055a4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d13c      	bne.n	800546e <HAL_RCC_ClockConfig+0xf6>
 80053f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80053f8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80053fc:	fa93 f3a3 	rbit	r3, r3
 8005400:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005402:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005404:	fab3 f383 	clz	r3, r3
 8005408:	b2db      	uxtb	r3, r3
 800540a:	095b      	lsrs	r3, r3, #5
 800540c:	b2db      	uxtb	r3, r3
 800540e:	f043 0301 	orr.w	r3, r3, #1
 8005412:	b2db      	uxtb	r3, r3
 8005414:	2b01      	cmp	r3, #1
 8005416:	d102      	bne.n	800541e <HAL_RCC_ClockConfig+0xa6>
 8005418:	4b6f      	ldr	r3, [pc, #444]	; (80055d8 <HAL_RCC_ClockConfig+0x260>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	e00f      	b.n	800543e <HAL_RCC_ClockConfig+0xc6>
 800541e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005422:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005424:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005426:	fa93 f3a3 	rbit	r3, r3
 800542a:	667b      	str	r3, [r7, #100]	; 0x64
 800542c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005430:	663b      	str	r3, [r7, #96]	; 0x60
 8005432:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005434:	fa93 f3a3 	rbit	r3, r3
 8005438:	65fb      	str	r3, [r7, #92]	; 0x5c
 800543a:	4b67      	ldr	r3, [pc, #412]	; (80055d8 <HAL_RCC_ClockConfig+0x260>)
 800543c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800543e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005442:	65ba      	str	r2, [r7, #88]	; 0x58
 8005444:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005446:	fa92 f2a2 	rbit	r2, r2
 800544a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800544c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800544e:	fab2 f282 	clz	r2, r2
 8005452:	b2d2      	uxtb	r2, r2
 8005454:	f042 0220 	orr.w	r2, r2, #32
 8005458:	b2d2      	uxtb	r2, r2
 800545a:	f002 021f 	and.w	r2, r2, #31
 800545e:	2101      	movs	r1, #1
 8005460:	fa01 f202 	lsl.w	r2, r1, r2
 8005464:	4013      	ands	r3, r2
 8005466:	2b00      	cmp	r3, #0
 8005468:	d17b      	bne.n	8005562 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	e0f3      	b.n	8005656 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	2b02      	cmp	r3, #2
 8005474:	d13c      	bne.n	80054f0 <HAL_RCC_ClockConfig+0x178>
 8005476:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800547a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800547c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800547e:	fa93 f3a3 	rbit	r3, r3
 8005482:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005484:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005486:	fab3 f383 	clz	r3, r3
 800548a:	b2db      	uxtb	r3, r3
 800548c:	095b      	lsrs	r3, r3, #5
 800548e:	b2db      	uxtb	r3, r3
 8005490:	f043 0301 	orr.w	r3, r3, #1
 8005494:	b2db      	uxtb	r3, r3
 8005496:	2b01      	cmp	r3, #1
 8005498:	d102      	bne.n	80054a0 <HAL_RCC_ClockConfig+0x128>
 800549a:	4b4f      	ldr	r3, [pc, #316]	; (80055d8 <HAL_RCC_ClockConfig+0x260>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	e00f      	b.n	80054c0 <HAL_RCC_ClockConfig+0x148>
 80054a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80054a4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054a8:	fa93 f3a3 	rbit	r3, r3
 80054ac:	647b      	str	r3, [r7, #68]	; 0x44
 80054ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80054b2:	643b      	str	r3, [r7, #64]	; 0x40
 80054b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054b6:	fa93 f3a3 	rbit	r3, r3
 80054ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054bc:	4b46      	ldr	r3, [pc, #280]	; (80055d8 <HAL_RCC_ClockConfig+0x260>)
 80054be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80054c4:	63ba      	str	r2, [r7, #56]	; 0x38
 80054c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80054c8:	fa92 f2a2 	rbit	r2, r2
 80054cc:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80054ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054d0:	fab2 f282 	clz	r2, r2
 80054d4:	b2d2      	uxtb	r2, r2
 80054d6:	f042 0220 	orr.w	r2, r2, #32
 80054da:	b2d2      	uxtb	r2, r2
 80054dc:	f002 021f 	and.w	r2, r2, #31
 80054e0:	2101      	movs	r1, #1
 80054e2:	fa01 f202 	lsl.w	r2, r1, r2
 80054e6:	4013      	ands	r3, r2
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d13a      	bne.n	8005562 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	e0b2      	b.n	8005656 <HAL_RCC_ClockConfig+0x2de>
 80054f0:	2302      	movs	r3, #2
 80054f2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054f6:	fa93 f3a3 	rbit	r3, r3
 80054fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80054fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054fe:	fab3 f383 	clz	r3, r3
 8005502:	b2db      	uxtb	r3, r3
 8005504:	095b      	lsrs	r3, r3, #5
 8005506:	b2db      	uxtb	r3, r3
 8005508:	f043 0301 	orr.w	r3, r3, #1
 800550c:	b2db      	uxtb	r3, r3
 800550e:	2b01      	cmp	r3, #1
 8005510:	d102      	bne.n	8005518 <HAL_RCC_ClockConfig+0x1a0>
 8005512:	4b31      	ldr	r3, [pc, #196]	; (80055d8 <HAL_RCC_ClockConfig+0x260>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	e00d      	b.n	8005534 <HAL_RCC_ClockConfig+0x1bc>
 8005518:	2302      	movs	r3, #2
 800551a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800551c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800551e:	fa93 f3a3 	rbit	r3, r3
 8005522:	627b      	str	r3, [r7, #36]	; 0x24
 8005524:	2302      	movs	r3, #2
 8005526:	623b      	str	r3, [r7, #32]
 8005528:	6a3b      	ldr	r3, [r7, #32]
 800552a:	fa93 f3a3 	rbit	r3, r3
 800552e:	61fb      	str	r3, [r7, #28]
 8005530:	4b29      	ldr	r3, [pc, #164]	; (80055d8 <HAL_RCC_ClockConfig+0x260>)
 8005532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005534:	2202      	movs	r2, #2
 8005536:	61ba      	str	r2, [r7, #24]
 8005538:	69ba      	ldr	r2, [r7, #24]
 800553a:	fa92 f2a2 	rbit	r2, r2
 800553e:	617a      	str	r2, [r7, #20]
  return result;
 8005540:	697a      	ldr	r2, [r7, #20]
 8005542:	fab2 f282 	clz	r2, r2
 8005546:	b2d2      	uxtb	r2, r2
 8005548:	f042 0220 	orr.w	r2, r2, #32
 800554c:	b2d2      	uxtb	r2, r2
 800554e:	f002 021f 	and.w	r2, r2, #31
 8005552:	2101      	movs	r1, #1
 8005554:	fa01 f202 	lsl.w	r2, r1, r2
 8005558:	4013      	ands	r3, r2
 800555a:	2b00      	cmp	r3, #0
 800555c:	d101      	bne.n	8005562 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	e079      	b.n	8005656 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005562:	4b1d      	ldr	r3, [pc, #116]	; (80055d8 <HAL_RCC_ClockConfig+0x260>)
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	f023 0203 	bic.w	r2, r3, #3
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	491a      	ldr	r1, [pc, #104]	; (80055d8 <HAL_RCC_ClockConfig+0x260>)
 8005570:	4313      	orrs	r3, r2
 8005572:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005574:	f7fc faa0 	bl	8001ab8 <HAL_GetTick>
 8005578:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800557a:	e00a      	b.n	8005592 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800557c:	f7fc fa9c 	bl	8001ab8 <HAL_GetTick>
 8005580:	4602      	mov	r2, r0
 8005582:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005584:	1ad3      	subs	r3, r2, r3
 8005586:	f241 3288 	movw	r2, #5000	; 0x1388
 800558a:	4293      	cmp	r3, r2
 800558c:	d901      	bls.n	8005592 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800558e:	2303      	movs	r3, #3
 8005590:	e061      	b.n	8005656 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005592:	4b11      	ldr	r3, [pc, #68]	; (80055d8 <HAL_RCC_ClockConfig+0x260>)
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	f003 020c 	and.w	r2, r3, #12
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	009b      	lsls	r3, r3, #2
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d1eb      	bne.n	800557c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80055a4:	4b0b      	ldr	r3, [pc, #44]	; (80055d4 <HAL_RCC_ClockConfig+0x25c>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 0307 	and.w	r3, r3, #7
 80055ac:	683a      	ldr	r2, [r7, #0]
 80055ae:	429a      	cmp	r2, r3
 80055b0:	d214      	bcs.n	80055dc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055b2:	4b08      	ldr	r3, [pc, #32]	; (80055d4 <HAL_RCC_ClockConfig+0x25c>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f023 0207 	bic.w	r2, r3, #7
 80055ba:	4906      	ldr	r1, [pc, #24]	; (80055d4 <HAL_RCC_ClockConfig+0x25c>)
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	4313      	orrs	r3, r2
 80055c0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80055c2:	4b04      	ldr	r3, [pc, #16]	; (80055d4 <HAL_RCC_ClockConfig+0x25c>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f003 0307 	and.w	r3, r3, #7
 80055ca:	683a      	ldr	r2, [r7, #0]
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d005      	beq.n	80055dc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80055d0:	2301      	movs	r3, #1
 80055d2:	e040      	b.n	8005656 <HAL_RCC_ClockConfig+0x2de>
 80055d4:	40022000 	.word	0x40022000
 80055d8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f003 0304 	and.w	r3, r3, #4
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d008      	beq.n	80055fa <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80055e8:	4b1d      	ldr	r3, [pc, #116]	; (8005660 <HAL_RCC_ClockConfig+0x2e8>)
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	68db      	ldr	r3, [r3, #12]
 80055f4:	491a      	ldr	r1, [pc, #104]	; (8005660 <HAL_RCC_ClockConfig+0x2e8>)
 80055f6:	4313      	orrs	r3, r2
 80055f8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f003 0308 	and.w	r3, r3, #8
 8005602:	2b00      	cmp	r3, #0
 8005604:	d009      	beq.n	800561a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005606:	4b16      	ldr	r3, [pc, #88]	; (8005660 <HAL_RCC_ClockConfig+0x2e8>)
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	691b      	ldr	r3, [r3, #16]
 8005612:	00db      	lsls	r3, r3, #3
 8005614:	4912      	ldr	r1, [pc, #72]	; (8005660 <HAL_RCC_ClockConfig+0x2e8>)
 8005616:	4313      	orrs	r3, r2
 8005618:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800561a:	f000 f829 	bl	8005670 <HAL_RCC_GetSysClockFreq>
 800561e:	4601      	mov	r1, r0
 8005620:	4b0f      	ldr	r3, [pc, #60]	; (8005660 <HAL_RCC_ClockConfig+0x2e8>)
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005628:	22f0      	movs	r2, #240	; 0xf0
 800562a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800562c:	693a      	ldr	r2, [r7, #16]
 800562e:	fa92 f2a2 	rbit	r2, r2
 8005632:	60fa      	str	r2, [r7, #12]
  return result;
 8005634:	68fa      	ldr	r2, [r7, #12]
 8005636:	fab2 f282 	clz	r2, r2
 800563a:	b2d2      	uxtb	r2, r2
 800563c:	40d3      	lsrs	r3, r2
 800563e:	4a09      	ldr	r2, [pc, #36]	; (8005664 <HAL_RCC_ClockConfig+0x2ec>)
 8005640:	5cd3      	ldrb	r3, [r2, r3]
 8005642:	fa21 f303 	lsr.w	r3, r1, r3
 8005646:	4a08      	ldr	r2, [pc, #32]	; (8005668 <HAL_RCC_ClockConfig+0x2f0>)
 8005648:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800564a:	4b08      	ldr	r3, [pc, #32]	; (800566c <HAL_RCC_ClockConfig+0x2f4>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4618      	mov	r0, r3
 8005650:	f7fc f9ee 	bl	8001a30 <HAL_InitTick>
  
  return HAL_OK;
 8005654:	2300      	movs	r3, #0
}
 8005656:	4618      	mov	r0, r3
 8005658:	3778      	adds	r7, #120	; 0x78
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}
 800565e:	bf00      	nop
 8005660:	40021000 	.word	0x40021000
 8005664:	0800e1e8 	.word	0x0800e1e8
 8005668:	20000000 	.word	0x20000000
 800566c:	20000004 	.word	0x20000004

08005670 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005670:	b480      	push	{r7}
 8005672:	b08b      	sub	sp, #44	; 0x2c
 8005674:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005676:	2300      	movs	r3, #0
 8005678:	61fb      	str	r3, [r7, #28]
 800567a:	2300      	movs	r3, #0
 800567c:	61bb      	str	r3, [r7, #24]
 800567e:	2300      	movs	r3, #0
 8005680:	627b      	str	r3, [r7, #36]	; 0x24
 8005682:	2300      	movs	r3, #0
 8005684:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005686:	2300      	movs	r3, #0
 8005688:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800568a:	4b29      	ldr	r3, [pc, #164]	; (8005730 <HAL_RCC_GetSysClockFreq+0xc0>)
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005690:	69fb      	ldr	r3, [r7, #28]
 8005692:	f003 030c 	and.w	r3, r3, #12
 8005696:	2b04      	cmp	r3, #4
 8005698:	d002      	beq.n	80056a0 <HAL_RCC_GetSysClockFreq+0x30>
 800569a:	2b08      	cmp	r3, #8
 800569c:	d003      	beq.n	80056a6 <HAL_RCC_GetSysClockFreq+0x36>
 800569e:	e03c      	b.n	800571a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80056a0:	4b24      	ldr	r3, [pc, #144]	; (8005734 <HAL_RCC_GetSysClockFreq+0xc4>)
 80056a2:	623b      	str	r3, [r7, #32]
      break;
 80056a4:	e03c      	b.n	8005720 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80056a6:	69fb      	ldr	r3, [r7, #28]
 80056a8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80056ac:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80056b0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056b2:	68ba      	ldr	r2, [r7, #8]
 80056b4:	fa92 f2a2 	rbit	r2, r2
 80056b8:	607a      	str	r2, [r7, #4]
  return result;
 80056ba:	687a      	ldr	r2, [r7, #4]
 80056bc:	fab2 f282 	clz	r2, r2
 80056c0:	b2d2      	uxtb	r2, r2
 80056c2:	40d3      	lsrs	r3, r2
 80056c4:	4a1c      	ldr	r2, [pc, #112]	; (8005738 <HAL_RCC_GetSysClockFreq+0xc8>)
 80056c6:	5cd3      	ldrb	r3, [r2, r3]
 80056c8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80056ca:	4b19      	ldr	r3, [pc, #100]	; (8005730 <HAL_RCC_GetSysClockFreq+0xc0>)
 80056cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ce:	f003 030f 	and.w	r3, r3, #15
 80056d2:	220f      	movs	r2, #15
 80056d4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056d6:	693a      	ldr	r2, [r7, #16]
 80056d8:	fa92 f2a2 	rbit	r2, r2
 80056dc:	60fa      	str	r2, [r7, #12]
  return result;
 80056de:	68fa      	ldr	r2, [r7, #12]
 80056e0:	fab2 f282 	clz	r2, r2
 80056e4:	b2d2      	uxtb	r2, r2
 80056e6:	40d3      	lsrs	r3, r2
 80056e8:	4a14      	ldr	r2, [pc, #80]	; (800573c <HAL_RCC_GetSysClockFreq+0xcc>)
 80056ea:	5cd3      	ldrb	r3, [r2, r3]
 80056ec:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80056ee:	69fb      	ldr	r3, [r7, #28]
 80056f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d008      	beq.n	800570a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80056f8:	4a0e      	ldr	r2, [pc, #56]	; (8005734 <HAL_RCC_GetSysClockFreq+0xc4>)
 80056fa:	69bb      	ldr	r3, [r7, #24]
 80056fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	fb02 f303 	mul.w	r3, r2, r3
 8005706:	627b      	str	r3, [r7, #36]	; 0x24
 8005708:	e004      	b.n	8005714 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	4a0c      	ldr	r2, [pc, #48]	; (8005740 <HAL_RCC_GetSysClockFreq+0xd0>)
 800570e:	fb02 f303 	mul.w	r3, r2, r3
 8005712:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005716:	623b      	str	r3, [r7, #32]
      break;
 8005718:	e002      	b.n	8005720 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800571a:	4b06      	ldr	r3, [pc, #24]	; (8005734 <HAL_RCC_GetSysClockFreq+0xc4>)
 800571c:	623b      	str	r3, [r7, #32]
      break;
 800571e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005720:	6a3b      	ldr	r3, [r7, #32]
}
 8005722:	4618      	mov	r0, r3
 8005724:	372c      	adds	r7, #44	; 0x2c
 8005726:	46bd      	mov	sp, r7
 8005728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572c:	4770      	bx	lr
 800572e:	bf00      	nop
 8005730:	40021000 	.word	0x40021000
 8005734:	007a1200 	.word	0x007a1200
 8005738:	0800e1f8 	.word	0x0800e1f8
 800573c:	0800e208 	.word	0x0800e208
 8005740:	003d0900 	.word	0x003d0900

08005744 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b092      	sub	sp, #72	; 0x48
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800574c:	2300      	movs	r3, #0
 800574e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005750:	2300      	movs	r3, #0
 8005752:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005754:	2300      	movs	r3, #0
 8005756:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005762:	2b00      	cmp	r3, #0
 8005764:	f000 80d4 	beq.w	8005910 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005768:	4b4e      	ldr	r3, [pc, #312]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800576a:	69db      	ldr	r3, [r3, #28]
 800576c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005770:	2b00      	cmp	r3, #0
 8005772:	d10e      	bne.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005774:	4b4b      	ldr	r3, [pc, #300]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005776:	69db      	ldr	r3, [r3, #28]
 8005778:	4a4a      	ldr	r2, [pc, #296]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800577a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800577e:	61d3      	str	r3, [r2, #28]
 8005780:	4b48      	ldr	r3, [pc, #288]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005782:	69db      	ldr	r3, [r3, #28]
 8005784:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005788:	60bb      	str	r3, [r7, #8]
 800578a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800578c:	2301      	movs	r3, #1
 800578e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005792:	4b45      	ldr	r3, [pc, #276]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800579a:	2b00      	cmp	r3, #0
 800579c:	d118      	bne.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800579e:	4b42      	ldr	r3, [pc, #264]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a41      	ldr	r2, [pc, #260]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80057a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057a8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057aa:	f7fc f985 	bl	8001ab8 <HAL_GetTick>
 80057ae:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057b0:	e008      	b.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057b2:	f7fc f981 	bl	8001ab8 <HAL_GetTick>
 80057b6:	4602      	mov	r2, r0
 80057b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057ba:	1ad3      	subs	r3, r2, r3
 80057bc:	2b64      	cmp	r3, #100	; 0x64
 80057be:	d901      	bls.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80057c0:	2303      	movs	r3, #3
 80057c2:	e169      	b.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057c4:	4b38      	ldr	r3, [pc, #224]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d0f0      	beq.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80057d0:	4b34      	ldr	r3, [pc, #208]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057d2:	6a1b      	ldr	r3, [r3, #32]
 80057d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057d8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80057da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057dc:	2b00      	cmp	r3, #0
 80057de:	f000 8084 	beq.w	80058ea <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80057ec:	429a      	cmp	r2, r3
 80057ee:	d07c      	beq.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80057f0:	4b2c      	ldr	r3, [pc, #176]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057f2:	6a1b      	ldr	r3, [r3, #32]
 80057f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80057fe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005802:	fa93 f3a3 	rbit	r3, r3
 8005806:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800580a:	fab3 f383 	clz	r3, r3
 800580e:	b2db      	uxtb	r3, r3
 8005810:	461a      	mov	r2, r3
 8005812:	4b26      	ldr	r3, [pc, #152]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005814:	4413      	add	r3, r2
 8005816:	009b      	lsls	r3, r3, #2
 8005818:	461a      	mov	r2, r3
 800581a:	2301      	movs	r3, #1
 800581c:	6013      	str	r3, [r2, #0]
 800581e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005822:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005826:	fa93 f3a3 	rbit	r3, r3
 800582a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800582c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800582e:	fab3 f383 	clz	r3, r3
 8005832:	b2db      	uxtb	r3, r3
 8005834:	461a      	mov	r2, r3
 8005836:	4b1d      	ldr	r3, [pc, #116]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005838:	4413      	add	r3, r2
 800583a:	009b      	lsls	r3, r3, #2
 800583c:	461a      	mov	r2, r3
 800583e:	2300      	movs	r3, #0
 8005840:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005842:	4a18      	ldr	r2, [pc, #96]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005844:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005846:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005848:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800584a:	f003 0301 	and.w	r3, r3, #1
 800584e:	2b00      	cmp	r3, #0
 8005850:	d04b      	beq.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005852:	f7fc f931 	bl	8001ab8 <HAL_GetTick>
 8005856:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005858:	e00a      	b.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800585a:	f7fc f92d 	bl	8001ab8 <HAL_GetTick>
 800585e:	4602      	mov	r2, r0
 8005860:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005862:	1ad3      	subs	r3, r2, r3
 8005864:	f241 3288 	movw	r2, #5000	; 0x1388
 8005868:	4293      	cmp	r3, r2
 800586a:	d901      	bls.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800586c:	2303      	movs	r3, #3
 800586e:	e113      	b.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8005870:	2302      	movs	r3, #2
 8005872:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005876:	fa93 f3a3 	rbit	r3, r3
 800587a:	627b      	str	r3, [r7, #36]	; 0x24
 800587c:	2302      	movs	r3, #2
 800587e:	623b      	str	r3, [r7, #32]
 8005880:	6a3b      	ldr	r3, [r7, #32]
 8005882:	fa93 f3a3 	rbit	r3, r3
 8005886:	61fb      	str	r3, [r7, #28]
  return result;
 8005888:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800588a:	fab3 f383 	clz	r3, r3
 800588e:	b2db      	uxtb	r3, r3
 8005890:	095b      	lsrs	r3, r3, #5
 8005892:	b2db      	uxtb	r3, r3
 8005894:	f043 0302 	orr.w	r3, r3, #2
 8005898:	b2db      	uxtb	r3, r3
 800589a:	2b02      	cmp	r3, #2
 800589c:	d108      	bne.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800589e:	4b01      	ldr	r3, [pc, #4]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058a0:	6a1b      	ldr	r3, [r3, #32]
 80058a2:	e00d      	b.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80058a4:	40021000 	.word	0x40021000
 80058a8:	40007000 	.word	0x40007000
 80058ac:	10908100 	.word	0x10908100
 80058b0:	2302      	movs	r3, #2
 80058b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058b4:	69bb      	ldr	r3, [r7, #24]
 80058b6:	fa93 f3a3 	rbit	r3, r3
 80058ba:	617b      	str	r3, [r7, #20]
 80058bc:	4b78      	ldr	r3, [pc, #480]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c0:	2202      	movs	r2, #2
 80058c2:	613a      	str	r2, [r7, #16]
 80058c4:	693a      	ldr	r2, [r7, #16]
 80058c6:	fa92 f2a2 	rbit	r2, r2
 80058ca:	60fa      	str	r2, [r7, #12]
  return result;
 80058cc:	68fa      	ldr	r2, [r7, #12]
 80058ce:	fab2 f282 	clz	r2, r2
 80058d2:	b2d2      	uxtb	r2, r2
 80058d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058d8:	b2d2      	uxtb	r2, r2
 80058da:	f002 021f 	and.w	r2, r2, #31
 80058de:	2101      	movs	r1, #1
 80058e0:	fa01 f202 	lsl.w	r2, r1, r2
 80058e4:	4013      	ands	r3, r2
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d0b7      	beq.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80058ea:	4b6d      	ldr	r3, [pc, #436]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058ec:	6a1b      	ldr	r3, [r3, #32]
 80058ee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	496a      	ldr	r1, [pc, #424]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058f8:	4313      	orrs	r3, r2
 80058fa:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80058fc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005900:	2b01      	cmp	r3, #1
 8005902:	d105      	bne.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005904:	4b66      	ldr	r3, [pc, #408]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005906:	69db      	ldr	r3, [r3, #28]
 8005908:	4a65      	ldr	r2, [pc, #404]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800590a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800590e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f003 0301 	and.w	r3, r3, #1
 8005918:	2b00      	cmp	r3, #0
 800591a:	d008      	beq.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800591c:	4b60      	ldr	r3, [pc, #384]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800591e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005920:	f023 0203 	bic.w	r2, r3, #3
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	495d      	ldr	r1, [pc, #372]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800592a:	4313      	orrs	r3, r2
 800592c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f003 0302 	and.w	r3, r3, #2
 8005936:	2b00      	cmp	r3, #0
 8005938:	d008      	beq.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800593a:	4b59      	ldr	r3, [pc, #356]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800593c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800593e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	68db      	ldr	r3, [r3, #12]
 8005946:	4956      	ldr	r1, [pc, #344]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005948:	4313      	orrs	r3, r2
 800594a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f003 0304 	and.w	r3, r3, #4
 8005954:	2b00      	cmp	r3, #0
 8005956:	d008      	beq.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005958:	4b51      	ldr	r3, [pc, #324]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800595a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800595c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	691b      	ldr	r3, [r3, #16]
 8005964:	494e      	ldr	r1, [pc, #312]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005966:	4313      	orrs	r3, r2
 8005968:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f003 0320 	and.w	r3, r3, #32
 8005972:	2b00      	cmp	r3, #0
 8005974:	d008      	beq.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005976:	4b4a      	ldr	r3, [pc, #296]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800597a:	f023 0210 	bic.w	r2, r3, #16
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	69db      	ldr	r3, [r3, #28]
 8005982:	4947      	ldr	r1, [pc, #284]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005984:	4313      	orrs	r3, r2
 8005986:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005990:	2b00      	cmp	r3, #0
 8005992:	d008      	beq.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005994:	4b42      	ldr	r3, [pc, #264]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059a0:	493f      	ldr	r1, [pc, #252]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059a2:	4313      	orrs	r3, r2
 80059a4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d008      	beq.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80059b2:	4b3b      	ldr	r3, [pc, #236]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059b6:	f023 0220 	bic.w	r2, r3, #32
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6a1b      	ldr	r3, [r3, #32]
 80059be:	4938      	ldr	r1, [pc, #224]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059c0:	4313      	orrs	r3, r2
 80059c2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f003 0308 	and.w	r3, r3, #8
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d008      	beq.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80059d0:	4b33      	ldr	r3, [pc, #204]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	695b      	ldr	r3, [r3, #20]
 80059dc:	4930      	ldr	r1, [pc, #192]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059de:	4313      	orrs	r3, r2
 80059e0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f003 0310 	and.w	r3, r3, #16
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d008      	beq.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80059ee:	4b2c      	ldr	r3, [pc, #176]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059f2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	699b      	ldr	r3, [r3, #24]
 80059fa:	4929      	ldr	r1, [pc, #164]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059fc:	4313      	orrs	r3, r2
 80059fe:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d008      	beq.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005a0c:	4b24      	ldr	r3, [pc, #144]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a18:	4921      	ldr	r1, [pc, #132]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d008      	beq.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005a2a:	4b1d      	ldr	r3, [pc, #116]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a2e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a36:	491a      	ldr	r1, [pc, #104]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d008      	beq.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8005a48:	4b15      	ldr	r3, [pc, #84]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a4c:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a54:	4912      	ldr	r1, [pc, #72]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a56:	4313      	orrs	r3, r2
 8005a58:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d008      	beq.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005a66:	4b0e      	ldr	r3, [pc, #56]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a6a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a72:	490b      	ldr	r1, [pc, #44]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a74:	4313      	orrs	r3, r2
 8005a76:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d008      	beq.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8005a84:	4b06      	ldr	r3, [pc, #24]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a88:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a90:	4903      	ldr	r1, [pc, #12]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a92:	4313      	orrs	r3, r2
 8005a94:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005a96:	2300      	movs	r3, #0
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3748      	adds	r7, #72	; 0x48
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}
 8005aa0:	40021000 	.word	0x40021000

08005aa4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b084      	sub	sp, #16
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d101      	bne.n	8005ab6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e09d      	b.n	8005bf2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d108      	bne.n	8005ad0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ac6:	d009      	beq.n	8005adc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2200      	movs	r2, #0
 8005acc:	61da      	str	r2, [r3, #28]
 8005ace:	e005      	b.n	8005adc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005ae8:	b2db      	uxtb	r3, r3
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d106      	bne.n	8005afc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2200      	movs	r2, #0
 8005af2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f7fb fdec 	bl	80016d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2202      	movs	r2, #2
 8005b00:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	681a      	ldr	r2, [r3, #0]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b12:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	68db      	ldr	r3, [r3, #12]
 8005b18:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005b1c:	d902      	bls.n	8005b24 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	60fb      	str	r3, [r7, #12]
 8005b22:	e002      	b.n	8005b2a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005b24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005b28:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	68db      	ldr	r3, [r3, #12]
 8005b2e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005b32:	d007      	beq.n	8005b44 <HAL_SPI_Init+0xa0>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	68db      	ldr	r3, [r3, #12]
 8005b38:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005b3c:	d002      	beq.n	8005b44 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2200      	movs	r2, #0
 8005b42:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005b54:	431a      	orrs	r2, r3
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	691b      	ldr	r3, [r3, #16]
 8005b5a:	f003 0302 	and.w	r3, r3, #2
 8005b5e:	431a      	orrs	r2, r3
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	695b      	ldr	r3, [r3, #20]
 8005b64:	f003 0301 	and.w	r3, r3, #1
 8005b68:	431a      	orrs	r2, r3
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	699b      	ldr	r3, [r3, #24]
 8005b6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b72:	431a      	orrs	r2, r3
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	69db      	ldr	r3, [r3, #28]
 8005b78:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005b7c:	431a      	orrs	r2, r3
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6a1b      	ldr	r3, [r3, #32]
 8005b82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b86:	ea42 0103 	orr.w	r1, r2, r3
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b8e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	430a      	orrs	r2, r1
 8005b98:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	699b      	ldr	r3, [r3, #24]
 8005b9e:	0c1b      	lsrs	r3, r3, #16
 8005ba0:	f003 0204 	and.w	r2, r3, #4
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba8:	f003 0310 	and.w	r3, r3, #16
 8005bac:	431a      	orrs	r2, r3
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bb2:	f003 0308 	and.w	r3, r3, #8
 8005bb6:	431a      	orrs	r2, r3
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	68db      	ldr	r3, [r3, #12]
 8005bbc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005bc0:	ea42 0103 	orr.w	r1, r2, r3
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	430a      	orrs	r2, r1
 8005bd0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	69da      	ldr	r2, [r3, #28]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005be0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2200      	movs	r2, #0
 8005be6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2201      	movs	r2, #1
 8005bec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005bf0:	2300      	movs	r3, #0
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3710      	adds	r7, #16
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}

08005bfa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005bfa:	b580      	push	{r7, lr}
 8005bfc:	b082      	sub	sp, #8
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d101      	bne.n	8005c0c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	e049      	b.n	8005ca0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c12:	b2db      	uxtb	r3, r3
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d106      	bne.n	8005c26 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f7fb fd99 	bl	8001758 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2202      	movs	r2, #2
 8005c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	3304      	adds	r3, #4
 8005c36:	4619      	mov	r1, r3
 8005c38:	4610      	mov	r0, r2
 8005c3a:	f000 f961 	bl	8005f00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2201      	movs	r2, #1
 8005c42:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2201      	movs	r2, #1
 8005c4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2201      	movs	r2, #1
 8005c52:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2201      	movs	r2, #1
 8005c5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2201      	movs	r2, #1
 8005c62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2201      	movs	r2, #1
 8005c6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2201      	movs	r2, #1
 8005c72:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2201      	movs	r2, #1
 8005c7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2201      	movs	r2, #1
 8005c82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2201      	movs	r2, #1
 8005c8a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2201      	movs	r2, #1
 8005c92:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2201      	movs	r2, #1
 8005c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c9e:	2300      	movs	r3, #0
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3708      	adds	r7, #8
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}

08005ca8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b085      	sub	sp, #20
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cb6:	b2db      	uxtb	r3, r3
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d001      	beq.n	8005cc0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	e042      	b.n	8005d46 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2202      	movs	r2, #2
 8005cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a21      	ldr	r2, [pc, #132]	; (8005d54 <HAL_TIM_Base_Start+0xac>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d018      	beq.n	8005d04 <HAL_TIM_Base_Start+0x5c>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cda:	d013      	beq.n	8005d04 <HAL_TIM_Base_Start+0x5c>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a1d      	ldr	r2, [pc, #116]	; (8005d58 <HAL_TIM_Base_Start+0xb0>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d00e      	beq.n	8005d04 <HAL_TIM_Base_Start+0x5c>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a1c      	ldr	r2, [pc, #112]	; (8005d5c <HAL_TIM_Base_Start+0xb4>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d009      	beq.n	8005d04 <HAL_TIM_Base_Start+0x5c>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a1a      	ldr	r2, [pc, #104]	; (8005d60 <HAL_TIM_Base_Start+0xb8>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d004      	beq.n	8005d04 <HAL_TIM_Base_Start+0x5c>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a19      	ldr	r2, [pc, #100]	; (8005d64 <HAL_TIM_Base_Start+0xbc>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d115      	bne.n	8005d30 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	689a      	ldr	r2, [r3, #8]
 8005d0a:	4b17      	ldr	r3, [pc, #92]	; (8005d68 <HAL_TIM_Base_Start+0xc0>)
 8005d0c:	4013      	ands	r3, r2
 8005d0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2b06      	cmp	r3, #6
 8005d14:	d015      	beq.n	8005d42 <HAL_TIM_Base_Start+0x9a>
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d1c:	d011      	beq.n	8005d42 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f042 0201 	orr.w	r2, r2, #1
 8005d2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d2e:	e008      	b.n	8005d42 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	681a      	ldr	r2, [r3, #0]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f042 0201 	orr.w	r2, r2, #1
 8005d3e:	601a      	str	r2, [r3, #0]
 8005d40:	e000      	b.n	8005d44 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d42:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005d44:	2300      	movs	r3, #0
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3714      	adds	r7, #20
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d50:	4770      	bx	lr
 8005d52:	bf00      	nop
 8005d54:	40012c00 	.word	0x40012c00
 8005d58:	40000400 	.word	0x40000400
 8005d5c:	40000800 	.word	0x40000800
 8005d60:	40013400 	.word	0x40013400
 8005d64:	40014000 	.word	0x40014000
 8005d68:	00010007 	.word	0x00010007

08005d6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b084      	sub	sp, #16
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
 8005d74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d76:	2300      	movs	r3, #0
 8005d78:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d101      	bne.n	8005d88 <HAL_TIM_ConfigClockSource+0x1c>
 8005d84:	2302      	movs	r3, #2
 8005d86:	e0b6      	b.n	8005ef6 <HAL_TIM_ConfigClockSource+0x18a>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2202      	movs	r2, #2
 8005d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	689b      	ldr	r3, [r3, #8]
 8005d9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005da6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005daa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005db2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	68ba      	ldr	r2, [r7, #8]
 8005dba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005dc4:	d03e      	beq.n	8005e44 <HAL_TIM_ConfigClockSource+0xd8>
 8005dc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005dca:	f200 8087 	bhi.w	8005edc <HAL_TIM_ConfigClockSource+0x170>
 8005dce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dd2:	f000 8086 	beq.w	8005ee2 <HAL_TIM_ConfigClockSource+0x176>
 8005dd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dda:	d87f      	bhi.n	8005edc <HAL_TIM_ConfigClockSource+0x170>
 8005ddc:	2b70      	cmp	r3, #112	; 0x70
 8005dde:	d01a      	beq.n	8005e16 <HAL_TIM_ConfigClockSource+0xaa>
 8005de0:	2b70      	cmp	r3, #112	; 0x70
 8005de2:	d87b      	bhi.n	8005edc <HAL_TIM_ConfigClockSource+0x170>
 8005de4:	2b60      	cmp	r3, #96	; 0x60
 8005de6:	d050      	beq.n	8005e8a <HAL_TIM_ConfigClockSource+0x11e>
 8005de8:	2b60      	cmp	r3, #96	; 0x60
 8005dea:	d877      	bhi.n	8005edc <HAL_TIM_ConfigClockSource+0x170>
 8005dec:	2b50      	cmp	r3, #80	; 0x50
 8005dee:	d03c      	beq.n	8005e6a <HAL_TIM_ConfigClockSource+0xfe>
 8005df0:	2b50      	cmp	r3, #80	; 0x50
 8005df2:	d873      	bhi.n	8005edc <HAL_TIM_ConfigClockSource+0x170>
 8005df4:	2b40      	cmp	r3, #64	; 0x40
 8005df6:	d058      	beq.n	8005eaa <HAL_TIM_ConfigClockSource+0x13e>
 8005df8:	2b40      	cmp	r3, #64	; 0x40
 8005dfa:	d86f      	bhi.n	8005edc <HAL_TIM_ConfigClockSource+0x170>
 8005dfc:	2b30      	cmp	r3, #48	; 0x30
 8005dfe:	d064      	beq.n	8005eca <HAL_TIM_ConfigClockSource+0x15e>
 8005e00:	2b30      	cmp	r3, #48	; 0x30
 8005e02:	d86b      	bhi.n	8005edc <HAL_TIM_ConfigClockSource+0x170>
 8005e04:	2b20      	cmp	r3, #32
 8005e06:	d060      	beq.n	8005eca <HAL_TIM_ConfigClockSource+0x15e>
 8005e08:	2b20      	cmp	r3, #32
 8005e0a:	d867      	bhi.n	8005edc <HAL_TIM_ConfigClockSource+0x170>
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d05c      	beq.n	8005eca <HAL_TIM_ConfigClockSource+0x15e>
 8005e10:	2b10      	cmp	r3, #16
 8005e12:	d05a      	beq.n	8005eca <HAL_TIM_ConfigClockSource+0x15e>
 8005e14:	e062      	b.n	8005edc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6818      	ldr	r0, [r3, #0]
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	6899      	ldr	r1, [r3, #8]
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	685a      	ldr	r2, [r3, #4]
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	68db      	ldr	r3, [r3, #12]
 8005e26:	f000 f975 	bl	8006114 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005e38:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	68ba      	ldr	r2, [r7, #8]
 8005e40:	609a      	str	r2, [r3, #8]
      break;
 8005e42:	e04f      	b.n	8005ee4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6818      	ldr	r0, [r3, #0]
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	6899      	ldr	r1, [r3, #8]
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	685a      	ldr	r2, [r3, #4]
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	68db      	ldr	r3, [r3, #12]
 8005e54:	f000 f95e 	bl	8006114 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	689a      	ldr	r2, [r3, #8]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e66:	609a      	str	r2, [r3, #8]
      break;
 8005e68:	e03c      	b.n	8005ee4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6818      	ldr	r0, [r3, #0]
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	6859      	ldr	r1, [r3, #4]
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	68db      	ldr	r3, [r3, #12]
 8005e76:	461a      	mov	r2, r3
 8005e78:	f000 f8d2 	bl	8006020 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	2150      	movs	r1, #80	; 0x50
 8005e82:	4618      	mov	r0, r3
 8005e84:	f000 f92b 	bl	80060de <TIM_ITRx_SetConfig>
      break;
 8005e88:	e02c      	b.n	8005ee4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6818      	ldr	r0, [r3, #0]
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	6859      	ldr	r1, [r3, #4]
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	68db      	ldr	r3, [r3, #12]
 8005e96:	461a      	mov	r2, r3
 8005e98:	f000 f8f1 	bl	800607e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	2160      	movs	r1, #96	; 0x60
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f000 f91b 	bl	80060de <TIM_ITRx_SetConfig>
      break;
 8005ea8:	e01c      	b.n	8005ee4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6818      	ldr	r0, [r3, #0]
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	6859      	ldr	r1, [r3, #4]
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	68db      	ldr	r3, [r3, #12]
 8005eb6:	461a      	mov	r2, r3
 8005eb8:	f000 f8b2 	bl	8006020 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	2140      	movs	r1, #64	; 0x40
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f000 f90b 	bl	80060de <TIM_ITRx_SetConfig>
      break;
 8005ec8:	e00c      	b.n	8005ee4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681a      	ldr	r2, [r3, #0]
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4619      	mov	r1, r3
 8005ed4:	4610      	mov	r0, r2
 8005ed6:	f000 f902 	bl	80060de <TIM_ITRx_SetConfig>
      break;
 8005eda:	e003      	b.n	8005ee4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005edc:	2301      	movs	r3, #1
 8005ede:	73fb      	strb	r3, [r7, #15]
      break;
 8005ee0:	e000      	b.n	8005ee4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005ee2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3710      	adds	r7, #16
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}
	...

08005f00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b085      	sub	sp, #20
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
 8005f08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	4a3c      	ldr	r2, [pc, #240]	; (8006004 <TIM_Base_SetConfig+0x104>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d00f      	beq.n	8005f38 <TIM_Base_SetConfig+0x38>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f1e:	d00b      	beq.n	8005f38 <TIM_Base_SetConfig+0x38>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	4a39      	ldr	r2, [pc, #228]	; (8006008 <TIM_Base_SetConfig+0x108>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d007      	beq.n	8005f38 <TIM_Base_SetConfig+0x38>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	4a38      	ldr	r2, [pc, #224]	; (800600c <TIM_Base_SetConfig+0x10c>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d003      	beq.n	8005f38 <TIM_Base_SetConfig+0x38>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	4a37      	ldr	r2, [pc, #220]	; (8006010 <TIM_Base_SetConfig+0x110>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d108      	bne.n	8005f4a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	68fa      	ldr	r2, [r7, #12]
 8005f46:	4313      	orrs	r3, r2
 8005f48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	4a2d      	ldr	r2, [pc, #180]	; (8006004 <TIM_Base_SetConfig+0x104>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d01b      	beq.n	8005f8a <TIM_Base_SetConfig+0x8a>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f58:	d017      	beq.n	8005f8a <TIM_Base_SetConfig+0x8a>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	4a2a      	ldr	r2, [pc, #168]	; (8006008 <TIM_Base_SetConfig+0x108>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d013      	beq.n	8005f8a <TIM_Base_SetConfig+0x8a>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	4a29      	ldr	r2, [pc, #164]	; (800600c <TIM_Base_SetConfig+0x10c>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d00f      	beq.n	8005f8a <TIM_Base_SetConfig+0x8a>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	4a28      	ldr	r2, [pc, #160]	; (8006010 <TIM_Base_SetConfig+0x110>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d00b      	beq.n	8005f8a <TIM_Base_SetConfig+0x8a>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	4a27      	ldr	r2, [pc, #156]	; (8006014 <TIM_Base_SetConfig+0x114>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d007      	beq.n	8005f8a <TIM_Base_SetConfig+0x8a>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	4a26      	ldr	r2, [pc, #152]	; (8006018 <TIM_Base_SetConfig+0x118>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d003      	beq.n	8005f8a <TIM_Base_SetConfig+0x8a>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	4a25      	ldr	r2, [pc, #148]	; (800601c <TIM_Base_SetConfig+0x11c>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d108      	bne.n	8005f9c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	68db      	ldr	r3, [r3, #12]
 8005f96:	68fa      	ldr	r2, [r7, #12]
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	695b      	ldr	r3, [r3, #20]
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	68fa      	ldr	r2, [r7, #12]
 8005fae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	689a      	ldr	r2, [r3, #8]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	681a      	ldr	r2, [r3, #0]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	4a10      	ldr	r2, [pc, #64]	; (8006004 <TIM_Base_SetConfig+0x104>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d00f      	beq.n	8005fe8 <TIM_Base_SetConfig+0xe8>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	4a11      	ldr	r2, [pc, #68]	; (8006010 <TIM_Base_SetConfig+0x110>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d00b      	beq.n	8005fe8 <TIM_Base_SetConfig+0xe8>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	4a10      	ldr	r2, [pc, #64]	; (8006014 <TIM_Base_SetConfig+0x114>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d007      	beq.n	8005fe8 <TIM_Base_SetConfig+0xe8>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	4a0f      	ldr	r2, [pc, #60]	; (8006018 <TIM_Base_SetConfig+0x118>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d003      	beq.n	8005fe8 <TIM_Base_SetConfig+0xe8>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	4a0e      	ldr	r2, [pc, #56]	; (800601c <TIM_Base_SetConfig+0x11c>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d103      	bne.n	8005ff0 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	691a      	ldr	r2, [r3, #16]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	615a      	str	r2, [r3, #20]
}
 8005ff6:	bf00      	nop
 8005ff8:	3714      	adds	r7, #20
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr
 8006002:	bf00      	nop
 8006004:	40012c00 	.word	0x40012c00
 8006008:	40000400 	.word	0x40000400
 800600c:	40000800 	.word	0x40000800
 8006010:	40013400 	.word	0x40013400
 8006014:	40014000 	.word	0x40014000
 8006018:	40014400 	.word	0x40014400
 800601c:	40014800 	.word	0x40014800

08006020 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006020:	b480      	push	{r7}
 8006022:	b087      	sub	sp, #28
 8006024:	af00      	add	r7, sp, #0
 8006026:	60f8      	str	r0, [r7, #12]
 8006028:	60b9      	str	r1, [r7, #8]
 800602a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	6a1b      	ldr	r3, [r3, #32]
 8006030:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	6a1b      	ldr	r3, [r3, #32]
 8006036:	f023 0201 	bic.w	r2, r3, #1
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	699b      	ldr	r3, [r3, #24]
 8006042:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800604a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	011b      	lsls	r3, r3, #4
 8006050:	693a      	ldr	r2, [r7, #16]
 8006052:	4313      	orrs	r3, r2
 8006054:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	f023 030a 	bic.w	r3, r3, #10
 800605c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800605e:	697a      	ldr	r2, [r7, #20]
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	4313      	orrs	r3, r2
 8006064:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	693a      	ldr	r2, [r7, #16]
 800606a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	697a      	ldr	r2, [r7, #20]
 8006070:	621a      	str	r2, [r3, #32]
}
 8006072:	bf00      	nop
 8006074:	371c      	adds	r7, #28
 8006076:	46bd      	mov	sp, r7
 8006078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607c:	4770      	bx	lr

0800607e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800607e:	b480      	push	{r7}
 8006080:	b087      	sub	sp, #28
 8006082:	af00      	add	r7, sp, #0
 8006084:	60f8      	str	r0, [r7, #12]
 8006086:	60b9      	str	r1, [r7, #8]
 8006088:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	6a1b      	ldr	r3, [r3, #32]
 800608e:	f023 0210 	bic.w	r2, r3, #16
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	699b      	ldr	r3, [r3, #24]
 800609a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	6a1b      	ldr	r3, [r3, #32]
 80060a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80060a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	031b      	lsls	r3, r3, #12
 80060ae:	697a      	ldr	r2, [r7, #20]
 80060b0:	4313      	orrs	r3, r2
 80060b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80060ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	011b      	lsls	r3, r3, #4
 80060c0:	693a      	ldr	r2, [r7, #16]
 80060c2:	4313      	orrs	r3, r2
 80060c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	697a      	ldr	r2, [r7, #20]
 80060ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	693a      	ldr	r2, [r7, #16]
 80060d0:	621a      	str	r2, [r3, #32]
}
 80060d2:	bf00      	nop
 80060d4:	371c      	adds	r7, #28
 80060d6:	46bd      	mov	sp, r7
 80060d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060dc:	4770      	bx	lr

080060de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80060de:	b480      	push	{r7}
 80060e0:	b085      	sub	sp, #20
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	6078      	str	r0, [r7, #4]
 80060e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	689b      	ldr	r3, [r3, #8]
 80060ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80060f6:	683a      	ldr	r2, [r7, #0]
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	4313      	orrs	r3, r2
 80060fc:	f043 0307 	orr.w	r3, r3, #7
 8006100:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	68fa      	ldr	r2, [r7, #12]
 8006106:	609a      	str	r2, [r3, #8]
}
 8006108:	bf00      	nop
 800610a:	3714      	adds	r7, #20
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr

08006114 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006114:	b480      	push	{r7}
 8006116:	b087      	sub	sp, #28
 8006118:	af00      	add	r7, sp, #0
 800611a:	60f8      	str	r0, [r7, #12]
 800611c:	60b9      	str	r1, [r7, #8]
 800611e:	607a      	str	r2, [r7, #4]
 8006120:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	689b      	ldr	r3, [r3, #8]
 8006126:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800612e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	021a      	lsls	r2, r3, #8
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	431a      	orrs	r2, r3
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	4313      	orrs	r3, r2
 800613c:	697a      	ldr	r2, [r7, #20]
 800613e:	4313      	orrs	r3, r2
 8006140:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	697a      	ldr	r2, [r7, #20]
 8006146:	609a      	str	r2, [r3, #8]
}
 8006148:	bf00      	nop
 800614a:	371c      	adds	r7, #28
 800614c:	46bd      	mov	sp, r7
 800614e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006152:	4770      	bx	lr

08006154 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006154:	b480      	push	{r7}
 8006156:	b085      	sub	sp, #20
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006164:	2b01      	cmp	r3, #1
 8006166:	d101      	bne.n	800616c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006168:	2302      	movs	r3, #2
 800616a:	e063      	b.n	8006234 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2201      	movs	r2, #1
 8006170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2202      	movs	r2, #2
 8006178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a2b      	ldr	r2, [pc, #172]	; (8006240 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d004      	beq.n	80061a0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a2a      	ldr	r2, [pc, #168]	; (8006244 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d108      	bne.n	80061b2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80061a6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	68fa      	ldr	r2, [r7, #12]
 80061ae:	4313      	orrs	r3, r2
 80061b0:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061b8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	68fa      	ldr	r2, [r7, #12]
 80061c0:	4313      	orrs	r3, r2
 80061c2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	68fa      	ldr	r2, [r7, #12]
 80061ca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a1b      	ldr	r2, [pc, #108]	; (8006240 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d018      	beq.n	8006208 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061de:	d013      	beq.n	8006208 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a18      	ldr	r2, [pc, #96]	; (8006248 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d00e      	beq.n	8006208 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a17      	ldr	r2, [pc, #92]	; (800624c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d009      	beq.n	8006208 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a12      	ldr	r2, [pc, #72]	; (8006244 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d004      	beq.n	8006208 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a13      	ldr	r2, [pc, #76]	; (8006250 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d10c      	bne.n	8006222 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800620e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	68ba      	ldr	r2, [r7, #8]
 8006216:	4313      	orrs	r3, r2
 8006218:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	68ba      	ldr	r2, [r7, #8]
 8006220:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2201      	movs	r2, #1
 8006226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2200      	movs	r2, #0
 800622e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006232:	2300      	movs	r3, #0
}
 8006234:	4618      	mov	r0, r3
 8006236:	3714      	adds	r7, #20
 8006238:	46bd      	mov	sp, r7
 800623a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623e:	4770      	bx	lr
 8006240:	40012c00 	.word	0x40012c00
 8006244:	40013400 	.word	0x40013400
 8006248:	40000400 	.word	0x40000400
 800624c:	40000800 	.word	0x40000800
 8006250:	40014000 	.word	0x40014000

08006254 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006254:	b480      	push	{r7}
 8006256:	b085      	sub	sp, #20
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2200      	movs	r2, #0
 8006260:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006264:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006268:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	b29a      	uxth	r2, r3
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006274:	2300      	movs	r3, #0
}
 8006276:	4618      	mov	r0, r3
 8006278:	3714      	adds	r7, #20
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr

08006282 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006282:	b480      	push	{r7}
 8006284:	b085      	sub	sp, #20
 8006286:	af00      	add	r7, sp, #0
 8006288:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800628a:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800628e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006296:	b29a      	uxth	r2, r3
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	b29b      	uxth	r3, r3
 800629c:	43db      	mvns	r3, r3
 800629e:	b29b      	uxth	r3, r3
 80062a0:	4013      	ands	r3, r2
 80062a2:	b29a      	uxth	r2, r3
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80062aa:	2300      	movs	r3, #0
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	3714      	adds	r7, #20
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr

080062b8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80062b8:	b084      	sub	sp, #16
 80062ba:	b480      	push	{r7}
 80062bc:	b083      	sub	sp, #12
 80062be:	af00      	add	r7, sp, #0
 80062c0:	6078      	str	r0, [r7, #4]
 80062c2:	f107 0014 	add.w	r0, r7, #20
 80062c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2201      	movs	r2, #1
 80062ce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2200      	movs	r2, #0
 80062d6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2200      	movs	r2, #0
 80062de:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2200      	movs	r2, #0
 80062e6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80062ea:	2300      	movs	r3, #0
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	370c      	adds	r7, #12
 80062f0:	46bd      	mov	sp, r7
 80062f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f6:	b004      	add	sp, #16
 80062f8:	4770      	bx	lr
	...

080062fc <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b09d      	sub	sp, #116	; 0x74
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
 8006304:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006306:	2300      	movs	r3, #0
 8006308:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800630c:	687a      	ldr	r2, [r7, #4]
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	781b      	ldrb	r3, [r3, #0]
 8006312:	009b      	lsls	r3, r3, #2
 8006314:	4413      	add	r3, r2
 8006316:	881b      	ldrh	r3, [r3, #0]
 8006318:	b29b      	uxth	r3, r3
 800631a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800631e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006322:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	78db      	ldrb	r3, [r3, #3]
 800632a:	2b03      	cmp	r3, #3
 800632c:	d81f      	bhi.n	800636e <USB_ActivateEndpoint+0x72>
 800632e:	a201      	add	r2, pc, #4	; (adr r2, 8006334 <USB_ActivateEndpoint+0x38>)
 8006330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006334:	08006345 	.word	0x08006345
 8006338:	08006361 	.word	0x08006361
 800633c:	08006377 	.word	0x08006377
 8006340:	08006353 	.word	0x08006353
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006344:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006348:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800634c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006350:	e012      	b.n	8006378 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006352:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006356:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800635a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800635e:	e00b      	b.n	8006378 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006360:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006364:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006368:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800636c:	e004      	b.n	8006378 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800636e:	2301      	movs	r3, #1
 8006370:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8006374:	e000      	b.n	8006378 <USB_ActivateEndpoint+0x7c>
      break;
 8006376:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006378:	687a      	ldr	r2, [r7, #4]
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	781b      	ldrb	r3, [r3, #0]
 800637e:	009b      	lsls	r3, r3, #2
 8006380:	441a      	add	r2, r3
 8006382:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006386:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800638a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800638e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006392:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006396:	b29b      	uxth	r3, r3
 8006398:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800639a:	687a      	ldr	r2, [r7, #4]
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	781b      	ldrb	r3, [r3, #0]
 80063a0:	009b      	lsls	r3, r3, #2
 80063a2:	4413      	add	r3, r2
 80063a4:	881b      	ldrh	r3, [r3, #0]
 80063a6:	b29b      	uxth	r3, r3
 80063a8:	b21b      	sxth	r3, r3
 80063aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063b2:	b21a      	sxth	r2, r3
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	781b      	ldrb	r3, [r3, #0]
 80063b8:	b21b      	sxth	r3, r3
 80063ba:	4313      	orrs	r3, r2
 80063bc:	b21b      	sxth	r3, r3
 80063be:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80063c2:	687a      	ldr	r2, [r7, #4]
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	781b      	ldrb	r3, [r3, #0]
 80063c8:	009b      	lsls	r3, r3, #2
 80063ca:	441a      	add	r2, r3
 80063cc:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80063d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063e0:	b29b      	uxth	r3, r3
 80063e2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	7b1b      	ldrb	r3, [r3, #12]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	f040 8149 	bne.w	8006680 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	785b      	ldrb	r3, [r3, #1]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	f000 8084 	beq.w	8006500 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	61bb      	str	r3, [r7, #24]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006402:	b29b      	uxth	r3, r3
 8006404:	461a      	mov	r2, r3
 8006406:	69bb      	ldr	r3, [r7, #24]
 8006408:	4413      	add	r3, r2
 800640a:	61bb      	str	r3, [r7, #24]
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	011a      	lsls	r2, r3, #4
 8006412:	69bb      	ldr	r3, [r7, #24]
 8006414:	4413      	add	r3, r2
 8006416:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800641a:	617b      	str	r3, [r7, #20]
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	88db      	ldrh	r3, [r3, #6]
 8006420:	085b      	lsrs	r3, r3, #1
 8006422:	b29b      	uxth	r3, r3
 8006424:	005b      	lsls	r3, r3, #1
 8006426:	b29a      	uxth	r2, r3
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800642c:	687a      	ldr	r2, [r7, #4]
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	781b      	ldrb	r3, [r3, #0]
 8006432:	009b      	lsls	r3, r3, #2
 8006434:	4413      	add	r3, r2
 8006436:	881b      	ldrh	r3, [r3, #0]
 8006438:	827b      	strh	r3, [r7, #18]
 800643a:	8a7b      	ldrh	r3, [r7, #18]
 800643c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006440:	2b00      	cmp	r3, #0
 8006442:	d01b      	beq.n	800647c <USB_ActivateEndpoint+0x180>
 8006444:	687a      	ldr	r2, [r7, #4]
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	781b      	ldrb	r3, [r3, #0]
 800644a:	009b      	lsls	r3, r3, #2
 800644c:	4413      	add	r3, r2
 800644e:	881b      	ldrh	r3, [r3, #0]
 8006450:	b29b      	uxth	r3, r3
 8006452:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006456:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800645a:	823b      	strh	r3, [r7, #16]
 800645c:	687a      	ldr	r2, [r7, #4]
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	781b      	ldrb	r3, [r3, #0]
 8006462:	009b      	lsls	r3, r3, #2
 8006464:	441a      	add	r2, r3
 8006466:	8a3b      	ldrh	r3, [r7, #16]
 8006468:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800646c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006470:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006474:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006478:	b29b      	uxth	r3, r3
 800647a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	78db      	ldrb	r3, [r3, #3]
 8006480:	2b01      	cmp	r3, #1
 8006482:	d020      	beq.n	80064c6 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006484:	687a      	ldr	r2, [r7, #4]
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	781b      	ldrb	r3, [r3, #0]
 800648a:	009b      	lsls	r3, r3, #2
 800648c:	4413      	add	r3, r2
 800648e:	881b      	ldrh	r3, [r3, #0]
 8006490:	b29b      	uxth	r3, r3
 8006492:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006496:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800649a:	81bb      	strh	r3, [r7, #12]
 800649c:	89bb      	ldrh	r3, [r7, #12]
 800649e:	f083 0320 	eor.w	r3, r3, #32
 80064a2:	81bb      	strh	r3, [r7, #12]
 80064a4:	687a      	ldr	r2, [r7, #4]
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	781b      	ldrb	r3, [r3, #0]
 80064aa:	009b      	lsls	r3, r3, #2
 80064ac:	441a      	add	r2, r3
 80064ae:	89bb      	ldrh	r3, [r7, #12]
 80064b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064c0:	b29b      	uxth	r3, r3
 80064c2:	8013      	strh	r3, [r2, #0]
 80064c4:	e2a6      	b.n	8006a14 <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80064c6:	687a      	ldr	r2, [r7, #4]
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	009b      	lsls	r3, r3, #2
 80064ce:	4413      	add	r3, r2
 80064d0:	881b      	ldrh	r3, [r3, #0]
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064dc:	81fb      	strh	r3, [r7, #14]
 80064de:	687a      	ldr	r2, [r7, #4]
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	781b      	ldrb	r3, [r3, #0]
 80064e4:	009b      	lsls	r3, r3, #2
 80064e6:	441a      	add	r2, r3
 80064e8:	89fb      	ldrh	r3, [r7, #14]
 80064ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064fa:	b29b      	uxth	r3, r3
 80064fc:	8013      	strh	r3, [r2, #0]
 80064fe:	e289      	b.n	8006a14 <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	633b      	str	r3, [r7, #48]	; 0x30
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800650a:	b29b      	uxth	r3, r3
 800650c:	461a      	mov	r2, r3
 800650e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006510:	4413      	add	r3, r2
 8006512:	633b      	str	r3, [r7, #48]	; 0x30
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	781b      	ldrb	r3, [r3, #0]
 8006518:	011a      	lsls	r2, r3, #4
 800651a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800651c:	4413      	add	r3, r2
 800651e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8006522:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	88db      	ldrh	r3, [r3, #6]
 8006528:	085b      	lsrs	r3, r3, #1
 800652a:	b29b      	uxth	r3, r3
 800652c:	005b      	lsls	r3, r3, #1
 800652e:	b29a      	uxth	r2, r3
 8006530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006532:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	62bb      	str	r3, [r7, #40]	; 0x28
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800653e:	b29b      	uxth	r3, r3
 8006540:	461a      	mov	r2, r3
 8006542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006544:	4413      	add	r3, r2
 8006546:	62bb      	str	r3, [r7, #40]	; 0x28
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	781b      	ldrb	r3, [r3, #0]
 800654c:	011a      	lsls	r2, r3, #4
 800654e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006550:	4413      	add	r3, r2
 8006552:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006556:	627b      	str	r3, [r7, #36]	; 0x24
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	691b      	ldr	r3, [r3, #16]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d112      	bne.n	8006586 <USB_ActivateEndpoint+0x28a>
 8006560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006562:	881b      	ldrh	r3, [r3, #0]
 8006564:	b29b      	uxth	r3, r3
 8006566:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800656a:	b29a      	uxth	r2, r3
 800656c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656e:	801a      	strh	r2, [r3, #0]
 8006570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006572:	881b      	ldrh	r3, [r3, #0]
 8006574:	b29b      	uxth	r3, r3
 8006576:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800657a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800657e:	b29a      	uxth	r2, r3
 8006580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006582:	801a      	strh	r2, [r3, #0]
 8006584:	e02f      	b.n	80065e6 <USB_ActivateEndpoint+0x2ea>
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	691b      	ldr	r3, [r3, #16]
 800658a:	2b3e      	cmp	r3, #62	; 0x3e
 800658c:	d813      	bhi.n	80065b6 <USB_ActivateEndpoint+0x2ba>
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	691b      	ldr	r3, [r3, #16]
 8006592:	085b      	lsrs	r3, r3, #1
 8006594:	66bb      	str	r3, [r7, #104]	; 0x68
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	691b      	ldr	r3, [r3, #16]
 800659a:	f003 0301 	and.w	r3, r3, #1
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d002      	beq.n	80065a8 <USB_ActivateEndpoint+0x2ac>
 80065a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80065a4:	3301      	adds	r3, #1
 80065a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80065a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	029b      	lsls	r3, r3, #10
 80065ae:	b29a      	uxth	r2, r3
 80065b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b2:	801a      	strh	r2, [r3, #0]
 80065b4:	e017      	b.n	80065e6 <USB_ActivateEndpoint+0x2ea>
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	691b      	ldr	r3, [r3, #16]
 80065ba:	095b      	lsrs	r3, r3, #5
 80065bc:	66bb      	str	r3, [r7, #104]	; 0x68
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	691b      	ldr	r3, [r3, #16]
 80065c2:	f003 031f 	and.w	r3, r3, #31
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d102      	bne.n	80065d0 <USB_ActivateEndpoint+0x2d4>
 80065ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80065cc:	3b01      	subs	r3, #1
 80065ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80065d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80065d2:	b29b      	uxth	r3, r3
 80065d4:	029b      	lsls	r3, r3, #10
 80065d6:	b29b      	uxth	r3, r3
 80065d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065e0:	b29a      	uxth	r2, r3
 80065e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80065e6:	687a      	ldr	r2, [r7, #4]
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	009b      	lsls	r3, r3, #2
 80065ee:	4413      	add	r3, r2
 80065f0:	881b      	ldrh	r3, [r3, #0]
 80065f2:	847b      	strh	r3, [r7, #34]	; 0x22
 80065f4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80065f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d01b      	beq.n	8006636 <USB_ActivateEndpoint+0x33a>
 80065fe:	687a      	ldr	r2, [r7, #4]
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	781b      	ldrb	r3, [r3, #0]
 8006604:	009b      	lsls	r3, r3, #2
 8006606:	4413      	add	r3, r2
 8006608:	881b      	ldrh	r3, [r3, #0]
 800660a:	b29b      	uxth	r3, r3
 800660c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006610:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006614:	843b      	strh	r3, [r7, #32]
 8006616:	687a      	ldr	r2, [r7, #4]
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	781b      	ldrb	r3, [r3, #0]
 800661c:	009b      	lsls	r3, r3, #2
 800661e:	441a      	add	r2, r3
 8006620:	8c3b      	ldrh	r3, [r7, #32]
 8006622:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006626:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800662a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800662e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006632:	b29b      	uxth	r3, r3
 8006634:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006636:	687a      	ldr	r2, [r7, #4]
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	781b      	ldrb	r3, [r3, #0]
 800663c:	009b      	lsls	r3, r3, #2
 800663e:	4413      	add	r3, r2
 8006640:	881b      	ldrh	r3, [r3, #0]
 8006642:	b29b      	uxth	r3, r3
 8006644:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006648:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800664c:	83fb      	strh	r3, [r7, #30]
 800664e:	8bfb      	ldrh	r3, [r7, #30]
 8006650:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006654:	83fb      	strh	r3, [r7, #30]
 8006656:	8bfb      	ldrh	r3, [r7, #30]
 8006658:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800665c:	83fb      	strh	r3, [r7, #30]
 800665e:	687a      	ldr	r2, [r7, #4]
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	781b      	ldrb	r3, [r3, #0]
 8006664:	009b      	lsls	r3, r3, #2
 8006666:	441a      	add	r2, r3
 8006668:	8bfb      	ldrh	r3, [r7, #30]
 800666a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800666e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006672:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006676:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800667a:	b29b      	uxth	r3, r3
 800667c:	8013      	strh	r3, [r2, #0]
 800667e:	e1c9      	b.n	8006a14 <USB_ActivateEndpoint+0x718>
    }
  }
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	78db      	ldrb	r3, [r3, #3]
 8006684:	2b02      	cmp	r3, #2
 8006686:	d11e      	bne.n	80066c6 <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006688:	687a      	ldr	r2, [r7, #4]
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	781b      	ldrb	r3, [r3, #0]
 800668e:	009b      	lsls	r3, r3, #2
 8006690:	4413      	add	r3, r2
 8006692:	881b      	ldrh	r3, [r3, #0]
 8006694:	b29b      	uxth	r3, r3
 8006696:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800669a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800669e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80066a2:	687a      	ldr	r2, [r7, #4]
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	781b      	ldrb	r3, [r3, #0]
 80066a8:	009b      	lsls	r3, r3, #2
 80066aa:	441a      	add	r2, r3
 80066ac:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80066b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066b8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80066bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066c0:	b29b      	uxth	r3, r3
 80066c2:	8013      	strh	r3, [r2, #0]
 80066c4:	e01d      	b.n	8006702 <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80066c6:	687a      	ldr	r2, [r7, #4]
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	781b      	ldrb	r3, [r3, #0]
 80066cc:	009b      	lsls	r3, r3, #2
 80066ce:	4413      	add	r3, r2
 80066d0:	881b      	ldrh	r3, [r3, #0]
 80066d2:	b29b      	uxth	r3, r3
 80066d4:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80066d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066dc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80066e0:	687a      	ldr	r2, [r7, #4]
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	781b      	ldrb	r3, [r3, #0]
 80066e6:	009b      	lsls	r3, r3, #2
 80066e8:	441a      	add	r2, r3
 80066ea:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80066ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066fe:	b29b      	uxth	r3, r3
 8006700:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800670c:	b29b      	uxth	r3, r3
 800670e:	461a      	mov	r2, r3
 8006710:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006712:	4413      	add	r3, r2
 8006714:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	781b      	ldrb	r3, [r3, #0]
 800671a:	011a      	lsls	r2, r3, #4
 800671c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800671e:	4413      	add	r3, r2
 8006720:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006724:	65bb      	str	r3, [r7, #88]	; 0x58
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	891b      	ldrh	r3, [r3, #8]
 800672a:	085b      	lsrs	r3, r3, #1
 800672c:	b29b      	uxth	r3, r3
 800672e:	005b      	lsls	r3, r3, #1
 8006730:	b29a      	uxth	r2, r3
 8006732:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006734:	801a      	strh	r2, [r3, #0]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	657b      	str	r3, [r7, #84]	; 0x54
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006740:	b29b      	uxth	r3, r3
 8006742:	461a      	mov	r2, r3
 8006744:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006746:	4413      	add	r3, r2
 8006748:	657b      	str	r3, [r7, #84]	; 0x54
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	781b      	ldrb	r3, [r3, #0]
 800674e:	011a      	lsls	r2, r3, #4
 8006750:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006752:	4413      	add	r3, r2
 8006754:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8006758:	653b      	str	r3, [r7, #80]	; 0x50
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	895b      	ldrh	r3, [r3, #10]
 800675e:	085b      	lsrs	r3, r3, #1
 8006760:	b29b      	uxth	r3, r3
 8006762:	005b      	lsls	r3, r3, #1
 8006764:	b29a      	uxth	r2, r3
 8006766:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006768:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	785b      	ldrb	r3, [r3, #1]
 800676e:	2b00      	cmp	r3, #0
 8006770:	f040 8093 	bne.w	800689a <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006774:	687a      	ldr	r2, [r7, #4]
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	781b      	ldrb	r3, [r3, #0]
 800677a:	009b      	lsls	r3, r3, #2
 800677c:	4413      	add	r3, r2
 800677e:	881b      	ldrh	r3, [r3, #0]
 8006780:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006784:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006788:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800678c:	2b00      	cmp	r3, #0
 800678e:	d01b      	beq.n	80067c8 <USB_ActivateEndpoint+0x4cc>
 8006790:	687a      	ldr	r2, [r7, #4]
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	781b      	ldrb	r3, [r3, #0]
 8006796:	009b      	lsls	r3, r3, #2
 8006798:	4413      	add	r3, r2
 800679a:	881b      	ldrh	r3, [r3, #0]
 800679c:	b29b      	uxth	r3, r3
 800679e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067a6:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80067a8:	687a      	ldr	r2, [r7, #4]
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	781b      	ldrb	r3, [r3, #0]
 80067ae:	009b      	lsls	r3, r3, #2
 80067b0:	441a      	add	r2, r3
 80067b2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80067b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80067c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067c4:	b29b      	uxth	r3, r3
 80067c6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	781b      	ldrb	r3, [r3, #0]
 80067ce:	009b      	lsls	r3, r3, #2
 80067d0:	4413      	add	r3, r2
 80067d2:	881b      	ldrh	r3, [r3, #0]
 80067d4:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80067d6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80067d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d01b      	beq.n	8006818 <USB_ActivateEndpoint+0x51c>
 80067e0:	687a      	ldr	r2, [r7, #4]
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	781b      	ldrb	r3, [r3, #0]
 80067e6:	009b      	lsls	r3, r3, #2
 80067e8:	4413      	add	r3, r2
 80067ea:	881b      	ldrh	r3, [r3, #0]
 80067ec:	b29b      	uxth	r3, r3
 80067ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067f6:	877b      	strh	r3, [r7, #58]	; 0x3a
 80067f8:	687a      	ldr	r2, [r7, #4]
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	781b      	ldrb	r3, [r3, #0]
 80067fe:	009b      	lsls	r3, r3, #2
 8006800:	441a      	add	r2, r3
 8006802:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006804:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006808:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800680c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006810:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006814:	b29b      	uxth	r3, r3
 8006816:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006818:	687a      	ldr	r2, [r7, #4]
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	781b      	ldrb	r3, [r3, #0]
 800681e:	009b      	lsls	r3, r3, #2
 8006820:	4413      	add	r3, r2
 8006822:	881b      	ldrh	r3, [r3, #0]
 8006824:	b29b      	uxth	r3, r3
 8006826:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800682a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800682e:	873b      	strh	r3, [r7, #56]	; 0x38
 8006830:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006832:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006836:	873b      	strh	r3, [r7, #56]	; 0x38
 8006838:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800683a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800683e:	873b      	strh	r3, [r7, #56]	; 0x38
 8006840:	687a      	ldr	r2, [r7, #4]
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	781b      	ldrb	r3, [r3, #0]
 8006846:	009b      	lsls	r3, r3, #2
 8006848:	441a      	add	r2, r3
 800684a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800684c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006850:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006854:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006858:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800685c:	b29b      	uxth	r3, r3
 800685e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006860:	687a      	ldr	r2, [r7, #4]
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	781b      	ldrb	r3, [r3, #0]
 8006866:	009b      	lsls	r3, r3, #2
 8006868:	4413      	add	r3, r2
 800686a:	881b      	ldrh	r3, [r3, #0]
 800686c:	b29b      	uxth	r3, r3
 800686e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006872:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006876:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006878:	687a      	ldr	r2, [r7, #4]
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	781b      	ldrb	r3, [r3, #0]
 800687e:	009b      	lsls	r3, r3, #2
 8006880:	441a      	add	r2, r3
 8006882:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006884:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006888:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800688c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006890:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006894:	b29b      	uxth	r3, r3
 8006896:	8013      	strh	r3, [r2, #0]
 8006898:	e0bc      	b.n	8006a14 <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800689a:	687a      	ldr	r2, [r7, #4]
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	781b      	ldrb	r3, [r3, #0]
 80068a0:	009b      	lsls	r3, r3, #2
 80068a2:	4413      	add	r3, r2
 80068a4:	881b      	ldrh	r3, [r3, #0]
 80068a6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80068aa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80068ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d01d      	beq.n	80068f2 <USB_ActivateEndpoint+0x5f6>
 80068b6:	687a      	ldr	r2, [r7, #4]
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	781b      	ldrb	r3, [r3, #0]
 80068bc:	009b      	lsls	r3, r3, #2
 80068be:	4413      	add	r3, r2
 80068c0:	881b      	ldrh	r3, [r3, #0]
 80068c2:	b29b      	uxth	r3, r3
 80068c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068cc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80068d0:	687a      	ldr	r2, [r7, #4]
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	781b      	ldrb	r3, [r3, #0]
 80068d6:	009b      	lsls	r3, r3, #2
 80068d8:	441a      	add	r2, r3
 80068da:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80068de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80068ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068ee:	b29b      	uxth	r3, r3
 80068f0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80068f2:	687a      	ldr	r2, [r7, #4]
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	781b      	ldrb	r3, [r3, #0]
 80068f8:	009b      	lsls	r3, r3, #2
 80068fa:	4413      	add	r3, r2
 80068fc:	881b      	ldrh	r3, [r3, #0]
 80068fe:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006902:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800690a:	2b00      	cmp	r3, #0
 800690c:	d01d      	beq.n	800694a <USB_ActivateEndpoint+0x64e>
 800690e:	687a      	ldr	r2, [r7, #4]
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	781b      	ldrb	r3, [r3, #0]
 8006914:	009b      	lsls	r3, r3, #2
 8006916:	4413      	add	r3, r2
 8006918:	881b      	ldrh	r3, [r3, #0]
 800691a:	b29b      	uxth	r3, r3
 800691c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006920:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006924:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006928:	687a      	ldr	r2, [r7, #4]
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	781b      	ldrb	r3, [r3, #0]
 800692e:	009b      	lsls	r3, r3, #2
 8006930:	441a      	add	r2, r3
 8006932:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006936:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800693a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800693e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006942:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006946:	b29b      	uxth	r3, r3
 8006948:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	78db      	ldrb	r3, [r3, #3]
 800694e:	2b01      	cmp	r3, #1
 8006950:	d024      	beq.n	800699c <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006952:	687a      	ldr	r2, [r7, #4]
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	781b      	ldrb	r3, [r3, #0]
 8006958:	009b      	lsls	r3, r3, #2
 800695a:	4413      	add	r3, r2
 800695c:	881b      	ldrh	r3, [r3, #0]
 800695e:	b29b      	uxth	r3, r3
 8006960:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006964:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006968:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800696c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006970:	f083 0320 	eor.w	r3, r3, #32
 8006974:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006978:	687a      	ldr	r2, [r7, #4]
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	781b      	ldrb	r3, [r3, #0]
 800697e:	009b      	lsls	r3, r3, #2
 8006980:	441a      	add	r2, r3
 8006982:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006986:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800698a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800698e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006992:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006996:	b29b      	uxth	r3, r3
 8006998:	8013      	strh	r3, [r2, #0]
 800699a:	e01d      	b.n	80069d8 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800699c:	687a      	ldr	r2, [r7, #4]
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	781b      	ldrb	r3, [r3, #0]
 80069a2:	009b      	lsls	r3, r3, #2
 80069a4:	4413      	add	r3, r2
 80069a6:	881b      	ldrh	r3, [r3, #0]
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069b2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80069b6:	687a      	ldr	r2, [r7, #4]
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	781b      	ldrb	r3, [r3, #0]
 80069bc:	009b      	lsls	r3, r3, #2
 80069be:	441a      	add	r2, r3
 80069c0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80069c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069d4:	b29b      	uxth	r3, r3
 80069d6:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	781b      	ldrb	r3, [r3, #0]
 80069de:	009b      	lsls	r3, r3, #2
 80069e0:	4413      	add	r3, r2
 80069e2:	881b      	ldrh	r3, [r3, #0]
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069ee:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80069f2:	687a      	ldr	r2, [r7, #4]
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	781b      	ldrb	r3, [r3, #0]
 80069f8:	009b      	lsls	r3, r3, #2
 80069fa:	441a      	add	r2, r3
 80069fc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006a00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a10:	b29b      	uxth	r3, r3
 8006a12:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8006a14:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	3774      	adds	r7, #116	; 0x74
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a22:	4770      	bx	lr

08006a24 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b08d      	sub	sp, #52	; 0x34
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
 8006a2c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	7b1b      	ldrb	r3, [r3, #12]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	f040 808e 	bne.w	8006b54 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	785b      	ldrb	r3, [r3, #1]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d044      	beq.n	8006aca <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006a40:	687a      	ldr	r2, [r7, #4]
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	781b      	ldrb	r3, [r3, #0]
 8006a46:	009b      	lsls	r3, r3, #2
 8006a48:	4413      	add	r3, r2
 8006a4a:	881b      	ldrh	r3, [r3, #0]
 8006a4c:	81bb      	strh	r3, [r7, #12]
 8006a4e:	89bb      	ldrh	r3, [r7, #12]
 8006a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d01b      	beq.n	8006a90 <USB_DeactivateEndpoint+0x6c>
 8006a58:	687a      	ldr	r2, [r7, #4]
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	781b      	ldrb	r3, [r3, #0]
 8006a5e:	009b      	lsls	r3, r3, #2
 8006a60:	4413      	add	r3, r2
 8006a62:	881b      	ldrh	r3, [r3, #0]
 8006a64:	b29b      	uxth	r3, r3
 8006a66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a6e:	817b      	strh	r3, [r7, #10]
 8006a70:	687a      	ldr	r2, [r7, #4]
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	781b      	ldrb	r3, [r3, #0]
 8006a76:	009b      	lsls	r3, r3, #2
 8006a78:	441a      	add	r2, r3
 8006a7a:	897b      	ldrh	r3, [r7, #10]
 8006a7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a88:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006a8c:	b29b      	uxth	r3, r3
 8006a8e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006a90:	687a      	ldr	r2, [r7, #4]
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	781b      	ldrb	r3, [r3, #0]
 8006a96:	009b      	lsls	r3, r3, #2
 8006a98:	4413      	add	r3, r2
 8006a9a:	881b      	ldrh	r3, [r3, #0]
 8006a9c:	b29b      	uxth	r3, r3
 8006a9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006aa2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006aa6:	813b      	strh	r3, [r7, #8]
 8006aa8:	687a      	ldr	r2, [r7, #4]
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	781b      	ldrb	r3, [r3, #0]
 8006aae:	009b      	lsls	r3, r3, #2
 8006ab0:	441a      	add	r2, r3
 8006ab2:	893b      	ldrh	r3, [r7, #8]
 8006ab4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ab8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006abc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ac0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ac4:	b29b      	uxth	r3, r3
 8006ac6:	8013      	strh	r3, [r2, #0]
 8006ac8:	e192      	b.n	8006df0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006aca:	687a      	ldr	r2, [r7, #4]
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	781b      	ldrb	r3, [r3, #0]
 8006ad0:	009b      	lsls	r3, r3, #2
 8006ad2:	4413      	add	r3, r2
 8006ad4:	881b      	ldrh	r3, [r3, #0]
 8006ad6:	827b      	strh	r3, [r7, #18]
 8006ad8:	8a7b      	ldrh	r3, [r7, #18]
 8006ada:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d01b      	beq.n	8006b1a <USB_DeactivateEndpoint+0xf6>
 8006ae2:	687a      	ldr	r2, [r7, #4]
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	781b      	ldrb	r3, [r3, #0]
 8006ae8:	009b      	lsls	r3, r3, #2
 8006aea:	4413      	add	r3, r2
 8006aec:	881b      	ldrh	r3, [r3, #0]
 8006aee:	b29b      	uxth	r3, r3
 8006af0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006af4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006af8:	823b      	strh	r3, [r7, #16]
 8006afa:	687a      	ldr	r2, [r7, #4]
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	781b      	ldrb	r3, [r3, #0]
 8006b00:	009b      	lsls	r3, r3, #2
 8006b02:	441a      	add	r2, r3
 8006b04:	8a3b      	ldrh	r3, [r7, #16]
 8006b06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b0e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006b12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b16:	b29b      	uxth	r3, r3
 8006b18:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006b1a:	687a      	ldr	r2, [r7, #4]
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	781b      	ldrb	r3, [r3, #0]
 8006b20:	009b      	lsls	r3, r3, #2
 8006b22:	4413      	add	r3, r2
 8006b24:	881b      	ldrh	r3, [r3, #0]
 8006b26:	b29b      	uxth	r3, r3
 8006b28:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b30:	81fb      	strh	r3, [r7, #14]
 8006b32:	687a      	ldr	r2, [r7, #4]
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	781b      	ldrb	r3, [r3, #0]
 8006b38:	009b      	lsls	r3, r3, #2
 8006b3a:	441a      	add	r2, r3
 8006b3c:	89fb      	ldrh	r3, [r7, #14]
 8006b3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b4e:	b29b      	uxth	r3, r3
 8006b50:	8013      	strh	r3, [r2, #0]
 8006b52:	e14d      	b.n	8006df0 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	785b      	ldrb	r3, [r3, #1]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	f040 80a5 	bne.w	8006ca8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006b5e:	687a      	ldr	r2, [r7, #4]
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	781b      	ldrb	r3, [r3, #0]
 8006b64:	009b      	lsls	r3, r3, #2
 8006b66:	4413      	add	r3, r2
 8006b68:	881b      	ldrh	r3, [r3, #0]
 8006b6a:	843b      	strh	r3, [r7, #32]
 8006b6c:	8c3b      	ldrh	r3, [r7, #32]
 8006b6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d01b      	beq.n	8006bae <USB_DeactivateEndpoint+0x18a>
 8006b76:	687a      	ldr	r2, [r7, #4]
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	781b      	ldrb	r3, [r3, #0]
 8006b7c:	009b      	lsls	r3, r3, #2
 8006b7e:	4413      	add	r3, r2
 8006b80:	881b      	ldrh	r3, [r3, #0]
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b8c:	83fb      	strh	r3, [r7, #30]
 8006b8e:	687a      	ldr	r2, [r7, #4]
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	781b      	ldrb	r3, [r3, #0]
 8006b94:	009b      	lsls	r3, r3, #2
 8006b96:	441a      	add	r2, r3
 8006b98:	8bfb      	ldrh	r3, [r7, #30]
 8006b9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ba2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006ba6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006baa:	b29b      	uxth	r3, r3
 8006bac:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006bae:	687a      	ldr	r2, [r7, #4]
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	781b      	ldrb	r3, [r3, #0]
 8006bb4:	009b      	lsls	r3, r3, #2
 8006bb6:	4413      	add	r3, r2
 8006bb8:	881b      	ldrh	r3, [r3, #0]
 8006bba:	83bb      	strh	r3, [r7, #28]
 8006bbc:	8bbb      	ldrh	r3, [r7, #28]
 8006bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d01b      	beq.n	8006bfe <USB_DeactivateEndpoint+0x1da>
 8006bc6:	687a      	ldr	r2, [r7, #4]
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	781b      	ldrb	r3, [r3, #0]
 8006bcc:	009b      	lsls	r3, r3, #2
 8006bce:	4413      	add	r3, r2
 8006bd0:	881b      	ldrh	r3, [r3, #0]
 8006bd2:	b29b      	uxth	r3, r3
 8006bd4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bdc:	837b      	strh	r3, [r7, #26]
 8006bde:	687a      	ldr	r2, [r7, #4]
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	781b      	ldrb	r3, [r3, #0]
 8006be4:	009b      	lsls	r3, r3, #2
 8006be6:	441a      	add	r2, r3
 8006be8:	8b7b      	ldrh	r3, [r7, #26]
 8006bea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bf2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bf6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006bfa:	b29b      	uxth	r3, r3
 8006bfc:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006bfe:	687a      	ldr	r2, [r7, #4]
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	781b      	ldrb	r3, [r3, #0]
 8006c04:	009b      	lsls	r3, r3, #2
 8006c06:	4413      	add	r3, r2
 8006c08:	881b      	ldrh	r3, [r3, #0]
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c14:	833b      	strh	r3, [r7, #24]
 8006c16:	687a      	ldr	r2, [r7, #4]
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	781b      	ldrb	r3, [r3, #0]
 8006c1c:	009b      	lsls	r3, r3, #2
 8006c1e:	441a      	add	r2, r3
 8006c20:	8b3b      	ldrh	r3, [r7, #24]
 8006c22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c2e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006c32:	b29b      	uxth	r3, r3
 8006c34:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006c36:	687a      	ldr	r2, [r7, #4]
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	781b      	ldrb	r3, [r3, #0]
 8006c3c:	009b      	lsls	r3, r3, #2
 8006c3e:	4413      	add	r3, r2
 8006c40:	881b      	ldrh	r3, [r3, #0]
 8006c42:	b29b      	uxth	r3, r3
 8006c44:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c4c:	82fb      	strh	r3, [r7, #22]
 8006c4e:	687a      	ldr	r2, [r7, #4]
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	781b      	ldrb	r3, [r3, #0]
 8006c54:	009b      	lsls	r3, r3, #2
 8006c56:	441a      	add	r2, r3
 8006c58:	8afb      	ldrh	r3, [r7, #22]
 8006c5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c6a:	b29b      	uxth	r3, r3
 8006c6c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006c6e:	687a      	ldr	r2, [r7, #4]
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	781b      	ldrb	r3, [r3, #0]
 8006c74:	009b      	lsls	r3, r3, #2
 8006c76:	4413      	add	r3, r2
 8006c78:	881b      	ldrh	r3, [r3, #0]
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c84:	82bb      	strh	r3, [r7, #20]
 8006c86:	687a      	ldr	r2, [r7, #4]
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	781b      	ldrb	r3, [r3, #0]
 8006c8c:	009b      	lsls	r3, r3, #2
 8006c8e:	441a      	add	r2, r3
 8006c90:	8abb      	ldrh	r3, [r7, #20]
 8006c92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ca2:	b29b      	uxth	r3, r3
 8006ca4:	8013      	strh	r3, [r2, #0]
 8006ca6:	e0a3      	b.n	8006df0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006ca8:	687a      	ldr	r2, [r7, #4]
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	781b      	ldrb	r3, [r3, #0]
 8006cae:	009b      	lsls	r3, r3, #2
 8006cb0:	4413      	add	r3, r2
 8006cb2:	881b      	ldrh	r3, [r3, #0]
 8006cb4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006cb6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006cb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d01b      	beq.n	8006cf8 <USB_DeactivateEndpoint+0x2d4>
 8006cc0:	687a      	ldr	r2, [r7, #4]
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	781b      	ldrb	r3, [r3, #0]
 8006cc6:	009b      	lsls	r3, r3, #2
 8006cc8:	4413      	add	r3, r2
 8006cca:	881b      	ldrh	r3, [r3, #0]
 8006ccc:	b29b      	uxth	r3, r3
 8006cce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cd6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006cd8:	687a      	ldr	r2, [r7, #4]
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	781b      	ldrb	r3, [r3, #0]
 8006cde:	009b      	lsls	r3, r3, #2
 8006ce0:	441a      	add	r2, r3
 8006ce2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006ce4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ce8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006cf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cf4:	b29b      	uxth	r3, r3
 8006cf6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006cf8:	687a      	ldr	r2, [r7, #4]
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	781b      	ldrb	r3, [r3, #0]
 8006cfe:	009b      	lsls	r3, r3, #2
 8006d00:	4413      	add	r3, r2
 8006d02:	881b      	ldrh	r3, [r3, #0]
 8006d04:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006d06:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006d08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d01b      	beq.n	8006d48 <USB_DeactivateEndpoint+0x324>
 8006d10:	687a      	ldr	r2, [r7, #4]
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	781b      	ldrb	r3, [r3, #0]
 8006d16:	009b      	lsls	r3, r3, #2
 8006d18:	4413      	add	r3, r2
 8006d1a:	881b      	ldrh	r3, [r3, #0]
 8006d1c:	b29b      	uxth	r3, r3
 8006d1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d26:	853b      	strh	r3, [r7, #40]	; 0x28
 8006d28:	687a      	ldr	r2, [r7, #4]
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	781b      	ldrb	r3, [r3, #0]
 8006d2e:	009b      	lsls	r3, r3, #2
 8006d30:	441a      	add	r2, r3
 8006d32:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006d34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d40:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006d44:	b29b      	uxth	r3, r3
 8006d46:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006d48:	687a      	ldr	r2, [r7, #4]
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	781b      	ldrb	r3, [r3, #0]
 8006d4e:	009b      	lsls	r3, r3, #2
 8006d50:	4413      	add	r3, r2
 8006d52:	881b      	ldrh	r3, [r3, #0]
 8006d54:	b29b      	uxth	r3, r3
 8006d56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d5e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006d60:	687a      	ldr	r2, [r7, #4]
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	781b      	ldrb	r3, [r3, #0]
 8006d66:	009b      	lsls	r3, r3, #2
 8006d68:	441a      	add	r2, r3
 8006d6a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006d6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d74:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006d78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d7c:	b29b      	uxth	r3, r3
 8006d7e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006d80:	687a      	ldr	r2, [r7, #4]
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	781b      	ldrb	r3, [r3, #0]
 8006d86:	009b      	lsls	r3, r3, #2
 8006d88:	4413      	add	r3, r2
 8006d8a:	881b      	ldrh	r3, [r3, #0]
 8006d8c:	b29b      	uxth	r3, r3
 8006d8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d96:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006d98:	687a      	ldr	r2, [r7, #4]
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	781b      	ldrb	r3, [r3, #0]
 8006d9e:	009b      	lsls	r3, r3, #2
 8006da0:	441a      	add	r2, r3
 8006da2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006da4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006da8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006db0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006db4:	b29b      	uxth	r3, r3
 8006db6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006db8:	687a      	ldr	r2, [r7, #4]
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	781b      	ldrb	r3, [r3, #0]
 8006dbe:	009b      	lsls	r3, r3, #2
 8006dc0:	4413      	add	r3, r2
 8006dc2:	881b      	ldrh	r3, [r3, #0]
 8006dc4:	b29b      	uxth	r3, r3
 8006dc6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006dca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dce:	847b      	strh	r3, [r7, #34]	; 0x22
 8006dd0:	687a      	ldr	r2, [r7, #4]
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	781b      	ldrb	r3, [r3, #0]
 8006dd6:	009b      	lsls	r3, r3, #2
 8006dd8:	441a      	add	r2, r3
 8006dda:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006ddc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006de0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006de4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006de8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dec:	b29b      	uxth	r3, r3
 8006dee:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006df0:	2300      	movs	r3, #0
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3734      	adds	r7, #52	; 0x34
 8006df6:	46bd      	mov	sp, r7
 8006df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfc:	4770      	bx	lr

08006dfe <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006dfe:	b580      	push	{r7, lr}
 8006e00:	b0c2      	sub	sp, #264	; 0x108
 8006e02:	af00      	add	r7, sp, #0
 8006e04:	1d3b      	adds	r3, r7, #4
 8006e06:	6018      	str	r0, [r3, #0]
 8006e08:	463b      	mov	r3, r7
 8006e0a:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006e0c:	463b      	mov	r3, r7
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	785b      	ldrb	r3, [r3, #1]
 8006e12:	2b01      	cmp	r3, #1
 8006e14:	f040 8509 	bne.w	800782a <USB_EPStartXfer+0xa2c>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006e18:	463b      	mov	r3, r7
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	699a      	ldr	r2, [r3, #24]
 8006e1e:	463b      	mov	r3, r7
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	691b      	ldr	r3, [r3, #16]
 8006e24:	429a      	cmp	r2, r3
 8006e26:	d905      	bls.n	8006e34 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8006e28:	463b      	mov	r3, r7
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	691b      	ldr	r3, [r3, #16]
 8006e2e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006e32:	e004      	b.n	8006e3e <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8006e34:	463b      	mov	r3, r7
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	699b      	ldr	r3, [r3, #24]
 8006e3a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006e3e:	463b      	mov	r3, r7
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	7b1b      	ldrb	r3, [r3, #12]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d128      	bne.n	8006e9a <USB_EPStartXfer+0x9c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006e48:	463b      	mov	r3, r7
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	6959      	ldr	r1, [r3, #20]
 8006e4e:	463b      	mov	r3, r7
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	88da      	ldrh	r2, [r3, #6]
 8006e54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e58:	b29b      	uxth	r3, r3
 8006e5a:	1d38      	adds	r0, r7, #4
 8006e5c:	6800      	ldr	r0, [r0, #0]
 8006e5e:	f001 f9ce 	bl	80081fe <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006e62:	1d3b      	adds	r3, r7, #4
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	613b      	str	r3, [r7, #16]
 8006e68:	1d3b      	adds	r3, r7, #4
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e70:	b29b      	uxth	r3, r3
 8006e72:	461a      	mov	r2, r3
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	4413      	add	r3, r2
 8006e78:	613b      	str	r3, [r7, #16]
 8006e7a:	463b      	mov	r3, r7
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	781b      	ldrb	r3, [r3, #0]
 8006e80:	011a      	lsls	r2, r3, #4
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	4413      	add	r3, r2
 8006e86:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006e8a:	60fb      	str	r3, [r7, #12]
 8006e8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e90:	b29a      	uxth	r2, r3
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	801a      	strh	r2, [r3, #0]
 8006e96:	f000 bc9f 	b.w	80077d8 <USB_EPStartXfer+0x9da>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006e9a:	463b      	mov	r3, r7
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	78db      	ldrb	r3, [r3, #3]
 8006ea0:	2b02      	cmp	r3, #2
 8006ea2:	f040 8347 	bne.w	8007534 <USB_EPStartXfer+0x736>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006ea6:	463b      	mov	r3, r7
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	6a1a      	ldr	r2, [r3, #32]
 8006eac:	463b      	mov	r3, r7
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	691b      	ldr	r3, [r3, #16]
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	f240 82eb 	bls.w	800748e <USB_EPStartXfer+0x690>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006eb8:	1d3b      	adds	r3, r7, #4
 8006eba:	681a      	ldr	r2, [r3, #0]
 8006ebc:	463b      	mov	r3, r7
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	781b      	ldrb	r3, [r3, #0]
 8006ec2:	009b      	lsls	r3, r3, #2
 8006ec4:	4413      	add	r3, r2
 8006ec6:	881b      	ldrh	r3, [r3, #0]
 8006ec8:	b29b      	uxth	r3, r3
 8006eca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ece:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ed2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8006ed6:	1d3b      	adds	r3, r7, #4
 8006ed8:	681a      	ldr	r2, [r3, #0]
 8006eda:	463b      	mov	r3, r7
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	781b      	ldrb	r3, [r3, #0]
 8006ee0:	009b      	lsls	r3, r3, #2
 8006ee2:	441a      	add	r2, r3
 8006ee4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006ee8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006eec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ef0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006ef4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ef8:	b29b      	uxth	r3, r3
 8006efa:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006efc:	463b      	mov	r3, r7
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	6a1a      	ldr	r2, [r3, #32]
 8006f02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f06:	1ad2      	subs	r2, r2, r3
 8006f08:	463b      	mov	r3, r7
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006f0e:	1d3b      	adds	r3, r7, #4
 8006f10:	681a      	ldr	r2, [r3, #0]
 8006f12:	463b      	mov	r3, r7
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	781b      	ldrb	r3, [r3, #0]
 8006f18:	009b      	lsls	r3, r3, #2
 8006f1a:	4413      	add	r3, r2
 8006f1c:	881b      	ldrh	r3, [r3, #0]
 8006f1e:	b29b      	uxth	r3, r3
 8006f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	f000 8159 	beq.w	80071dc <USB_EPStartXfer+0x3de>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006f2a:	1d3b      	adds	r3, r7, #4
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	633b      	str	r3, [r7, #48]	; 0x30
 8006f30:	463b      	mov	r3, r7
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	785b      	ldrb	r3, [r3, #1]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d164      	bne.n	8007004 <USB_EPStartXfer+0x206>
 8006f3a:	1d3b      	adds	r3, r7, #4
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f40:	1d3b      	adds	r3, r7, #4
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f48:	b29b      	uxth	r3, r3
 8006f4a:	461a      	mov	r2, r3
 8006f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f4e:	4413      	add	r3, r2
 8006f50:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f52:	463b      	mov	r3, r7
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	781b      	ldrb	r3, [r3, #0]
 8006f58:	011a      	lsls	r2, r3, #4
 8006f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f5c:	4413      	add	r3, r2
 8006f5e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006f62:	627b      	str	r3, [r7, #36]	; 0x24
 8006f64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d112      	bne.n	8006f92 <USB_EPStartXfer+0x194>
 8006f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f6e:	881b      	ldrh	r3, [r3, #0]
 8006f70:	b29b      	uxth	r3, r3
 8006f72:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f76:	b29a      	uxth	r2, r3
 8006f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f7a:	801a      	strh	r2, [r3, #0]
 8006f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f7e:	881b      	ldrh	r3, [r3, #0]
 8006f80:	b29b      	uxth	r3, r3
 8006f82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f8a:	b29a      	uxth	r2, r3
 8006f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f8e:	801a      	strh	r2, [r3, #0]
 8006f90:	e054      	b.n	800703c <USB_EPStartXfer+0x23e>
 8006f92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f96:	2b3e      	cmp	r3, #62	; 0x3e
 8006f98:	d817      	bhi.n	8006fca <USB_EPStartXfer+0x1cc>
 8006f9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f9e:	085b      	lsrs	r3, r3, #1
 8006fa0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006fa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fa8:	f003 0301 	and.w	r3, r3, #1
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d004      	beq.n	8006fba <USB_EPStartXfer+0x1bc>
 8006fb0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006fb4:	3301      	adds	r3, #1
 8006fb6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006fba:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	029b      	lsls	r3, r3, #10
 8006fc2:	b29a      	uxth	r2, r3
 8006fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc6:	801a      	strh	r2, [r3, #0]
 8006fc8:	e038      	b.n	800703c <USB_EPStartXfer+0x23e>
 8006fca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fce:	095b      	lsrs	r3, r3, #5
 8006fd0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006fd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fd8:	f003 031f 	and.w	r3, r3, #31
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d104      	bne.n	8006fea <USB_EPStartXfer+0x1ec>
 8006fe0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006fe4:	3b01      	subs	r3, #1
 8006fe6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006fea:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	029b      	lsls	r3, r3, #10
 8006ff2:	b29b      	uxth	r3, r3
 8006ff4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ff8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ffc:	b29a      	uxth	r2, r3
 8006ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007000:	801a      	strh	r2, [r3, #0]
 8007002:	e01b      	b.n	800703c <USB_EPStartXfer+0x23e>
 8007004:	463b      	mov	r3, r7
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	785b      	ldrb	r3, [r3, #1]
 800700a:	2b01      	cmp	r3, #1
 800700c:	d116      	bne.n	800703c <USB_EPStartXfer+0x23e>
 800700e:	1d3b      	adds	r3, r7, #4
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007016:	b29b      	uxth	r3, r3
 8007018:	461a      	mov	r2, r3
 800701a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800701c:	4413      	add	r3, r2
 800701e:	633b      	str	r3, [r7, #48]	; 0x30
 8007020:	463b      	mov	r3, r7
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	781b      	ldrb	r3, [r3, #0]
 8007026:	011a      	lsls	r2, r3, #4
 8007028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800702a:	4413      	add	r3, r2
 800702c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007030:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007032:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007036:	b29a      	uxth	r2, r3
 8007038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800703a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800703c:	463b      	mov	r3, r7
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	895b      	ldrh	r3, [r3, #10]
 8007042:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007046:	463b      	mov	r3, r7
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	6959      	ldr	r1, [r3, #20]
 800704c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007050:	b29b      	uxth	r3, r3
 8007052:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007056:	1d38      	adds	r0, r7, #4
 8007058:	6800      	ldr	r0, [r0, #0]
 800705a:	f001 f8d0 	bl	80081fe <USB_WritePMA>
            ep->xfer_buff += len;
 800705e:	463b      	mov	r3, r7
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	695a      	ldr	r2, [r3, #20]
 8007064:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007068:	441a      	add	r2, r3
 800706a:	463b      	mov	r3, r7
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007070:	463b      	mov	r3, r7
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	6a1a      	ldr	r2, [r3, #32]
 8007076:	463b      	mov	r3, r7
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	691b      	ldr	r3, [r3, #16]
 800707c:	429a      	cmp	r2, r3
 800707e:	d909      	bls.n	8007094 <USB_EPStartXfer+0x296>
            {
              ep->xfer_len_db -= len;
 8007080:	463b      	mov	r3, r7
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	6a1a      	ldr	r2, [r3, #32]
 8007086:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800708a:	1ad2      	subs	r2, r2, r3
 800708c:	463b      	mov	r3, r7
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	621a      	str	r2, [r3, #32]
 8007092:	e008      	b.n	80070a6 <USB_EPStartXfer+0x2a8>
            }
            else
            {
              len = ep->xfer_len_db;
 8007094:	463b      	mov	r3, r7
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	6a1b      	ldr	r3, [r3, #32]
 800709a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800709e:	463b      	mov	r3, r7
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	2200      	movs	r2, #0
 80070a4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80070a6:	463b      	mov	r3, r7
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	785b      	ldrb	r3, [r3, #1]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d164      	bne.n	800717a <USB_EPStartXfer+0x37c>
 80070b0:	1d3b      	adds	r3, r7, #4
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	61bb      	str	r3, [r7, #24]
 80070b6:	1d3b      	adds	r3, r7, #4
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070be:	b29b      	uxth	r3, r3
 80070c0:	461a      	mov	r2, r3
 80070c2:	69bb      	ldr	r3, [r7, #24]
 80070c4:	4413      	add	r3, r2
 80070c6:	61bb      	str	r3, [r7, #24]
 80070c8:	463b      	mov	r3, r7
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	781b      	ldrb	r3, [r3, #0]
 80070ce:	011a      	lsls	r2, r3, #4
 80070d0:	69bb      	ldr	r3, [r7, #24]
 80070d2:	4413      	add	r3, r2
 80070d4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80070d8:	617b      	str	r3, [r7, #20]
 80070da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d112      	bne.n	8007108 <USB_EPStartXfer+0x30a>
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	881b      	ldrh	r3, [r3, #0]
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80070ec:	b29a      	uxth	r2, r3
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	801a      	strh	r2, [r3, #0]
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	881b      	ldrh	r3, [r3, #0]
 80070f6:	b29b      	uxth	r3, r3
 80070f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007100:	b29a      	uxth	r2, r3
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	801a      	strh	r2, [r3, #0]
 8007106:	e057      	b.n	80071b8 <USB_EPStartXfer+0x3ba>
 8007108:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800710c:	2b3e      	cmp	r3, #62	; 0x3e
 800710e:	d817      	bhi.n	8007140 <USB_EPStartXfer+0x342>
 8007110:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007114:	085b      	lsrs	r3, r3, #1
 8007116:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800711a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800711e:	f003 0301 	and.w	r3, r3, #1
 8007122:	2b00      	cmp	r3, #0
 8007124:	d004      	beq.n	8007130 <USB_EPStartXfer+0x332>
 8007126:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800712a:	3301      	adds	r3, #1
 800712c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007130:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007134:	b29b      	uxth	r3, r3
 8007136:	029b      	lsls	r3, r3, #10
 8007138:	b29a      	uxth	r2, r3
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	801a      	strh	r2, [r3, #0]
 800713e:	e03b      	b.n	80071b8 <USB_EPStartXfer+0x3ba>
 8007140:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007144:	095b      	lsrs	r3, r3, #5
 8007146:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800714a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800714e:	f003 031f 	and.w	r3, r3, #31
 8007152:	2b00      	cmp	r3, #0
 8007154:	d104      	bne.n	8007160 <USB_EPStartXfer+0x362>
 8007156:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800715a:	3b01      	subs	r3, #1
 800715c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007160:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007164:	b29b      	uxth	r3, r3
 8007166:	029b      	lsls	r3, r3, #10
 8007168:	b29b      	uxth	r3, r3
 800716a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800716e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007172:	b29a      	uxth	r2, r3
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	801a      	strh	r2, [r3, #0]
 8007178:	e01e      	b.n	80071b8 <USB_EPStartXfer+0x3ba>
 800717a:	463b      	mov	r3, r7
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	785b      	ldrb	r3, [r3, #1]
 8007180:	2b01      	cmp	r3, #1
 8007182:	d119      	bne.n	80071b8 <USB_EPStartXfer+0x3ba>
 8007184:	1d3b      	adds	r3, r7, #4
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	623b      	str	r3, [r7, #32]
 800718a:	1d3b      	adds	r3, r7, #4
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007192:	b29b      	uxth	r3, r3
 8007194:	461a      	mov	r2, r3
 8007196:	6a3b      	ldr	r3, [r7, #32]
 8007198:	4413      	add	r3, r2
 800719a:	623b      	str	r3, [r7, #32]
 800719c:	463b      	mov	r3, r7
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	781b      	ldrb	r3, [r3, #0]
 80071a2:	011a      	lsls	r2, r3, #4
 80071a4:	6a3b      	ldr	r3, [r7, #32]
 80071a6:	4413      	add	r3, r2
 80071a8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80071ac:	61fb      	str	r3, [r7, #28]
 80071ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071b2:	b29a      	uxth	r2, r3
 80071b4:	69fb      	ldr	r3, [r7, #28]
 80071b6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80071b8:	463b      	mov	r3, r7
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	891b      	ldrh	r3, [r3, #8]
 80071be:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80071c2:	463b      	mov	r3, r7
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	6959      	ldr	r1, [r3, #20]
 80071c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071cc:	b29b      	uxth	r3, r3
 80071ce:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80071d2:	1d38      	adds	r0, r7, #4
 80071d4:	6800      	ldr	r0, [r0, #0]
 80071d6:	f001 f812 	bl	80081fe <USB_WritePMA>
 80071da:	e2fd      	b.n	80077d8 <USB_EPStartXfer+0x9da>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80071dc:	463b      	mov	r3, r7
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	785b      	ldrb	r3, [r3, #1]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d164      	bne.n	80072b0 <USB_EPStartXfer+0x4b2>
 80071e6:	1d3b      	adds	r3, r7, #4
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80071ec:	1d3b      	adds	r3, r7, #4
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071f4:	b29b      	uxth	r3, r3
 80071f6:	461a      	mov	r2, r3
 80071f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071fa:	4413      	add	r3, r2
 80071fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80071fe:	463b      	mov	r3, r7
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	781b      	ldrb	r3, [r3, #0]
 8007204:	011a      	lsls	r2, r3, #4
 8007206:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007208:	4413      	add	r3, r2
 800720a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800720e:	647b      	str	r3, [r7, #68]	; 0x44
 8007210:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007214:	2b00      	cmp	r3, #0
 8007216:	d112      	bne.n	800723e <USB_EPStartXfer+0x440>
 8007218:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800721a:	881b      	ldrh	r3, [r3, #0]
 800721c:	b29b      	uxth	r3, r3
 800721e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007222:	b29a      	uxth	r2, r3
 8007224:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007226:	801a      	strh	r2, [r3, #0]
 8007228:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800722a:	881b      	ldrh	r3, [r3, #0]
 800722c:	b29b      	uxth	r3, r3
 800722e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007232:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007236:	b29a      	uxth	r2, r3
 8007238:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800723a:	801a      	strh	r2, [r3, #0]
 800723c:	e057      	b.n	80072ee <USB_EPStartXfer+0x4f0>
 800723e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007242:	2b3e      	cmp	r3, #62	; 0x3e
 8007244:	d817      	bhi.n	8007276 <USB_EPStartXfer+0x478>
 8007246:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800724a:	085b      	lsrs	r3, r3, #1
 800724c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007250:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007254:	f003 0301 	and.w	r3, r3, #1
 8007258:	2b00      	cmp	r3, #0
 800725a:	d004      	beq.n	8007266 <USB_EPStartXfer+0x468>
 800725c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007260:	3301      	adds	r3, #1
 8007262:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007266:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800726a:	b29b      	uxth	r3, r3
 800726c:	029b      	lsls	r3, r3, #10
 800726e:	b29a      	uxth	r2, r3
 8007270:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007272:	801a      	strh	r2, [r3, #0]
 8007274:	e03b      	b.n	80072ee <USB_EPStartXfer+0x4f0>
 8007276:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800727a:	095b      	lsrs	r3, r3, #5
 800727c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007280:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007284:	f003 031f 	and.w	r3, r3, #31
 8007288:	2b00      	cmp	r3, #0
 800728a:	d104      	bne.n	8007296 <USB_EPStartXfer+0x498>
 800728c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007290:	3b01      	subs	r3, #1
 8007292:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007296:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800729a:	b29b      	uxth	r3, r3
 800729c:	029b      	lsls	r3, r3, #10
 800729e:	b29b      	uxth	r3, r3
 80072a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072a8:	b29a      	uxth	r2, r3
 80072aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072ac:	801a      	strh	r2, [r3, #0]
 80072ae:	e01e      	b.n	80072ee <USB_EPStartXfer+0x4f0>
 80072b0:	463b      	mov	r3, r7
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	785b      	ldrb	r3, [r3, #1]
 80072b6:	2b01      	cmp	r3, #1
 80072b8:	d119      	bne.n	80072ee <USB_EPStartXfer+0x4f0>
 80072ba:	1d3b      	adds	r3, r7, #4
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	653b      	str	r3, [r7, #80]	; 0x50
 80072c0:	1d3b      	adds	r3, r7, #4
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072c8:	b29b      	uxth	r3, r3
 80072ca:	461a      	mov	r2, r3
 80072cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072ce:	4413      	add	r3, r2
 80072d0:	653b      	str	r3, [r7, #80]	; 0x50
 80072d2:	463b      	mov	r3, r7
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	781b      	ldrb	r3, [r3, #0]
 80072d8:	011a      	lsls	r2, r3, #4
 80072da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072dc:	4413      	add	r3, r2
 80072de:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80072e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80072e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072e8:	b29a      	uxth	r2, r3
 80072ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072ec:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80072ee:	463b      	mov	r3, r7
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	891b      	ldrh	r3, [r3, #8]
 80072f4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80072f8:	463b      	mov	r3, r7
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	6959      	ldr	r1, [r3, #20]
 80072fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007302:	b29b      	uxth	r3, r3
 8007304:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007308:	1d38      	adds	r0, r7, #4
 800730a:	6800      	ldr	r0, [r0, #0]
 800730c:	f000 ff77 	bl	80081fe <USB_WritePMA>
            ep->xfer_buff += len;
 8007310:	463b      	mov	r3, r7
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	695a      	ldr	r2, [r3, #20]
 8007316:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800731a:	441a      	add	r2, r3
 800731c:	463b      	mov	r3, r7
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007322:	463b      	mov	r3, r7
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	6a1a      	ldr	r2, [r3, #32]
 8007328:	463b      	mov	r3, r7
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	691b      	ldr	r3, [r3, #16]
 800732e:	429a      	cmp	r2, r3
 8007330:	d909      	bls.n	8007346 <USB_EPStartXfer+0x548>
            {
              ep->xfer_len_db -= len;
 8007332:	463b      	mov	r3, r7
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	6a1a      	ldr	r2, [r3, #32]
 8007338:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800733c:	1ad2      	subs	r2, r2, r3
 800733e:	463b      	mov	r3, r7
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	621a      	str	r2, [r3, #32]
 8007344:	e008      	b.n	8007358 <USB_EPStartXfer+0x55a>
            }
            else
            {
              len = ep->xfer_len_db;
 8007346:	463b      	mov	r3, r7
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	6a1b      	ldr	r3, [r3, #32]
 800734c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8007350:	463b      	mov	r3, r7
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	2200      	movs	r2, #0
 8007356:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007358:	1d3b      	adds	r3, r7, #4
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	643b      	str	r3, [r7, #64]	; 0x40
 800735e:	463b      	mov	r3, r7
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	785b      	ldrb	r3, [r3, #1]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d164      	bne.n	8007432 <USB_EPStartXfer+0x634>
 8007368:	1d3b      	adds	r3, r7, #4
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	63bb      	str	r3, [r7, #56]	; 0x38
 800736e:	1d3b      	adds	r3, r7, #4
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007376:	b29b      	uxth	r3, r3
 8007378:	461a      	mov	r2, r3
 800737a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800737c:	4413      	add	r3, r2
 800737e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007380:	463b      	mov	r3, r7
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	781b      	ldrb	r3, [r3, #0]
 8007386:	011a      	lsls	r2, r3, #4
 8007388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800738a:	4413      	add	r3, r2
 800738c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007390:	637b      	str	r3, [r7, #52]	; 0x34
 8007392:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007396:	2b00      	cmp	r3, #0
 8007398:	d112      	bne.n	80073c0 <USB_EPStartXfer+0x5c2>
 800739a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800739c:	881b      	ldrh	r3, [r3, #0]
 800739e:	b29b      	uxth	r3, r3
 80073a0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80073a4:	b29a      	uxth	r2, r3
 80073a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073a8:	801a      	strh	r2, [r3, #0]
 80073aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073ac:	881b      	ldrh	r3, [r3, #0]
 80073ae:	b29b      	uxth	r3, r3
 80073b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073b8:	b29a      	uxth	r2, r3
 80073ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073bc:	801a      	strh	r2, [r3, #0]
 80073be:	e054      	b.n	800746a <USB_EPStartXfer+0x66c>
 80073c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073c4:	2b3e      	cmp	r3, #62	; 0x3e
 80073c6:	d817      	bhi.n	80073f8 <USB_EPStartXfer+0x5fa>
 80073c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073cc:	085b      	lsrs	r3, r3, #1
 80073ce:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80073d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073d6:	f003 0301 	and.w	r3, r3, #1
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d004      	beq.n	80073e8 <USB_EPStartXfer+0x5ea>
 80073de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073e2:	3301      	adds	r3, #1
 80073e4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80073e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073ec:	b29b      	uxth	r3, r3
 80073ee:	029b      	lsls	r3, r3, #10
 80073f0:	b29a      	uxth	r2, r3
 80073f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073f4:	801a      	strh	r2, [r3, #0]
 80073f6:	e038      	b.n	800746a <USB_EPStartXfer+0x66c>
 80073f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073fc:	095b      	lsrs	r3, r3, #5
 80073fe:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007402:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007406:	f003 031f 	and.w	r3, r3, #31
 800740a:	2b00      	cmp	r3, #0
 800740c:	d104      	bne.n	8007418 <USB_EPStartXfer+0x61a>
 800740e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007412:	3b01      	subs	r3, #1
 8007414:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800741c:	b29b      	uxth	r3, r3
 800741e:	029b      	lsls	r3, r3, #10
 8007420:	b29b      	uxth	r3, r3
 8007422:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007426:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800742a:	b29a      	uxth	r2, r3
 800742c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800742e:	801a      	strh	r2, [r3, #0]
 8007430:	e01b      	b.n	800746a <USB_EPStartXfer+0x66c>
 8007432:	463b      	mov	r3, r7
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	785b      	ldrb	r3, [r3, #1]
 8007438:	2b01      	cmp	r3, #1
 800743a:	d116      	bne.n	800746a <USB_EPStartXfer+0x66c>
 800743c:	1d3b      	adds	r3, r7, #4
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007444:	b29b      	uxth	r3, r3
 8007446:	461a      	mov	r2, r3
 8007448:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800744a:	4413      	add	r3, r2
 800744c:	643b      	str	r3, [r7, #64]	; 0x40
 800744e:	463b      	mov	r3, r7
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	781b      	ldrb	r3, [r3, #0]
 8007454:	011a      	lsls	r2, r3, #4
 8007456:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007458:	4413      	add	r3, r2
 800745a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800745e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007460:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007464:	b29a      	uxth	r2, r3
 8007466:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007468:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800746a:	463b      	mov	r3, r7
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	895b      	ldrh	r3, [r3, #10]
 8007470:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007474:	463b      	mov	r3, r7
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	6959      	ldr	r1, [r3, #20]
 800747a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800747e:	b29b      	uxth	r3, r3
 8007480:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007484:	1d38      	adds	r0, r7, #4
 8007486:	6800      	ldr	r0, [r0, #0]
 8007488:	f000 feb9 	bl	80081fe <USB_WritePMA>
 800748c:	e1a4      	b.n	80077d8 <USB_EPStartXfer+0x9da>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800748e:	463b      	mov	r3, r7
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	6a1b      	ldr	r3, [r3, #32]
 8007494:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007498:	1d3b      	adds	r3, r7, #4
 800749a:	681a      	ldr	r2, [r3, #0]
 800749c:	463b      	mov	r3, r7
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	781b      	ldrb	r3, [r3, #0]
 80074a2:	009b      	lsls	r3, r3, #2
 80074a4:	4413      	add	r3, r2
 80074a6:	881b      	ldrh	r3, [r3, #0]
 80074a8:	b29b      	uxth	r3, r3
 80074aa:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80074ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074b2:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80074b6:	1d3b      	adds	r3, r7, #4
 80074b8:	681a      	ldr	r2, [r3, #0]
 80074ba:	463b      	mov	r3, r7
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	781b      	ldrb	r3, [r3, #0]
 80074c0:	009b      	lsls	r3, r3, #2
 80074c2:	441a      	add	r2, r3
 80074c4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80074c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074d8:	b29b      	uxth	r3, r3
 80074da:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80074dc:	1d3b      	adds	r3, r7, #4
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80074e2:	1d3b      	adds	r3, r7, #4
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074ea:	b29b      	uxth	r3, r3
 80074ec:	461a      	mov	r2, r3
 80074ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80074f0:	4413      	add	r3, r2
 80074f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80074f4:	463b      	mov	r3, r7
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	781b      	ldrb	r3, [r3, #0]
 80074fa:	011a      	lsls	r2, r3, #4
 80074fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80074fe:	4413      	add	r3, r2
 8007500:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007504:	65bb      	str	r3, [r7, #88]	; 0x58
 8007506:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800750a:	b29a      	uxth	r2, r3
 800750c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800750e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007510:	463b      	mov	r3, r7
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	891b      	ldrh	r3, [r3, #8]
 8007516:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800751a:	463b      	mov	r3, r7
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	6959      	ldr	r1, [r3, #20]
 8007520:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007524:	b29b      	uxth	r3, r3
 8007526:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800752a:	1d38      	adds	r0, r7, #4
 800752c:	6800      	ldr	r0, [r0, #0]
 800752e:	f000 fe66 	bl	80081fe <USB_WritePMA>
 8007532:	e151      	b.n	80077d8 <USB_EPStartXfer+0x9da>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007534:	463b      	mov	r3, r7
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	6a1a      	ldr	r2, [r3, #32]
 800753a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800753e:	1ad2      	subs	r2, r2, r3
 8007540:	463b      	mov	r3, r7
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007546:	1d3b      	adds	r3, r7, #4
 8007548:	681a      	ldr	r2, [r3, #0]
 800754a:	463b      	mov	r3, r7
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	781b      	ldrb	r3, [r3, #0]
 8007550:	009b      	lsls	r3, r3, #2
 8007552:	4413      	add	r3, r2
 8007554:	881b      	ldrh	r3, [r3, #0]
 8007556:	b29b      	uxth	r3, r3
 8007558:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800755c:	2b00      	cmp	r3, #0
 800755e:	f000 809b 	beq.w	8007698 <USB_EPStartXfer+0x89a>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007562:	1d3b      	adds	r3, r7, #4
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	673b      	str	r3, [r7, #112]	; 0x70
 8007568:	463b      	mov	r3, r7
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	785b      	ldrb	r3, [r3, #1]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d164      	bne.n	800763c <USB_EPStartXfer+0x83e>
 8007572:	1d3b      	adds	r3, r7, #4
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	66bb      	str	r3, [r7, #104]	; 0x68
 8007578:	1d3b      	adds	r3, r7, #4
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007580:	b29b      	uxth	r3, r3
 8007582:	461a      	mov	r2, r3
 8007584:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007586:	4413      	add	r3, r2
 8007588:	66bb      	str	r3, [r7, #104]	; 0x68
 800758a:	463b      	mov	r3, r7
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	781b      	ldrb	r3, [r3, #0]
 8007590:	011a      	lsls	r2, r3, #4
 8007592:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007594:	4413      	add	r3, r2
 8007596:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800759a:	667b      	str	r3, [r7, #100]	; 0x64
 800759c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d112      	bne.n	80075ca <USB_EPStartXfer+0x7cc>
 80075a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80075a6:	881b      	ldrh	r3, [r3, #0]
 80075a8:	b29b      	uxth	r3, r3
 80075aa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80075ae:	b29a      	uxth	r2, r3
 80075b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80075b2:	801a      	strh	r2, [r3, #0]
 80075b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80075b6:	881b      	ldrh	r3, [r3, #0]
 80075b8:	b29b      	uxth	r3, r3
 80075ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075c2:	b29a      	uxth	r2, r3
 80075c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80075c6:	801a      	strh	r2, [r3, #0]
 80075c8:	e054      	b.n	8007674 <USB_EPStartXfer+0x876>
 80075ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075ce:	2b3e      	cmp	r3, #62	; 0x3e
 80075d0:	d817      	bhi.n	8007602 <USB_EPStartXfer+0x804>
 80075d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075d6:	085b      	lsrs	r3, r3, #1
 80075d8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80075dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075e0:	f003 0301 	and.w	r3, r3, #1
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d004      	beq.n	80075f2 <USB_EPStartXfer+0x7f4>
 80075e8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80075ec:	3301      	adds	r3, #1
 80075ee:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80075f2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80075f6:	b29b      	uxth	r3, r3
 80075f8:	029b      	lsls	r3, r3, #10
 80075fa:	b29a      	uxth	r2, r3
 80075fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80075fe:	801a      	strh	r2, [r3, #0]
 8007600:	e038      	b.n	8007674 <USB_EPStartXfer+0x876>
 8007602:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007606:	095b      	lsrs	r3, r3, #5
 8007608:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800760c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007610:	f003 031f 	and.w	r3, r3, #31
 8007614:	2b00      	cmp	r3, #0
 8007616:	d104      	bne.n	8007622 <USB_EPStartXfer+0x824>
 8007618:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800761c:	3b01      	subs	r3, #1
 800761e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007622:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007626:	b29b      	uxth	r3, r3
 8007628:	029b      	lsls	r3, r3, #10
 800762a:	b29b      	uxth	r3, r3
 800762c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007630:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007634:	b29a      	uxth	r2, r3
 8007636:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007638:	801a      	strh	r2, [r3, #0]
 800763a:	e01b      	b.n	8007674 <USB_EPStartXfer+0x876>
 800763c:	463b      	mov	r3, r7
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	785b      	ldrb	r3, [r3, #1]
 8007642:	2b01      	cmp	r3, #1
 8007644:	d116      	bne.n	8007674 <USB_EPStartXfer+0x876>
 8007646:	1d3b      	adds	r3, r7, #4
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800764e:	b29b      	uxth	r3, r3
 8007650:	461a      	mov	r2, r3
 8007652:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007654:	4413      	add	r3, r2
 8007656:	673b      	str	r3, [r7, #112]	; 0x70
 8007658:	463b      	mov	r3, r7
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	781b      	ldrb	r3, [r3, #0]
 800765e:	011a      	lsls	r2, r3, #4
 8007660:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007662:	4413      	add	r3, r2
 8007664:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007668:	66fb      	str	r3, [r7, #108]	; 0x6c
 800766a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800766e:	b29a      	uxth	r2, r3
 8007670:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007672:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007674:	463b      	mov	r3, r7
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	895b      	ldrh	r3, [r3, #10]
 800767a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800767e:	463b      	mov	r3, r7
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	6959      	ldr	r1, [r3, #20]
 8007684:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007688:	b29b      	uxth	r3, r3
 800768a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800768e:	1d38      	adds	r0, r7, #4
 8007690:	6800      	ldr	r0, [r0, #0]
 8007692:	f000 fdb4 	bl	80081fe <USB_WritePMA>
 8007696:	e09f      	b.n	80077d8 <USB_EPStartXfer+0x9da>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007698:	463b      	mov	r3, r7
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	785b      	ldrb	r3, [r3, #1]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d164      	bne.n	800776c <USB_EPStartXfer+0x96e>
 80076a2:	1d3b      	adds	r3, r7, #4
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80076a8:	1d3b      	adds	r3, r7, #4
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	461a      	mov	r2, r3
 80076b4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80076b6:	4413      	add	r3, r2
 80076b8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80076ba:	463b      	mov	r3, r7
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	781b      	ldrb	r3, [r3, #0]
 80076c0:	011a      	lsls	r2, r3, #4
 80076c2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80076c4:	4413      	add	r3, r2
 80076c6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80076ca:	67bb      	str	r3, [r7, #120]	; 0x78
 80076cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d112      	bne.n	80076fa <USB_EPStartXfer+0x8fc>
 80076d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80076d6:	881b      	ldrh	r3, [r3, #0]
 80076d8:	b29b      	uxth	r3, r3
 80076da:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80076de:	b29a      	uxth	r2, r3
 80076e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80076e2:	801a      	strh	r2, [r3, #0]
 80076e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80076e6:	881b      	ldrh	r3, [r3, #0]
 80076e8:	b29b      	uxth	r3, r3
 80076ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076f2:	b29a      	uxth	r2, r3
 80076f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80076f6:	801a      	strh	r2, [r3, #0]
 80076f8:	e05d      	b.n	80077b6 <USB_EPStartXfer+0x9b8>
 80076fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076fe:	2b3e      	cmp	r3, #62	; 0x3e
 8007700:	d817      	bhi.n	8007732 <USB_EPStartXfer+0x934>
 8007702:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007706:	085b      	lsrs	r3, r3, #1
 8007708:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800770c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007710:	f003 0301 	and.w	r3, r3, #1
 8007714:	2b00      	cmp	r3, #0
 8007716:	d004      	beq.n	8007722 <USB_EPStartXfer+0x924>
 8007718:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800771c:	3301      	adds	r3, #1
 800771e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007722:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007726:	b29b      	uxth	r3, r3
 8007728:	029b      	lsls	r3, r3, #10
 800772a:	b29a      	uxth	r2, r3
 800772c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800772e:	801a      	strh	r2, [r3, #0]
 8007730:	e041      	b.n	80077b6 <USB_EPStartXfer+0x9b8>
 8007732:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007736:	095b      	lsrs	r3, r3, #5
 8007738:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800773c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007740:	f003 031f 	and.w	r3, r3, #31
 8007744:	2b00      	cmp	r3, #0
 8007746:	d104      	bne.n	8007752 <USB_EPStartXfer+0x954>
 8007748:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800774c:	3b01      	subs	r3, #1
 800774e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007752:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007756:	b29b      	uxth	r3, r3
 8007758:	029b      	lsls	r3, r3, #10
 800775a:	b29b      	uxth	r3, r3
 800775c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007760:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007764:	b29a      	uxth	r2, r3
 8007766:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007768:	801a      	strh	r2, [r3, #0]
 800776a:	e024      	b.n	80077b6 <USB_EPStartXfer+0x9b8>
 800776c:	463b      	mov	r3, r7
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	785b      	ldrb	r3, [r3, #1]
 8007772:	2b01      	cmp	r3, #1
 8007774:	d11f      	bne.n	80077b6 <USB_EPStartXfer+0x9b8>
 8007776:	1d3b      	adds	r3, r7, #4
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800777e:	1d3b      	adds	r3, r7, #4
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007786:	b29b      	uxth	r3, r3
 8007788:	461a      	mov	r2, r3
 800778a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800778e:	4413      	add	r3, r2
 8007790:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007794:	463b      	mov	r3, r7
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	781b      	ldrb	r3, [r3, #0]
 800779a:	011a      	lsls	r2, r3, #4
 800779c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80077a0:	4413      	add	r3, r2
 80077a2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80077a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80077aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077ae:	b29a      	uxth	r2, r3
 80077b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80077b4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80077b6:	463b      	mov	r3, r7
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	891b      	ldrh	r3, [r3, #8]
 80077bc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80077c0:	463b      	mov	r3, r7
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	6959      	ldr	r1, [r3, #20]
 80077c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077ca:	b29b      	uxth	r3, r3
 80077cc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80077d0:	1d38      	adds	r0, r7, #4
 80077d2:	6800      	ldr	r0, [r0, #0]
 80077d4:	f000 fd13 	bl	80081fe <USB_WritePMA>
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80077d8:	1d3b      	adds	r3, r7, #4
 80077da:	681a      	ldr	r2, [r3, #0]
 80077dc:	463b      	mov	r3, r7
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	781b      	ldrb	r3, [r3, #0]
 80077e2:	009b      	lsls	r3, r3, #2
 80077e4:	4413      	add	r3, r2
 80077e6:	881b      	ldrh	r3, [r3, #0]
 80077e8:	b29b      	uxth	r3, r3
 80077ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077f2:	817b      	strh	r3, [r7, #10]
 80077f4:	897b      	ldrh	r3, [r7, #10]
 80077f6:	f083 0310 	eor.w	r3, r3, #16
 80077fa:	817b      	strh	r3, [r7, #10]
 80077fc:	897b      	ldrh	r3, [r7, #10]
 80077fe:	f083 0320 	eor.w	r3, r3, #32
 8007802:	817b      	strh	r3, [r7, #10]
 8007804:	1d3b      	adds	r3, r7, #4
 8007806:	681a      	ldr	r2, [r3, #0]
 8007808:	463b      	mov	r3, r7
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	781b      	ldrb	r3, [r3, #0]
 800780e:	009b      	lsls	r3, r3, #2
 8007810:	441a      	add	r2, r3
 8007812:	897b      	ldrh	r3, [r7, #10]
 8007814:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007818:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800781c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007820:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007824:	b29b      	uxth	r3, r3
 8007826:	8013      	strh	r3, [r2, #0]
 8007828:	e3b5      	b.n	8007f96 <USB_EPStartXfer+0x1198>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800782a:	463b      	mov	r3, r7
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	7b1b      	ldrb	r3, [r3, #12]
 8007830:	2b00      	cmp	r3, #0
 8007832:	f040 8090 	bne.w	8007956 <USB_EPStartXfer+0xb58>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007836:	463b      	mov	r3, r7
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	699a      	ldr	r2, [r3, #24]
 800783c:	463b      	mov	r3, r7
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	691b      	ldr	r3, [r3, #16]
 8007842:	429a      	cmp	r2, r3
 8007844:	d90e      	bls.n	8007864 <USB_EPStartXfer+0xa66>
      {
        len = ep->maxpacket;
 8007846:	463b      	mov	r3, r7
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	691b      	ldr	r3, [r3, #16]
 800784c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8007850:	463b      	mov	r3, r7
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	699a      	ldr	r2, [r3, #24]
 8007856:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800785a:	1ad2      	subs	r2, r2, r3
 800785c:	463b      	mov	r3, r7
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	619a      	str	r2, [r3, #24]
 8007862:	e008      	b.n	8007876 <USB_EPStartXfer+0xa78>
      }
      else
      {
        len = ep->xfer_len;
 8007864:	463b      	mov	r3, r7
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	699b      	ldr	r3, [r3, #24]
 800786a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800786e:	463b      	mov	r3, r7
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	2200      	movs	r2, #0
 8007874:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007876:	1d3b      	adds	r3, r7, #4
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800787e:	1d3b      	adds	r3, r7, #4
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007886:	b29b      	uxth	r3, r3
 8007888:	461a      	mov	r2, r3
 800788a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800788e:	4413      	add	r3, r2
 8007890:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007894:	463b      	mov	r3, r7
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	781b      	ldrb	r3, [r3, #0]
 800789a:	011a      	lsls	r2, r3, #4
 800789c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80078a0:	4413      	add	r3, r2
 80078a2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80078a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80078aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d116      	bne.n	80078e0 <USB_EPStartXfer+0xae2>
 80078b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80078b6:	881b      	ldrh	r3, [r3, #0]
 80078b8:	b29b      	uxth	r3, r3
 80078ba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80078be:	b29a      	uxth	r2, r3
 80078c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80078c4:	801a      	strh	r2, [r3, #0]
 80078c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80078ca:	881b      	ldrh	r3, [r3, #0]
 80078cc:	b29b      	uxth	r3, r3
 80078ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078d6:	b29a      	uxth	r2, r3
 80078d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80078dc:	801a      	strh	r2, [r3, #0]
 80078de:	e32c      	b.n	8007f3a <USB_EPStartXfer+0x113c>
 80078e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078e4:	2b3e      	cmp	r3, #62	; 0x3e
 80078e6:	d818      	bhi.n	800791a <USB_EPStartXfer+0xb1c>
 80078e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078ec:	085b      	lsrs	r3, r3, #1
 80078ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80078f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078f6:	f003 0301 	and.w	r3, r3, #1
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d004      	beq.n	8007908 <USB_EPStartXfer+0xb0a>
 80078fe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007902:	3301      	adds	r3, #1
 8007904:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007908:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800790c:	b29b      	uxth	r3, r3
 800790e:	029b      	lsls	r3, r3, #10
 8007910:	b29a      	uxth	r2, r3
 8007912:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007916:	801a      	strh	r2, [r3, #0]
 8007918:	e30f      	b.n	8007f3a <USB_EPStartXfer+0x113c>
 800791a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800791e:	095b      	lsrs	r3, r3, #5
 8007920:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007924:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007928:	f003 031f 	and.w	r3, r3, #31
 800792c:	2b00      	cmp	r3, #0
 800792e:	d104      	bne.n	800793a <USB_EPStartXfer+0xb3c>
 8007930:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007934:	3b01      	subs	r3, #1
 8007936:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800793a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800793e:	b29b      	uxth	r3, r3
 8007940:	029b      	lsls	r3, r3, #10
 8007942:	b29b      	uxth	r3, r3
 8007944:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007948:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800794c:	b29a      	uxth	r2, r3
 800794e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007952:	801a      	strh	r2, [r3, #0]
 8007954:	e2f1      	b.n	8007f3a <USB_EPStartXfer+0x113c>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007956:	463b      	mov	r3, r7
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	78db      	ldrb	r3, [r3, #3]
 800795c:	2b02      	cmp	r3, #2
 800795e:	f040 818f 	bne.w	8007c80 <USB_EPStartXfer+0xe82>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007962:	463b      	mov	r3, r7
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	785b      	ldrb	r3, [r3, #1]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d175      	bne.n	8007a58 <USB_EPStartXfer+0xc5a>
 800796c:	1d3b      	adds	r3, r7, #4
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007974:	1d3b      	adds	r3, r7, #4
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800797c:	b29b      	uxth	r3, r3
 800797e:	461a      	mov	r2, r3
 8007980:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007984:	4413      	add	r3, r2
 8007986:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800798a:	463b      	mov	r3, r7
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	781b      	ldrb	r3, [r3, #0]
 8007990:	011a      	lsls	r2, r3, #4
 8007992:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007996:	4413      	add	r3, r2
 8007998:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800799c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80079a0:	463b      	mov	r3, r7
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	691b      	ldr	r3, [r3, #16]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d116      	bne.n	80079d8 <USB_EPStartXfer+0xbda>
 80079aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80079ae:	881b      	ldrh	r3, [r3, #0]
 80079b0:	b29b      	uxth	r3, r3
 80079b2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80079b6:	b29a      	uxth	r2, r3
 80079b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80079bc:	801a      	strh	r2, [r3, #0]
 80079be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80079c2:	881b      	ldrh	r3, [r3, #0]
 80079c4:	b29b      	uxth	r3, r3
 80079c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079ce:	b29a      	uxth	r2, r3
 80079d0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80079d4:	801a      	strh	r2, [r3, #0]
 80079d6:	e065      	b.n	8007aa4 <USB_EPStartXfer+0xca6>
 80079d8:	463b      	mov	r3, r7
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	691b      	ldr	r3, [r3, #16]
 80079de:	2b3e      	cmp	r3, #62	; 0x3e
 80079e0:	d81a      	bhi.n	8007a18 <USB_EPStartXfer+0xc1a>
 80079e2:	463b      	mov	r3, r7
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	691b      	ldr	r3, [r3, #16]
 80079e8:	085b      	lsrs	r3, r3, #1
 80079ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80079ee:	463b      	mov	r3, r7
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	691b      	ldr	r3, [r3, #16]
 80079f4:	f003 0301 	and.w	r3, r3, #1
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d004      	beq.n	8007a06 <USB_EPStartXfer+0xc08>
 80079fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a00:	3301      	adds	r3, #1
 8007a02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007a06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a0a:	b29b      	uxth	r3, r3
 8007a0c:	029b      	lsls	r3, r3, #10
 8007a0e:	b29a      	uxth	r2, r3
 8007a10:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007a14:	801a      	strh	r2, [r3, #0]
 8007a16:	e045      	b.n	8007aa4 <USB_EPStartXfer+0xca6>
 8007a18:	463b      	mov	r3, r7
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	691b      	ldr	r3, [r3, #16]
 8007a1e:	095b      	lsrs	r3, r3, #5
 8007a20:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007a24:	463b      	mov	r3, r7
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	691b      	ldr	r3, [r3, #16]
 8007a2a:	f003 031f 	and.w	r3, r3, #31
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d104      	bne.n	8007a3c <USB_EPStartXfer+0xc3e>
 8007a32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a36:	3b01      	subs	r3, #1
 8007a38:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007a3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a40:	b29b      	uxth	r3, r3
 8007a42:	029b      	lsls	r3, r3, #10
 8007a44:	b29b      	uxth	r3, r3
 8007a46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a4e:	b29a      	uxth	r2, r3
 8007a50:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007a54:	801a      	strh	r2, [r3, #0]
 8007a56:	e025      	b.n	8007aa4 <USB_EPStartXfer+0xca6>
 8007a58:	463b      	mov	r3, r7
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	785b      	ldrb	r3, [r3, #1]
 8007a5e:	2b01      	cmp	r3, #1
 8007a60:	d120      	bne.n	8007aa4 <USB_EPStartXfer+0xca6>
 8007a62:	1d3b      	adds	r3, r7, #4
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007a6a:	1d3b      	adds	r3, r7, #4
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a72:	b29b      	uxth	r3, r3
 8007a74:	461a      	mov	r2, r3
 8007a76:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007a7a:	4413      	add	r3, r2
 8007a7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007a80:	463b      	mov	r3, r7
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	781b      	ldrb	r3, [r3, #0]
 8007a86:	011a      	lsls	r2, r3, #4
 8007a88:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007a8c:	4413      	add	r3, r2
 8007a8e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007a92:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007a96:	463b      	mov	r3, r7
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	691b      	ldr	r3, [r3, #16]
 8007a9c:	b29a      	uxth	r2, r3
 8007a9e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007aa2:	801a      	strh	r2, [r3, #0]
 8007aa4:	1d3b      	adds	r3, r7, #4
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007aac:	463b      	mov	r3, r7
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	785b      	ldrb	r3, [r3, #1]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d175      	bne.n	8007ba2 <USB_EPStartXfer+0xda4>
 8007ab6:	1d3b      	adds	r3, r7, #4
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007abe:	1d3b      	adds	r3, r7, #4
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ac6:	b29b      	uxth	r3, r3
 8007ac8:	461a      	mov	r2, r3
 8007aca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007ace:	4413      	add	r3, r2
 8007ad0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007ad4:	463b      	mov	r3, r7
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	781b      	ldrb	r3, [r3, #0]
 8007ada:	011a      	lsls	r2, r3, #4
 8007adc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007ae0:	4413      	add	r3, r2
 8007ae2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007ae6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007aea:	463b      	mov	r3, r7
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	691b      	ldr	r3, [r3, #16]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d116      	bne.n	8007b22 <USB_EPStartXfer+0xd24>
 8007af4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007af8:	881b      	ldrh	r3, [r3, #0]
 8007afa:	b29b      	uxth	r3, r3
 8007afc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007b00:	b29a      	uxth	r2, r3
 8007b02:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007b06:	801a      	strh	r2, [r3, #0]
 8007b08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007b0c:	881b      	ldrh	r3, [r3, #0]
 8007b0e:	b29b      	uxth	r3, r3
 8007b10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b18:	b29a      	uxth	r2, r3
 8007b1a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007b1e:	801a      	strh	r2, [r3, #0]
 8007b20:	e061      	b.n	8007be6 <USB_EPStartXfer+0xde8>
 8007b22:	463b      	mov	r3, r7
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	691b      	ldr	r3, [r3, #16]
 8007b28:	2b3e      	cmp	r3, #62	; 0x3e
 8007b2a:	d81a      	bhi.n	8007b62 <USB_EPStartXfer+0xd64>
 8007b2c:	463b      	mov	r3, r7
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	691b      	ldr	r3, [r3, #16]
 8007b32:	085b      	lsrs	r3, r3, #1
 8007b34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007b38:	463b      	mov	r3, r7
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	691b      	ldr	r3, [r3, #16]
 8007b3e:	f003 0301 	and.w	r3, r3, #1
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d004      	beq.n	8007b50 <USB_EPStartXfer+0xd52>
 8007b46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b4a:	3301      	adds	r3, #1
 8007b4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007b50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b54:	b29b      	uxth	r3, r3
 8007b56:	029b      	lsls	r3, r3, #10
 8007b58:	b29a      	uxth	r2, r3
 8007b5a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007b5e:	801a      	strh	r2, [r3, #0]
 8007b60:	e041      	b.n	8007be6 <USB_EPStartXfer+0xde8>
 8007b62:	463b      	mov	r3, r7
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	691b      	ldr	r3, [r3, #16]
 8007b68:	095b      	lsrs	r3, r3, #5
 8007b6a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007b6e:	463b      	mov	r3, r7
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	691b      	ldr	r3, [r3, #16]
 8007b74:	f003 031f 	and.w	r3, r3, #31
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d104      	bne.n	8007b86 <USB_EPStartXfer+0xd88>
 8007b7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b80:	3b01      	subs	r3, #1
 8007b82:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007b86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b8a:	b29b      	uxth	r3, r3
 8007b8c:	029b      	lsls	r3, r3, #10
 8007b8e:	b29b      	uxth	r3, r3
 8007b90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b98:	b29a      	uxth	r2, r3
 8007b9a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007b9e:	801a      	strh	r2, [r3, #0]
 8007ba0:	e021      	b.n	8007be6 <USB_EPStartXfer+0xde8>
 8007ba2:	463b      	mov	r3, r7
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	785b      	ldrb	r3, [r3, #1]
 8007ba8:	2b01      	cmp	r3, #1
 8007baa:	d11c      	bne.n	8007be6 <USB_EPStartXfer+0xde8>
 8007bac:	1d3b      	adds	r3, r7, #4
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007bb4:	b29b      	uxth	r3, r3
 8007bb6:	461a      	mov	r2, r3
 8007bb8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007bbc:	4413      	add	r3, r2
 8007bbe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007bc2:	463b      	mov	r3, r7
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	781b      	ldrb	r3, [r3, #0]
 8007bc8:	011a      	lsls	r2, r3, #4
 8007bca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007bce:	4413      	add	r3, r2
 8007bd0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007bd4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007bd8:	463b      	mov	r3, r7
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	691b      	ldr	r3, [r3, #16]
 8007bde:	b29a      	uxth	r2, r3
 8007be0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007be4:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007be6:	463b      	mov	r3, r7
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	69db      	ldr	r3, [r3, #28]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	f000 81a4 	beq.w	8007f3a <USB_EPStartXfer+0x113c>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007bf2:	1d3b      	adds	r3, r7, #4
 8007bf4:	681a      	ldr	r2, [r3, #0]
 8007bf6:	463b      	mov	r3, r7
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	781b      	ldrb	r3, [r3, #0]
 8007bfc:	009b      	lsls	r3, r3, #2
 8007bfe:	4413      	add	r3, r2
 8007c00:	881b      	ldrh	r3, [r3, #0]
 8007c02:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007c06:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007c0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d005      	beq.n	8007c1e <USB_EPStartXfer+0xe20>
 8007c12:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007c16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d10d      	bne.n	8007c3a <USB_EPStartXfer+0xe3c>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007c1e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007c22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	f040 8187 	bne.w	8007f3a <USB_EPStartXfer+0x113c>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007c2c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007c30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	f040 8180 	bne.w	8007f3a <USB_EPStartXfer+0x113c>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8007c3a:	1d3b      	adds	r3, r7, #4
 8007c3c:	681a      	ldr	r2, [r3, #0]
 8007c3e:	463b      	mov	r3, r7
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	781b      	ldrb	r3, [r3, #0]
 8007c44:	009b      	lsls	r3, r3, #2
 8007c46:	4413      	add	r3, r2
 8007c48:	881b      	ldrh	r3, [r3, #0]
 8007c4a:	b29b      	uxth	r3, r3
 8007c4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c54:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8007c58:	1d3b      	adds	r3, r7, #4
 8007c5a:	681a      	ldr	r2, [r3, #0]
 8007c5c:	463b      	mov	r3, r7
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	781b      	ldrb	r3, [r3, #0]
 8007c62:	009b      	lsls	r3, r3, #2
 8007c64:	441a      	add	r2, r3
 8007c66:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8007c6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c76:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007c7a:	b29b      	uxth	r3, r3
 8007c7c:	8013      	strh	r3, [r2, #0]
 8007c7e:	e15c      	b.n	8007f3a <USB_EPStartXfer+0x113c>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007c80:	463b      	mov	r3, r7
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	78db      	ldrb	r3, [r3, #3]
 8007c86:	2b01      	cmp	r3, #1
 8007c88:	f040 8155 	bne.w	8007f36 <USB_EPStartXfer+0x1138>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007c8c:	463b      	mov	r3, r7
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	699a      	ldr	r2, [r3, #24]
 8007c92:	463b      	mov	r3, r7
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	691b      	ldr	r3, [r3, #16]
 8007c98:	429a      	cmp	r2, r3
 8007c9a:	d90e      	bls.n	8007cba <USB_EPStartXfer+0xebc>
        {
          len = ep->maxpacket;
 8007c9c:	463b      	mov	r3, r7
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	691b      	ldr	r3, [r3, #16]
 8007ca2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8007ca6:	463b      	mov	r3, r7
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	699a      	ldr	r2, [r3, #24]
 8007cac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007cb0:	1ad2      	subs	r2, r2, r3
 8007cb2:	463b      	mov	r3, r7
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	619a      	str	r2, [r3, #24]
 8007cb8:	e008      	b.n	8007ccc <USB_EPStartXfer+0xece>
        }
        else
        {
          len = ep->xfer_len;
 8007cba:	463b      	mov	r3, r7
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	699b      	ldr	r3, [r3, #24]
 8007cc0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8007cc4:	463b      	mov	r3, r7
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	2200      	movs	r2, #0
 8007cca:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007ccc:	463b      	mov	r3, r7
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	785b      	ldrb	r3, [r3, #1]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d16f      	bne.n	8007db6 <USB_EPStartXfer+0xfb8>
 8007cd6:	1d3b      	adds	r3, r7, #4
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007cde:	1d3b      	adds	r3, r7, #4
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ce6:	b29b      	uxth	r3, r3
 8007ce8:	461a      	mov	r2, r3
 8007cea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007cee:	4413      	add	r3, r2
 8007cf0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007cf4:	463b      	mov	r3, r7
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	781b      	ldrb	r3, [r3, #0]
 8007cfa:	011a      	lsls	r2, r3, #4
 8007cfc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007d00:	4413      	add	r3, r2
 8007d02:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007d06:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007d0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d116      	bne.n	8007d40 <USB_EPStartXfer+0xf42>
 8007d12:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007d16:	881b      	ldrh	r3, [r3, #0]
 8007d18:	b29b      	uxth	r3, r3
 8007d1a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007d1e:	b29a      	uxth	r2, r3
 8007d20:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007d24:	801a      	strh	r2, [r3, #0]
 8007d26:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007d2a:	881b      	ldrh	r3, [r3, #0]
 8007d2c:	b29b      	uxth	r3, r3
 8007d2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d36:	b29a      	uxth	r2, r3
 8007d38:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007d3c:	801a      	strh	r2, [r3, #0]
 8007d3e:	e05f      	b.n	8007e00 <USB_EPStartXfer+0x1002>
 8007d40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d44:	2b3e      	cmp	r3, #62	; 0x3e
 8007d46:	d818      	bhi.n	8007d7a <USB_EPStartXfer+0xf7c>
 8007d48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d4c:	085b      	lsrs	r3, r3, #1
 8007d4e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007d52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d56:	f003 0301 	and.w	r3, r3, #1
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d004      	beq.n	8007d68 <USB_EPStartXfer+0xf6a>
 8007d5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d62:	3301      	adds	r3, #1
 8007d64:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007d68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d6c:	b29b      	uxth	r3, r3
 8007d6e:	029b      	lsls	r3, r3, #10
 8007d70:	b29a      	uxth	r2, r3
 8007d72:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007d76:	801a      	strh	r2, [r3, #0]
 8007d78:	e042      	b.n	8007e00 <USB_EPStartXfer+0x1002>
 8007d7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d7e:	095b      	lsrs	r3, r3, #5
 8007d80:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007d84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d88:	f003 031f 	and.w	r3, r3, #31
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d104      	bne.n	8007d9a <USB_EPStartXfer+0xf9c>
 8007d90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d94:	3b01      	subs	r3, #1
 8007d96:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007d9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d9e:	b29b      	uxth	r3, r3
 8007da0:	029b      	lsls	r3, r3, #10
 8007da2:	b29b      	uxth	r3, r3
 8007da4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007da8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007dac:	b29a      	uxth	r2, r3
 8007dae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007db2:	801a      	strh	r2, [r3, #0]
 8007db4:	e024      	b.n	8007e00 <USB_EPStartXfer+0x1002>
 8007db6:	463b      	mov	r3, r7
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	785b      	ldrb	r3, [r3, #1]
 8007dbc:	2b01      	cmp	r3, #1
 8007dbe:	d11f      	bne.n	8007e00 <USB_EPStartXfer+0x1002>
 8007dc0:	1d3b      	adds	r3, r7, #4
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007dc8:	1d3b      	adds	r3, r7, #4
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007dd0:	b29b      	uxth	r3, r3
 8007dd2:	461a      	mov	r2, r3
 8007dd4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007dd8:	4413      	add	r3, r2
 8007dda:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007dde:	463b      	mov	r3, r7
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	781b      	ldrb	r3, [r3, #0]
 8007de4:	011a      	lsls	r2, r3, #4
 8007de6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007dea:	4413      	add	r3, r2
 8007dec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007df0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007df4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007df8:	b29a      	uxth	r2, r3
 8007dfa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007dfe:	801a      	strh	r2, [r3, #0]
 8007e00:	1d3b      	adds	r3, r7, #4
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007e08:	463b      	mov	r3, r7
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	785b      	ldrb	r3, [r3, #1]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d16f      	bne.n	8007ef2 <USB_EPStartXfer+0x10f4>
 8007e12:	1d3b      	adds	r3, r7, #4
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007e1a:	1d3b      	adds	r3, r7, #4
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e22:	b29b      	uxth	r3, r3
 8007e24:	461a      	mov	r2, r3
 8007e26:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007e2a:	4413      	add	r3, r2
 8007e2c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007e30:	463b      	mov	r3, r7
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	781b      	ldrb	r3, [r3, #0]
 8007e36:	011a      	lsls	r2, r3, #4
 8007e38:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007e3c:	4413      	add	r3, r2
 8007e3e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007e42:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007e46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d116      	bne.n	8007e7c <USB_EPStartXfer+0x107e>
 8007e4e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007e52:	881b      	ldrh	r3, [r3, #0]
 8007e54:	b29b      	uxth	r3, r3
 8007e56:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007e5a:	b29a      	uxth	r2, r3
 8007e5c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007e60:	801a      	strh	r2, [r3, #0]
 8007e62:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007e66:	881b      	ldrh	r3, [r3, #0]
 8007e68:	b29b      	uxth	r3, r3
 8007e6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e72:	b29a      	uxth	r2, r3
 8007e74:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007e78:	801a      	strh	r2, [r3, #0]
 8007e7a:	e05e      	b.n	8007f3a <USB_EPStartXfer+0x113c>
 8007e7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e80:	2b3e      	cmp	r3, #62	; 0x3e
 8007e82:	d818      	bhi.n	8007eb6 <USB_EPStartXfer+0x10b8>
 8007e84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e88:	085b      	lsrs	r3, r3, #1
 8007e8a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007e8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e92:	f003 0301 	and.w	r3, r3, #1
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d004      	beq.n	8007ea4 <USB_EPStartXfer+0x10a6>
 8007e9a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007e9e:	3301      	adds	r3, #1
 8007ea0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007ea4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007ea8:	b29b      	uxth	r3, r3
 8007eaa:	029b      	lsls	r3, r3, #10
 8007eac:	b29a      	uxth	r2, r3
 8007eae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007eb2:	801a      	strh	r2, [r3, #0]
 8007eb4:	e041      	b.n	8007f3a <USB_EPStartXfer+0x113c>
 8007eb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007eba:	095b      	lsrs	r3, r3, #5
 8007ebc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007ec0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ec4:	f003 031f 	and.w	r3, r3, #31
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d104      	bne.n	8007ed6 <USB_EPStartXfer+0x10d8>
 8007ecc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007ed0:	3b01      	subs	r3, #1
 8007ed2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007ed6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007eda:	b29b      	uxth	r3, r3
 8007edc:	029b      	lsls	r3, r3, #10
 8007ede:	b29b      	uxth	r3, r3
 8007ee0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ee4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ee8:	b29a      	uxth	r2, r3
 8007eea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007eee:	801a      	strh	r2, [r3, #0]
 8007ef0:	e023      	b.n	8007f3a <USB_EPStartXfer+0x113c>
 8007ef2:	463b      	mov	r3, r7
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	785b      	ldrb	r3, [r3, #1]
 8007ef8:	2b01      	cmp	r3, #1
 8007efa:	d11e      	bne.n	8007f3a <USB_EPStartXfer+0x113c>
 8007efc:	1d3b      	adds	r3, r7, #4
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f04:	b29b      	uxth	r3, r3
 8007f06:	461a      	mov	r2, r3
 8007f08:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007f0c:	4413      	add	r3, r2
 8007f0e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007f12:	463b      	mov	r3, r7
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	781b      	ldrb	r3, [r3, #0]
 8007f18:	011a      	lsls	r2, r3, #4
 8007f1a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007f1e:	4413      	add	r3, r2
 8007f20:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007f24:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007f28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f2c:	b29a      	uxth	r2, r3
 8007f2e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007f32:	801a      	strh	r2, [r3, #0]
 8007f34:	e001      	b.n	8007f3a <USB_EPStartXfer+0x113c>
      }
      else
      {
        return HAL_ERROR;
 8007f36:	2301      	movs	r3, #1
 8007f38:	e02e      	b.n	8007f98 <USB_EPStartXfer+0x119a>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007f3a:	1d3b      	adds	r3, r7, #4
 8007f3c:	681a      	ldr	r2, [r3, #0]
 8007f3e:	463b      	mov	r3, r7
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	781b      	ldrb	r3, [r3, #0]
 8007f44:	009b      	lsls	r3, r3, #2
 8007f46:	4413      	add	r3, r2
 8007f48:	881b      	ldrh	r3, [r3, #0]
 8007f4a:	b29b      	uxth	r3, r3
 8007f4c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007f50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f54:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007f58:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007f5c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007f60:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007f64:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007f68:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007f6c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007f70:	1d3b      	adds	r3, r7, #4
 8007f72:	681a      	ldr	r2, [r3, #0]
 8007f74:	463b      	mov	r3, r7
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	781b      	ldrb	r3, [r3, #0]
 8007f7a:	009b      	lsls	r3, r3, #2
 8007f7c:	441a      	add	r2, r3
 8007f7e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007f82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f92:	b29b      	uxth	r3, r3
 8007f94:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007f96:	2300      	movs	r3, #0
}
 8007f98:	4618      	mov	r0, r3
 8007f9a:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}

08007fa2 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007fa2:	b480      	push	{r7}
 8007fa4:	b085      	sub	sp, #20
 8007fa6:	af00      	add	r7, sp, #0
 8007fa8:	6078      	str	r0, [r7, #4]
 8007faa:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	785b      	ldrb	r3, [r3, #1]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d020      	beq.n	8007ff6 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007fb4:	687a      	ldr	r2, [r7, #4]
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	781b      	ldrb	r3, [r3, #0]
 8007fba:	009b      	lsls	r3, r3, #2
 8007fbc:	4413      	add	r3, r2
 8007fbe:	881b      	ldrh	r3, [r3, #0]
 8007fc0:	b29b      	uxth	r3, r3
 8007fc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007fca:	81bb      	strh	r3, [r7, #12]
 8007fcc:	89bb      	ldrh	r3, [r7, #12]
 8007fce:	f083 0310 	eor.w	r3, r3, #16
 8007fd2:	81bb      	strh	r3, [r7, #12]
 8007fd4:	687a      	ldr	r2, [r7, #4]
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	781b      	ldrb	r3, [r3, #0]
 8007fda:	009b      	lsls	r3, r3, #2
 8007fdc:	441a      	add	r2, r3
 8007fde:	89bb      	ldrh	r3, [r7, #12]
 8007fe0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fe4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fe8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ff0:	b29b      	uxth	r3, r3
 8007ff2:	8013      	strh	r3, [r2, #0]
 8007ff4:	e01f      	b.n	8008036 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007ff6:	687a      	ldr	r2, [r7, #4]
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	781b      	ldrb	r3, [r3, #0]
 8007ffc:	009b      	lsls	r3, r3, #2
 8007ffe:	4413      	add	r3, r2
 8008000:	881b      	ldrh	r3, [r3, #0]
 8008002:	b29b      	uxth	r3, r3
 8008004:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008008:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800800c:	81fb      	strh	r3, [r7, #14]
 800800e:	89fb      	ldrh	r3, [r7, #14]
 8008010:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008014:	81fb      	strh	r3, [r7, #14]
 8008016:	687a      	ldr	r2, [r7, #4]
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	781b      	ldrb	r3, [r3, #0]
 800801c:	009b      	lsls	r3, r3, #2
 800801e:	441a      	add	r2, r3
 8008020:	89fb      	ldrh	r3, [r7, #14]
 8008022:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008026:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800802a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800802e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008032:	b29b      	uxth	r3, r3
 8008034:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008036:	2300      	movs	r3, #0
}
 8008038:	4618      	mov	r0, r3
 800803a:	3714      	adds	r7, #20
 800803c:	46bd      	mov	sp, r7
 800803e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008042:	4770      	bx	lr

08008044 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008044:	b480      	push	{r7}
 8008046:	b087      	sub	sp, #28
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
 800804c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	7b1b      	ldrb	r3, [r3, #12]
 8008052:	2b00      	cmp	r3, #0
 8008054:	f040 809d 	bne.w	8008192 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	785b      	ldrb	r3, [r3, #1]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d04c      	beq.n	80080fa <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008060:	687a      	ldr	r2, [r7, #4]
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	781b      	ldrb	r3, [r3, #0]
 8008066:	009b      	lsls	r3, r3, #2
 8008068:	4413      	add	r3, r2
 800806a:	881b      	ldrh	r3, [r3, #0]
 800806c:	823b      	strh	r3, [r7, #16]
 800806e:	8a3b      	ldrh	r3, [r7, #16]
 8008070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008074:	2b00      	cmp	r3, #0
 8008076:	d01b      	beq.n	80080b0 <USB_EPClearStall+0x6c>
 8008078:	687a      	ldr	r2, [r7, #4]
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	781b      	ldrb	r3, [r3, #0]
 800807e:	009b      	lsls	r3, r3, #2
 8008080:	4413      	add	r3, r2
 8008082:	881b      	ldrh	r3, [r3, #0]
 8008084:	b29b      	uxth	r3, r3
 8008086:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800808a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800808e:	81fb      	strh	r3, [r7, #14]
 8008090:	687a      	ldr	r2, [r7, #4]
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	781b      	ldrb	r3, [r3, #0]
 8008096:	009b      	lsls	r3, r3, #2
 8008098:	441a      	add	r2, r3
 800809a:	89fb      	ldrh	r3, [r7, #14]
 800809c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080a8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80080ac:	b29b      	uxth	r3, r3
 80080ae:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	78db      	ldrb	r3, [r3, #3]
 80080b4:	2b01      	cmp	r3, #1
 80080b6:	d06c      	beq.n	8008192 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80080b8:	687a      	ldr	r2, [r7, #4]
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	781b      	ldrb	r3, [r3, #0]
 80080be:	009b      	lsls	r3, r3, #2
 80080c0:	4413      	add	r3, r2
 80080c2:	881b      	ldrh	r3, [r3, #0]
 80080c4:	b29b      	uxth	r3, r3
 80080c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080ce:	81bb      	strh	r3, [r7, #12]
 80080d0:	89bb      	ldrh	r3, [r7, #12]
 80080d2:	f083 0320 	eor.w	r3, r3, #32
 80080d6:	81bb      	strh	r3, [r7, #12]
 80080d8:	687a      	ldr	r2, [r7, #4]
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	781b      	ldrb	r3, [r3, #0]
 80080de:	009b      	lsls	r3, r3, #2
 80080e0:	441a      	add	r2, r3
 80080e2:	89bb      	ldrh	r3, [r7, #12]
 80080e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080f4:	b29b      	uxth	r3, r3
 80080f6:	8013      	strh	r3, [r2, #0]
 80080f8:	e04b      	b.n	8008192 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80080fa:	687a      	ldr	r2, [r7, #4]
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	781b      	ldrb	r3, [r3, #0]
 8008100:	009b      	lsls	r3, r3, #2
 8008102:	4413      	add	r3, r2
 8008104:	881b      	ldrh	r3, [r3, #0]
 8008106:	82fb      	strh	r3, [r7, #22]
 8008108:	8afb      	ldrh	r3, [r7, #22]
 800810a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800810e:	2b00      	cmp	r3, #0
 8008110:	d01b      	beq.n	800814a <USB_EPClearStall+0x106>
 8008112:	687a      	ldr	r2, [r7, #4]
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	781b      	ldrb	r3, [r3, #0]
 8008118:	009b      	lsls	r3, r3, #2
 800811a:	4413      	add	r3, r2
 800811c:	881b      	ldrh	r3, [r3, #0]
 800811e:	b29b      	uxth	r3, r3
 8008120:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008124:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008128:	82bb      	strh	r3, [r7, #20]
 800812a:	687a      	ldr	r2, [r7, #4]
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	781b      	ldrb	r3, [r3, #0]
 8008130:	009b      	lsls	r3, r3, #2
 8008132:	441a      	add	r2, r3
 8008134:	8abb      	ldrh	r3, [r7, #20]
 8008136:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800813a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800813e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008142:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008146:	b29b      	uxth	r3, r3
 8008148:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800814a:	687a      	ldr	r2, [r7, #4]
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	781b      	ldrb	r3, [r3, #0]
 8008150:	009b      	lsls	r3, r3, #2
 8008152:	4413      	add	r3, r2
 8008154:	881b      	ldrh	r3, [r3, #0]
 8008156:	b29b      	uxth	r3, r3
 8008158:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800815c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008160:	827b      	strh	r3, [r7, #18]
 8008162:	8a7b      	ldrh	r3, [r7, #18]
 8008164:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008168:	827b      	strh	r3, [r7, #18]
 800816a:	8a7b      	ldrh	r3, [r7, #18]
 800816c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008170:	827b      	strh	r3, [r7, #18]
 8008172:	687a      	ldr	r2, [r7, #4]
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	781b      	ldrb	r3, [r3, #0]
 8008178:	009b      	lsls	r3, r3, #2
 800817a:	441a      	add	r2, r3
 800817c:	8a7b      	ldrh	r3, [r7, #18]
 800817e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008182:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008186:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800818a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800818e:	b29b      	uxth	r3, r3
 8008190:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008192:	2300      	movs	r3, #0
}
 8008194:	4618      	mov	r0, r3
 8008196:	371c      	adds	r7, #28
 8008198:	46bd      	mov	sp, r7
 800819a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819e:	4770      	bx	lr

080081a0 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80081a0:	b480      	push	{r7}
 80081a2:	b083      	sub	sp, #12
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
 80081a8:	460b      	mov	r3, r1
 80081aa:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80081ac:	78fb      	ldrb	r3, [r7, #3]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d103      	bne.n	80081ba <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2280      	movs	r2, #128	; 0x80
 80081b6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80081ba:	2300      	movs	r3, #0
}
 80081bc:	4618      	mov	r0, r3
 80081be:	370c      	adds	r7, #12
 80081c0:	46bd      	mov	sp, r7
 80081c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c6:	4770      	bx	lr

080081c8 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80081c8:	b480      	push	{r7}
 80081ca:	b083      	sub	sp, #12
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80081d0:	2300      	movs	r3, #0
}
 80081d2:	4618      	mov	r0, r3
 80081d4:	370c      	adds	r7, #12
 80081d6:	46bd      	mov	sp, r7
 80081d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081dc:	4770      	bx	lr

080081de <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80081de:	b480      	push	{r7}
 80081e0:	b085      	sub	sp, #20
 80081e2:	af00      	add	r7, sp, #0
 80081e4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80081ec:	b29b      	uxth	r3, r3
 80081ee:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80081f0:	68fb      	ldr	r3, [r7, #12]
}
 80081f2:	4618      	mov	r0, r3
 80081f4:	3714      	adds	r7, #20
 80081f6:	46bd      	mov	sp, r7
 80081f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fc:	4770      	bx	lr

080081fe <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80081fe:	b480      	push	{r7}
 8008200:	b08d      	sub	sp, #52	; 0x34
 8008202:	af00      	add	r7, sp, #0
 8008204:	60f8      	str	r0, [r7, #12]
 8008206:	60b9      	str	r1, [r7, #8]
 8008208:	4611      	mov	r1, r2
 800820a:	461a      	mov	r2, r3
 800820c:	460b      	mov	r3, r1
 800820e:	80fb      	strh	r3, [r7, #6]
 8008210:	4613      	mov	r3, r2
 8008212:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008214:	88bb      	ldrh	r3, [r7, #4]
 8008216:	3301      	adds	r3, #1
 8008218:	085b      	lsrs	r3, r3, #1
 800821a:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008224:	88fb      	ldrh	r3, [r7, #6]
 8008226:	005a      	lsls	r2, r3, #1
 8008228:	69fb      	ldr	r3, [r7, #28]
 800822a:	4413      	add	r3, r2
 800822c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008230:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8008232:	6a3b      	ldr	r3, [r7, #32]
 8008234:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008236:	e01e      	b.n	8008276 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8008238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800823a:	781b      	ldrb	r3, [r3, #0]
 800823c:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800823e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008240:	3301      	adds	r3, #1
 8008242:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8008244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008246:	781b      	ldrb	r3, [r3, #0]
 8008248:	b29b      	uxth	r3, r3
 800824a:	021b      	lsls	r3, r3, #8
 800824c:	b29b      	uxth	r3, r3
 800824e:	461a      	mov	r2, r3
 8008250:	69bb      	ldr	r3, [r7, #24]
 8008252:	4313      	orrs	r3, r2
 8008254:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8008256:	697b      	ldr	r3, [r7, #20]
 8008258:	b29a      	uxth	r2, r3
 800825a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800825c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800825e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008260:	3302      	adds	r3, #2
 8008262:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8008264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008266:	3302      	adds	r3, #2
 8008268:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800826a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800826c:	3301      	adds	r3, #1
 800826e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8008270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008272:	3b01      	subs	r3, #1
 8008274:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008278:	2b00      	cmp	r3, #0
 800827a:	d1dd      	bne.n	8008238 <USB_WritePMA+0x3a>
  }
}
 800827c:	bf00      	nop
 800827e:	bf00      	nop
 8008280:	3734      	adds	r7, #52	; 0x34
 8008282:	46bd      	mov	sp, r7
 8008284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008288:	4770      	bx	lr

0800828a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800828a:	b480      	push	{r7}
 800828c:	b08b      	sub	sp, #44	; 0x2c
 800828e:	af00      	add	r7, sp, #0
 8008290:	60f8      	str	r0, [r7, #12]
 8008292:	60b9      	str	r1, [r7, #8]
 8008294:	4611      	mov	r1, r2
 8008296:	461a      	mov	r2, r3
 8008298:	460b      	mov	r3, r1
 800829a:	80fb      	strh	r3, [r7, #6]
 800829c:	4613      	mov	r3, r2
 800829e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80082a0:	88bb      	ldrh	r3, [r7, #4]
 80082a2:	085b      	lsrs	r3, r3, #1
 80082a4:	b29b      	uxth	r3, r3
 80082a6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80082b0:	88fb      	ldrh	r3, [r7, #6]
 80082b2:	005a      	lsls	r2, r3, #1
 80082b4:	697b      	ldr	r3, [r7, #20]
 80082b6:	4413      	add	r3, r2
 80082b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80082bc:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80082be:	69bb      	ldr	r3, [r7, #24]
 80082c0:	627b      	str	r3, [r7, #36]	; 0x24
 80082c2:	e01b      	b.n	80082fc <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80082c4:	6a3b      	ldr	r3, [r7, #32]
 80082c6:	881b      	ldrh	r3, [r3, #0]
 80082c8:	b29b      	uxth	r3, r3
 80082ca:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80082cc:	6a3b      	ldr	r3, [r7, #32]
 80082ce:	3302      	adds	r3, #2
 80082d0:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80082d2:	693b      	ldr	r3, [r7, #16]
 80082d4:	b2da      	uxtb	r2, r3
 80082d6:	69fb      	ldr	r3, [r7, #28]
 80082d8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80082da:	69fb      	ldr	r3, [r7, #28]
 80082dc:	3301      	adds	r3, #1
 80082de:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80082e0:	693b      	ldr	r3, [r7, #16]
 80082e2:	0a1b      	lsrs	r3, r3, #8
 80082e4:	b2da      	uxtb	r2, r3
 80082e6:	69fb      	ldr	r3, [r7, #28]
 80082e8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80082ea:	69fb      	ldr	r3, [r7, #28]
 80082ec:	3301      	adds	r3, #1
 80082ee:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80082f0:	6a3b      	ldr	r3, [r7, #32]
 80082f2:	3302      	adds	r3, #2
 80082f4:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80082f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f8:	3b01      	subs	r3, #1
 80082fa:	627b      	str	r3, [r7, #36]	; 0x24
 80082fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d1e0      	bne.n	80082c4 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8008302:	88bb      	ldrh	r3, [r7, #4]
 8008304:	f003 0301 	and.w	r3, r3, #1
 8008308:	b29b      	uxth	r3, r3
 800830a:	2b00      	cmp	r3, #0
 800830c:	d007      	beq.n	800831e <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800830e:	6a3b      	ldr	r3, [r7, #32]
 8008310:	881b      	ldrh	r3, [r3, #0]
 8008312:	b29b      	uxth	r3, r3
 8008314:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008316:	693b      	ldr	r3, [r7, #16]
 8008318:	b2da      	uxtb	r2, r3
 800831a:	69fb      	ldr	r3, [r7, #28]
 800831c:	701a      	strb	r2, [r3, #0]
  }
}
 800831e:	bf00      	nop
 8008320:	372c      	adds	r7, #44	; 0x2c
 8008322:	46bd      	mov	sp, r7
 8008324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008328:	4770      	bx	lr

0800832a <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800832a:	b580      	push	{r7, lr}
 800832c:	b084      	sub	sp, #16
 800832e:	af00      	add	r7, sp, #0
 8008330:	6078      	str	r0, [r7, #4]
 8008332:	460b      	mov	r3, r1
 8008334:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008336:	2300      	movs	r3, #0
 8008338:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	7c1b      	ldrb	r3, [r3, #16]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d115      	bne.n	800836e <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008342:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008346:	2202      	movs	r2, #2
 8008348:	2181      	movs	r1, #129	; 0x81
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f001 feb9 	bl	800a0c2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2201      	movs	r2, #1
 8008354:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008356:	f44f 7300 	mov.w	r3, #512	; 0x200
 800835a:	2202      	movs	r2, #2
 800835c:	2101      	movs	r1, #1
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f001 feaf 	bl	800a0c2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2201      	movs	r2, #1
 8008368:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800836c:	e012      	b.n	8008394 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800836e:	2340      	movs	r3, #64	; 0x40
 8008370:	2202      	movs	r2, #2
 8008372:	2181      	movs	r1, #129	; 0x81
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f001 fea4 	bl	800a0c2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2201      	movs	r2, #1
 800837e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008380:	2340      	movs	r3, #64	; 0x40
 8008382:	2202      	movs	r2, #2
 8008384:	2101      	movs	r1, #1
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	f001 fe9b 	bl	800a0c2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2201      	movs	r2, #1
 8008390:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008394:	2308      	movs	r3, #8
 8008396:	2203      	movs	r2, #3
 8008398:	2182      	movs	r1, #130	; 0x82
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f001 fe91 	bl	800a0c2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2201      	movs	r2, #1
 80083a4:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80083a6:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80083aa:	f001 ffb3 	bl	800a314 <USBD_static_malloc>
 80083ae:	4602      	mov	r2, r0
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d102      	bne.n	80083c6 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80083c0:	2301      	movs	r3, #1
 80083c2:	73fb      	strb	r3, [r7, #15]
 80083c4:	e026      	b.n	8008414 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083cc:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	2200      	movs	r2, #0
 80083dc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	2200      	movs	r2, #0
 80083e4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	7c1b      	ldrb	r3, [r3, #16]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d109      	bne.n	8008404 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80083f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80083fa:	2101      	movs	r1, #1
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f001 ff52 	bl	800a2a6 <USBD_LL_PrepareReceive>
 8008402:	e007      	b.n	8008414 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008404:	68bb      	ldr	r3, [r7, #8]
 8008406:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800840a:	2340      	movs	r3, #64	; 0x40
 800840c:	2101      	movs	r1, #1
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	f001 ff49 	bl	800a2a6 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008414:	7bfb      	ldrb	r3, [r7, #15]
}
 8008416:	4618      	mov	r0, r3
 8008418:	3710      	adds	r7, #16
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}

0800841e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800841e:	b580      	push	{r7, lr}
 8008420:	b084      	sub	sp, #16
 8008422:	af00      	add	r7, sp, #0
 8008424:	6078      	str	r0, [r7, #4]
 8008426:	460b      	mov	r3, r1
 8008428:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800842a:	2300      	movs	r3, #0
 800842c:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800842e:	2181      	movs	r1, #129	; 0x81
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f001 fe6c 	bl	800a10e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2200      	movs	r2, #0
 800843a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800843c:	2101      	movs	r1, #1
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f001 fe65 	bl	800a10e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2200      	movs	r2, #0
 8008448:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800844c:	2182      	movs	r1, #130	; 0x82
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f001 fe5d 	bl	800a10e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2200      	movs	r2, #0
 8008458:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008460:	2b00      	cmp	r3, #0
 8008462:	d00e      	beq.n	8008482 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800846a:	685b      	ldr	r3, [r3, #4]
 800846c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008474:	4618      	mov	r0, r3
 8008476:	f001 ff5b 	bl	800a330 <USBD_static_free>
    pdev->pClassData = NULL;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2200      	movs	r2, #0
 800847e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8008482:	7bfb      	ldrb	r3, [r7, #15]
}
 8008484:	4618      	mov	r0, r3
 8008486:	3710      	adds	r7, #16
 8008488:	46bd      	mov	sp, r7
 800848a:	bd80      	pop	{r7, pc}

0800848c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b086      	sub	sp, #24
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
 8008494:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800849c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800849e:	2300      	movs	r3, #0
 80084a0:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80084a2:	2300      	movs	r3, #0
 80084a4:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80084a6:	2300      	movs	r3, #0
 80084a8:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	781b      	ldrb	r3, [r3, #0]
 80084ae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d039      	beq.n	800852a <USBD_CDC_Setup+0x9e>
 80084b6:	2b20      	cmp	r3, #32
 80084b8:	d17f      	bne.n	80085ba <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	88db      	ldrh	r3, [r3, #6]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d029      	beq.n	8008516 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	781b      	ldrb	r3, [r3, #0]
 80084c6:	b25b      	sxtb	r3, r3
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	da11      	bge.n	80084f0 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80084d2:	689b      	ldr	r3, [r3, #8]
 80084d4:	683a      	ldr	r2, [r7, #0]
 80084d6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80084d8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80084da:	683a      	ldr	r2, [r7, #0]
 80084dc:	88d2      	ldrh	r2, [r2, #6]
 80084de:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80084e0:	6939      	ldr	r1, [r7, #16]
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	88db      	ldrh	r3, [r3, #6]
 80084e6:	461a      	mov	r2, r3
 80084e8:	6878      	ldr	r0, [r7, #4]
 80084ea:	f001 fa14 	bl	8009916 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80084ee:	e06b      	b.n	80085c8 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	785a      	ldrb	r2, [r3, #1]
 80084f4:	693b      	ldr	r3, [r7, #16]
 80084f6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	88db      	ldrh	r3, [r3, #6]
 80084fe:	b2da      	uxtb	r2, r3
 8008500:	693b      	ldr	r3, [r7, #16]
 8008502:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008506:	6939      	ldr	r1, [r7, #16]
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	88db      	ldrh	r3, [r3, #6]
 800850c:	461a      	mov	r2, r3
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	f001 fa2f 	bl	8009972 <USBD_CtlPrepareRx>
      break;
 8008514:	e058      	b.n	80085c8 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800851c:	689b      	ldr	r3, [r3, #8]
 800851e:	683a      	ldr	r2, [r7, #0]
 8008520:	7850      	ldrb	r0, [r2, #1]
 8008522:	2200      	movs	r2, #0
 8008524:	6839      	ldr	r1, [r7, #0]
 8008526:	4798      	blx	r3
      break;
 8008528:	e04e      	b.n	80085c8 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	785b      	ldrb	r3, [r3, #1]
 800852e:	2b0b      	cmp	r3, #11
 8008530:	d02e      	beq.n	8008590 <USBD_CDC_Setup+0x104>
 8008532:	2b0b      	cmp	r3, #11
 8008534:	dc38      	bgt.n	80085a8 <USBD_CDC_Setup+0x11c>
 8008536:	2b00      	cmp	r3, #0
 8008538:	d002      	beq.n	8008540 <USBD_CDC_Setup+0xb4>
 800853a:	2b0a      	cmp	r3, #10
 800853c:	d014      	beq.n	8008568 <USBD_CDC_Setup+0xdc>
 800853e:	e033      	b.n	80085a8 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008546:	2b03      	cmp	r3, #3
 8008548:	d107      	bne.n	800855a <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800854a:	f107 030c 	add.w	r3, r7, #12
 800854e:	2202      	movs	r2, #2
 8008550:	4619      	mov	r1, r3
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f001 f9df 	bl	8009916 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008558:	e02e      	b.n	80085b8 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800855a:	6839      	ldr	r1, [r7, #0]
 800855c:	6878      	ldr	r0, [r7, #4]
 800855e:	f001 f96f 	bl	8009840 <USBD_CtlError>
            ret = USBD_FAIL;
 8008562:	2302      	movs	r3, #2
 8008564:	75fb      	strb	r3, [r7, #23]
          break;
 8008566:	e027      	b.n	80085b8 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800856e:	2b03      	cmp	r3, #3
 8008570:	d107      	bne.n	8008582 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008572:	f107 030f 	add.w	r3, r7, #15
 8008576:	2201      	movs	r2, #1
 8008578:	4619      	mov	r1, r3
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	f001 f9cb 	bl	8009916 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008580:	e01a      	b.n	80085b8 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008582:	6839      	ldr	r1, [r7, #0]
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	f001 f95b 	bl	8009840 <USBD_CtlError>
            ret = USBD_FAIL;
 800858a:	2302      	movs	r3, #2
 800858c:	75fb      	strb	r3, [r7, #23]
          break;
 800858e:	e013      	b.n	80085b8 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008596:	2b03      	cmp	r3, #3
 8008598:	d00d      	beq.n	80085b6 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800859a:	6839      	ldr	r1, [r7, #0]
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	f001 f94f 	bl	8009840 <USBD_CtlError>
            ret = USBD_FAIL;
 80085a2:	2302      	movs	r3, #2
 80085a4:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80085a6:	e006      	b.n	80085b6 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80085a8:	6839      	ldr	r1, [r7, #0]
 80085aa:	6878      	ldr	r0, [r7, #4]
 80085ac:	f001 f948 	bl	8009840 <USBD_CtlError>
          ret = USBD_FAIL;
 80085b0:	2302      	movs	r3, #2
 80085b2:	75fb      	strb	r3, [r7, #23]
          break;
 80085b4:	e000      	b.n	80085b8 <USBD_CDC_Setup+0x12c>
          break;
 80085b6:	bf00      	nop
      }
      break;
 80085b8:	e006      	b.n	80085c8 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80085ba:	6839      	ldr	r1, [r7, #0]
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	f001 f93f 	bl	8009840 <USBD_CtlError>
      ret = USBD_FAIL;
 80085c2:	2302      	movs	r3, #2
 80085c4:	75fb      	strb	r3, [r7, #23]
      break;
 80085c6:	bf00      	nop
  }

  return ret;
 80085c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	3718      	adds	r7, #24
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd80      	pop	{r7, pc}

080085d2 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80085d2:	b580      	push	{r7, lr}
 80085d4:	b084      	sub	sp, #16
 80085d6:	af00      	add	r7, sp, #0
 80085d8:	6078      	str	r0, [r7, #4]
 80085da:	460b      	mov	r3, r1
 80085dc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085e4:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80085ec:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d03a      	beq.n	800866e <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80085f8:	78fa      	ldrb	r2, [r7, #3]
 80085fa:	6879      	ldr	r1, [r7, #4]
 80085fc:	4613      	mov	r3, r2
 80085fe:	009b      	lsls	r3, r3, #2
 8008600:	4413      	add	r3, r2
 8008602:	009b      	lsls	r3, r3, #2
 8008604:	440b      	add	r3, r1
 8008606:	331c      	adds	r3, #28
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d029      	beq.n	8008662 <USBD_CDC_DataIn+0x90>
 800860e:	78fa      	ldrb	r2, [r7, #3]
 8008610:	6879      	ldr	r1, [r7, #4]
 8008612:	4613      	mov	r3, r2
 8008614:	009b      	lsls	r3, r3, #2
 8008616:	4413      	add	r3, r2
 8008618:	009b      	lsls	r3, r3, #2
 800861a:	440b      	add	r3, r1
 800861c:	331c      	adds	r3, #28
 800861e:	681a      	ldr	r2, [r3, #0]
 8008620:	78f9      	ldrb	r1, [r7, #3]
 8008622:	68b8      	ldr	r0, [r7, #8]
 8008624:	460b      	mov	r3, r1
 8008626:	009b      	lsls	r3, r3, #2
 8008628:	440b      	add	r3, r1
 800862a:	00db      	lsls	r3, r3, #3
 800862c:	4403      	add	r3, r0
 800862e:	3338      	adds	r3, #56	; 0x38
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	fbb2 f1f3 	udiv	r1, r2, r3
 8008636:	fb03 f301 	mul.w	r3, r3, r1
 800863a:	1ad3      	subs	r3, r2, r3
 800863c:	2b00      	cmp	r3, #0
 800863e:	d110      	bne.n	8008662 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008640:	78fa      	ldrb	r2, [r7, #3]
 8008642:	6879      	ldr	r1, [r7, #4]
 8008644:	4613      	mov	r3, r2
 8008646:	009b      	lsls	r3, r3, #2
 8008648:	4413      	add	r3, r2
 800864a:	009b      	lsls	r3, r3, #2
 800864c:	440b      	add	r3, r1
 800864e:	331c      	adds	r3, #28
 8008650:	2200      	movs	r2, #0
 8008652:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008654:	78f9      	ldrb	r1, [r7, #3]
 8008656:	2300      	movs	r3, #0
 8008658:	2200      	movs	r2, #0
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f001 fe00 	bl	800a260 <USBD_LL_Transmit>
 8008660:	e003      	b.n	800866a <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	2200      	movs	r2, #0
 8008666:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800866a:	2300      	movs	r3, #0
 800866c:	e000      	b.n	8008670 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800866e:	2302      	movs	r3, #2
  }
}
 8008670:	4618      	mov	r0, r3
 8008672:	3710      	adds	r7, #16
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}

08008678 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b084      	sub	sp, #16
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
 8008680:	460b      	mov	r3, r1
 8008682:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800868a:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800868c:	78fb      	ldrb	r3, [r7, #3]
 800868e:	4619      	mov	r1, r3
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	f001 fe2b 	bl	800a2ec <USBD_LL_GetRxDataSize>
 8008696:	4602      	mov	r2, r0
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d00d      	beq.n	80086c4 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80086ae:	68db      	ldr	r3, [r3, #12]
 80086b0:	68fa      	ldr	r2, [r7, #12]
 80086b2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80086b6:	68fa      	ldr	r2, [r7, #12]
 80086b8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80086bc:	4611      	mov	r1, r2
 80086be:	4798      	blx	r3

    return USBD_OK;
 80086c0:	2300      	movs	r3, #0
 80086c2:	e000      	b.n	80086c6 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80086c4:	2302      	movs	r3, #2
  }
}
 80086c6:	4618      	mov	r0, r3
 80086c8:	3710      	adds	r7, #16
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}

080086ce <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80086ce:	b580      	push	{r7, lr}
 80086d0:	b084      	sub	sp, #16
 80086d2:	af00      	add	r7, sp, #0
 80086d4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086dc:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d015      	beq.n	8008714 <USBD_CDC_EP0_RxReady+0x46>
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80086ee:	2bff      	cmp	r3, #255	; 0xff
 80086f0:	d010      	beq.n	8008714 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80086f8:	689b      	ldr	r3, [r3, #8]
 80086fa:	68fa      	ldr	r2, [r7, #12]
 80086fc:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008700:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008702:	68fa      	ldr	r2, [r7, #12]
 8008704:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008708:	b292      	uxth	r2, r2
 800870a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	22ff      	movs	r2, #255	; 0xff
 8008710:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8008714:	2300      	movs	r3, #0
}
 8008716:	4618      	mov	r0, r3
 8008718:	3710      	adds	r7, #16
 800871a:	46bd      	mov	sp, r7
 800871c:	bd80      	pop	{r7, pc}
	...

08008720 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008720:	b480      	push	{r7}
 8008722:	b083      	sub	sp, #12
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2243      	movs	r2, #67	; 0x43
 800872c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800872e:	4b03      	ldr	r3, [pc, #12]	; (800873c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008730:	4618      	mov	r0, r3
 8008732:	370c      	adds	r7, #12
 8008734:	46bd      	mov	sp, r7
 8008736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873a:	4770      	bx	lr
 800873c:	20000094 	.word	0x20000094

08008740 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008740:	b480      	push	{r7}
 8008742:	b083      	sub	sp, #12
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2243      	movs	r2, #67	; 0x43
 800874c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800874e:	4b03      	ldr	r3, [pc, #12]	; (800875c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008750:	4618      	mov	r0, r3
 8008752:	370c      	adds	r7, #12
 8008754:	46bd      	mov	sp, r7
 8008756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875a:	4770      	bx	lr
 800875c:	20000050 	.word	0x20000050

08008760 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008760:	b480      	push	{r7}
 8008762:	b083      	sub	sp, #12
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2243      	movs	r2, #67	; 0x43
 800876c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800876e:	4b03      	ldr	r3, [pc, #12]	; (800877c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008770:	4618      	mov	r0, r3
 8008772:	370c      	adds	r7, #12
 8008774:	46bd      	mov	sp, r7
 8008776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877a:	4770      	bx	lr
 800877c:	200000d8 	.word	0x200000d8

08008780 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008780:	b480      	push	{r7}
 8008782:	b083      	sub	sp, #12
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	220a      	movs	r2, #10
 800878c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800878e:	4b03      	ldr	r3, [pc, #12]	; (800879c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008790:	4618      	mov	r0, r3
 8008792:	370c      	adds	r7, #12
 8008794:	46bd      	mov	sp, r7
 8008796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879a:	4770      	bx	lr
 800879c:	2000000c 	.word	0x2000000c

080087a0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80087a0:	b480      	push	{r7}
 80087a2:	b085      	sub	sp, #20
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
 80087a8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80087aa:	2302      	movs	r3, #2
 80087ac:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d005      	beq.n	80087c0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	683a      	ldr	r2, [r7, #0]
 80087b8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80087bc:	2300      	movs	r3, #0
 80087be:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80087c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80087c2:	4618      	mov	r0, r3
 80087c4:	3714      	adds	r7, #20
 80087c6:	46bd      	mov	sp, r7
 80087c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087cc:	4770      	bx	lr

080087ce <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80087ce:	b480      	push	{r7}
 80087d0:	b087      	sub	sp, #28
 80087d2:	af00      	add	r7, sp, #0
 80087d4:	60f8      	str	r0, [r7, #12]
 80087d6:	60b9      	str	r1, [r7, #8]
 80087d8:	4613      	mov	r3, r2
 80087da:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087e2:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80087e4:	697b      	ldr	r3, [r7, #20]
 80087e6:	68ba      	ldr	r2, [r7, #8]
 80087e8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80087ec:	88fa      	ldrh	r2, [r7, #6]
 80087ee:	697b      	ldr	r3, [r7, #20]
 80087f0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80087f4:	2300      	movs	r3, #0
}
 80087f6:	4618      	mov	r0, r3
 80087f8:	371c      	adds	r7, #28
 80087fa:	46bd      	mov	sp, r7
 80087fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008800:	4770      	bx	lr

08008802 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8008802:	b480      	push	{r7}
 8008804:	b085      	sub	sp, #20
 8008806:	af00      	add	r7, sp, #0
 8008808:	6078      	str	r0, [r7, #4]
 800880a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008812:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	683a      	ldr	r2, [r7, #0]
 8008818:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800881c:	2300      	movs	r3, #0
}
 800881e:	4618      	mov	r0, r3
 8008820:	3714      	adds	r7, #20
 8008822:	46bd      	mov	sp, r7
 8008824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008828:	4770      	bx	lr

0800882a <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800882a:	b580      	push	{r7, lr}
 800882c:	b084      	sub	sp, #16
 800882e:	af00      	add	r7, sp, #0
 8008830:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008838:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008840:	2b00      	cmp	r3, #0
 8008842:	d01c      	beq.n	800887e <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800884a:	2b00      	cmp	r3, #0
 800884c:	d115      	bne.n	800887a <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	2201      	movs	r2, #1
 8008852:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800886c:	b29b      	uxth	r3, r3
 800886e:	2181      	movs	r1, #129	; 0x81
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f001 fcf5 	bl	800a260 <USBD_LL_Transmit>

      return USBD_OK;
 8008876:	2300      	movs	r3, #0
 8008878:	e002      	b.n	8008880 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800887a:	2301      	movs	r3, #1
 800887c:	e000      	b.n	8008880 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800887e:	2302      	movs	r3, #2
  }
}
 8008880:	4618      	mov	r0, r3
 8008882:	3710      	adds	r7, #16
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}

08008888 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b084      	sub	sp, #16
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008896:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d017      	beq.n	80088d2 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	7c1b      	ldrb	r3, [r3, #16]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d109      	bne.n	80088be <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80088b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80088b4:	2101      	movs	r1, #1
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	f001 fcf5 	bl	800a2a6 <USBD_LL_PrepareReceive>
 80088bc:	e007      	b.n	80088ce <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80088c4:	2340      	movs	r3, #64	; 0x40
 80088c6:	2101      	movs	r1, #1
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	f001 fcec 	bl	800a2a6 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80088ce:	2300      	movs	r3, #0
 80088d0:	e000      	b.n	80088d4 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80088d2:	2302      	movs	r3, #2
  }
}
 80088d4:	4618      	mov	r0, r3
 80088d6:	3710      	adds	r7, #16
 80088d8:	46bd      	mov	sp, r7
 80088da:	bd80      	pop	{r7, pc}

080088dc <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b084      	sub	sp, #16
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	60f8      	str	r0, [r7, #12]
 80088e4:	60b9      	str	r1, [r7, #8]
 80088e6:	4613      	mov	r3, r2
 80088e8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d101      	bne.n	80088f4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80088f0:	2302      	movs	r3, #2
 80088f2:	e01a      	b.n	800892a <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d003      	beq.n	8008906 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	2200      	movs	r2, #0
 8008902:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008906:	68bb      	ldr	r3, [r7, #8]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d003      	beq.n	8008914 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	68ba      	ldr	r2, [r7, #8]
 8008910:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	2201      	movs	r2, #1
 8008918:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	79fa      	ldrb	r2, [r7, #7]
 8008920:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008922:	68f8      	ldr	r0, [r7, #12]
 8008924:	f001 fb58 	bl	8009fd8 <USBD_LL_Init>

  return USBD_OK;
 8008928:	2300      	movs	r3, #0
}
 800892a:	4618      	mov	r0, r3
 800892c:	3710      	adds	r7, #16
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}

08008932 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008932:	b480      	push	{r7}
 8008934:	b085      	sub	sp, #20
 8008936:	af00      	add	r7, sp, #0
 8008938:	6078      	str	r0, [r7, #4]
 800893a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800893c:	2300      	movs	r3, #0
 800893e:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d006      	beq.n	8008954 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	683a      	ldr	r2, [r7, #0]
 800894a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800894e:	2300      	movs	r3, #0
 8008950:	73fb      	strb	r3, [r7, #15]
 8008952:	e001      	b.n	8008958 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008954:	2302      	movs	r3, #2
 8008956:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008958:	7bfb      	ldrb	r3, [r7, #15]
}
 800895a:	4618      	mov	r0, r3
 800895c:	3714      	adds	r7, #20
 800895e:	46bd      	mov	sp, r7
 8008960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008964:	4770      	bx	lr

08008966 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008966:	b580      	push	{r7, lr}
 8008968:	b082      	sub	sp, #8
 800896a:	af00      	add	r7, sp, #0
 800896c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f001 fb8c 	bl	800a08c <USBD_LL_Start>

  return USBD_OK;
 8008974:	2300      	movs	r3, #0
}
 8008976:	4618      	mov	r0, r3
 8008978:	3708      	adds	r7, #8
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}

0800897e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800897e:	b480      	push	{r7}
 8008980:	b083      	sub	sp, #12
 8008982:	af00      	add	r7, sp, #0
 8008984:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008986:	2300      	movs	r3, #0
}
 8008988:	4618      	mov	r0, r3
 800898a:	370c      	adds	r7, #12
 800898c:	46bd      	mov	sp, r7
 800898e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008992:	4770      	bx	lr

08008994 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b084      	sub	sp, #16
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
 800899c:	460b      	mov	r3, r1
 800899e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80089a0:	2302      	movs	r3, #2
 80089a2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d00c      	beq.n	80089c8 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	78fa      	ldrb	r2, [r7, #3]
 80089b8:	4611      	mov	r1, r2
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	4798      	blx	r3
 80089be:	4603      	mov	r3, r0
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d101      	bne.n	80089c8 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80089c4:	2300      	movs	r3, #0
 80089c6:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80089c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	3710      	adds	r7, #16
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}

080089d2 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80089d2:	b580      	push	{r7, lr}
 80089d4:	b082      	sub	sp, #8
 80089d6:	af00      	add	r7, sp, #0
 80089d8:	6078      	str	r0, [r7, #4]
 80089da:	460b      	mov	r3, r1
 80089dc:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089e4:	685b      	ldr	r3, [r3, #4]
 80089e6:	78fa      	ldrb	r2, [r7, #3]
 80089e8:	4611      	mov	r1, r2
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	4798      	blx	r3

  return USBD_OK;
 80089ee:	2300      	movs	r3, #0
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	3708      	adds	r7, #8
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bd80      	pop	{r7, pc}

080089f8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b082      	sub	sp, #8
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
 8008a00:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008a08:	6839      	ldr	r1, [r7, #0]
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f000 fedb 	bl	80097c6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2201      	movs	r2, #1
 8008a14:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008a1e:	461a      	mov	r2, r3
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008a2c:	f003 031f 	and.w	r3, r3, #31
 8008a30:	2b02      	cmp	r3, #2
 8008a32:	d016      	beq.n	8008a62 <USBD_LL_SetupStage+0x6a>
 8008a34:	2b02      	cmp	r3, #2
 8008a36:	d81c      	bhi.n	8008a72 <USBD_LL_SetupStage+0x7a>
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d002      	beq.n	8008a42 <USBD_LL_SetupStage+0x4a>
 8008a3c:	2b01      	cmp	r3, #1
 8008a3e:	d008      	beq.n	8008a52 <USBD_LL_SetupStage+0x5a>
 8008a40:	e017      	b.n	8008a72 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008a48:	4619      	mov	r1, r3
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	f000 f9ce 	bl	8008dec <USBD_StdDevReq>
      break;
 8008a50:	e01a      	b.n	8008a88 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008a58:	4619      	mov	r1, r3
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	f000 fa30 	bl	8008ec0 <USBD_StdItfReq>
      break;
 8008a60:	e012      	b.n	8008a88 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008a68:	4619      	mov	r1, r3
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f000 fa70 	bl	8008f50 <USBD_StdEPReq>
      break;
 8008a70:	e00a      	b.n	8008a88 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008a78:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008a7c:	b2db      	uxtb	r3, r3
 8008a7e:	4619      	mov	r1, r3
 8008a80:	6878      	ldr	r0, [r7, #4]
 8008a82:	f001 fb63 	bl	800a14c <USBD_LL_StallEP>
      break;
 8008a86:	bf00      	nop
  }

  return USBD_OK;
 8008a88:	2300      	movs	r3, #0
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	3708      	adds	r7, #8
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}

08008a92 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008a92:	b580      	push	{r7, lr}
 8008a94:	b086      	sub	sp, #24
 8008a96:	af00      	add	r7, sp, #0
 8008a98:	60f8      	str	r0, [r7, #12]
 8008a9a:	460b      	mov	r3, r1
 8008a9c:	607a      	str	r2, [r7, #4]
 8008a9e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008aa0:	7afb      	ldrb	r3, [r7, #11]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d14b      	bne.n	8008b3e <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008aac:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008ab4:	2b03      	cmp	r3, #3
 8008ab6:	d134      	bne.n	8008b22 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008ab8:	697b      	ldr	r3, [r7, #20]
 8008aba:	68da      	ldr	r2, [r3, #12]
 8008abc:	697b      	ldr	r3, [r7, #20]
 8008abe:	691b      	ldr	r3, [r3, #16]
 8008ac0:	429a      	cmp	r2, r3
 8008ac2:	d919      	bls.n	8008af8 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008ac4:	697b      	ldr	r3, [r7, #20]
 8008ac6:	68da      	ldr	r2, [r3, #12]
 8008ac8:	697b      	ldr	r3, [r7, #20]
 8008aca:	691b      	ldr	r3, [r3, #16]
 8008acc:	1ad2      	subs	r2, r2, r3
 8008ace:	697b      	ldr	r3, [r7, #20]
 8008ad0:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008ad2:	697b      	ldr	r3, [r7, #20]
 8008ad4:	68da      	ldr	r2, [r3, #12]
 8008ad6:	697b      	ldr	r3, [r7, #20]
 8008ad8:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008ada:	429a      	cmp	r2, r3
 8008adc:	d203      	bcs.n	8008ae6 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008ade:	697b      	ldr	r3, [r7, #20]
 8008ae0:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008ae2:	b29b      	uxth	r3, r3
 8008ae4:	e002      	b.n	8008aec <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008ae6:	697b      	ldr	r3, [r7, #20]
 8008ae8:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008aea:	b29b      	uxth	r3, r3
 8008aec:	461a      	mov	r2, r3
 8008aee:	6879      	ldr	r1, [r7, #4]
 8008af0:	68f8      	ldr	r0, [r7, #12]
 8008af2:	f000 ff5c 	bl	80099ae <USBD_CtlContinueRx>
 8008af6:	e038      	b.n	8008b6a <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008afe:	691b      	ldr	r3, [r3, #16]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d00a      	beq.n	8008b1a <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008b0a:	2b03      	cmp	r3, #3
 8008b0c:	d105      	bne.n	8008b1a <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b14:	691b      	ldr	r3, [r3, #16]
 8008b16:	68f8      	ldr	r0, [r7, #12]
 8008b18:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008b1a:	68f8      	ldr	r0, [r7, #12]
 8008b1c:	f000 ff59 	bl	80099d2 <USBD_CtlSendStatus>
 8008b20:	e023      	b.n	8008b6a <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008b28:	2b05      	cmp	r3, #5
 8008b2a:	d11e      	bne.n	8008b6a <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	2200      	movs	r2, #0
 8008b30:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008b34:	2100      	movs	r1, #0
 8008b36:	68f8      	ldr	r0, [r7, #12]
 8008b38:	f001 fb08 	bl	800a14c <USBD_LL_StallEP>
 8008b3c:	e015      	b.n	8008b6a <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b44:	699b      	ldr	r3, [r3, #24]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d00d      	beq.n	8008b66 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008b50:	2b03      	cmp	r3, #3
 8008b52:	d108      	bne.n	8008b66 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b5a:	699b      	ldr	r3, [r3, #24]
 8008b5c:	7afa      	ldrb	r2, [r7, #11]
 8008b5e:	4611      	mov	r1, r2
 8008b60:	68f8      	ldr	r0, [r7, #12]
 8008b62:	4798      	blx	r3
 8008b64:	e001      	b.n	8008b6a <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008b66:	2302      	movs	r3, #2
 8008b68:	e000      	b.n	8008b6c <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008b6a:	2300      	movs	r3, #0
}
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	3718      	adds	r7, #24
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bd80      	pop	{r7, pc}

08008b74 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b086      	sub	sp, #24
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	60f8      	str	r0, [r7, #12]
 8008b7c:	460b      	mov	r3, r1
 8008b7e:	607a      	str	r2, [r7, #4]
 8008b80:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008b82:	7afb      	ldrb	r3, [r7, #11]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d17f      	bne.n	8008c88 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	3314      	adds	r3, #20
 8008b8c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008b94:	2b02      	cmp	r3, #2
 8008b96:	d15c      	bne.n	8008c52 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8008b98:	697b      	ldr	r3, [r7, #20]
 8008b9a:	68da      	ldr	r2, [r3, #12]
 8008b9c:	697b      	ldr	r3, [r7, #20]
 8008b9e:	691b      	ldr	r3, [r3, #16]
 8008ba0:	429a      	cmp	r2, r3
 8008ba2:	d915      	bls.n	8008bd0 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008ba4:	697b      	ldr	r3, [r7, #20]
 8008ba6:	68da      	ldr	r2, [r3, #12]
 8008ba8:	697b      	ldr	r3, [r7, #20]
 8008baa:	691b      	ldr	r3, [r3, #16]
 8008bac:	1ad2      	subs	r2, r2, r3
 8008bae:	697b      	ldr	r3, [r7, #20]
 8008bb0:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008bb2:	697b      	ldr	r3, [r7, #20]
 8008bb4:	68db      	ldr	r3, [r3, #12]
 8008bb6:	b29b      	uxth	r3, r3
 8008bb8:	461a      	mov	r2, r3
 8008bba:	6879      	ldr	r1, [r7, #4]
 8008bbc:	68f8      	ldr	r0, [r7, #12]
 8008bbe:	f000 fec6 	bl	800994e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	2100      	movs	r1, #0
 8008bc8:	68f8      	ldr	r0, [r7, #12]
 8008bca:	f001 fb6c 	bl	800a2a6 <USBD_LL_PrepareReceive>
 8008bce:	e04e      	b.n	8008c6e <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008bd0:	697b      	ldr	r3, [r7, #20]
 8008bd2:	689b      	ldr	r3, [r3, #8]
 8008bd4:	697a      	ldr	r2, [r7, #20]
 8008bd6:	6912      	ldr	r2, [r2, #16]
 8008bd8:	fbb3 f1f2 	udiv	r1, r3, r2
 8008bdc:	fb02 f201 	mul.w	r2, r2, r1
 8008be0:	1a9b      	subs	r3, r3, r2
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d11c      	bne.n	8008c20 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008be6:	697b      	ldr	r3, [r7, #20]
 8008be8:	689a      	ldr	r2, [r3, #8]
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008bee:	429a      	cmp	r2, r3
 8008bf0:	d316      	bcc.n	8008c20 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8008bf2:	697b      	ldr	r3, [r7, #20]
 8008bf4:	689a      	ldr	r2, [r3, #8]
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008bfc:	429a      	cmp	r2, r3
 8008bfe:	d20f      	bcs.n	8008c20 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008c00:	2200      	movs	r2, #0
 8008c02:	2100      	movs	r1, #0
 8008c04:	68f8      	ldr	r0, [r7, #12]
 8008c06:	f000 fea2 	bl	800994e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008c12:	2300      	movs	r3, #0
 8008c14:	2200      	movs	r2, #0
 8008c16:	2100      	movs	r1, #0
 8008c18:	68f8      	ldr	r0, [r7, #12]
 8008c1a:	f001 fb44 	bl	800a2a6 <USBD_LL_PrepareReceive>
 8008c1e:	e026      	b.n	8008c6e <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c26:	68db      	ldr	r3, [r3, #12]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d00a      	beq.n	8008c42 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008c32:	2b03      	cmp	r3, #3
 8008c34:	d105      	bne.n	8008c42 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c3c:	68db      	ldr	r3, [r3, #12]
 8008c3e:	68f8      	ldr	r0, [r7, #12]
 8008c40:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008c42:	2180      	movs	r1, #128	; 0x80
 8008c44:	68f8      	ldr	r0, [r7, #12]
 8008c46:	f001 fa81 	bl	800a14c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008c4a:	68f8      	ldr	r0, [r7, #12]
 8008c4c:	f000 fed4 	bl	80099f8 <USBD_CtlReceiveStatus>
 8008c50:	e00d      	b.n	8008c6e <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008c58:	2b04      	cmp	r3, #4
 8008c5a:	d004      	beq.n	8008c66 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d103      	bne.n	8008c6e <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008c66:	2180      	movs	r1, #128	; 0x80
 8008c68:	68f8      	ldr	r0, [r7, #12]
 8008c6a:	f001 fa6f 	bl	800a14c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008c74:	2b01      	cmp	r3, #1
 8008c76:	d11d      	bne.n	8008cb4 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008c78:	68f8      	ldr	r0, [r7, #12]
 8008c7a:	f7ff fe80 	bl	800897e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	2200      	movs	r2, #0
 8008c82:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008c86:	e015      	b.n	8008cb4 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c8e:	695b      	ldr	r3, [r3, #20]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d00d      	beq.n	8008cb0 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008c9a:	2b03      	cmp	r3, #3
 8008c9c:	d108      	bne.n	8008cb0 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ca4:	695b      	ldr	r3, [r3, #20]
 8008ca6:	7afa      	ldrb	r2, [r7, #11]
 8008ca8:	4611      	mov	r1, r2
 8008caa:	68f8      	ldr	r0, [r7, #12]
 8008cac:	4798      	blx	r3
 8008cae:	e001      	b.n	8008cb4 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008cb0:	2302      	movs	r3, #2
 8008cb2:	e000      	b.n	8008cb6 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008cb4:	2300      	movs	r3, #0
}
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	3718      	adds	r7, #24
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bd80      	pop	{r7, pc}

08008cbe <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008cbe:	b580      	push	{r7, lr}
 8008cc0:	b082      	sub	sp, #8
 8008cc2:	af00      	add	r7, sp, #0
 8008cc4:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008cc6:	2340      	movs	r3, #64	; 0x40
 8008cc8:	2200      	movs	r2, #0
 8008cca:	2100      	movs	r1, #0
 8008ccc:	6878      	ldr	r0, [r7, #4]
 8008cce:	f001 f9f8 	bl	800a0c2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2201      	movs	r2, #1
 8008cd6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	2240      	movs	r2, #64	; 0x40
 8008cde:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008ce2:	2340      	movs	r3, #64	; 0x40
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	2180      	movs	r1, #128	; 0x80
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	f001 f9ea 	bl	800a0c2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2201      	movs	r2, #1
 8008cf2:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2240      	movs	r2, #64	; 0x40
 8008cf8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2201      	movs	r2, #1
 8008cfe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2200      	movs	r2, #0
 8008d06:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2200      	movs	r2, #0
 8008d14:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d009      	beq.n	8008d36 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d28:	685b      	ldr	r3, [r3, #4]
 8008d2a:	687a      	ldr	r2, [r7, #4]
 8008d2c:	6852      	ldr	r2, [r2, #4]
 8008d2e:	b2d2      	uxtb	r2, r2
 8008d30:	4611      	mov	r1, r2
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	4798      	blx	r3
  }

  return USBD_OK;
 8008d36:	2300      	movs	r3, #0
}
 8008d38:	4618      	mov	r0, r3
 8008d3a:	3708      	adds	r7, #8
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bd80      	pop	{r7, pc}

08008d40 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008d40:	b480      	push	{r7}
 8008d42:	b083      	sub	sp, #12
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
 8008d48:	460b      	mov	r3, r1
 8008d4a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	78fa      	ldrb	r2, [r7, #3]
 8008d50:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008d52:	2300      	movs	r3, #0
}
 8008d54:	4618      	mov	r0, r3
 8008d56:	370c      	adds	r7, #12
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5e:	4770      	bx	lr

08008d60 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008d60:	b480      	push	{r7}
 8008d62:	b083      	sub	sp, #12
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2204      	movs	r2, #4
 8008d78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008d7c:	2300      	movs	r3, #0
}
 8008d7e:	4618      	mov	r0, r3
 8008d80:	370c      	adds	r7, #12
 8008d82:	46bd      	mov	sp, r7
 8008d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d88:	4770      	bx	lr

08008d8a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008d8a:	b480      	push	{r7}
 8008d8c:	b083      	sub	sp, #12
 8008d8e:	af00      	add	r7, sp, #0
 8008d90:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d98:	2b04      	cmp	r3, #4
 8008d9a:	d105      	bne.n	8008da8 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008da8:	2300      	movs	r3, #0
}
 8008daa:	4618      	mov	r0, r3
 8008dac:	370c      	adds	r7, #12
 8008dae:	46bd      	mov	sp, r7
 8008db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db4:	4770      	bx	lr

08008db6 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008db6:	b580      	push	{r7, lr}
 8008db8:	b082      	sub	sp, #8
 8008dba:	af00      	add	r7, sp, #0
 8008dbc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dc4:	2b03      	cmp	r3, #3
 8008dc6:	d10b      	bne.n	8008de0 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008dce:	69db      	ldr	r3, [r3, #28]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d005      	beq.n	8008de0 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008dda:	69db      	ldr	r3, [r3, #28]
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008de0:	2300      	movs	r3, #0
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	3708      	adds	r7, #8
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}
	...

08008dec <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b084      	sub	sp, #16
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
 8008df4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008df6:	2300      	movs	r3, #0
 8008df8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	781b      	ldrb	r3, [r3, #0]
 8008dfe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008e02:	2b40      	cmp	r3, #64	; 0x40
 8008e04:	d005      	beq.n	8008e12 <USBD_StdDevReq+0x26>
 8008e06:	2b40      	cmp	r3, #64	; 0x40
 8008e08:	d84f      	bhi.n	8008eaa <USBD_StdDevReq+0xbe>
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d009      	beq.n	8008e22 <USBD_StdDevReq+0x36>
 8008e0e:	2b20      	cmp	r3, #32
 8008e10:	d14b      	bne.n	8008eaa <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e18:	689b      	ldr	r3, [r3, #8]
 8008e1a:	6839      	ldr	r1, [r7, #0]
 8008e1c:	6878      	ldr	r0, [r7, #4]
 8008e1e:	4798      	blx	r3
      break;
 8008e20:	e048      	b.n	8008eb4 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	785b      	ldrb	r3, [r3, #1]
 8008e26:	2b09      	cmp	r3, #9
 8008e28:	d839      	bhi.n	8008e9e <USBD_StdDevReq+0xb2>
 8008e2a:	a201      	add	r2, pc, #4	; (adr r2, 8008e30 <USBD_StdDevReq+0x44>)
 8008e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e30:	08008e81 	.word	0x08008e81
 8008e34:	08008e95 	.word	0x08008e95
 8008e38:	08008e9f 	.word	0x08008e9f
 8008e3c:	08008e8b 	.word	0x08008e8b
 8008e40:	08008e9f 	.word	0x08008e9f
 8008e44:	08008e63 	.word	0x08008e63
 8008e48:	08008e59 	.word	0x08008e59
 8008e4c:	08008e9f 	.word	0x08008e9f
 8008e50:	08008e77 	.word	0x08008e77
 8008e54:	08008e6d 	.word	0x08008e6d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008e58:	6839      	ldr	r1, [r7, #0]
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f000 f9dc 	bl	8009218 <USBD_GetDescriptor>
          break;
 8008e60:	e022      	b.n	8008ea8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008e62:	6839      	ldr	r1, [r7, #0]
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f000 fb3f 	bl	80094e8 <USBD_SetAddress>
          break;
 8008e6a:	e01d      	b.n	8008ea8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008e6c:	6839      	ldr	r1, [r7, #0]
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f000 fb7e 	bl	8009570 <USBD_SetConfig>
          break;
 8008e74:	e018      	b.n	8008ea8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008e76:	6839      	ldr	r1, [r7, #0]
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f000 fc07 	bl	800968c <USBD_GetConfig>
          break;
 8008e7e:	e013      	b.n	8008ea8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008e80:	6839      	ldr	r1, [r7, #0]
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f000 fc37 	bl	80096f6 <USBD_GetStatus>
          break;
 8008e88:	e00e      	b.n	8008ea8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008e8a:	6839      	ldr	r1, [r7, #0]
 8008e8c:	6878      	ldr	r0, [r7, #4]
 8008e8e:	f000 fc65 	bl	800975c <USBD_SetFeature>
          break;
 8008e92:	e009      	b.n	8008ea8 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008e94:	6839      	ldr	r1, [r7, #0]
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f000 fc74 	bl	8009784 <USBD_ClrFeature>
          break;
 8008e9c:	e004      	b.n	8008ea8 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008e9e:	6839      	ldr	r1, [r7, #0]
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	f000 fccd 	bl	8009840 <USBD_CtlError>
          break;
 8008ea6:	bf00      	nop
      }
      break;
 8008ea8:	e004      	b.n	8008eb4 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8008eaa:	6839      	ldr	r1, [r7, #0]
 8008eac:	6878      	ldr	r0, [r7, #4]
 8008eae:	f000 fcc7 	bl	8009840 <USBD_CtlError>
      break;
 8008eb2:	bf00      	nop
  }

  return ret;
 8008eb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	3710      	adds	r7, #16
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	bd80      	pop	{r7, pc}
 8008ebe:	bf00      	nop

08008ec0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b084      	sub	sp, #16
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
 8008ec8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008eca:	2300      	movs	r3, #0
 8008ecc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	781b      	ldrb	r3, [r3, #0]
 8008ed2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008ed6:	2b40      	cmp	r3, #64	; 0x40
 8008ed8:	d005      	beq.n	8008ee6 <USBD_StdItfReq+0x26>
 8008eda:	2b40      	cmp	r3, #64	; 0x40
 8008edc:	d82e      	bhi.n	8008f3c <USBD_StdItfReq+0x7c>
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d001      	beq.n	8008ee6 <USBD_StdItfReq+0x26>
 8008ee2:	2b20      	cmp	r3, #32
 8008ee4:	d12a      	bne.n	8008f3c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008eec:	3b01      	subs	r3, #1
 8008eee:	2b02      	cmp	r3, #2
 8008ef0:	d81d      	bhi.n	8008f2e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	889b      	ldrh	r3, [r3, #4]
 8008ef6:	b2db      	uxtb	r3, r3
 8008ef8:	2b01      	cmp	r3, #1
 8008efa:	d813      	bhi.n	8008f24 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f02:	689b      	ldr	r3, [r3, #8]
 8008f04:	6839      	ldr	r1, [r7, #0]
 8008f06:	6878      	ldr	r0, [r7, #4]
 8008f08:	4798      	blx	r3
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	88db      	ldrh	r3, [r3, #6]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d110      	bne.n	8008f38 <USBD_StdItfReq+0x78>
 8008f16:	7bfb      	ldrb	r3, [r7, #15]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d10d      	bne.n	8008f38 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	f000 fd58 	bl	80099d2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008f22:	e009      	b.n	8008f38 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8008f24:	6839      	ldr	r1, [r7, #0]
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f000 fc8a 	bl	8009840 <USBD_CtlError>
          break;
 8008f2c:	e004      	b.n	8008f38 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8008f2e:	6839      	ldr	r1, [r7, #0]
 8008f30:	6878      	ldr	r0, [r7, #4]
 8008f32:	f000 fc85 	bl	8009840 <USBD_CtlError>
          break;
 8008f36:	e000      	b.n	8008f3a <USBD_StdItfReq+0x7a>
          break;
 8008f38:	bf00      	nop
      }
      break;
 8008f3a:	e004      	b.n	8008f46 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8008f3c:	6839      	ldr	r1, [r7, #0]
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f000 fc7e 	bl	8009840 <USBD_CtlError>
      break;
 8008f44:	bf00      	nop
  }

  return USBD_OK;
 8008f46:	2300      	movs	r3, #0
}
 8008f48:	4618      	mov	r0, r3
 8008f4a:	3710      	adds	r7, #16
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bd80      	pop	{r7, pc}

08008f50 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b084      	sub	sp, #16
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
 8008f58:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	889b      	ldrh	r3, [r3, #4]
 8008f62:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	781b      	ldrb	r3, [r3, #0]
 8008f68:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008f6c:	2b40      	cmp	r3, #64	; 0x40
 8008f6e:	d007      	beq.n	8008f80 <USBD_StdEPReq+0x30>
 8008f70:	2b40      	cmp	r3, #64	; 0x40
 8008f72:	f200 8146 	bhi.w	8009202 <USBD_StdEPReq+0x2b2>
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d00a      	beq.n	8008f90 <USBD_StdEPReq+0x40>
 8008f7a:	2b20      	cmp	r3, #32
 8008f7c:	f040 8141 	bne.w	8009202 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f86:	689b      	ldr	r3, [r3, #8]
 8008f88:	6839      	ldr	r1, [r7, #0]
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	4798      	blx	r3
      break;
 8008f8e:	e13d      	b.n	800920c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	781b      	ldrb	r3, [r3, #0]
 8008f94:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008f98:	2b20      	cmp	r3, #32
 8008f9a:	d10a      	bne.n	8008fb2 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fa2:	689b      	ldr	r3, [r3, #8]
 8008fa4:	6839      	ldr	r1, [r7, #0]
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	4798      	blx	r3
 8008faa:	4603      	mov	r3, r0
 8008fac:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008fae:	7bfb      	ldrb	r3, [r7, #15]
 8008fb0:	e12d      	b.n	800920e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	785b      	ldrb	r3, [r3, #1]
 8008fb6:	2b03      	cmp	r3, #3
 8008fb8:	d007      	beq.n	8008fca <USBD_StdEPReq+0x7a>
 8008fba:	2b03      	cmp	r3, #3
 8008fbc:	f300 811b 	bgt.w	80091f6 <USBD_StdEPReq+0x2a6>
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d072      	beq.n	80090aa <USBD_StdEPReq+0x15a>
 8008fc4:	2b01      	cmp	r3, #1
 8008fc6:	d03a      	beq.n	800903e <USBD_StdEPReq+0xee>
 8008fc8:	e115      	b.n	80091f6 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fd0:	2b02      	cmp	r3, #2
 8008fd2:	d002      	beq.n	8008fda <USBD_StdEPReq+0x8a>
 8008fd4:	2b03      	cmp	r3, #3
 8008fd6:	d015      	beq.n	8009004 <USBD_StdEPReq+0xb4>
 8008fd8:	e02b      	b.n	8009032 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008fda:	7bbb      	ldrb	r3, [r7, #14]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d00c      	beq.n	8008ffa <USBD_StdEPReq+0xaa>
 8008fe0:	7bbb      	ldrb	r3, [r7, #14]
 8008fe2:	2b80      	cmp	r3, #128	; 0x80
 8008fe4:	d009      	beq.n	8008ffa <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008fe6:	7bbb      	ldrb	r3, [r7, #14]
 8008fe8:	4619      	mov	r1, r3
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f001 f8ae 	bl	800a14c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008ff0:	2180      	movs	r1, #128	; 0x80
 8008ff2:	6878      	ldr	r0, [r7, #4]
 8008ff4:	f001 f8aa 	bl	800a14c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008ff8:	e020      	b.n	800903c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8008ffa:	6839      	ldr	r1, [r7, #0]
 8008ffc:	6878      	ldr	r0, [r7, #4]
 8008ffe:	f000 fc1f 	bl	8009840 <USBD_CtlError>
              break;
 8009002:	e01b      	b.n	800903c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	885b      	ldrh	r3, [r3, #2]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d10e      	bne.n	800902a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800900c:	7bbb      	ldrb	r3, [r7, #14]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d00b      	beq.n	800902a <USBD_StdEPReq+0xda>
 8009012:	7bbb      	ldrb	r3, [r7, #14]
 8009014:	2b80      	cmp	r3, #128	; 0x80
 8009016:	d008      	beq.n	800902a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	88db      	ldrh	r3, [r3, #6]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d104      	bne.n	800902a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009020:	7bbb      	ldrb	r3, [r7, #14]
 8009022:	4619      	mov	r1, r3
 8009024:	6878      	ldr	r0, [r7, #4]
 8009026:	f001 f891 	bl	800a14c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800902a:	6878      	ldr	r0, [r7, #4]
 800902c:	f000 fcd1 	bl	80099d2 <USBD_CtlSendStatus>

              break;
 8009030:	e004      	b.n	800903c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8009032:	6839      	ldr	r1, [r7, #0]
 8009034:	6878      	ldr	r0, [r7, #4]
 8009036:	f000 fc03 	bl	8009840 <USBD_CtlError>
              break;
 800903a:	bf00      	nop
          }
          break;
 800903c:	e0e0      	b.n	8009200 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009044:	2b02      	cmp	r3, #2
 8009046:	d002      	beq.n	800904e <USBD_StdEPReq+0xfe>
 8009048:	2b03      	cmp	r3, #3
 800904a:	d015      	beq.n	8009078 <USBD_StdEPReq+0x128>
 800904c:	e026      	b.n	800909c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800904e:	7bbb      	ldrb	r3, [r7, #14]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d00c      	beq.n	800906e <USBD_StdEPReq+0x11e>
 8009054:	7bbb      	ldrb	r3, [r7, #14]
 8009056:	2b80      	cmp	r3, #128	; 0x80
 8009058:	d009      	beq.n	800906e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800905a:	7bbb      	ldrb	r3, [r7, #14]
 800905c:	4619      	mov	r1, r3
 800905e:	6878      	ldr	r0, [r7, #4]
 8009060:	f001 f874 	bl	800a14c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009064:	2180      	movs	r1, #128	; 0x80
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f001 f870 	bl	800a14c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800906c:	e01c      	b.n	80090a8 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800906e:	6839      	ldr	r1, [r7, #0]
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	f000 fbe5 	bl	8009840 <USBD_CtlError>
              break;
 8009076:	e017      	b.n	80090a8 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	885b      	ldrh	r3, [r3, #2]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d112      	bne.n	80090a6 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009080:	7bbb      	ldrb	r3, [r7, #14]
 8009082:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009086:	2b00      	cmp	r3, #0
 8009088:	d004      	beq.n	8009094 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800908a:	7bbb      	ldrb	r3, [r7, #14]
 800908c:	4619      	mov	r1, r3
 800908e:	6878      	ldr	r0, [r7, #4]
 8009090:	f001 f87b 	bl	800a18a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009094:	6878      	ldr	r0, [r7, #4]
 8009096:	f000 fc9c 	bl	80099d2 <USBD_CtlSendStatus>
              }
              break;
 800909a:	e004      	b.n	80090a6 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800909c:	6839      	ldr	r1, [r7, #0]
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	f000 fbce 	bl	8009840 <USBD_CtlError>
              break;
 80090a4:	e000      	b.n	80090a8 <USBD_StdEPReq+0x158>
              break;
 80090a6:	bf00      	nop
          }
          break;
 80090a8:	e0aa      	b.n	8009200 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090b0:	2b02      	cmp	r3, #2
 80090b2:	d002      	beq.n	80090ba <USBD_StdEPReq+0x16a>
 80090b4:	2b03      	cmp	r3, #3
 80090b6:	d032      	beq.n	800911e <USBD_StdEPReq+0x1ce>
 80090b8:	e097      	b.n	80091ea <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80090ba:	7bbb      	ldrb	r3, [r7, #14]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d007      	beq.n	80090d0 <USBD_StdEPReq+0x180>
 80090c0:	7bbb      	ldrb	r3, [r7, #14]
 80090c2:	2b80      	cmp	r3, #128	; 0x80
 80090c4:	d004      	beq.n	80090d0 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80090c6:	6839      	ldr	r1, [r7, #0]
 80090c8:	6878      	ldr	r0, [r7, #4]
 80090ca:	f000 fbb9 	bl	8009840 <USBD_CtlError>
                break;
 80090ce:	e091      	b.n	80091f4 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80090d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	da0b      	bge.n	80090f0 <USBD_StdEPReq+0x1a0>
 80090d8:	7bbb      	ldrb	r3, [r7, #14]
 80090da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80090de:	4613      	mov	r3, r2
 80090e0:	009b      	lsls	r3, r3, #2
 80090e2:	4413      	add	r3, r2
 80090e4:	009b      	lsls	r3, r3, #2
 80090e6:	3310      	adds	r3, #16
 80090e8:	687a      	ldr	r2, [r7, #4]
 80090ea:	4413      	add	r3, r2
 80090ec:	3304      	adds	r3, #4
 80090ee:	e00b      	b.n	8009108 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80090f0:	7bbb      	ldrb	r3, [r7, #14]
 80090f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80090f6:	4613      	mov	r3, r2
 80090f8:	009b      	lsls	r3, r3, #2
 80090fa:	4413      	add	r3, r2
 80090fc:	009b      	lsls	r3, r3, #2
 80090fe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009102:	687a      	ldr	r2, [r7, #4]
 8009104:	4413      	add	r3, r2
 8009106:	3304      	adds	r3, #4
 8009108:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800910a:	68bb      	ldr	r3, [r7, #8]
 800910c:	2200      	movs	r2, #0
 800910e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009110:	68bb      	ldr	r3, [r7, #8]
 8009112:	2202      	movs	r2, #2
 8009114:	4619      	mov	r1, r3
 8009116:	6878      	ldr	r0, [r7, #4]
 8009118:	f000 fbfd 	bl	8009916 <USBD_CtlSendData>
              break;
 800911c:	e06a      	b.n	80091f4 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800911e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009122:	2b00      	cmp	r3, #0
 8009124:	da11      	bge.n	800914a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009126:	7bbb      	ldrb	r3, [r7, #14]
 8009128:	f003 020f 	and.w	r2, r3, #15
 800912c:	6879      	ldr	r1, [r7, #4]
 800912e:	4613      	mov	r3, r2
 8009130:	009b      	lsls	r3, r3, #2
 8009132:	4413      	add	r3, r2
 8009134:	009b      	lsls	r3, r3, #2
 8009136:	440b      	add	r3, r1
 8009138:	3318      	adds	r3, #24
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d117      	bne.n	8009170 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009140:	6839      	ldr	r1, [r7, #0]
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	f000 fb7c 	bl	8009840 <USBD_CtlError>
                  break;
 8009148:	e054      	b.n	80091f4 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800914a:	7bbb      	ldrb	r3, [r7, #14]
 800914c:	f003 020f 	and.w	r2, r3, #15
 8009150:	6879      	ldr	r1, [r7, #4]
 8009152:	4613      	mov	r3, r2
 8009154:	009b      	lsls	r3, r3, #2
 8009156:	4413      	add	r3, r2
 8009158:	009b      	lsls	r3, r3, #2
 800915a:	440b      	add	r3, r1
 800915c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d104      	bne.n	8009170 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009166:	6839      	ldr	r1, [r7, #0]
 8009168:	6878      	ldr	r0, [r7, #4]
 800916a:	f000 fb69 	bl	8009840 <USBD_CtlError>
                  break;
 800916e:	e041      	b.n	80091f4 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009170:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009174:	2b00      	cmp	r3, #0
 8009176:	da0b      	bge.n	8009190 <USBD_StdEPReq+0x240>
 8009178:	7bbb      	ldrb	r3, [r7, #14]
 800917a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800917e:	4613      	mov	r3, r2
 8009180:	009b      	lsls	r3, r3, #2
 8009182:	4413      	add	r3, r2
 8009184:	009b      	lsls	r3, r3, #2
 8009186:	3310      	adds	r3, #16
 8009188:	687a      	ldr	r2, [r7, #4]
 800918a:	4413      	add	r3, r2
 800918c:	3304      	adds	r3, #4
 800918e:	e00b      	b.n	80091a8 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009190:	7bbb      	ldrb	r3, [r7, #14]
 8009192:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009196:	4613      	mov	r3, r2
 8009198:	009b      	lsls	r3, r3, #2
 800919a:	4413      	add	r3, r2
 800919c:	009b      	lsls	r3, r3, #2
 800919e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80091a2:	687a      	ldr	r2, [r7, #4]
 80091a4:	4413      	add	r3, r2
 80091a6:	3304      	adds	r3, #4
 80091a8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80091aa:	7bbb      	ldrb	r3, [r7, #14]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d002      	beq.n	80091b6 <USBD_StdEPReq+0x266>
 80091b0:	7bbb      	ldrb	r3, [r7, #14]
 80091b2:	2b80      	cmp	r3, #128	; 0x80
 80091b4:	d103      	bne.n	80091be <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80091b6:	68bb      	ldr	r3, [r7, #8]
 80091b8:	2200      	movs	r2, #0
 80091ba:	601a      	str	r2, [r3, #0]
 80091bc:	e00e      	b.n	80091dc <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80091be:	7bbb      	ldrb	r3, [r7, #14]
 80091c0:	4619      	mov	r1, r3
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f001 f800 	bl	800a1c8 <USBD_LL_IsStallEP>
 80091c8:	4603      	mov	r3, r0
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d003      	beq.n	80091d6 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80091ce:	68bb      	ldr	r3, [r7, #8]
 80091d0:	2201      	movs	r2, #1
 80091d2:	601a      	str	r2, [r3, #0]
 80091d4:	e002      	b.n	80091dc <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80091d6:	68bb      	ldr	r3, [r7, #8]
 80091d8:	2200      	movs	r2, #0
 80091da:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80091dc:	68bb      	ldr	r3, [r7, #8]
 80091de:	2202      	movs	r2, #2
 80091e0:	4619      	mov	r1, r3
 80091e2:	6878      	ldr	r0, [r7, #4]
 80091e4:	f000 fb97 	bl	8009916 <USBD_CtlSendData>
              break;
 80091e8:	e004      	b.n	80091f4 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80091ea:	6839      	ldr	r1, [r7, #0]
 80091ec:	6878      	ldr	r0, [r7, #4]
 80091ee:	f000 fb27 	bl	8009840 <USBD_CtlError>
              break;
 80091f2:	bf00      	nop
          }
          break;
 80091f4:	e004      	b.n	8009200 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80091f6:	6839      	ldr	r1, [r7, #0]
 80091f8:	6878      	ldr	r0, [r7, #4]
 80091fa:	f000 fb21 	bl	8009840 <USBD_CtlError>
          break;
 80091fe:	bf00      	nop
      }
      break;
 8009200:	e004      	b.n	800920c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8009202:	6839      	ldr	r1, [r7, #0]
 8009204:	6878      	ldr	r0, [r7, #4]
 8009206:	f000 fb1b 	bl	8009840 <USBD_CtlError>
      break;
 800920a:	bf00      	nop
  }

  return ret;
 800920c:	7bfb      	ldrb	r3, [r7, #15]
}
 800920e:	4618      	mov	r0, r3
 8009210:	3710      	adds	r7, #16
 8009212:	46bd      	mov	sp, r7
 8009214:	bd80      	pop	{r7, pc}
	...

08009218 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b084      	sub	sp, #16
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
 8009220:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009222:	2300      	movs	r3, #0
 8009224:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009226:	2300      	movs	r3, #0
 8009228:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800922a:	2300      	movs	r3, #0
 800922c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	885b      	ldrh	r3, [r3, #2]
 8009232:	0a1b      	lsrs	r3, r3, #8
 8009234:	b29b      	uxth	r3, r3
 8009236:	3b01      	subs	r3, #1
 8009238:	2b06      	cmp	r3, #6
 800923a:	f200 8128 	bhi.w	800948e <USBD_GetDescriptor+0x276>
 800923e:	a201      	add	r2, pc, #4	; (adr r2, 8009244 <USBD_GetDescriptor+0x2c>)
 8009240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009244:	08009261 	.word	0x08009261
 8009248:	08009279 	.word	0x08009279
 800924c:	080092b9 	.word	0x080092b9
 8009250:	0800948f 	.word	0x0800948f
 8009254:	0800948f 	.word	0x0800948f
 8009258:	0800942f 	.word	0x0800942f
 800925c:	0800945b 	.word	0x0800945b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	687a      	ldr	r2, [r7, #4]
 800926a:	7c12      	ldrb	r2, [r2, #16]
 800926c:	f107 0108 	add.w	r1, r7, #8
 8009270:	4610      	mov	r0, r2
 8009272:	4798      	blx	r3
 8009274:	60f8      	str	r0, [r7, #12]
      break;
 8009276:	e112      	b.n	800949e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	7c1b      	ldrb	r3, [r3, #16]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d10d      	bne.n	800929c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009288:	f107 0208 	add.w	r2, r7, #8
 800928c:	4610      	mov	r0, r2
 800928e:	4798      	blx	r3
 8009290:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	3301      	adds	r3, #1
 8009296:	2202      	movs	r2, #2
 8009298:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800929a:	e100      	b.n	800949e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092a4:	f107 0208 	add.w	r2, r7, #8
 80092a8:	4610      	mov	r0, r2
 80092aa:	4798      	blx	r3
 80092ac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	3301      	adds	r3, #1
 80092b2:	2202      	movs	r2, #2
 80092b4:	701a      	strb	r2, [r3, #0]
      break;
 80092b6:	e0f2      	b.n	800949e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	885b      	ldrh	r3, [r3, #2]
 80092bc:	b2db      	uxtb	r3, r3
 80092be:	2b05      	cmp	r3, #5
 80092c0:	f200 80ac 	bhi.w	800941c <USBD_GetDescriptor+0x204>
 80092c4:	a201      	add	r2, pc, #4	; (adr r2, 80092cc <USBD_GetDescriptor+0xb4>)
 80092c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092ca:	bf00      	nop
 80092cc:	080092e5 	.word	0x080092e5
 80092d0:	08009319 	.word	0x08009319
 80092d4:	0800934d 	.word	0x0800934d
 80092d8:	08009381 	.word	0x08009381
 80092dc:	080093b5 	.word	0x080093b5
 80092e0:	080093e9 	.word	0x080093e9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80092ea:	685b      	ldr	r3, [r3, #4]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d00b      	beq.n	8009308 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80092f6:	685b      	ldr	r3, [r3, #4]
 80092f8:	687a      	ldr	r2, [r7, #4]
 80092fa:	7c12      	ldrb	r2, [r2, #16]
 80092fc:	f107 0108 	add.w	r1, r7, #8
 8009300:	4610      	mov	r0, r2
 8009302:	4798      	blx	r3
 8009304:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009306:	e091      	b.n	800942c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009308:	6839      	ldr	r1, [r7, #0]
 800930a:	6878      	ldr	r0, [r7, #4]
 800930c:	f000 fa98 	bl	8009840 <USBD_CtlError>
            err++;
 8009310:	7afb      	ldrb	r3, [r7, #11]
 8009312:	3301      	adds	r3, #1
 8009314:	72fb      	strb	r3, [r7, #11]
          break;
 8009316:	e089      	b.n	800942c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800931e:	689b      	ldr	r3, [r3, #8]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d00b      	beq.n	800933c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800932a:	689b      	ldr	r3, [r3, #8]
 800932c:	687a      	ldr	r2, [r7, #4]
 800932e:	7c12      	ldrb	r2, [r2, #16]
 8009330:	f107 0108 	add.w	r1, r7, #8
 8009334:	4610      	mov	r0, r2
 8009336:	4798      	blx	r3
 8009338:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800933a:	e077      	b.n	800942c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800933c:	6839      	ldr	r1, [r7, #0]
 800933e:	6878      	ldr	r0, [r7, #4]
 8009340:	f000 fa7e 	bl	8009840 <USBD_CtlError>
            err++;
 8009344:	7afb      	ldrb	r3, [r7, #11]
 8009346:	3301      	adds	r3, #1
 8009348:	72fb      	strb	r3, [r7, #11]
          break;
 800934a:	e06f      	b.n	800942c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009352:	68db      	ldr	r3, [r3, #12]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d00b      	beq.n	8009370 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800935e:	68db      	ldr	r3, [r3, #12]
 8009360:	687a      	ldr	r2, [r7, #4]
 8009362:	7c12      	ldrb	r2, [r2, #16]
 8009364:	f107 0108 	add.w	r1, r7, #8
 8009368:	4610      	mov	r0, r2
 800936a:	4798      	blx	r3
 800936c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800936e:	e05d      	b.n	800942c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009370:	6839      	ldr	r1, [r7, #0]
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f000 fa64 	bl	8009840 <USBD_CtlError>
            err++;
 8009378:	7afb      	ldrb	r3, [r7, #11]
 800937a:	3301      	adds	r3, #1
 800937c:	72fb      	strb	r3, [r7, #11]
          break;
 800937e:	e055      	b.n	800942c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009386:	691b      	ldr	r3, [r3, #16]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d00b      	beq.n	80093a4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009392:	691b      	ldr	r3, [r3, #16]
 8009394:	687a      	ldr	r2, [r7, #4]
 8009396:	7c12      	ldrb	r2, [r2, #16]
 8009398:	f107 0108 	add.w	r1, r7, #8
 800939c:	4610      	mov	r0, r2
 800939e:	4798      	blx	r3
 80093a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80093a2:	e043      	b.n	800942c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80093a4:	6839      	ldr	r1, [r7, #0]
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f000 fa4a 	bl	8009840 <USBD_CtlError>
            err++;
 80093ac:	7afb      	ldrb	r3, [r7, #11]
 80093ae:	3301      	adds	r3, #1
 80093b0:	72fb      	strb	r3, [r7, #11]
          break;
 80093b2:	e03b      	b.n	800942c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80093ba:	695b      	ldr	r3, [r3, #20]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d00b      	beq.n	80093d8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80093c6:	695b      	ldr	r3, [r3, #20]
 80093c8:	687a      	ldr	r2, [r7, #4]
 80093ca:	7c12      	ldrb	r2, [r2, #16]
 80093cc:	f107 0108 	add.w	r1, r7, #8
 80093d0:	4610      	mov	r0, r2
 80093d2:	4798      	blx	r3
 80093d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80093d6:	e029      	b.n	800942c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80093d8:	6839      	ldr	r1, [r7, #0]
 80093da:	6878      	ldr	r0, [r7, #4]
 80093dc:	f000 fa30 	bl	8009840 <USBD_CtlError>
            err++;
 80093e0:	7afb      	ldrb	r3, [r7, #11]
 80093e2:	3301      	adds	r3, #1
 80093e4:	72fb      	strb	r3, [r7, #11]
          break;
 80093e6:	e021      	b.n	800942c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80093ee:	699b      	ldr	r3, [r3, #24]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d00b      	beq.n	800940c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80093fa:	699b      	ldr	r3, [r3, #24]
 80093fc:	687a      	ldr	r2, [r7, #4]
 80093fe:	7c12      	ldrb	r2, [r2, #16]
 8009400:	f107 0108 	add.w	r1, r7, #8
 8009404:	4610      	mov	r0, r2
 8009406:	4798      	blx	r3
 8009408:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800940a:	e00f      	b.n	800942c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800940c:	6839      	ldr	r1, [r7, #0]
 800940e:	6878      	ldr	r0, [r7, #4]
 8009410:	f000 fa16 	bl	8009840 <USBD_CtlError>
            err++;
 8009414:	7afb      	ldrb	r3, [r7, #11]
 8009416:	3301      	adds	r3, #1
 8009418:	72fb      	strb	r3, [r7, #11]
          break;
 800941a:	e007      	b.n	800942c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800941c:	6839      	ldr	r1, [r7, #0]
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	f000 fa0e 	bl	8009840 <USBD_CtlError>
          err++;
 8009424:	7afb      	ldrb	r3, [r7, #11]
 8009426:	3301      	adds	r3, #1
 8009428:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800942a:	e038      	b.n	800949e <USBD_GetDescriptor+0x286>
 800942c:	e037      	b.n	800949e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	7c1b      	ldrb	r3, [r3, #16]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d109      	bne.n	800944a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800943c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800943e:	f107 0208 	add.w	r2, r7, #8
 8009442:	4610      	mov	r0, r2
 8009444:	4798      	blx	r3
 8009446:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009448:	e029      	b.n	800949e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800944a:	6839      	ldr	r1, [r7, #0]
 800944c:	6878      	ldr	r0, [r7, #4]
 800944e:	f000 f9f7 	bl	8009840 <USBD_CtlError>
        err++;
 8009452:	7afb      	ldrb	r3, [r7, #11]
 8009454:	3301      	adds	r3, #1
 8009456:	72fb      	strb	r3, [r7, #11]
      break;
 8009458:	e021      	b.n	800949e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	7c1b      	ldrb	r3, [r3, #16]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d10d      	bne.n	800947e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800946a:	f107 0208 	add.w	r2, r7, #8
 800946e:	4610      	mov	r0, r2
 8009470:	4798      	blx	r3
 8009472:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	3301      	adds	r3, #1
 8009478:	2207      	movs	r2, #7
 800947a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800947c:	e00f      	b.n	800949e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800947e:	6839      	ldr	r1, [r7, #0]
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	f000 f9dd 	bl	8009840 <USBD_CtlError>
        err++;
 8009486:	7afb      	ldrb	r3, [r7, #11]
 8009488:	3301      	adds	r3, #1
 800948a:	72fb      	strb	r3, [r7, #11]
      break;
 800948c:	e007      	b.n	800949e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800948e:	6839      	ldr	r1, [r7, #0]
 8009490:	6878      	ldr	r0, [r7, #4]
 8009492:	f000 f9d5 	bl	8009840 <USBD_CtlError>
      err++;
 8009496:	7afb      	ldrb	r3, [r7, #11]
 8009498:	3301      	adds	r3, #1
 800949a:	72fb      	strb	r3, [r7, #11]
      break;
 800949c:	bf00      	nop
  }

  if (err != 0U)
 800949e:	7afb      	ldrb	r3, [r7, #11]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d11c      	bne.n	80094de <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80094a4:	893b      	ldrh	r3, [r7, #8]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d011      	beq.n	80094ce <USBD_GetDescriptor+0x2b6>
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	88db      	ldrh	r3, [r3, #6]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d00d      	beq.n	80094ce <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	88da      	ldrh	r2, [r3, #6]
 80094b6:	893b      	ldrh	r3, [r7, #8]
 80094b8:	4293      	cmp	r3, r2
 80094ba:	bf28      	it	cs
 80094bc:	4613      	movcs	r3, r2
 80094be:	b29b      	uxth	r3, r3
 80094c0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80094c2:	893b      	ldrh	r3, [r7, #8]
 80094c4:	461a      	mov	r2, r3
 80094c6:	68f9      	ldr	r1, [r7, #12]
 80094c8:	6878      	ldr	r0, [r7, #4]
 80094ca:	f000 fa24 	bl	8009916 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	88db      	ldrh	r3, [r3, #6]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d104      	bne.n	80094e0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80094d6:	6878      	ldr	r0, [r7, #4]
 80094d8:	f000 fa7b 	bl	80099d2 <USBD_CtlSendStatus>
 80094dc:	e000      	b.n	80094e0 <USBD_GetDescriptor+0x2c8>
    return;
 80094de:	bf00      	nop
    }
  }
}
 80094e0:	3710      	adds	r7, #16
 80094e2:	46bd      	mov	sp, r7
 80094e4:	bd80      	pop	{r7, pc}
 80094e6:	bf00      	nop

080094e8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b084      	sub	sp, #16
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
 80094f0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	889b      	ldrh	r3, [r3, #4]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d130      	bne.n	800955c <USBD_SetAddress+0x74>
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	88db      	ldrh	r3, [r3, #6]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d12c      	bne.n	800955c <USBD_SetAddress+0x74>
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	885b      	ldrh	r3, [r3, #2]
 8009506:	2b7f      	cmp	r3, #127	; 0x7f
 8009508:	d828      	bhi.n	800955c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	885b      	ldrh	r3, [r3, #2]
 800950e:	b2db      	uxtb	r3, r3
 8009510:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009514:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800951c:	2b03      	cmp	r3, #3
 800951e:	d104      	bne.n	800952a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009520:	6839      	ldr	r1, [r7, #0]
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f000 f98c 	bl	8009840 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009528:	e01d      	b.n	8009566 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	7bfa      	ldrb	r2, [r7, #15]
 800952e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009532:	7bfb      	ldrb	r3, [r7, #15]
 8009534:	4619      	mov	r1, r3
 8009536:	6878      	ldr	r0, [r7, #4]
 8009538:	f000 fe73 	bl	800a222 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800953c:	6878      	ldr	r0, [r7, #4]
 800953e:	f000 fa48 	bl	80099d2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009542:	7bfb      	ldrb	r3, [r7, #15]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d004      	beq.n	8009552 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2202      	movs	r2, #2
 800954c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009550:	e009      	b.n	8009566 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2201      	movs	r2, #1
 8009556:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800955a:	e004      	b.n	8009566 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800955c:	6839      	ldr	r1, [r7, #0]
 800955e:	6878      	ldr	r0, [r7, #4]
 8009560:	f000 f96e 	bl	8009840 <USBD_CtlError>
  }
}
 8009564:	bf00      	nop
 8009566:	bf00      	nop
 8009568:	3710      	adds	r7, #16
 800956a:	46bd      	mov	sp, r7
 800956c:	bd80      	pop	{r7, pc}
	...

08009570 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b082      	sub	sp, #8
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
 8009578:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800957a:	683b      	ldr	r3, [r7, #0]
 800957c:	885b      	ldrh	r3, [r3, #2]
 800957e:	b2da      	uxtb	r2, r3
 8009580:	4b41      	ldr	r3, [pc, #260]	; (8009688 <USBD_SetConfig+0x118>)
 8009582:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009584:	4b40      	ldr	r3, [pc, #256]	; (8009688 <USBD_SetConfig+0x118>)
 8009586:	781b      	ldrb	r3, [r3, #0]
 8009588:	2b01      	cmp	r3, #1
 800958a:	d904      	bls.n	8009596 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800958c:	6839      	ldr	r1, [r7, #0]
 800958e:	6878      	ldr	r0, [r7, #4]
 8009590:	f000 f956 	bl	8009840 <USBD_CtlError>
 8009594:	e075      	b.n	8009682 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800959c:	2b02      	cmp	r3, #2
 800959e:	d002      	beq.n	80095a6 <USBD_SetConfig+0x36>
 80095a0:	2b03      	cmp	r3, #3
 80095a2:	d023      	beq.n	80095ec <USBD_SetConfig+0x7c>
 80095a4:	e062      	b.n	800966c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80095a6:	4b38      	ldr	r3, [pc, #224]	; (8009688 <USBD_SetConfig+0x118>)
 80095a8:	781b      	ldrb	r3, [r3, #0]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d01a      	beq.n	80095e4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80095ae:	4b36      	ldr	r3, [pc, #216]	; (8009688 <USBD_SetConfig+0x118>)
 80095b0:	781b      	ldrb	r3, [r3, #0]
 80095b2:	461a      	mov	r2, r3
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2203      	movs	r2, #3
 80095bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80095c0:	4b31      	ldr	r3, [pc, #196]	; (8009688 <USBD_SetConfig+0x118>)
 80095c2:	781b      	ldrb	r3, [r3, #0]
 80095c4:	4619      	mov	r1, r3
 80095c6:	6878      	ldr	r0, [r7, #4]
 80095c8:	f7ff f9e4 	bl	8008994 <USBD_SetClassConfig>
 80095cc:	4603      	mov	r3, r0
 80095ce:	2b02      	cmp	r3, #2
 80095d0:	d104      	bne.n	80095dc <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80095d2:	6839      	ldr	r1, [r7, #0]
 80095d4:	6878      	ldr	r0, [r7, #4]
 80095d6:	f000 f933 	bl	8009840 <USBD_CtlError>
            return;
 80095da:	e052      	b.n	8009682 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80095dc:	6878      	ldr	r0, [r7, #4]
 80095de:	f000 f9f8 	bl	80099d2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80095e2:	e04e      	b.n	8009682 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80095e4:	6878      	ldr	r0, [r7, #4]
 80095e6:	f000 f9f4 	bl	80099d2 <USBD_CtlSendStatus>
        break;
 80095ea:	e04a      	b.n	8009682 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80095ec:	4b26      	ldr	r3, [pc, #152]	; (8009688 <USBD_SetConfig+0x118>)
 80095ee:	781b      	ldrb	r3, [r3, #0]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d112      	bne.n	800961a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2202      	movs	r2, #2
 80095f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80095fc:	4b22      	ldr	r3, [pc, #136]	; (8009688 <USBD_SetConfig+0x118>)
 80095fe:	781b      	ldrb	r3, [r3, #0]
 8009600:	461a      	mov	r2, r3
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009606:	4b20      	ldr	r3, [pc, #128]	; (8009688 <USBD_SetConfig+0x118>)
 8009608:	781b      	ldrb	r3, [r3, #0]
 800960a:	4619      	mov	r1, r3
 800960c:	6878      	ldr	r0, [r7, #4]
 800960e:	f7ff f9e0 	bl	80089d2 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009612:	6878      	ldr	r0, [r7, #4]
 8009614:	f000 f9dd 	bl	80099d2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009618:	e033      	b.n	8009682 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800961a:	4b1b      	ldr	r3, [pc, #108]	; (8009688 <USBD_SetConfig+0x118>)
 800961c:	781b      	ldrb	r3, [r3, #0]
 800961e:	461a      	mov	r2, r3
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	685b      	ldr	r3, [r3, #4]
 8009624:	429a      	cmp	r2, r3
 8009626:	d01d      	beq.n	8009664 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	685b      	ldr	r3, [r3, #4]
 800962c:	b2db      	uxtb	r3, r3
 800962e:	4619      	mov	r1, r3
 8009630:	6878      	ldr	r0, [r7, #4]
 8009632:	f7ff f9ce 	bl	80089d2 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009636:	4b14      	ldr	r3, [pc, #80]	; (8009688 <USBD_SetConfig+0x118>)
 8009638:	781b      	ldrb	r3, [r3, #0]
 800963a:	461a      	mov	r2, r3
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009640:	4b11      	ldr	r3, [pc, #68]	; (8009688 <USBD_SetConfig+0x118>)
 8009642:	781b      	ldrb	r3, [r3, #0]
 8009644:	4619      	mov	r1, r3
 8009646:	6878      	ldr	r0, [r7, #4]
 8009648:	f7ff f9a4 	bl	8008994 <USBD_SetClassConfig>
 800964c:	4603      	mov	r3, r0
 800964e:	2b02      	cmp	r3, #2
 8009650:	d104      	bne.n	800965c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009652:	6839      	ldr	r1, [r7, #0]
 8009654:	6878      	ldr	r0, [r7, #4]
 8009656:	f000 f8f3 	bl	8009840 <USBD_CtlError>
            return;
 800965a:	e012      	b.n	8009682 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800965c:	6878      	ldr	r0, [r7, #4]
 800965e:	f000 f9b8 	bl	80099d2 <USBD_CtlSendStatus>
        break;
 8009662:	e00e      	b.n	8009682 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009664:	6878      	ldr	r0, [r7, #4]
 8009666:	f000 f9b4 	bl	80099d2 <USBD_CtlSendStatus>
        break;
 800966a:	e00a      	b.n	8009682 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800966c:	6839      	ldr	r1, [r7, #0]
 800966e:	6878      	ldr	r0, [r7, #4]
 8009670:	f000 f8e6 	bl	8009840 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009674:	4b04      	ldr	r3, [pc, #16]	; (8009688 <USBD_SetConfig+0x118>)
 8009676:	781b      	ldrb	r3, [r3, #0]
 8009678:	4619      	mov	r1, r3
 800967a:	6878      	ldr	r0, [r7, #4]
 800967c:	f7ff f9a9 	bl	80089d2 <USBD_ClrClassConfig>
        break;
 8009680:	bf00      	nop
    }
  }
}
 8009682:	3708      	adds	r7, #8
 8009684:	46bd      	mov	sp, r7
 8009686:	bd80      	pop	{r7, pc}
 8009688:	20000370 	.word	0x20000370

0800968c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b082      	sub	sp, #8
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
 8009694:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	88db      	ldrh	r3, [r3, #6]
 800969a:	2b01      	cmp	r3, #1
 800969c:	d004      	beq.n	80096a8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800969e:	6839      	ldr	r1, [r7, #0]
 80096a0:	6878      	ldr	r0, [r7, #4]
 80096a2:	f000 f8cd 	bl	8009840 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80096a6:	e022      	b.n	80096ee <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096ae:	2b02      	cmp	r3, #2
 80096b0:	dc02      	bgt.n	80096b8 <USBD_GetConfig+0x2c>
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	dc03      	bgt.n	80096be <USBD_GetConfig+0x32>
 80096b6:	e015      	b.n	80096e4 <USBD_GetConfig+0x58>
 80096b8:	2b03      	cmp	r3, #3
 80096ba:	d00b      	beq.n	80096d4 <USBD_GetConfig+0x48>
 80096bc:	e012      	b.n	80096e4 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	2200      	movs	r2, #0
 80096c2:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	3308      	adds	r3, #8
 80096c8:	2201      	movs	r2, #1
 80096ca:	4619      	mov	r1, r3
 80096cc:	6878      	ldr	r0, [r7, #4]
 80096ce:	f000 f922 	bl	8009916 <USBD_CtlSendData>
        break;
 80096d2:	e00c      	b.n	80096ee <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	3304      	adds	r3, #4
 80096d8:	2201      	movs	r2, #1
 80096da:	4619      	mov	r1, r3
 80096dc:	6878      	ldr	r0, [r7, #4]
 80096de:	f000 f91a 	bl	8009916 <USBD_CtlSendData>
        break;
 80096e2:	e004      	b.n	80096ee <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80096e4:	6839      	ldr	r1, [r7, #0]
 80096e6:	6878      	ldr	r0, [r7, #4]
 80096e8:	f000 f8aa 	bl	8009840 <USBD_CtlError>
        break;
 80096ec:	bf00      	nop
}
 80096ee:	bf00      	nop
 80096f0:	3708      	adds	r7, #8
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bd80      	pop	{r7, pc}

080096f6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096f6:	b580      	push	{r7, lr}
 80096f8:	b082      	sub	sp, #8
 80096fa:	af00      	add	r7, sp, #0
 80096fc:	6078      	str	r0, [r7, #4]
 80096fe:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009706:	3b01      	subs	r3, #1
 8009708:	2b02      	cmp	r3, #2
 800970a:	d81e      	bhi.n	800974a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	88db      	ldrh	r3, [r3, #6]
 8009710:	2b02      	cmp	r3, #2
 8009712:	d004      	beq.n	800971e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009714:	6839      	ldr	r1, [r7, #0]
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	f000 f892 	bl	8009840 <USBD_CtlError>
        break;
 800971c:	e01a      	b.n	8009754 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	2201      	movs	r2, #1
 8009722:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800972a:	2b00      	cmp	r3, #0
 800972c:	d005      	beq.n	800973a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	68db      	ldr	r3, [r3, #12]
 8009732:	f043 0202 	orr.w	r2, r3, #2
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	330c      	adds	r3, #12
 800973e:	2202      	movs	r2, #2
 8009740:	4619      	mov	r1, r3
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f000 f8e7 	bl	8009916 <USBD_CtlSendData>
      break;
 8009748:	e004      	b.n	8009754 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800974a:	6839      	ldr	r1, [r7, #0]
 800974c:	6878      	ldr	r0, [r7, #4]
 800974e:	f000 f877 	bl	8009840 <USBD_CtlError>
      break;
 8009752:	bf00      	nop
  }
}
 8009754:	bf00      	nop
 8009756:	3708      	adds	r7, #8
 8009758:	46bd      	mov	sp, r7
 800975a:	bd80      	pop	{r7, pc}

0800975c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b082      	sub	sp, #8
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
 8009764:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	885b      	ldrh	r3, [r3, #2]
 800976a:	2b01      	cmp	r3, #1
 800976c:	d106      	bne.n	800977c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2201      	movs	r2, #1
 8009772:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8009776:	6878      	ldr	r0, [r7, #4]
 8009778:	f000 f92b 	bl	80099d2 <USBD_CtlSendStatus>
  }
}
 800977c:	bf00      	nop
 800977e:	3708      	adds	r7, #8
 8009780:	46bd      	mov	sp, r7
 8009782:	bd80      	pop	{r7, pc}

08009784 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b082      	sub	sp, #8
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
 800978c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009794:	3b01      	subs	r3, #1
 8009796:	2b02      	cmp	r3, #2
 8009798:	d80b      	bhi.n	80097b2 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	885b      	ldrh	r3, [r3, #2]
 800979e:	2b01      	cmp	r3, #1
 80097a0:	d10c      	bne.n	80097bc <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	2200      	movs	r2, #0
 80097a6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	f000 f911 	bl	80099d2 <USBD_CtlSendStatus>
      }
      break;
 80097b0:	e004      	b.n	80097bc <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80097b2:	6839      	ldr	r1, [r7, #0]
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	f000 f843 	bl	8009840 <USBD_CtlError>
      break;
 80097ba:	e000      	b.n	80097be <USBD_ClrFeature+0x3a>
      break;
 80097bc:	bf00      	nop
  }
}
 80097be:	bf00      	nop
 80097c0:	3708      	adds	r7, #8
 80097c2:	46bd      	mov	sp, r7
 80097c4:	bd80      	pop	{r7, pc}

080097c6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80097c6:	b480      	push	{r7}
 80097c8:	b083      	sub	sp, #12
 80097ca:	af00      	add	r7, sp, #0
 80097cc:	6078      	str	r0, [r7, #4]
 80097ce:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	781a      	ldrb	r2, [r3, #0]
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	785a      	ldrb	r2, [r3, #1]
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	3302      	adds	r3, #2
 80097e4:	781b      	ldrb	r3, [r3, #0]
 80097e6:	b29a      	uxth	r2, r3
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	3303      	adds	r3, #3
 80097ec:	781b      	ldrb	r3, [r3, #0]
 80097ee:	b29b      	uxth	r3, r3
 80097f0:	021b      	lsls	r3, r3, #8
 80097f2:	b29b      	uxth	r3, r3
 80097f4:	4413      	add	r3, r2
 80097f6:	b29a      	uxth	r2, r3
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80097fc:	683b      	ldr	r3, [r7, #0]
 80097fe:	3304      	adds	r3, #4
 8009800:	781b      	ldrb	r3, [r3, #0]
 8009802:	b29a      	uxth	r2, r3
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	3305      	adds	r3, #5
 8009808:	781b      	ldrb	r3, [r3, #0]
 800980a:	b29b      	uxth	r3, r3
 800980c:	021b      	lsls	r3, r3, #8
 800980e:	b29b      	uxth	r3, r3
 8009810:	4413      	add	r3, r2
 8009812:	b29a      	uxth	r2, r3
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	3306      	adds	r3, #6
 800981c:	781b      	ldrb	r3, [r3, #0]
 800981e:	b29a      	uxth	r2, r3
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	3307      	adds	r3, #7
 8009824:	781b      	ldrb	r3, [r3, #0]
 8009826:	b29b      	uxth	r3, r3
 8009828:	021b      	lsls	r3, r3, #8
 800982a:	b29b      	uxth	r3, r3
 800982c:	4413      	add	r3, r2
 800982e:	b29a      	uxth	r2, r3
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	80da      	strh	r2, [r3, #6]

}
 8009834:	bf00      	nop
 8009836:	370c      	adds	r7, #12
 8009838:	46bd      	mov	sp, r7
 800983a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983e:	4770      	bx	lr

08009840 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b082      	sub	sp, #8
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
 8009848:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800984a:	2180      	movs	r1, #128	; 0x80
 800984c:	6878      	ldr	r0, [r7, #4]
 800984e:	f000 fc7d 	bl	800a14c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009852:	2100      	movs	r1, #0
 8009854:	6878      	ldr	r0, [r7, #4]
 8009856:	f000 fc79 	bl	800a14c <USBD_LL_StallEP>
}
 800985a:	bf00      	nop
 800985c:	3708      	adds	r7, #8
 800985e:	46bd      	mov	sp, r7
 8009860:	bd80      	pop	{r7, pc}

08009862 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009862:	b580      	push	{r7, lr}
 8009864:	b086      	sub	sp, #24
 8009866:	af00      	add	r7, sp, #0
 8009868:	60f8      	str	r0, [r7, #12]
 800986a:	60b9      	str	r1, [r7, #8]
 800986c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800986e:	2300      	movs	r3, #0
 8009870:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d032      	beq.n	80098de <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009878:	68f8      	ldr	r0, [r7, #12]
 800987a:	f000 f834 	bl	80098e6 <USBD_GetLen>
 800987e:	4603      	mov	r3, r0
 8009880:	3301      	adds	r3, #1
 8009882:	b29b      	uxth	r3, r3
 8009884:	005b      	lsls	r3, r3, #1
 8009886:	b29a      	uxth	r2, r3
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800988c:	7dfb      	ldrb	r3, [r7, #23]
 800988e:	1c5a      	adds	r2, r3, #1
 8009890:	75fa      	strb	r2, [r7, #23]
 8009892:	461a      	mov	r2, r3
 8009894:	68bb      	ldr	r3, [r7, #8]
 8009896:	4413      	add	r3, r2
 8009898:	687a      	ldr	r2, [r7, #4]
 800989a:	7812      	ldrb	r2, [r2, #0]
 800989c:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800989e:	7dfb      	ldrb	r3, [r7, #23]
 80098a0:	1c5a      	adds	r2, r3, #1
 80098a2:	75fa      	strb	r2, [r7, #23]
 80098a4:	461a      	mov	r2, r3
 80098a6:	68bb      	ldr	r3, [r7, #8]
 80098a8:	4413      	add	r3, r2
 80098aa:	2203      	movs	r2, #3
 80098ac:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80098ae:	e012      	b.n	80098d6 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	1c5a      	adds	r2, r3, #1
 80098b4:	60fa      	str	r2, [r7, #12]
 80098b6:	7dfa      	ldrb	r2, [r7, #23]
 80098b8:	1c51      	adds	r1, r2, #1
 80098ba:	75f9      	strb	r1, [r7, #23]
 80098bc:	4611      	mov	r1, r2
 80098be:	68ba      	ldr	r2, [r7, #8]
 80098c0:	440a      	add	r2, r1
 80098c2:	781b      	ldrb	r3, [r3, #0]
 80098c4:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80098c6:	7dfb      	ldrb	r3, [r7, #23]
 80098c8:	1c5a      	adds	r2, r3, #1
 80098ca:	75fa      	strb	r2, [r7, #23]
 80098cc:	461a      	mov	r2, r3
 80098ce:	68bb      	ldr	r3, [r7, #8]
 80098d0:	4413      	add	r3, r2
 80098d2:	2200      	movs	r2, #0
 80098d4:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	781b      	ldrb	r3, [r3, #0]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d1e8      	bne.n	80098b0 <USBD_GetString+0x4e>
    }
  }
}
 80098de:	bf00      	nop
 80098e0:	3718      	adds	r7, #24
 80098e2:	46bd      	mov	sp, r7
 80098e4:	bd80      	pop	{r7, pc}

080098e6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80098e6:	b480      	push	{r7}
 80098e8:	b085      	sub	sp, #20
 80098ea:	af00      	add	r7, sp, #0
 80098ec:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80098ee:	2300      	movs	r3, #0
 80098f0:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80098f2:	e005      	b.n	8009900 <USBD_GetLen+0x1a>
  {
    len++;
 80098f4:	7bfb      	ldrb	r3, [r7, #15]
 80098f6:	3301      	adds	r3, #1
 80098f8:	73fb      	strb	r3, [r7, #15]
    buf++;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	3301      	adds	r3, #1
 80098fe:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	781b      	ldrb	r3, [r3, #0]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d1f5      	bne.n	80098f4 <USBD_GetLen+0xe>
  }

  return len;
 8009908:	7bfb      	ldrb	r3, [r7, #15]
}
 800990a:	4618      	mov	r0, r3
 800990c:	3714      	adds	r7, #20
 800990e:	46bd      	mov	sp, r7
 8009910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009914:	4770      	bx	lr

08009916 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009916:	b580      	push	{r7, lr}
 8009918:	b084      	sub	sp, #16
 800991a:	af00      	add	r7, sp, #0
 800991c:	60f8      	str	r0, [r7, #12]
 800991e:	60b9      	str	r1, [r7, #8]
 8009920:	4613      	mov	r3, r2
 8009922:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	2202      	movs	r2, #2
 8009928:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800992c:	88fa      	ldrh	r2, [r7, #6]
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009932:	88fa      	ldrh	r2, [r7, #6]
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009938:	88fb      	ldrh	r3, [r7, #6]
 800993a:	68ba      	ldr	r2, [r7, #8]
 800993c:	2100      	movs	r1, #0
 800993e:	68f8      	ldr	r0, [r7, #12]
 8009940:	f000 fc8e 	bl	800a260 <USBD_LL_Transmit>

  return USBD_OK;
 8009944:	2300      	movs	r3, #0
}
 8009946:	4618      	mov	r0, r3
 8009948:	3710      	adds	r7, #16
 800994a:	46bd      	mov	sp, r7
 800994c:	bd80      	pop	{r7, pc}

0800994e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800994e:	b580      	push	{r7, lr}
 8009950:	b084      	sub	sp, #16
 8009952:	af00      	add	r7, sp, #0
 8009954:	60f8      	str	r0, [r7, #12]
 8009956:	60b9      	str	r1, [r7, #8]
 8009958:	4613      	mov	r3, r2
 800995a:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800995c:	88fb      	ldrh	r3, [r7, #6]
 800995e:	68ba      	ldr	r2, [r7, #8]
 8009960:	2100      	movs	r1, #0
 8009962:	68f8      	ldr	r0, [r7, #12]
 8009964:	f000 fc7c 	bl	800a260 <USBD_LL_Transmit>

  return USBD_OK;
 8009968:	2300      	movs	r3, #0
}
 800996a:	4618      	mov	r0, r3
 800996c:	3710      	adds	r7, #16
 800996e:	46bd      	mov	sp, r7
 8009970:	bd80      	pop	{r7, pc}

08009972 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009972:	b580      	push	{r7, lr}
 8009974:	b084      	sub	sp, #16
 8009976:	af00      	add	r7, sp, #0
 8009978:	60f8      	str	r0, [r7, #12]
 800997a:	60b9      	str	r1, [r7, #8]
 800997c:	4613      	mov	r3, r2
 800997e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	2203      	movs	r2, #3
 8009984:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009988:	88fa      	ldrh	r2, [r7, #6]
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8009990:	88fa      	ldrh	r2, [r7, #6]
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009998:	88fb      	ldrh	r3, [r7, #6]
 800999a:	68ba      	ldr	r2, [r7, #8]
 800999c:	2100      	movs	r1, #0
 800999e:	68f8      	ldr	r0, [r7, #12]
 80099a0:	f000 fc81 	bl	800a2a6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80099a4:	2300      	movs	r3, #0
}
 80099a6:	4618      	mov	r0, r3
 80099a8:	3710      	adds	r7, #16
 80099aa:	46bd      	mov	sp, r7
 80099ac:	bd80      	pop	{r7, pc}

080099ae <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80099ae:	b580      	push	{r7, lr}
 80099b0:	b084      	sub	sp, #16
 80099b2:	af00      	add	r7, sp, #0
 80099b4:	60f8      	str	r0, [r7, #12]
 80099b6:	60b9      	str	r1, [r7, #8]
 80099b8:	4613      	mov	r3, r2
 80099ba:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80099bc:	88fb      	ldrh	r3, [r7, #6]
 80099be:	68ba      	ldr	r2, [r7, #8]
 80099c0:	2100      	movs	r1, #0
 80099c2:	68f8      	ldr	r0, [r7, #12]
 80099c4:	f000 fc6f 	bl	800a2a6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80099c8:	2300      	movs	r3, #0
}
 80099ca:	4618      	mov	r0, r3
 80099cc:	3710      	adds	r7, #16
 80099ce:	46bd      	mov	sp, r7
 80099d0:	bd80      	pop	{r7, pc}

080099d2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80099d2:	b580      	push	{r7, lr}
 80099d4:	b082      	sub	sp, #8
 80099d6:	af00      	add	r7, sp, #0
 80099d8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	2204      	movs	r2, #4
 80099de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80099e2:	2300      	movs	r3, #0
 80099e4:	2200      	movs	r2, #0
 80099e6:	2100      	movs	r1, #0
 80099e8:	6878      	ldr	r0, [r7, #4]
 80099ea:	f000 fc39 	bl	800a260 <USBD_LL_Transmit>

  return USBD_OK;
 80099ee:	2300      	movs	r3, #0
}
 80099f0:	4618      	mov	r0, r3
 80099f2:	3708      	adds	r7, #8
 80099f4:	46bd      	mov	sp, r7
 80099f6:	bd80      	pop	{r7, pc}

080099f8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b082      	sub	sp, #8
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2205      	movs	r2, #5
 8009a04:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009a08:	2300      	movs	r3, #0
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	2100      	movs	r1, #0
 8009a0e:	6878      	ldr	r0, [r7, #4]
 8009a10:	f000 fc49 	bl	800a2a6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009a14:	2300      	movs	r3, #0
}
 8009a16:	4618      	mov	r0, r3
 8009a18:	3708      	adds	r7, #8
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bd80      	pop	{r7, pc}
	...

08009a20 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009a24:	2200      	movs	r2, #0
 8009a26:	4912      	ldr	r1, [pc, #72]	; (8009a70 <MX_USB_DEVICE_Init+0x50>)
 8009a28:	4812      	ldr	r0, [pc, #72]	; (8009a74 <MX_USB_DEVICE_Init+0x54>)
 8009a2a:	f7fe ff57 	bl	80088dc <USBD_Init>
 8009a2e:	4603      	mov	r3, r0
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d001      	beq.n	8009a38 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009a34:	f7f7 fde0 	bl	80015f8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009a38:	490f      	ldr	r1, [pc, #60]	; (8009a78 <MX_USB_DEVICE_Init+0x58>)
 8009a3a:	480e      	ldr	r0, [pc, #56]	; (8009a74 <MX_USB_DEVICE_Init+0x54>)
 8009a3c:	f7fe ff79 	bl	8008932 <USBD_RegisterClass>
 8009a40:	4603      	mov	r3, r0
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d001      	beq.n	8009a4a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009a46:	f7f7 fdd7 	bl	80015f8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009a4a:	490c      	ldr	r1, [pc, #48]	; (8009a7c <MX_USB_DEVICE_Init+0x5c>)
 8009a4c:	4809      	ldr	r0, [pc, #36]	; (8009a74 <MX_USB_DEVICE_Init+0x54>)
 8009a4e:	f7fe fea7 	bl	80087a0 <USBD_CDC_RegisterInterface>
 8009a52:	4603      	mov	r3, r0
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d001      	beq.n	8009a5c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009a58:	f7f7 fdce 	bl	80015f8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009a5c:	4805      	ldr	r0, [pc, #20]	; (8009a74 <MX_USB_DEVICE_Init+0x54>)
 8009a5e:	f7fe ff82 	bl	8008966 <USBD_Start>
 8009a62:	4603      	mov	r3, r0
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d001      	beq.n	8009a6c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009a68:	f7f7 fdc6 	bl	80015f8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009a6c:	bf00      	nop
 8009a6e:	bd80      	pop	{r7, pc}
 8009a70:	2000012c 	.word	0x2000012c
 8009a74:	2000069c 	.word	0x2000069c
 8009a78:	20000018 	.word	0x20000018
 8009a7c:	2000011c 	.word	0x2000011c

08009a80 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009a84:	2200      	movs	r2, #0
 8009a86:	4905      	ldr	r1, [pc, #20]	; (8009a9c <CDC_Init_FS+0x1c>)
 8009a88:	4805      	ldr	r0, [pc, #20]	; (8009aa0 <CDC_Init_FS+0x20>)
 8009a8a:	f7fe fea0 	bl	80087ce <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009a8e:	4905      	ldr	r1, [pc, #20]	; (8009aa4 <CDC_Init_FS+0x24>)
 8009a90:	4803      	ldr	r0, [pc, #12]	; (8009aa0 <CDC_Init_FS+0x20>)
 8009a92:	f7fe feb6 	bl	8008802 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009a96:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009a98:	4618      	mov	r0, r3
 8009a9a:	bd80      	pop	{r7, pc}
 8009a9c:	20000d48 	.word	0x20000d48
 8009aa0:	2000069c 	.word	0x2000069c
 8009aa4:	20000960 	.word	0x20000960

08009aa8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009aa8:	b480      	push	{r7}
 8009aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009aac:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009aae:	4618      	mov	r0, r3
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab6:	4770      	bx	lr

08009ab8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009ab8:	b480      	push	{r7}
 8009aba:	b083      	sub	sp, #12
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	4603      	mov	r3, r0
 8009ac0:	6039      	str	r1, [r7, #0]
 8009ac2:	71fb      	strb	r3, [r7, #7]
 8009ac4:	4613      	mov	r3, r2
 8009ac6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009ac8:	79fb      	ldrb	r3, [r7, #7]
 8009aca:	2b23      	cmp	r3, #35	; 0x23
 8009acc:	d84a      	bhi.n	8009b64 <CDC_Control_FS+0xac>
 8009ace:	a201      	add	r2, pc, #4	; (adr r2, 8009ad4 <CDC_Control_FS+0x1c>)
 8009ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ad4:	08009b65 	.word	0x08009b65
 8009ad8:	08009b65 	.word	0x08009b65
 8009adc:	08009b65 	.word	0x08009b65
 8009ae0:	08009b65 	.word	0x08009b65
 8009ae4:	08009b65 	.word	0x08009b65
 8009ae8:	08009b65 	.word	0x08009b65
 8009aec:	08009b65 	.word	0x08009b65
 8009af0:	08009b65 	.word	0x08009b65
 8009af4:	08009b65 	.word	0x08009b65
 8009af8:	08009b65 	.word	0x08009b65
 8009afc:	08009b65 	.word	0x08009b65
 8009b00:	08009b65 	.word	0x08009b65
 8009b04:	08009b65 	.word	0x08009b65
 8009b08:	08009b65 	.word	0x08009b65
 8009b0c:	08009b65 	.word	0x08009b65
 8009b10:	08009b65 	.word	0x08009b65
 8009b14:	08009b65 	.word	0x08009b65
 8009b18:	08009b65 	.word	0x08009b65
 8009b1c:	08009b65 	.word	0x08009b65
 8009b20:	08009b65 	.word	0x08009b65
 8009b24:	08009b65 	.word	0x08009b65
 8009b28:	08009b65 	.word	0x08009b65
 8009b2c:	08009b65 	.word	0x08009b65
 8009b30:	08009b65 	.word	0x08009b65
 8009b34:	08009b65 	.word	0x08009b65
 8009b38:	08009b65 	.word	0x08009b65
 8009b3c:	08009b65 	.word	0x08009b65
 8009b40:	08009b65 	.word	0x08009b65
 8009b44:	08009b65 	.word	0x08009b65
 8009b48:	08009b65 	.word	0x08009b65
 8009b4c:	08009b65 	.word	0x08009b65
 8009b50:	08009b65 	.word	0x08009b65
 8009b54:	08009b65 	.word	0x08009b65
 8009b58:	08009b65 	.word	0x08009b65
 8009b5c:	08009b65 	.word	0x08009b65
 8009b60:	08009b65 	.word	0x08009b65
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009b64:	bf00      	nop
  }

  return (USBD_OK);
 8009b66:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009b68:	4618      	mov	r0, r3
 8009b6a:	370c      	adds	r7, #12
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b72:	4770      	bx	lr

08009b74 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b082      	sub	sp, #8
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
 8009b7c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009b7e:	6879      	ldr	r1, [r7, #4]
 8009b80:	4805      	ldr	r0, [pc, #20]	; (8009b98 <CDC_Receive_FS+0x24>)
 8009b82:	f7fe fe3e 	bl	8008802 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009b86:	4804      	ldr	r0, [pc, #16]	; (8009b98 <CDC_Receive_FS+0x24>)
 8009b88:	f7fe fe7e 	bl	8008888 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009b8c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009b8e:	4618      	mov	r0, r3
 8009b90:	3708      	adds	r7, #8
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bd80      	pop	{r7, pc}
 8009b96:	bf00      	nop
 8009b98:	2000069c 	.word	0x2000069c

08009b9c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b084      	sub	sp, #16
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
 8009ba4:	460b      	mov	r3, r1
 8009ba6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009ba8:	2300      	movs	r3, #0
 8009baa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009bac:	4b0d      	ldr	r3, [pc, #52]	; (8009be4 <CDC_Transmit_FS+0x48>)
 8009bae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009bb2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009bb4:	68bb      	ldr	r3, [r7, #8]
 8009bb6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d001      	beq.n	8009bc2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009bbe:	2301      	movs	r3, #1
 8009bc0:	e00b      	b.n	8009bda <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009bc2:	887b      	ldrh	r3, [r7, #2]
 8009bc4:	461a      	mov	r2, r3
 8009bc6:	6879      	ldr	r1, [r7, #4]
 8009bc8:	4806      	ldr	r0, [pc, #24]	; (8009be4 <CDC_Transmit_FS+0x48>)
 8009bca:	f7fe fe00 	bl	80087ce <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009bce:	4805      	ldr	r0, [pc, #20]	; (8009be4 <CDC_Transmit_FS+0x48>)
 8009bd0:	f7fe fe2b 	bl	800882a <USBD_CDC_TransmitPacket>
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bda:	4618      	mov	r0, r3
 8009bdc:	3710      	adds	r7, #16
 8009bde:	46bd      	mov	sp, r7
 8009be0:	bd80      	pop	{r7, pc}
 8009be2:	bf00      	nop
 8009be4:	2000069c 	.word	0x2000069c

08009be8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009be8:	b480      	push	{r7}
 8009bea:	b083      	sub	sp, #12
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	4603      	mov	r3, r0
 8009bf0:	6039      	str	r1, [r7, #0]
 8009bf2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	2212      	movs	r2, #18
 8009bf8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009bfa:	4b03      	ldr	r3, [pc, #12]	; (8009c08 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	370c      	adds	r7, #12
 8009c00:	46bd      	mov	sp, r7
 8009c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c06:	4770      	bx	lr
 8009c08:	20000148 	.word	0x20000148

08009c0c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c0c:	b480      	push	{r7}
 8009c0e:	b083      	sub	sp, #12
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	4603      	mov	r3, r0
 8009c14:	6039      	str	r1, [r7, #0]
 8009c16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	2204      	movs	r2, #4
 8009c1c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009c1e:	4b03      	ldr	r3, [pc, #12]	; (8009c2c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009c20:	4618      	mov	r0, r3
 8009c22:	370c      	adds	r7, #12
 8009c24:	46bd      	mov	sp, r7
 8009c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2a:	4770      	bx	lr
 8009c2c:	2000015c 	.word	0x2000015c

08009c30 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b082      	sub	sp, #8
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	4603      	mov	r3, r0
 8009c38:	6039      	str	r1, [r7, #0]
 8009c3a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009c3c:	79fb      	ldrb	r3, [r7, #7]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d105      	bne.n	8009c4e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009c42:	683a      	ldr	r2, [r7, #0]
 8009c44:	4907      	ldr	r1, [pc, #28]	; (8009c64 <USBD_FS_ProductStrDescriptor+0x34>)
 8009c46:	4808      	ldr	r0, [pc, #32]	; (8009c68 <USBD_FS_ProductStrDescriptor+0x38>)
 8009c48:	f7ff fe0b 	bl	8009862 <USBD_GetString>
 8009c4c:	e004      	b.n	8009c58 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009c4e:	683a      	ldr	r2, [r7, #0]
 8009c50:	4904      	ldr	r1, [pc, #16]	; (8009c64 <USBD_FS_ProductStrDescriptor+0x34>)
 8009c52:	4805      	ldr	r0, [pc, #20]	; (8009c68 <USBD_FS_ProductStrDescriptor+0x38>)
 8009c54:	f7ff fe05 	bl	8009862 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009c58:	4b02      	ldr	r3, [pc, #8]	; (8009c64 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	3708      	adds	r7, #8
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	bd80      	pop	{r7, pc}
 8009c62:	bf00      	nop
 8009c64:	20001130 	.word	0x20001130
 8009c68:	0800e1b0 	.word	0x0800e1b0

08009c6c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b082      	sub	sp, #8
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	4603      	mov	r3, r0
 8009c74:	6039      	str	r1, [r7, #0]
 8009c76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009c78:	683a      	ldr	r2, [r7, #0]
 8009c7a:	4904      	ldr	r1, [pc, #16]	; (8009c8c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009c7c:	4804      	ldr	r0, [pc, #16]	; (8009c90 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009c7e:	f7ff fdf0 	bl	8009862 <USBD_GetString>
  return USBD_StrDesc;
 8009c82:	4b02      	ldr	r3, [pc, #8]	; (8009c8c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009c84:	4618      	mov	r0, r3
 8009c86:	3708      	adds	r7, #8
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	bd80      	pop	{r7, pc}
 8009c8c:	20001130 	.word	0x20001130
 8009c90:	0800e1c0 	.word	0x0800e1c0

08009c94 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b082      	sub	sp, #8
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	6039      	str	r1, [r7, #0]
 8009c9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	221a      	movs	r2, #26
 8009ca4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009ca6:	f000 f843 	bl	8009d30 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009caa:	4b02      	ldr	r3, [pc, #8]	; (8009cb4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009cac:	4618      	mov	r0, r3
 8009cae:	3708      	adds	r7, #8
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	bd80      	pop	{r7, pc}
 8009cb4:	20000160 	.word	0x20000160

08009cb8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b082      	sub	sp, #8
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	6039      	str	r1, [r7, #0]
 8009cc2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009cc4:	79fb      	ldrb	r3, [r7, #7]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d105      	bne.n	8009cd6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009cca:	683a      	ldr	r2, [r7, #0]
 8009ccc:	4907      	ldr	r1, [pc, #28]	; (8009cec <USBD_FS_ConfigStrDescriptor+0x34>)
 8009cce:	4808      	ldr	r0, [pc, #32]	; (8009cf0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009cd0:	f7ff fdc7 	bl	8009862 <USBD_GetString>
 8009cd4:	e004      	b.n	8009ce0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009cd6:	683a      	ldr	r2, [r7, #0]
 8009cd8:	4904      	ldr	r1, [pc, #16]	; (8009cec <USBD_FS_ConfigStrDescriptor+0x34>)
 8009cda:	4805      	ldr	r0, [pc, #20]	; (8009cf0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009cdc:	f7ff fdc1 	bl	8009862 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009ce0:	4b02      	ldr	r3, [pc, #8]	; (8009cec <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	3708      	adds	r7, #8
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	bd80      	pop	{r7, pc}
 8009cea:	bf00      	nop
 8009cec:	20001130 	.word	0x20001130
 8009cf0:	0800e1cc 	.word	0x0800e1cc

08009cf4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b082      	sub	sp, #8
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	4603      	mov	r3, r0
 8009cfc:	6039      	str	r1, [r7, #0]
 8009cfe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009d00:	79fb      	ldrb	r3, [r7, #7]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d105      	bne.n	8009d12 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009d06:	683a      	ldr	r2, [r7, #0]
 8009d08:	4907      	ldr	r1, [pc, #28]	; (8009d28 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009d0a:	4808      	ldr	r0, [pc, #32]	; (8009d2c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009d0c:	f7ff fda9 	bl	8009862 <USBD_GetString>
 8009d10:	e004      	b.n	8009d1c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009d12:	683a      	ldr	r2, [r7, #0]
 8009d14:	4904      	ldr	r1, [pc, #16]	; (8009d28 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009d16:	4805      	ldr	r0, [pc, #20]	; (8009d2c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009d18:	f7ff fda3 	bl	8009862 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009d1c:	4b02      	ldr	r3, [pc, #8]	; (8009d28 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009d1e:	4618      	mov	r0, r3
 8009d20:	3708      	adds	r7, #8
 8009d22:	46bd      	mov	sp, r7
 8009d24:	bd80      	pop	{r7, pc}
 8009d26:	bf00      	nop
 8009d28:	20001130 	.word	0x20001130
 8009d2c:	0800e1d8 	.word	0x0800e1d8

08009d30 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b084      	sub	sp, #16
 8009d34:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009d36:	4b0f      	ldr	r3, [pc, #60]	; (8009d74 <Get_SerialNum+0x44>)
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009d3c:	4b0e      	ldr	r3, [pc, #56]	; (8009d78 <Get_SerialNum+0x48>)
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009d42:	4b0e      	ldr	r3, [pc, #56]	; (8009d7c <Get_SerialNum+0x4c>)
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009d48:	68fa      	ldr	r2, [r7, #12]
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	4413      	add	r3, r2
 8009d4e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d009      	beq.n	8009d6a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009d56:	2208      	movs	r2, #8
 8009d58:	4909      	ldr	r1, [pc, #36]	; (8009d80 <Get_SerialNum+0x50>)
 8009d5a:	68f8      	ldr	r0, [r7, #12]
 8009d5c:	f000 f814 	bl	8009d88 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009d60:	2204      	movs	r2, #4
 8009d62:	4908      	ldr	r1, [pc, #32]	; (8009d84 <Get_SerialNum+0x54>)
 8009d64:	68b8      	ldr	r0, [r7, #8]
 8009d66:	f000 f80f 	bl	8009d88 <IntToUnicode>
  }
}
 8009d6a:	bf00      	nop
 8009d6c:	3710      	adds	r7, #16
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	bd80      	pop	{r7, pc}
 8009d72:	bf00      	nop
 8009d74:	1ffff7ac 	.word	0x1ffff7ac
 8009d78:	1ffff7b0 	.word	0x1ffff7b0
 8009d7c:	1ffff7b4 	.word	0x1ffff7b4
 8009d80:	20000162 	.word	0x20000162
 8009d84:	20000172 	.word	0x20000172

08009d88 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009d88:	b480      	push	{r7}
 8009d8a:	b087      	sub	sp, #28
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	60f8      	str	r0, [r7, #12]
 8009d90:	60b9      	str	r1, [r7, #8]
 8009d92:	4613      	mov	r3, r2
 8009d94:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009d96:	2300      	movs	r3, #0
 8009d98:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	75fb      	strb	r3, [r7, #23]
 8009d9e:	e027      	b.n	8009df0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	0f1b      	lsrs	r3, r3, #28
 8009da4:	2b09      	cmp	r3, #9
 8009da6:	d80b      	bhi.n	8009dc0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	0f1b      	lsrs	r3, r3, #28
 8009dac:	b2da      	uxtb	r2, r3
 8009dae:	7dfb      	ldrb	r3, [r7, #23]
 8009db0:	005b      	lsls	r3, r3, #1
 8009db2:	4619      	mov	r1, r3
 8009db4:	68bb      	ldr	r3, [r7, #8]
 8009db6:	440b      	add	r3, r1
 8009db8:	3230      	adds	r2, #48	; 0x30
 8009dba:	b2d2      	uxtb	r2, r2
 8009dbc:	701a      	strb	r2, [r3, #0]
 8009dbe:	e00a      	b.n	8009dd6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	0f1b      	lsrs	r3, r3, #28
 8009dc4:	b2da      	uxtb	r2, r3
 8009dc6:	7dfb      	ldrb	r3, [r7, #23]
 8009dc8:	005b      	lsls	r3, r3, #1
 8009dca:	4619      	mov	r1, r3
 8009dcc:	68bb      	ldr	r3, [r7, #8]
 8009dce:	440b      	add	r3, r1
 8009dd0:	3237      	adds	r2, #55	; 0x37
 8009dd2:	b2d2      	uxtb	r2, r2
 8009dd4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	011b      	lsls	r3, r3, #4
 8009dda:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009ddc:	7dfb      	ldrb	r3, [r7, #23]
 8009dde:	005b      	lsls	r3, r3, #1
 8009de0:	3301      	adds	r3, #1
 8009de2:	68ba      	ldr	r2, [r7, #8]
 8009de4:	4413      	add	r3, r2
 8009de6:	2200      	movs	r2, #0
 8009de8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009dea:	7dfb      	ldrb	r3, [r7, #23]
 8009dec:	3301      	adds	r3, #1
 8009dee:	75fb      	strb	r3, [r7, #23]
 8009df0:	7dfa      	ldrb	r2, [r7, #23]
 8009df2:	79fb      	ldrb	r3, [r7, #7]
 8009df4:	429a      	cmp	r2, r3
 8009df6:	d3d3      	bcc.n	8009da0 <IntToUnicode+0x18>
  }
}
 8009df8:	bf00      	nop
 8009dfa:	bf00      	nop
 8009dfc:	371c      	adds	r7, #28
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e04:	4770      	bx	lr
	...

08009e08 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b08a      	sub	sp, #40	; 0x28
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009e10:	f107 0314 	add.w	r3, r7, #20
 8009e14:	2200      	movs	r2, #0
 8009e16:	601a      	str	r2, [r3, #0]
 8009e18:	605a      	str	r2, [r3, #4]
 8009e1a:	609a      	str	r2, [r3, #8]
 8009e1c:	60da      	str	r2, [r3, #12]
 8009e1e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	4a1c      	ldr	r2, [pc, #112]	; (8009e98 <HAL_PCD_MspInit+0x90>)
 8009e26:	4293      	cmp	r3, r2
 8009e28:	d131      	bne.n	8009e8e <HAL_PCD_MspInit+0x86>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009e2a:	4b1c      	ldr	r3, [pc, #112]	; (8009e9c <HAL_PCD_MspInit+0x94>)
 8009e2c:	695b      	ldr	r3, [r3, #20]
 8009e2e:	4a1b      	ldr	r2, [pc, #108]	; (8009e9c <HAL_PCD_MspInit+0x94>)
 8009e30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e34:	6153      	str	r3, [r2, #20]
 8009e36:	4b19      	ldr	r3, [pc, #100]	; (8009e9c <HAL_PCD_MspInit+0x94>)
 8009e38:	695b      	ldr	r3, [r3, #20]
 8009e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e3e:	613b      	str	r3, [r7, #16]
 8009e40:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8009e42:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009e46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009e48:	2302      	movs	r3, #2
 8009e4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009e50:	2303      	movs	r3, #3
 8009e52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8009e54:	230e      	movs	r3, #14
 8009e56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009e58:	f107 0314 	add.w	r3, r7, #20
 8009e5c:	4619      	mov	r1, r3
 8009e5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009e62:	f7f7 ff6b 	bl	8001d3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009e66:	4b0d      	ldr	r3, [pc, #52]	; (8009e9c <HAL_PCD_MspInit+0x94>)
 8009e68:	69db      	ldr	r3, [r3, #28]
 8009e6a:	4a0c      	ldr	r2, [pc, #48]	; (8009e9c <HAL_PCD_MspInit+0x94>)
 8009e6c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009e70:	61d3      	str	r3, [r2, #28]
 8009e72:	4b0a      	ldr	r3, [pc, #40]	; (8009e9c <HAL_PCD_MspInit+0x94>)
 8009e74:	69db      	ldr	r3, [r3, #28]
 8009e76:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009e7a:	60fb      	str	r3, [r7, #12]
 8009e7c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 8009e7e:	2200      	movs	r2, #0
 8009e80:	2100      	movs	r1, #0
 8009e82:	2014      	movs	r0, #20
 8009e84:	f7f7 ff23 	bl	8001cce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8009e88:	2014      	movs	r0, #20
 8009e8a:	f7f7 ff3c 	bl	8001d06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009e8e:	bf00      	nop
 8009e90:	3728      	adds	r7, #40	; 0x28
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bd80      	pop	{r7, pc}
 8009e96:	bf00      	nop
 8009e98:	40005c00 	.word	0x40005c00
 8009e9c:	40021000 	.word	0x40021000

08009ea0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b082      	sub	sp, #8
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009eb4:	4619      	mov	r1, r3
 8009eb6:	4610      	mov	r0, r2
 8009eb8:	f7fe fd9e 	bl	80089f8 <USBD_LL_SetupStage>
}
 8009ebc:	bf00      	nop
 8009ebe:	3708      	adds	r7, #8
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	bd80      	pop	{r7, pc}

08009ec4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b082      	sub	sp, #8
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
 8009ecc:	460b      	mov	r3, r1
 8009ece:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009ed6:	78fa      	ldrb	r2, [r7, #3]
 8009ed8:	6879      	ldr	r1, [r7, #4]
 8009eda:	4613      	mov	r3, r2
 8009edc:	009b      	lsls	r3, r3, #2
 8009ede:	4413      	add	r3, r2
 8009ee0:	00db      	lsls	r3, r3, #3
 8009ee2:	440b      	add	r3, r1
 8009ee4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009ee8:	681a      	ldr	r2, [r3, #0]
 8009eea:	78fb      	ldrb	r3, [r7, #3]
 8009eec:	4619      	mov	r1, r3
 8009eee:	f7fe fdd0 	bl	8008a92 <USBD_LL_DataOutStage>
}
 8009ef2:	bf00      	nop
 8009ef4:	3708      	adds	r7, #8
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	bd80      	pop	{r7, pc}

08009efa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009efa:	b580      	push	{r7, lr}
 8009efc:	b082      	sub	sp, #8
 8009efe:	af00      	add	r7, sp, #0
 8009f00:	6078      	str	r0, [r7, #4]
 8009f02:	460b      	mov	r3, r1
 8009f04:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009f0c:	78fa      	ldrb	r2, [r7, #3]
 8009f0e:	6879      	ldr	r1, [r7, #4]
 8009f10:	4613      	mov	r3, r2
 8009f12:	009b      	lsls	r3, r3, #2
 8009f14:	4413      	add	r3, r2
 8009f16:	00db      	lsls	r3, r3, #3
 8009f18:	440b      	add	r3, r1
 8009f1a:	333c      	adds	r3, #60	; 0x3c
 8009f1c:	681a      	ldr	r2, [r3, #0]
 8009f1e:	78fb      	ldrb	r3, [r7, #3]
 8009f20:	4619      	mov	r1, r3
 8009f22:	f7fe fe27 	bl	8008b74 <USBD_LL_DataInStage>
}
 8009f26:	bf00      	nop
 8009f28:	3708      	adds	r7, #8
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	bd80      	pop	{r7, pc}

08009f2e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f2e:	b580      	push	{r7, lr}
 8009f30:	b082      	sub	sp, #8
 8009f32:	af00      	add	r7, sp, #0
 8009f34:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	f7fe ff3a 	bl	8008db6 <USBD_LL_SOF>
}
 8009f42:	bf00      	nop
 8009f44:	3708      	adds	r7, #8
 8009f46:	46bd      	mov	sp, r7
 8009f48:	bd80      	pop	{r7, pc}

08009f4a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f4a:	b580      	push	{r7, lr}
 8009f4c:	b084      	sub	sp, #16
 8009f4e:	af00      	add	r7, sp, #0
 8009f50:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009f52:	2301      	movs	r3, #1
 8009f54:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	689b      	ldr	r3, [r3, #8]
 8009f5a:	2b02      	cmp	r3, #2
 8009f5c:	d001      	beq.n	8009f62 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009f5e:	f7f7 fb4b 	bl	80015f8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009f68:	7bfa      	ldrb	r2, [r7, #15]
 8009f6a:	4611      	mov	r1, r2
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	f7fe fee7 	bl	8008d40 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009f78:	4618      	mov	r0, r3
 8009f7a:	f7fe fea0 	bl	8008cbe <USBD_LL_Reset>
}
 8009f7e:	bf00      	nop
 8009f80:	3710      	adds	r7, #16
 8009f82:	46bd      	mov	sp, r7
 8009f84:	bd80      	pop	{r7, pc}
	...

08009f88 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b082      	sub	sp, #8
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009f96:	4618      	mov	r0, r3
 8009f98:	f7fe fee2 	bl	8008d60 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	699b      	ldr	r3, [r3, #24]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d005      	beq.n	8009fb0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009fa4:	4b04      	ldr	r3, [pc, #16]	; (8009fb8 <HAL_PCD_SuspendCallback+0x30>)
 8009fa6:	691b      	ldr	r3, [r3, #16]
 8009fa8:	4a03      	ldr	r2, [pc, #12]	; (8009fb8 <HAL_PCD_SuspendCallback+0x30>)
 8009faa:	f043 0306 	orr.w	r3, r3, #6
 8009fae:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009fb0:	bf00      	nop
 8009fb2:	3708      	adds	r7, #8
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	bd80      	pop	{r7, pc}
 8009fb8:	e000ed00 	.word	0xe000ed00

08009fbc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b082      	sub	sp, #8
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009fca:	4618      	mov	r0, r3
 8009fcc:	f7fe fedd 	bl	8008d8a <USBD_LL_Resume>
}
 8009fd0:	bf00      	nop
 8009fd2:	3708      	adds	r7, #8
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	bd80      	pop	{r7, pc}

08009fd8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b082      	sub	sp, #8
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009fe0:	4a28      	ldr	r2, [pc, #160]	; (800a084 <USBD_LL_Init+0xac>)
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	4a26      	ldr	r2, [pc, #152]	; (800a084 <USBD_LL_Init+0xac>)
 8009fec:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009ff0:	4b24      	ldr	r3, [pc, #144]	; (800a084 <USBD_LL_Init+0xac>)
 8009ff2:	4a25      	ldr	r2, [pc, #148]	; (800a088 <USBD_LL_Init+0xb0>)
 8009ff4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009ff6:	4b23      	ldr	r3, [pc, #140]	; (800a084 <USBD_LL_Init+0xac>)
 8009ff8:	2208      	movs	r2, #8
 8009ffa:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009ffc:	4b21      	ldr	r3, [pc, #132]	; (800a084 <USBD_LL_Init+0xac>)
 8009ffe:	2202      	movs	r2, #2
 800a000:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a002:	4b20      	ldr	r3, [pc, #128]	; (800a084 <USBD_LL_Init+0xac>)
 800a004:	2202      	movs	r2, #2
 800a006:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a008:	4b1e      	ldr	r3, [pc, #120]	; (800a084 <USBD_LL_Init+0xac>)
 800a00a:	2200      	movs	r2, #0
 800a00c:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a00e:	4b1d      	ldr	r3, [pc, #116]	; (800a084 <USBD_LL_Init+0xac>)
 800a010:	2200      	movs	r2, #0
 800a012:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a014:	481b      	ldr	r0, [pc, #108]	; (800a084 <USBD_LL_Init+0xac>)
 800a016:	f7f8 fdbc 	bl	8002b92 <HAL_PCD_Init>
 800a01a:	4603      	mov	r3, r0
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d001      	beq.n	800a024 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800a020:	f7f7 faea 	bl	80015f8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a02a:	2318      	movs	r3, #24
 800a02c:	2200      	movs	r2, #0
 800a02e:	2100      	movs	r1, #0
 800a030:	f7fa fa57 	bl	80044e2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a03a:	2358      	movs	r3, #88	; 0x58
 800a03c:	2200      	movs	r2, #0
 800a03e:	2180      	movs	r1, #128	; 0x80
 800a040:	f7fa fa4f 	bl	80044e2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a04a:	23c0      	movs	r3, #192	; 0xc0
 800a04c:	2200      	movs	r2, #0
 800a04e:	2181      	movs	r1, #129	; 0x81
 800a050:	f7fa fa47 	bl	80044e2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a05a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800a05e:	2200      	movs	r2, #0
 800a060:	2101      	movs	r1, #1
 800a062:	f7fa fa3e 	bl	80044e2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a06c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a070:	2200      	movs	r2, #0
 800a072:	2182      	movs	r1, #130	; 0x82
 800a074:	f7fa fa35 	bl	80044e2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a078:	2300      	movs	r3, #0
}
 800a07a:	4618      	mov	r0, r3
 800a07c:	3708      	adds	r7, #8
 800a07e:	46bd      	mov	sp, r7
 800a080:	bd80      	pop	{r7, pc}
 800a082:	bf00      	nop
 800a084:	20001330 	.word	0x20001330
 800a088:	40005c00 	.word	0x40005c00

0800a08c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b084      	sub	sp, #16
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a094:	2300      	movs	r3, #0
 800a096:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a098:	2300      	movs	r3, #0
 800a09a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	f7f8 fe53 	bl	8002d4e <HAL_PCD_Start>
 800a0a8:	4603      	mov	r3, r0
 800a0aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a0ac:	7bfb      	ldrb	r3, [r7, #15]
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	f000 f954 	bl	800a35c <USBD_Get_USB_Status>
 800a0b4:	4603      	mov	r3, r0
 800a0b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a0b8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	3710      	adds	r7, #16
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	bd80      	pop	{r7, pc}

0800a0c2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a0c2:	b580      	push	{r7, lr}
 800a0c4:	b084      	sub	sp, #16
 800a0c6:	af00      	add	r7, sp, #0
 800a0c8:	6078      	str	r0, [r7, #4]
 800a0ca:	4608      	mov	r0, r1
 800a0cc:	4611      	mov	r1, r2
 800a0ce:	461a      	mov	r2, r3
 800a0d0:	4603      	mov	r3, r0
 800a0d2:	70fb      	strb	r3, [r7, #3]
 800a0d4:	460b      	mov	r3, r1
 800a0d6:	70bb      	strb	r3, [r7, #2]
 800a0d8:	4613      	mov	r3, r2
 800a0da:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0dc:	2300      	movs	r3, #0
 800a0de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a0ea:	78bb      	ldrb	r3, [r7, #2]
 800a0ec:	883a      	ldrh	r2, [r7, #0]
 800a0ee:	78f9      	ldrb	r1, [r7, #3]
 800a0f0:	f7f8 ff6f 	bl	8002fd2 <HAL_PCD_EP_Open>
 800a0f4:	4603      	mov	r3, r0
 800a0f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a0f8:	7bfb      	ldrb	r3, [r7, #15]
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	f000 f92e 	bl	800a35c <USBD_Get_USB_Status>
 800a100:	4603      	mov	r3, r0
 800a102:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a104:	7bbb      	ldrb	r3, [r7, #14]
}
 800a106:	4618      	mov	r0, r3
 800a108:	3710      	adds	r7, #16
 800a10a:	46bd      	mov	sp, r7
 800a10c:	bd80      	pop	{r7, pc}

0800a10e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a10e:	b580      	push	{r7, lr}
 800a110:	b084      	sub	sp, #16
 800a112:	af00      	add	r7, sp, #0
 800a114:	6078      	str	r0, [r7, #4]
 800a116:	460b      	mov	r3, r1
 800a118:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a11a:	2300      	movs	r3, #0
 800a11c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a11e:	2300      	movs	r3, #0
 800a120:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a128:	78fa      	ldrb	r2, [r7, #3]
 800a12a:	4611      	mov	r1, r2
 800a12c:	4618      	mov	r0, r3
 800a12e:	f7f8 ffb6 	bl	800309e <HAL_PCD_EP_Close>
 800a132:	4603      	mov	r3, r0
 800a134:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a136:	7bfb      	ldrb	r3, [r7, #15]
 800a138:	4618      	mov	r0, r3
 800a13a:	f000 f90f 	bl	800a35c <USBD_Get_USB_Status>
 800a13e:	4603      	mov	r3, r0
 800a140:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a142:	7bbb      	ldrb	r3, [r7, #14]
}
 800a144:	4618      	mov	r0, r3
 800a146:	3710      	adds	r7, #16
 800a148:	46bd      	mov	sp, r7
 800a14a:	bd80      	pop	{r7, pc}

0800a14c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b084      	sub	sp, #16
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
 800a154:	460b      	mov	r3, r1
 800a156:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a158:	2300      	movs	r3, #0
 800a15a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a15c:	2300      	movs	r3, #0
 800a15e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a166:	78fa      	ldrb	r2, [r7, #3]
 800a168:	4611      	mov	r1, r2
 800a16a:	4618      	mov	r0, r3
 800a16c:	f7f9 f877 	bl	800325e <HAL_PCD_EP_SetStall>
 800a170:	4603      	mov	r3, r0
 800a172:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a174:	7bfb      	ldrb	r3, [r7, #15]
 800a176:	4618      	mov	r0, r3
 800a178:	f000 f8f0 	bl	800a35c <USBD_Get_USB_Status>
 800a17c:	4603      	mov	r3, r0
 800a17e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a180:	7bbb      	ldrb	r3, [r7, #14]
}
 800a182:	4618      	mov	r0, r3
 800a184:	3710      	adds	r7, #16
 800a186:	46bd      	mov	sp, r7
 800a188:	bd80      	pop	{r7, pc}

0800a18a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a18a:	b580      	push	{r7, lr}
 800a18c:	b084      	sub	sp, #16
 800a18e:	af00      	add	r7, sp, #0
 800a190:	6078      	str	r0, [r7, #4]
 800a192:	460b      	mov	r3, r1
 800a194:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a196:	2300      	movs	r3, #0
 800a198:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a19a:	2300      	movs	r3, #0
 800a19c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a1a4:	78fa      	ldrb	r2, [r7, #3]
 800a1a6:	4611      	mov	r1, r2
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	f7f9 f8aa 	bl	8003302 <HAL_PCD_EP_ClrStall>
 800a1ae:	4603      	mov	r3, r0
 800a1b0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a1b2:	7bfb      	ldrb	r3, [r7, #15]
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	f000 f8d1 	bl	800a35c <USBD_Get_USB_Status>
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a1be:	7bbb      	ldrb	r3, [r7, #14]
}
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	3710      	adds	r7, #16
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	bd80      	pop	{r7, pc}

0800a1c8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a1c8:	b480      	push	{r7}
 800a1ca:	b085      	sub	sp, #20
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
 800a1d0:	460b      	mov	r3, r1
 800a1d2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a1da:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a1dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	da0c      	bge.n	800a1fe <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a1e4:	78fb      	ldrb	r3, [r7, #3]
 800a1e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a1ea:	68f9      	ldr	r1, [r7, #12]
 800a1ec:	1c5a      	adds	r2, r3, #1
 800a1ee:	4613      	mov	r3, r2
 800a1f0:	009b      	lsls	r3, r3, #2
 800a1f2:	4413      	add	r3, r2
 800a1f4:	00db      	lsls	r3, r3, #3
 800a1f6:	440b      	add	r3, r1
 800a1f8:	3302      	adds	r3, #2
 800a1fa:	781b      	ldrb	r3, [r3, #0]
 800a1fc:	e00b      	b.n	800a216 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a1fe:	78fb      	ldrb	r3, [r7, #3]
 800a200:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a204:	68f9      	ldr	r1, [r7, #12]
 800a206:	4613      	mov	r3, r2
 800a208:	009b      	lsls	r3, r3, #2
 800a20a:	4413      	add	r3, r2
 800a20c:	00db      	lsls	r3, r3, #3
 800a20e:	440b      	add	r3, r1
 800a210:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800a214:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a216:	4618      	mov	r0, r3
 800a218:	3714      	adds	r7, #20
 800a21a:	46bd      	mov	sp, r7
 800a21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a220:	4770      	bx	lr

0800a222 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a222:	b580      	push	{r7, lr}
 800a224:	b084      	sub	sp, #16
 800a226:	af00      	add	r7, sp, #0
 800a228:	6078      	str	r0, [r7, #4]
 800a22a:	460b      	mov	r3, r1
 800a22c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a22e:	2300      	movs	r3, #0
 800a230:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a232:	2300      	movs	r3, #0
 800a234:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a23c:	78fa      	ldrb	r2, [r7, #3]
 800a23e:	4611      	mov	r1, r2
 800a240:	4618      	mov	r0, r3
 800a242:	f7f8 fea1 	bl	8002f88 <HAL_PCD_SetAddress>
 800a246:	4603      	mov	r3, r0
 800a248:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a24a:	7bfb      	ldrb	r3, [r7, #15]
 800a24c:	4618      	mov	r0, r3
 800a24e:	f000 f885 	bl	800a35c <USBD_Get_USB_Status>
 800a252:	4603      	mov	r3, r0
 800a254:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a256:	7bbb      	ldrb	r3, [r7, #14]
}
 800a258:	4618      	mov	r0, r3
 800a25a:	3710      	adds	r7, #16
 800a25c:	46bd      	mov	sp, r7
 800a25e:	bd80      	pop	{r7, pc}

0800a260 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b086      	sub	sp, #24
 800a264:	af00      	add	r7, sp, #0
 800a266:	60f8      	str	r0, [r7, #12]
 800a268:	607a      	str	r2, [r7, #4]
 800a26a:	461a      	mov	r2, r3
 800a26c:	460b      	mov	r3, r1
 800a26e:	72fb      	strb	r3, [r7, #11]
 800a270:	4613      	mov	r3, r2
 800a272:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a274:	2300      	movs	r3, #0
 800a276:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a278:	2300      	movs	r3, #0
 800a27a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a282:	893b      	ldrh	r3, [r7, #8]
 800a284:	7af9      	ldrb	r1, [r7, #11]
 800a286:	687a      	ldr	r2, [r7, #4]
 800a288:	f7f8 ffa6 	bl	80031d8 <HAL_PCD_EP_Transmit>
 800a28c:	4603      	mov	r3, r0
 800a28e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a290:	7dfb      	ldrb	r3, [r7, #23]
 800a292:	4618      	mov	r0, r3
 800a294:	f000 f862 	bl	800a35c <USBD_Get_USB_Status>
 800a298:	4603      	mov	r3, r0
 800a29a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a29c:	7dbb      	ldrb	r3, [r7, #22]
}
 800a29e:	4618      	mov	r0, r3
 800a2a0:	3718      	adds	r7, #24
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	bd80      	pop	{r7, pc}

0800a2a6 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a2a6:	b580      	push	{r7, lr}
 800a2a8:	b086      	sub	sp, #24
 800a2aa:	af00      	add	r7, sp, #0
 800a2ac:	60f8      	str	r0, [r7, #12]
 800a2ae:	607a      	str	r2, [r7, #4]
 800a2b0:	461a      	mov	r2, r3
 800a2b2:	460b      	mov	r3, r1
 800a2b4:	72fb      	strb	r3, [r7, #11]
 800a2b6:	4613      	mov	r3, r2
 800a2b8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2be:	2300      	movs	r3, #0
 800a2c0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a2c8:	893b      	ldrh	r3, [r7, #8]
 800a2ca:	7af9      	ldrb	r1, [r7, #11]
 800a2cc:	687a      	ldr	r2, [r7, #4]
 800a2ce:	f7f8 ff2e 	bl	800312e <HAL_PCD_EP_Receive>
 800a2d2:	4603      	mov	r3, r0
 800a2d4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2d6:	7dfb      	ldrb	r3, [r7, #23]
 800a2d8:	4618      	mov	r0, r3
 800a2da:	f000 f83f 	bl	800a35c <USBD_Get_USB_Status>
 800a2de:	4603      	mov	r3, r0
 800a2e0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a2e2:	7dbb      	ldrb	r3, [r7, #22]
}
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	3718      	adds	r7, #24
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	bd80      	pop	{r7, pc}

0800a2ec <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b082      	sub	sp, #8
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
 800a2f4:	460b      	mov	r3, r1
 800a2f6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a2fe:	78fa      	ldrb	r2, [r7, #3]
 800a300:	4611      	mov	r1, r2
 800a302:	4618      	mov	r0, r3
 800a304:	f7f8 ff50 	bl	80031a8 <HAL_PCD_EP_GetRxCount>
 800a308:	4603      	mov	r3, r0
}
 800a30a:	4618      	mov	r0, r3
 800a30c:	3708      	adds	r7, #8
 800a30e:	46bd      	mov	sp, r7
 800a310:	bd80      	pop	{r7, pc}
	...

0800a314 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a314:	b480      	push	{r7}
 800a316:	b083      	sub	sp, #12
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a31c:	4b03      	ldr	r3, [pc, #12]	; (800a32c <USBD_static_malloc+0x18>)
}
 800a31e:	4618      	mov	r0, r3
 800a320:	370c      	adds	r7, #12
 800a322:	46bd      	mov	sp, r7
 800a324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a328:	4770      	bx	lr
 800a32a:	bf00      	nop
 800a32c:	20000374 	.word	0x20000374

0800a330 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a330:	b480      	push	{r7}
 800a332:	b083      	sub	sp, #12
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]

}
 800a338:	bf00      	nop
 800a33a:	370c      	adds	r7, #12
 800a33c:	46bd      	mov	sp, r7
 800a33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a342:	4770      	bx	lr

0800a344 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a344:	b480      	push	{r7}
 800a346:	b083      	sub	sp, #12
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
 800a34c:	460b      	mov	r3, r1
 800a34e:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800a350:	bf00      	nop
 800a352:	370c      	adds	r7, #12
 800a354:	46bd      	mov	sp, r7
 800a356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35a:	4770      	bx	lr

0800a35c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a35c:	b480      	push	{r7}
 800a35e:	b085      	sub	sp, #20
 800a360:	af00      	add	r7, sp, #0
 800a362:	4603      	mov	r3, r0
 800a364:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a366:	2300      	movs	r3, #0
 800a368:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a36a:	79fb      	ldrb	r3, [r7, #7]
 800a36c:	2b03      	cmp	r3, #3
 800a36e:	d817      	bhi.n	800a3a0 <USBD_Get_USB_Status+0x44>
 800a370:	a201      	add	r2, pc, #4	; (adr r2, 800a378 <USBD_Get_USB_Status+0x1c>)
 800a372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a376:	bf00      	nop
 800a378:	0800a389 	.word	0x0800a389
 800a37c:	0800a38f 	.word	0x0800a38f
 800a380:	0800a395 	.word	0x0800a395
 800a384:	0800a39b 	.word	0x0800a39b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a388:	2300      	movs	r3, #0
 800a38a:	73fb      	strb	r3, [r7, #15]
    break;
 800a38c:	e00b      	b.n	800a3a6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a38e:	2302      	movs	r3, #2
 800a390:	73fb      	strb	r3, [r7, #15]
    break;
 800a392:	e008      	b.n	800a3a6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a394:	2301      	movs	r3, #1
 800a396:	73fb      	strb	r3, [r7, #15]
    break;
 800a398:	e005      	b.n	800a3a6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a39a:	2302      	movs	r3, #2
 800a39c:	73fb      	strb	r3, [r7, #15]
    break;
 800a39e:	e002      	b.n	800a3a6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a3a0:	2302      	movs	r3, #2
 800a3a2:	73fb      	strb	r3, [r7, #15]
    break;
 800a3a4:	bf00      	nop
  }
  return usb_status;
 800a3a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	3714      	adds	r7, #20
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b2:	4770      	bx	lr

0800a3b4 <__errno>:
 800a3b4:	4b01      	ldr	r3, [pc, #4]	; (800a3bc <__errno+0x8>)
 800a3b6:	6818      	ldr	r0, [r3, #0]
 800a3b8:	4770      	bx	lr
 800a3ba:	bf00      	nop
 800a3bc:	2000017c 	.word	0x2000017c

0800a3c0 <__libc_init_array>:
 800a3c0:	b570      	push	{r4, r5, r6, lr}
 800a3c2:	4d0d      	ldr	r5, [pc, #52]	; (800a3f8 <__libc_init_array+0x38>)
 800a3c4:	4c0d      	ldr	r4, [pc, #52]	; (800a3fc <__libc_init_array+0x3c>)
 800a3c6:	1b64      	subs	r4, r4, r5
 800a3c8:	10a4      	asrs	r4, r4, #2
 800a3ca:	2600      	movs	r6, #0
 800a3cc:	42a6      	cmp	r6, r4
 800a3ce:	d109      	bne.n	800a3e4 <__libc_init_array+0x24>
 800a3d0:	4d0b      	ldr	r5, [pc, #44]	; (800a400 <__libc_init_array+0x40>)
 800a3d2:	4c0c      	ldr	r4, [pc, #48]	; (800a404 <__libc_init_array+0x44>)
 800a3d4:	f003 fe9e 	bl	800e114 <_init>
 800a3d8:	1b64      	subs	r4, r4, r5
 800a3da:	10a4      	asrs	r4, r4, #2
 800a3dc:	2600      	movs	r6, #0
 800a3de:	42a6      	cmp	r6, r4
 800a3e0:	d105      	bne.n	800a3ee <__libc_init_array+0x2e>
 800a3e2:	bd70      	pop	{r4, r5, r6, pc}
 800a3e4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a3e8:	4798      	blx	r3
 800a3ea:	3601      	adds	r6, #1
 800a3ec:	e7ee      	b.n	800a3cc <__libc_init_array+0xc>
 800a3ee:	f855 3b04 	ldr.w	r3, [r5], #4
 800a3f2:	4798      	blx	r3
 800a3f4:	3601      	adds	r6, #1
 800a3f6:	e7f2      	b.n	800a3de <__libc_init_array+0x1e>
 800a3f8:	0800e640 	.word	0x0800e640
 800a3fc:	0800e640 	.word	0x0800e640
 800a400:	0800e640 	.word	0x0800e640
 800a404:	0800e644 	.word	0x0800e644

0800a408 <memset>:
 800a408:	4402      	add	r2, r0
 800a40a:	4603      	mov	r3, r0
 800a40c:	4293      	cmp	r3, r2
 800a40e:	d100      	bne.n	800a412 <memset+0xa>
 800a410:	4770      	bx	lr
 800a412:	f803 1b01 	strb.w	r1, [r3], #1
 800a416:	e7f9      	b.n	800a40c <memset+0x4>

0800a418 <__cvt>:
 800a418:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a41c:	ec55 4b10 	vmov	r4, r5, d0
 800a420:	2d00      	cmp	r5, #0
 800a422:	460e      	mov	r6, r1
 800a424:	4619      	mov	r1, r3
 800a426:	462b      	mov	r3, r5
 800a428:	bfbb      	ittet	lt
 800a42a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a42e:	461d      	movlt	r5, r3
 800a430:	2300      	movge	r3, #0
 800a432:	232d      	movlt	r3, #45	; 0x2d
 800a434:	700b      	strb	r3, [r1, #0]
 800a436:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a438:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a43c:	4691      	mov	r9, r2
 800a43e:	f023 0820 	bic.w	r8, r3, #32
 800a442:	bfbc      	itt	lt
 800a444:	4622      	movlt	r2, r4
 800a446:	4614      	movlt	r4, r2
 800a448:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a44c:	d005      	beq.n	800a45a <__cvt+0x42>
 800a44e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a452:	d100      	bne.n	800a456 <__cvt+0x3e>
 800a454:	3601      	adds	r6, #1
 800a456:	2102      	movs	r1, #2
 800a458:	e000      	b.n	800a45c <__cvt+0x44>
 800a45a:	2103      	movs	r1, #3
 800a45c:	ab03      	add	r3, sp, #12
 800a45e:	9301      	str	r3, [sp, #4]
 800a460:	ab02      	add	r3, sp, #8
 800a462:	9300      	str	r3, [sp, #0]
 800a464:	ec45 4b10 	vmov	d0, r4, r5
 800a468:	4653      	mov	r3, sl
 800a46a:	4632      	mov	r2, r6
 800a46c:	f000 fcec 	bl	800ae48 <_dtoa_r>
 800a470:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a474:	4607      	mov	r7, r0
 800a476:	d102      	bne.n	800a47e <__cvt+0x66>
 800a478:	f019 0f01 	tst.w	r9, #1
 800a47c:	d022      	beq.n	800a4c4 <__cvt+0xac>
 800a47e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a482:	eb07 0906 	add.w	r9, r7, r6
 800a486:	d110      	bne.n	800a4aa <__cvt+0x92>
 800a488:	783b      	ldrb	r3, [r7, #0]
 800a48a:	2b30      	cmp	r3, #48	; 0x30
 800a48c:	d10a      	bne.n	800a4a4 <__cvt+0x8c>
 800a48e:	2200      	movs	r2, #0
 800a490:	2300      	movs	r3, #0
 800a492:	4620      	mov	r0, r4
 800a494:	4629      	mov	r1, r5
 800a496:	f7f6 fb17 	bl	8000ac8 <__aeabi_dcmpeq>
 800a49a:	b918      	cbnz	r0, 800a4a4 <__cvt+0x8c>
 800a49c:	f1c6 0601 	rsb	r6, r6, #1
 800a4a0:	f8ca 6000 	str.w	r6, [sl]
 800a4a4:	f8da 3000 	ldr.w	r3, [sl]
 800a4a8:	4499      	add	r9, r3
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	4620      	mov	r0, r4
 800a4b0:	4629      	mov	r1, r5
 800a4b2:	f7f6 fb09 	bl	8000ac8 <__aeabi_dcmpeq>
 800a4b6:	b108      	cbz	r0, 800a4bc <__cvt+0xa4>
 800a4b8:	f8cd 900c 	str.w	r9, [sp, #12]
 800a4bc:	2230      	movs	r2, #48	; 0x30
 800a4be:	9b03      	ldr	r3, [sp, #12]
 800a4c0:	454b      	cmp	r3, r9
 800a4c2:	d307      	bcc.n	800a4d4 <__cvt+0xbc>
 800a4c4:	9b03      	ldr	r3, [sp, #12]
 800a4c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a4c8:	1bdb      	subs	r3, r3, r7
 800a4ca:	4638      	mov	r0, r7
 800a4cc:	6013      	str	r3, [r2, #0]
 800a4ce:	b004      	add	sp, #16
 800a4d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4d4:	1c59      	adds	r1, r3, #1
 800a4d6:	9103      	str	r1, [sp, #12]
 800a4d8:	701a      	strb	r2, [r3, #0]
 800a4da:	e7f0      	b.n	800a4be <__cvt+0xa6>

0800a4dc <__exponent>:
 800a4dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a4de:	4603      	mov	r3, r0
 800a4e0:	2900      	cmp	r1, #0
 800a4e2:	bfb8      	it	lt
 800a4e4:	4249      	neglt	r1, r1
 800a4e6:	f803 2b02 	strb.w	r2, [r3], #2
 800a4ea:	bfb4      	ite	lt
 800a4ec:	222d      	movlt	r2, #45	; 0x2d
 800a4ee:	222b      	movge	r2, #43	; 0x2b
 800a4f0:	2909      	cmp	r1, #9
 800a4f2:	7042      	strb	r2, [r0, #1]
 800a4f4:	dd2a      	ble.n	800a54c <__exponent+0x70>
 800a4f6:	f10d 0407 	add.w	r4, sp, #7
 800a4fa:	46a4      	mov	ip, r4
 800a4fc:	270a      	movs	r7, #10
 800a4fe:	46a6      	mov	lr, r4
 800a500:	460a      	mov	r2, r1
 800a502:	fb91 f6f7 	sdiv	r6, r1, r7
 800a506:	fb07 1516 	mls	r5, r7, r6, r1
 800a50a:	3530      	adds	r5, #48	; 0x30
 800a50c:	2a63      	cmp	r2, #99	; 0x63
 800a50e:	f104 34ff 	add.w	r4, r4, #4294967295
 800a512:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a516:	4631      	mov	r1, r6
 800a518:	dcf1      	bgt.n	800a4fe <__exponent+0x22>
 800a51a:	3130      	adds	r1, #48	; 0x30
 800a51c:	f1ae 0502 	sub.w	r5, lr, #2
 800a520:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a524:	1c44      	adds	r4, r0, #1
 800a526:	4629      	mov	r1, r5
 800a528:	4561      	cmp	r1, ip
 800a52a:	d30a      	bcc.n	800a542 <__exponent+0x66>
 800a52c:	f10d 0209 	add.w	r2, sp, #9
 800a530:	eba2 020e 	sub.w	r2, r2, lr
 800a534:	4565      	cmp	r5, ip
 800a536:	bf88      	it	hi
 800a538:	2200      	movhi	r2, #0
 800a53a:	4413      	add	r3, r2
 800a53c:	1a18      	subs	r0, r3, r0
 800a53e:	b003      	add	sp, #12
 800a540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a542:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a546:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a54a:	e7ed      	b.n	800a528 <__exponent+0x4c>
 800a54c:	2330      	movs	r3, #48	; 0x30
 800a54e:	3130      	adds	r1, #48	; 0x30
 800a550:	7083      	strb	r3, [r0, #2]
 800a552:	70c1      	strb	r1, [r0, #3]
 800a554:	1d03      	adds	r3, r0, #4
 800a556:	e7f1      	b.n	800a53c <__exponent+0x60>

0800a558 <_printf_float>:
 800a558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a55c:	ed2d 8b02 	vpush	{d8}
 800a560:	b08d      	sub	sp, #52	; 0x34
 800a562:	460c      	mov	r4, r1
 800a564:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a568:	4616      	mov	r6, r2
 800a56a:	461f      	mov	r7, r3
 800a56c:	4605      	mov	r5, r0
 800a56e:	f001 fa57 	bl	800ba20 <_localeconv_r>
 800a572:	f8d0 a000 	ldr.w	sl, [r0]
 800a576:	4650      	mov	r0, sl
 800a578:	f7f5 fe2a 	bl	80001d0 <strlen>
 800a57c:	2300      	movs	r3, #0
 800a57e:	930a      	str	r3, [sp, #40]	; 0x28
 800a580:	6823      	ldr	r3, [r4, #0]
 800a582:	9305      	str	r3, [sp, #20]
 800a584:	f8d8 3000 	ldr.w	r3, [r8]
 800a588:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a58c:	3307      	adds	r3, #7
 800a58e:	f023 0307 	bic.w	r3, r3, #7
 800a592:	f103 0208 	add.w	r2, r3, #8
 800a596:	f8c8 2000 	str.w	r2, [r8]
 800a59a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a59e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a5a2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a5a6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a5aa:	9307      	str	r3, [sp, #28]
 800a5ac:	f8cd 8018 	str.w	r8, [sp, #24]
 800a5b0:	ee08 0a10 	vmov	s16, r0
 800a5b4:	4b9f      	ldr	r3, [pc, #636]	; (800a834 <_printf_float+0x2dc>)
 800a5b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a5ba:	f04f 32ff 	mov.w	r2, #4294967295
 800a5be:	f7f6 fab5 	bl	8000b2c <__aeabi_dcmpun>
 800a5c2:	bb88      	cbnz	r0, 800a628 <_printf_float+0xd0>
 800a5c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a5c8:	4b9a      	ldr	r3, [pc, #616]	; (800a834 <_printf_float+0x2dc>)
 800a5ca:	f04f 32ff 	mov.w	r2, #4294967295
 800a5ce:	f7f6 fa8f 	bl	8000af0 <__aeabi_dcmple>
 800a5d2:	bb48      	cbnz	r0, 800a628 <_printf_float+0xd0>
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	4640      	mov	r0, r8
 800a5da:	4649      	mov	r1, r9
 800a5dc:	f7f6 fa7e 	bl	8000adc <__aeabi_dcmplt>
 800a5e0:	b110      	cbz	r0, 800a5e8 <_printf_float+0x90>
 800a5e2:	232d      	movs	r3, #45	; 0x2d
 800a5e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a5e8:	4b93      	ldr	r3, [pc, #588]	; (800a838 <_printf_float+0x2e0>)
 800a5ea:	4894      	ldr	r0, [pc, #592]	; (800a83c <_printf_float+0x2e4>)
 800a5ec:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a5f0:	bf94      	ite	ls
 800a5f2:	4698      	movls	r8, r3
 800a5f4:	4680      	movhi	r8, r0
 800a5f6:	2303      	movs	r3, #3
 800a5f8:	6123      	str	r3, [r4, #16]
 800a5fa:	9b05      	ldr	r3, [sp, #20]
 800a5fc:	f023 0204 	bic.w	r2, r3, #4
 800a600:	6022      	str	r2, [r4, #0]
 800a602:	f04f 0900 	mov.w	r9, #0
 800a606:	9700      	str	r7, [sp, #0]
 800a608:	4633      	mov	r3, r6
 800a60a:	aa0b      	add	r2, sp, #44	; 0x2c
 800a60c:	4621      	mov	r1, r4
 800a60e:	4628      	mov	r0, r5
 800a610:	f000 f9d8 	bl	800a9c4 <_printf_common>
 800a614:	3001      	adds	r0, #1
 800a616:	f040 8090 	bne.w	800a73a <_printf_float+0x1e2>
 800a61a:	f04f 30ff 	mov.w	r0, #4294967295
 800a61e:	b00d      	add	sp, #52	; 0x34
 800a620:	ecbd 8b02 	vpop	{d8}
 800a624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a628:	4642      	mov	r2, r8
 800a62a:	464b      	mov	r3, r9
 800a62c:	4640      	mov	r0, r8
 800a62e:	4649      	mov	r1, r9
 800a630:	f7f6 fa7c 	bl	8000b2c <__aeabi_dcmpun>
 800a634:	b140      	cbz	r0, 800a648 <_printf_float+0xf0>
 800a636:	464b      	mov	r3, r9
 800a638:	2b00      	cmp	r3, #0
 800a63a:	bfbc      	itt	lt
 800a63c:	232d      	movlt	r3, #45	; 0x2d
 800a63e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a642:	487f      	ldr	r0, [pc, #508]	; (800a840 <_printf_float+0x2e8>)
 800a644:	4b7f      	ldr	r3, [pc, #508]	; (800a844 <_printf_float+0x2ec>)
 800a646:	e7d1      	b.n	800a5ec <_printf_float+0x94>
 800a648:	6863      	ldr	r3, [r4, #4]
 800a64a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a64e:	9206      	str	r2, [sp, #24]
 800a650:	1c5a      	adds	r2, r3, #1
 800a652:	d13f      	bne.n	800a6d4 <_printf_float+0x17c>
 800a654:	2306      	movs	r3, #6
 800a656:	6063      	str	r3, [r4, #4]
 800a658:	9b05      	ldr	r3, [sp, #20]
 800a65a:	6861      	ldr	r1, [r4, #4]
 800a65c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a660:	2300      	movs	r3, #0
 800a662:	9303      	str	r3, [sp, #12]
 800a664:	ab0a      	add	r3, sp, #40	; 0x28
 800a666:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a66a:	ab09      	add	r3, sp, #36	; 0x24
 800a66c:	ec49 8b10 	vmov	d0, r8, r9
 800a670:	9300      	str	r3, [sp, #0]
 800a672:	6022      	str	r2, [r4, #0]
 800a674:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a678:	4628      	mov	r0, r5
 800a67a:	f7ff fecd 	bl	800a418 <__cvt>
 800a67e:	9b06      	ldr	r3, [sp, #24]
 800a680:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a682:	2b47      	cmp	r3, #71	; 0x47
 800a684:	4680      	mov	r8, r0
 800a686:	d108      	bne.n	800a69a <_printf_float+0x142>
 800a688:	1cc8      	adds	r0, r1, #3
 800a68a:	db02      	blt.n	800a692 <_printf_float+0x13a>
 800a68c:	6863      	ldr	r3, [r4, #4]
 800a68e:	4299      	cmp	r1, r3
 800a690:	dd41      	ble.n	800a716 <_printf_float+0x1be>
 800a692:	f1ab 0b02 	sub.w	fp, fp, #2
 800a696:	fa5f fb8b 	uxtb.w	fp, fp
 800a69a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a69e:	d820      	bhi.n	800a6e2 <_printf_float+0x18a>
 800a6a0:	3901      	subs	r1, #1
 800a6a2:	465a      	mov	r2, fp
 800a6a4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a6a8:	9109      	str	r1, [sp, #36]	; 0x24
 800a6aa:	f7ff ff17 	bl	800a4dc <__exponent>
 800a6ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a6b0:	1813      	adds	r3, r2, r0
 800a6b2:	2a01      	cmp	r2, #1
 800a6b4:	4681      	mov	r9, r0
 800a6b6:	6123      	str	r3, [r4, #16]
 800a6b8:	dc02      	bgt.n	800a6c0 <_printf_float+0x168>
 800a6ba:	6822      	ldr	r2, [r4, #0]
 800a6bc:	07d2      	lsls	r2, r2, #31
 800a6be:	d501      	bpl.n	800a6c4 <_printf_float+0x16c>
 800a6c0:	3301      	adds	r3, #1
 800a6c2:	6123      	str	r3, [r4, #16]
 800a6c4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d09c      	beq.n	800a606 <_printf_float+0xae>
 800a6cc:	232d      	movs	r3, #45	; 0x2d
 800a6ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a6d2:	e798      	b.n	800a606 <_printf_float+0xae>
 800a6d4:	9a06      	ldr	r2, [sp, #24]
 800a6d6:	2a47      	cmp	r2, #71	; 0x47
 800a6d8:	d1be      	bne.n	800a658 <_printf_float+0x100>
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d1bc      	bne.n	800a658 <_printf_float+0x100>
 800a6de:	2301      	movs	r3, #1
 800a6e0:	e7b9      	b.n	800a656 <_printf_float+0xfe>
 800a6e2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a6e6:	d118      	bne.n	800a71a <_printf_float+0x1c2>
 800a6e8:	2900      	cmp	r1, #0
 800a6ea:	6863      	ldr	r3, [r4, #4]
 800a6ec:	dd0b      	ble.n	800a706 <_printf_float+0x1ae>
 800a6ee:	6121      	str	r1, [r4, #16]
 800a6f0:	b913      	cbnz	r3, 800a6f8 <_printf_float+0x1a0>
 800a6f2:	6822      	ldr	r2, [r4, #0]
 800a6f4:	07d0      	lsls	r0, r2, #31
 800a6f6:	d502      	bpl.n	800a6fe <_printf_float+0x1a6>
 800a6f8:	3301      	adds	r3, #1
 800a6fa:	440b      	add	r3, r1
 800a6fc:	6123      	str	r3, [r4, #16]
 800a6fe:	65a1      	str	r1, [r4, #88]	; 0x58
 800a700:	f04f 0900 	mov.w	r9, #0
 800a704:	e7de      	b.n	800a6c4 <_printf_float+0x16c>
 800a706:	b913      	cbnz	r3, 800a70e <_printf_float+0x1b6>
 800a708:	6822      	ldr	r2, [r4, #0]
 800a70a:	07d2      	lsls	r2, r2, #31
 800a70c:	d501      	bpl.n	800a712 <_printf_float+0x1ba>
 800a70e:	3302      	adds	r3, #2
 800a710:	e7f4      	b.n	800a6fc <_printf_float+0x1a4>
 800a712:	2301      	movs	r3, #1
 800a714:	e7f2      	b.n	800a6fc <_printf_float+0x1a4>
 800a716:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a71a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a71c:	4299      	cmp	r1, r3
 800a71e:	db05      	blt.n	800a72c <_printf_float+0x1d4>
 800a720:	6823      	ldr	r3, [r4, #0]
 800a722:	6121      	str	r1, [r4, #16]
 800a724:	07d8      	lsls	r0, r3, #31
 800a726:	d5ea      	bpl.n	800a6fe <_printf_float+0x1a6>
 800a728:	1c4b      	adds	r3, r1, #1
 800a72a:	e7e7      	b.n	800a6fc <_printf_float+0x1a4>
 800a72c:	2900      	cmp	r1, #0
 800a72e:	bfd4      	ite	le
 800a730:	f1c1 0202 	rsble	r2, r1, #2
 800a734:	2201      	movgt	r2, #1
 800a736:	4413      	add	r3, r2
 800a738:	e7e0      	b.n	800a6fc <_printf_float+0x1a4>
 800a73a:	6823      	ldr	r3, [r4, #0]
 800a73c:	055a      	lsls	r2, r3, #21
 800a73e:	d407      	bmi.n	800a750 <_printf_float+0x1f8>
 800a740:	6923      	ldr	r3, [r4, #16]
 800a742:	4642      	mov	r2, r8
 800a744:	4631      	mov	r1, r6
 800a746:	4628      	mov	r0, r5
 800a748:	47b8      	blx	r7
 800a74a:	3001      	adds	r0, #1
 800a74c:	d12c      	bne.n	800a7a8 <_printf_float+0x250>
 800a74e:	e764      	b.n	800a61a <_printf_float+0xc2>
 800a750:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a754:	f240 80e0 	bls.w	800a918 <_printf_float+0x3c0>
 800a758:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a75c:	2200      	movs	r2, #0
 800a75e:	2300      	movs	r3, #0
 800a760:	f7f6 f9b2 	bl	8000ac8 <__aeabi_dcmpeq>
 800a764:	2800      	cmp	r0, #0
 800a766:	d034      	beq.n	800a7d2 <_printf_float+0x27a>
 800a768:	4a37      	ldr	r2, [pc, #220]	; (800a848 <_printf_float+0x2f0>)
 800a76a:	2301      	movs	r3, #1
 800a76c:	4631      	mov	r1, r6
 800a76e:	4628      	mov	r0, r5
 800a770:	47b8      	blx	r7
 800a772:	3001      	adds	r0, #1
 800a774:	f43f af51 	beq.w	800a61a <_printf_float+0xc2>
 800a778:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a77c:	429a      	cmp	r2, r3
 800a77e:	db02      	blt.n	800a786 <_printf_float+0x22e>
 800a780:	6823      	ldr	r3, [r4, #0]
 800a782:	07d8      	lsls	r0, r3, #31
 800a784:	d510      	bpl.n	800a7a8 <_printf_float+0x250>
 800a786:	ee18 3a10 	vmov	r3, s16
 800a78a:	4652      	mov	r2, sl
 800a78c:	4631      	mov	r1, r6
 800a78e:	4628      	mov	r0, r5
 800a790:	47b8      	blx	r7
 800a792:	3001      	adds	r0, #1
 800a794:	f43f af41 	beq.w	800a61a <_printf_float+0xc2>
 800a798:	f04f 0800 	mov.w	r8, #0
 800a79c:	f104 091a 	add.w	r9, r4, #26
 800a7a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7a2:	3b01      	subs	r3, #1
 800a7a4:	4543      	cmp	r3, r8
 800a7a6:	dc09      	bgt.n	800a7bc <_printf_float+0x264>
 800a7a8:	6823      	ldr	r3, [r4, #0]
 800a7aa:	079b      	lsls	r3, r3, #30
 800a7ac:	f100 8105 	bmi.w	800a9ba <_printf_float+0x462>
 800a7b0:	68e0      	ldr	r0, [r4, #12]
 800a7b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a7b4:	4298      	cmp	r0, r3
 800a7b6:	bfb8      	it	lt
 800a7b8:	4618      	movlt	r0, r3
 800a7ba:	e730      	b.n	800a61e <_printf_float+0xc6>
 800a7bc:	2301      	movs	r3, #1
 800a7be:	464a      	mov	r2, r9
 800a7c0:	4631      	mov	r1, r6
 800a7c2:	4628      	mov	r0, r5
 800a7c4:	47b8      	blx	r7
 800a7c6:	3001      	adds	r0, #1
 800a7c8:	f43f af27 	beq.w	800a61a <_printf_float+0xc2>
 800a7cc:	f108 0801 	add.w	r8, r8, #1
 800a7d0:	e7e6      	b.n	800a7a0 <_printf_float+0x248>
 800a7d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	dc39      	bgt.n	800a84c <_printf_float+0x2f4>
 800a7d8:	4a1b      	ldr	r2, [pc, #108]	; (800a848 <_printf_float+0x2f0>)
 800a7da:	2301      	movs	r3, #1
 800a7dc:	4631      	mov	r1, r6
 800a7de:	4628      	mov	r0, r5
 800a7e0:	47b8      	blx	r7
 800a7e2:	3001      	adds	r0, #1
 800a7e4:	f43f af19 	beq.w	800a61a <_printf_float+0xc2>
 800a7e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a7ec:	4313      	orrs	r3, r2
 800a7ee:	d102      	bne.n	800a7f6 <_printf_float+0x29e>
 800a7f0:	6823      	ldr	r3, [r4, #0]
 800a7f2:	07d9      	lsls	r1, r3, #31
 800a7f4:	d5d8      	bpl.n	800a7a8 <_printf_float+0x250>
 800a7f6:	ee18 3a10 	vmov	r3, s16
 800a7fa:	4652      	mov	r2, sl
 800a7fc:	4631      	mov	r1, r6
 800a7fe:	4628      	mov	r0, r5
 800a800:	47b8      	blx	r7
 800a802:	3001      	adds	r0, #1
 800a804:	f43f af09 	beq.w	800a61a <_printf_float+0xc2>
 800a808:	f04f 0900 	mov.w	r9, #0
 800a80c:	f104 0a1a 	add.w	sl, r4, #26
 800a810:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a812:	425b      	negs	r3, r3
 800a814:	454b      	cmp	r3, r9
 800a816:	dc01      	bgt.n	800a81c <_printf_float+0x2c4>
 800a818:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a81a:	e792      	b.n	800a742 <_printf_float+0x1ea>
 800a81c:	2301      	movs	r3, #1
 800a81e:	4652      	mov	r2, sl
 800a820:	4631      	mov	r1, r6
 800a822:	4628      	mov	r0, r5
 800a824:	47b8      	blx	r7
 800a826:	3001      	adds	r0, #1
 800a828:	f43f aef7 	beq.w	800a61a <_printf_float+0xc2>
 800a82c:	f109 0901 	add.w	r9, r9, #1
 800a830:	e7ee      	b.n	800a810 <_printf_float+0x2b8>
 800a832:	bf00      	nop
 800a834:	7fefffff 	.word	0x7fefffff
 800a838:	0800e21c 	.word	0x0800e21c
 800a83c:	0800e220 	.word	0x0800e220
 800a840:	0800e228 	.word	0x0800e228
 800a844:	0800e224 	.word	0x0800e224
 800a848:	0800e22c 	.word	0x0800e22c
 800a84c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a84e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a850:	429a      	cmp	r2, r3
 800a852:	bfa8      	it	ge
 800a854:	461a      	movge	r2, r3
 800a856:	2a00      	cmp	r2, #0
 800a858:	4691      	mov	r9, r2
 800a85a:	dc37      	bgt.n	800a8cc <_printf_float+0x374>
 800a85c:	f04f 0b00 	mov.w	fp, #0
 800a860:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a864:	f104 021a 	add.w	r2, r4, #26
 800a868:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a86a:	9305      	str	r3, [sp, #20]
 800a86c:	eba3 0309 	sub.w	r3, r3, r9
 800a870:	455b      	cmp	r3, fp
 800a872:	dc33      	bgt.n	800a8dc <_printf_float+0x384>
 800a874:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a878:	429a      	cmp	r2, r3
 800a87a:	db3b      	blt.n	800a8f4 <_printf_float+0x39c>
 800a87c:	6823      	ldr	r3, [r4, #0]
 800a87e:	07da      	lsls	r2, r3, #31
 800a880:	d438      	bmi.n	800a8f4 <_printf_float+0x39c>
 800a882:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a884:	9b05      	ldr	r3, [sp, #20]
 800a886:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a888:	1ad3      	subs	r3, r2, r3
 800a88a:	eba2 0901 	sub.w	r9, r2, r1
 800a88e:	4599      	cmp	r9, r3
 800a890:	bfa8      	it	ge
 800a892:	4699      	movge	r9, r3
 800a894:	f1b9 0f00 	cmp.w	r9, #0
 800a898:	dc35      	bgt.n	800a906 <_printf_float+0x3ae>
 800a89a:	f04f 0800 	mov.w	r8, #0
 800a89e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a8a2:	f104 0a1a 	add.w	sl, r4, #26
 800a8a6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a8aa:	1a9b      	subs	r3, r3, r2
 800a8ac:	eba3 0309 	sub.w	r3, r3, r9
 800a8b0:	4543      	cmp	r3, r8
 800a8b2:	f77f af79 	ble.w	800a7a8 <_printf_float+0x250>
 800a8b6:	2301      	movs	r3, #1
 800a8b8:	4652      	mov	r2, sl
 800a8ba:	4631      	mov	r1, r6
 800a8bc:	4628      	mov	r0, r5
 800a8be:	47b8      	blx	r7
 800a8c0:	3001      	adds	r0, #1
 800a8c2:	f43f aeaa 	beq.w	800a61a <_printf_float+0xc2>
 800a8c6:	f108 0801 	add.w	r8, r8, #1
 800a8ca:	e7ec      	b.n	800a8a6 <_printf_float+0x34e>
 800a8cc:	4613      	mov	r3, r2
 800a8ce:	4631      	mov	r1, r6
 800a8d0:	4642      	mov	r2, r8
 800a8d2:	4628      	mov	r0, r5
 800a8d4:	47b8      	blx	r7
 800a8d6:	3001      	adds	r0, #1
 800a8d8:	d1c0      	bne.n	800a85c <_printf_float+0x304>
 800a8da:	e69e      	b.n	800a61a <_printf_float+0xc2>
 800a8dc:	2301      	movs	r3, #1
 800a8de:	4631      	mov	r1, r6
 800a8e0:	4628      	mov	r0, r5
 800a8e2:	9205      	str	r2, [sp, #20]
 800a8e4:	47b8      	blx	r7
 800a8e6:	3001      	adds	r0, #1
 800a8e8:	f43f ae97 	beq.w	800a61a <_printf_float+0xc2>
 800a8ec:	9a05      	ldr	r2, [sp, #20]
 800a8ee:	f10b 0b01 	add.w	fp, fp, #1
 800a8f2:	e7b9      	b.n	800a868 <_printf_float+0x310>
 800a8f4:	ee18 3a10 	vmov	r3, s16
 800a8f8:	4652      	mov	r2, sl
 800a8fa:	4631      	mov	r1, r6
 800a8fc:	4628      	mov	r0, r5
 800a8fe:	47b8      	blx	r7
 800a900:	3001      	adds	r0, #1
 800a902:	d1be      	bne.n	800a882 <_printf_float+0x32a>
 800a904:	e689      	b.n	800a61a <_printf_float+0xc2>
 800a906:	9a05      	ldr	r2, [sp, #20]
 800a908:	464b      	mov	r3, r9
 800a90a:	4442      	add	r2, r8
 800a90c:	4631      	mov	r1, r6
 800a90e:	4628      	mov	r0, r5
 800a910:	47b8      	blx	r7
 800a912:	3001      	adds	r0, #1
 800a914:	d1c1      	bne.n	800a89a <_printf_float+0x342>
 800a916:	e680      	b.n	800a61a <_printf_float+0xc2>
 800a918:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a91a:	2a01      	cmp	r2, #1
 800a91c:	dc01      	bgt.n	800a922 <_printf_float+0x3ca>
 800a91e:	07db      	lsls	r3, r3, #31
 800a920:	d538      	bpl.n	800a994 <_printf_float+0x43c>
 800a922:	2301      	movs	r3, #1
 800a924:	4642      	mov	r2, r8
 800a926:	4631      	mov	r1, r6
 800a928:	4628      	mov	r0, r5
 800a92a:	47b8      	blx	r7
 800a92c:	3001      	adds	r0, #1
 800a92e:	f43f ae74 	beq.w	800a61a <_printf_float+0xc2>
 800a932:	ee18 3a10 	vmov	r3, s16
 800a936:	4652      	mov	r2, sl
 800a938:	4631      	mov	r1, r6
 800a93a:	4628      	mov	r0, r5
 800a93c:	47b8      	blx	r7
 800a93e:	3001      	adds	r0, #1
 800a940:	f43f ae6b 	beq.w	800a61a <_printf_float+0xc2>
 800a944:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a948:	2200      	movs	r2, #0
 800a94a:	2300      	movs	r3, #0
 800a94c:	f7f6 f8bc 	bl	8000ac8 <__aeabi_dcmpeq>
 800a950:	b9d8      	cbnz	r0, 800a98a <_printf_float+0x432>
 800a952:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a954:	f108 0201 	add.w	r2, r8, #1
 800a958:	3b01      	subs	r3, #1
 800a95a:	4631      	mov	r1, r6
 800a95c:	4628      	mov	r0, r5
 800a95e:	47b8      	blx	r7
 800a960:	3001      	adds	r0, #1
 800a962:	d10e      	bne.n	800a982 <_printf_float+0x42a>
 800a964:	e659      	b.n	800a61a <_printf_float+0xc2>
 800a966:	2301      	movs	r3, #1
 800a968:	4652      	mov	r2, sl
 800a96a:	4631      	mov	r1, r6
 800a96c:	4628      	mov	r0, r5
 800a96e:	47b8      	blx	r7
 800a970:	3001      	adds	r0, #1
 800a972:	f43f ae52 	beq.w	800a61a <_printf_float+0xc2>
 800a976:	f108 0801 	add.w	r8, r8, #1
 800a97a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a97c:	3b01      	subs	r3, #1
 800a97e:	4543      	cmp	r3, r8
 800a980:	dcf1      	bgt.n	800a966 <_printf_float+0x40e>
 800a982:	464b      	mov	r3, r9
 800a984:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a988:	e6dc      	b.n	800a744 <_printf_float+0x1ec>
 800a98a:	f04f 0800 	mov.w	r8, #0
 800a98e:	f104 0a1a 	add.w	sl, r4, #26
 800a992:	e7f2      	b.n	800a97a <_printf_float+0x422>
 800a994:	2301      	movs	r3, #1
 800a996:	4642      	mov	r2, r8
 800a998:	e7df      	b.n	800a95a <_printf_float+0x402>
 800a99a:	2301      	movs	r3, #1
 800a99c:	464a      	mov	r2, r9
 800a99e:	4631      	mov	r1, r6
 800a9a0:	4628      	mov	r0, r5
 800a9a2:	47b8      	blx	r7
 800a9a4:	3001      	adds	r0, #1
 800a9a6:	f43f ae38 	beq.w	800a61a <_printf_float+0xc2>
 800a9aa:	f108 0801 	add.w	r8, r8, #1
 800a9ae:	68e3      	ldr	r3, [r4, #12]
 800a9b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a9b2:	1a5b      	subs	r3, r3, r1
 800a9b4:	4543      	cmp	r3, r8
 800a9b6:	dcf0      	bgt.n	800a99a <_printf_float+0x442>
 800a9b8:	e6fa      	b.n	800a7b0 <_printf_float+0x258>
 800a9ba:	f04f 0800 	mov.w	r8, #0
 800a9be:	f104 0919 	add.w	r9, r4, #25
 800a9c2:	e7f4      	b.n	800a9ae <_printf_float+0x456>

0800a9c4 <_printf_common>:
 800a9c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9c8:	4616      	mov	r6, r2
 800a9ca:	4699      	mov	r9, r3
 800a9cc:	688a      	ldr	r2, [r1, #8]
 800a9ce:	690b      	ldr	r3, [r1, #16]
 800a9d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a9d4:	4293      	cmp	r3, r2
 800a9d6:	bfb8      	it	lt
 800a9d8:	4613      	movlt	r3, r2
 800a9da:	6033      	str	r3, [r6, #0]
 800a9dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a9e0:	4607      	mov	r7, r0
 800a9e2:	460c      	mov	r4, r1
 800a9e4:	b10a      	cbz	r2, 800a9ea <_printf_common+0x26>
 800a9e6:	3301      	adds	r3, #1
 800a9e8:	6033      	str	r3, [r6, #0]
 800a9ea:	6823      	ldr	r3, [r4, #0]
 800a9ec:	0699      	lsls	r1, r3, #26
 800a9ee:	bf42      	ittt	mi
 800a9f0:	6833      	ldrmi	r3, [r6, #0]
 800a9f2:	3302      	addmi	r3, #2
 800a9f4:	6033      	strmi	r3, [r6, #0]
 800a9f6:	6825      	ldr	r5, [r4, #0]
 800a9f8:	f015 0506 	ands.w	r5, r5, #6
 800a9fc:	d106      	bne.n	800aa0c <_printf_common+0x48>
 800a9fe:	f104 0a19 	add.w	sl, r4, #25
 800aa02:	68e3      	ldr	r3, [r4, #12]
 800aa04:	6832      	ldr	r2, [r6, #0]
 800aa06:	1a9b      	subs	r3, r3, r2
 800aa08:	42ab      	cmp	r3, r5
 800aa0a:	dc26      	bgt.n	800aa5a <_printf_common+0x96>
 800aa0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800aa10:	1e13      	subs	r3, r2, #0
 800aa12:	6822      	ldr	r2, [r4, #0]
 800aa14:	bf18      	it	ne
 800aa16:	2301      	movne	r3, #1
 800aa18:	0692      	lsls	r2, r2, #26
 800aa1a:	d42b      	bmi.n	800aa74 <_printf_common+0xb0>
 800aa1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aa20:	4649      	mov	r1, r9
 800aa22:	4638      	mov	r0, r7
 800aa24:	47c0      	blx	r8
 800aa26:	3001      	adds	r0, #1
 800aa28:	d01e      	beq.n	800aa68 <_printf_common+0xa4>
 800aa2a:	6823      	ldr	r3, [r4, #0]
 800aa2c:	68e5      	ldr	r5, [r4, #12]
 800aa2e:	6832      	ldr	r2, [r6, #0]
 800aa30:	f003 0306 	and.w	r3, r3, #6
 800aa34:	2b04      	cmp	r3, #4
 800aa36:	bf08      	it	eq
 800aa38:	1aad      	subeq	r5, r5, r2
 800aa3a:	68a3      	ldr	r3, [r4, #8]
 800aa3c:	6922      	ldr	r2, [r4, #16]
 800aa3e:	bf0c      	ite	eq
 800aa40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aa44:	2500      	movne	r5, #0
 800aa46:	4293      	cmp	r3, r2
 800aa48:	bfc4      	itt	gt
 800aa4a:	1a9b      	subgt	r3, r3, r2
 800aa4c:	18ed      	addgt	r5, r5, r3
 800aa4e:	2600      	movs	r6, #0
 800aa50:	341a      	adds	r4, #26
 800aa52:	42b5      	cmp	r5, r6
 800aa54:	d11a      	bne.n	800aa8c <_printf_common+0xc8>
 800aa56:	2000      	movs	r0, #0
 800aa58:	e008      	b.n	800aa6c <_printf_common+0xa8>
 800aa5a:	2301      	movs	r3, #1
 800aa5c:	4652      	mov	r2, sl
 800aa5e:	4649      	mov	r1, r9
 800aa60:	4638      	mov	r0, r7
 800aa62:	47c0      	blx	r8
 800aa64:	3001      	adds	r0, #1
 800aa66:	d103      	bne.n	800aa70 <_printf_common+0xac>
 800aa68:	f04f 30ff 	mov.w	r0, #4294967295
 800aa6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa70:	3501      	adds	r5, #1
 800aa72:	e7c6      	b.n	800aa02 <_printf_common+0x3e>
 800aa74:	18e1      	adds	r1, r4, r3
 800aa76:	1c5a      	adds	r2, r3, #1
 800aa78:	2030      	movs	r0, #48	; 0x30
 800aa7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800aa7e:	4422      	add	r2, r4
 800aa80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aa84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aa88:	3302      	adds	r3, #2
 800aa8a:	e7c7      	b.n	800aa1c <_printf_common+0x58>
 800aa8c:	2301      	movs	r3, #1
 800aa8e:	4622      	mov	r2, r4
 800aa90:	4649      	mov	r1, r9
 800aa92:	4638      	mov	r0, r7
 800aa94:	47c0      	blx	r8
 800aa96:	3001      	adds	r0, #1
 800aa98:	d0e6      	beq.n	800aa68 <_printf_common+0xa4>
 800aa9a:	3601      	adds	r6, #1
 800aa9c:	e7d9      	b.n	800aa52 <_printf_common+0x8e>
	...

0800aaa0 <_printf_i>:
 800aaa0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aaa4:	460c      	mov	r4, r1
 800aaa6:	4691      	mov	r9, r2
 800aaa8:	7e27      	ldrb	r7, [r4, #24]
 800aaaa:	990c      	ldr	r1, [sp, #48]	; 0x30
 800aaac:	2f78      	cmp	r7, #120	; 0x78
 800aaae:	4680      	mov	r8, r0
 800aab0:	469a      	mov	sl, r3
 800aab2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aab6:	d807      	bhi.n	800aac8 <_printf_i+0x28>
 800aab8:	2f62      	cmp	r7, #98	; 0x62
 800aaba:	d80a      	bhi.n	800aad2 <_printf_i+0x32>
 800aabc:	2f00      	cmp	r7, #0
 800aabe:	f000 80d8 	beq.w	800ac72 <_printf_i+0x1d2>
 800aac2:	2f58      	cmp	r7, #88	; 0x58
 800aac4:	f000 80a3 	beq.w	800ac0e <_printf_i+0x16e>
 800aac8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800aacc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800aad0:	e03a      	b.n	800ab48 <_printf_i+0xa8>
 800aad2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800aad6:	2b15      	cmp	r3, #21
 800aad8:	d8f6      	bhi.n	800aac8 <_printf_i+0x28>
 800aada:	a001      	add	r0, pc, #4	; (adr r0, 800aae0 <_printf_i+0x40>)
 800aadc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800aae0:	0800ab39 	.word	0x0800ab39
 800aae4:	0800ab4d 	.word	0x0800ab4d
 800aae8:	0800aac9 	.word	0x0800aac9
 800aaec:	0800aac9 	.word	0x0800aac9
 800aaf0:	0800aac9 	.word	0x0800aac9
 800aaf4:	0800aac9 	.word	0x0800aac9
 800aaf8:	0800ab4d 	.word	0x0800ab4d
 800aafc:	0800aac9 	.word	0x0800aac9
 800ab00:	0800aac9 	.word	0x0800aac9
 800ab04:	0800aac9 	.word	0x0800aac9
 800ab08:	0800aac9 	.word	0x0800aac9
 800ab0c:	0800ac59 	.word	0x0800ac59
 800ab10:	0800ab7d 	.word	0x0800ab7d
 800ab14:	0800ac3b 	.word	0x0800ac3b
 800ab18:	0800aac9 	.word	0x0800aac9
 800ab1c:	0800aac9 	.word	0x0800aac9
 800ab20:	0800ac7b 	.word	0x0800ac7b
 800ab24:	0800aac9 	.word	0x0800aac9
 800ab28:	0800ab7d 	.word	0x0800ab7d
 800ab2c:	0800aac9 	.word	0x0800aac9
 800ab30:	0800aac9 	.word	0x0800aac9
 800ab34:	0800ac43 	.word	0x0800ac43
 800ab38:	680b      	ldr	r3, [r1, #0]
 800ab3a:	1d1a      	adds	r2, r3, #4
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	600a      	str	r2, [r1, #0]
 800ab40:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ab44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ab48:	2301      	movs	r3, #1
 800ab4a:	e0a3      	b.n	800ac94 <_printf_i+0x1f4>
 800ab4c:	6825      	ldr	r5, [r4, #0]
 800ab4e:	6808      	ldr	r0, [r1, #0]
 800ab50:	062e      	lsls	r6, r5, #24
 800ab52:	f100 0304 	add.w	r3, r0, #4
 800ab56:	d50a      	bpl.n	800ab6e <_printf_i+0xce>
 800ab58:	6805      	ldr	r5, [r0, #0]
 800ab5a:	600b      	str	r3, [r1, #0]
 800ab5c:	2d00      	cmp	r5, #0
 800ab5e:	da03      	bge.n	800ab68 <_printf_i+0xc8>
 800ab60:	232d      	movs	r3, #45	; 0x2d
 800ab62:	426d      	negs	r5, r5
 800ab64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab68:	485e      	ldr	r0, [pc, #376]	; (800ace4 <_printf_i+0x244>)
 800ab6a:	230a      	movs	r3, #10
 800ab6c:	e019      	b.n	800aba2 <_printf_i+0x102>
 800ab6e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ab72:	6805      	ldr	r5, [r0, #0]
 800ab74:	600b      	str	r3, [r1, #0]
 800ab76:	bf18      	it	ne
 800ab78:	b22d      	sxthne	r5, r5
 800ab7a:	e7ef      	b.n	800ab5c <_printf_i+0xbc>
 800ab7c:	680b      	ldr	r3, [r1, #0]
 800ab7e:	6825      	ldr	r5, [r4, #0]
 800ab80:	1d18      	adds	r0, r3, #4
 800ab82:	6008      	str	r0, [r1, #0]
 800ab84:	0628      	lsls	r0, r5, #24
 800ab86:	d501      	bpl.n	800ab8c <_printf_i+0xec>
 800ab88:	681d      	ldr	r5, [r3, #0]
 800ab8a:	e002      	b.n	800ab92 <_printf_i+0xf2>
 800ab8c:	0669      	lsls	r1, r5, #25
 800ab8e:	d5fb      	bpl.n	800ab88 <_printf_i+0xe8>
 800ab90:	881d      	ldrh	r5, [r3, #0]
 800ab92:	4854      	ldr	r0, [pc, #336]	; (800ace4 <_printf_i+0x244>)
 800ab94:	2f6f      	cmp	r7, #111	; 0x6f
 800ab96:	bf0c      	ite	eq
 800ab98:	2308      	moveq	r3, #8
 800ab9a:	230a      	movne	r3, #10
 800ab9c:	2100      	movs	r1, #0
 800ab9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800aba2:	6866      	ldr	r6, [r4, #4]
 800aba4:	60a6      	str	r6, [r4, #8]
 800aba6:	2e00      	cmp	r6, #0
 800aba8:	bfa2      	ittt	ge
 800abaa:	6821      	ldrge	r1, [r4, #0]
 800abac:	f021 0104 	bicge.w	r1, r1, #4
 800abb0:	6021      	strge	r1, [r4, #0]
 800abb2:	b90d      	cbnz	r5, 800abb8 <_printf_i+0x118>
 800abb4:	2e00      	cmp	r6, #0
 800abb6:	d04d      	beq.n	800ac54 <_printf_i+0x1b4>
 800abb8:	4616      	mov	r6, r2
 800abba:	fbb5 f1f3 	udiv	r1, r5, r3
 800abbe:	fb03 5711 	mls	r7, r3, r1, r5
 800abc2:	5dc7      	ldrb	r7, [r0, r7]
 800abc4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800abc8:	462f      	mov	r7, r5
 800abca:	42bb      	cmp	r3, r7
 800abcc:	460d      	mov	r5, r1
 800abce:	d9f4      	bls.n	800abba <_printf_i+0x11a>
 800abd0:	2b08      	cmp	r3, #8
 800abd2:	d10b      	bne.n	800abec <_printf_i+0x14c>
 800abd4:	6823      	ldr	r3, [r4, #0]
 800abd6:	07df      	lsls	r7, r3, #31
 800abd8:	d508      	bpl.n	800abec <_printf_i+0x14c>
 800abda:	6923      	ldr	r3, [r4, #16]
 800abdc:	6861      	ldr	r1, [r4, #4]
 800abde:	4299      	cmp	r1, r3
 800abe0:	bfde      	ittt	le
 800abe2:	2330      	movle	r3, #48	; 0x30
 800abe4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800abe8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800abec:	1b92      	subs	r2, r2, r6
 800abee:	6122      	str	r2, [r4, #16]
 800abf0:	f8cd a000 	str.w	sl, [sp]
 800abf4:	464b      	mov	r3, r9
 800abf6:	aa03      	add	r2, sp, #12
 800abf8:	4621      	mov	r1, r4
 800abfa:	4640      	mov	r0, r8
 800abfc:	f7ff fee2 	bl	800a9c4 <_printf_common>
 800ac00:	3001      	adds	r0, #1
 800ac02:	d14c      	bne.n	800ac9e <_printf_i+0x1fe>
 800ac04:	f04f 30ff 	mov.w	r0, #4294967295
 800ac08:	b004      	add	sp, #16
 800ac0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac0e:	4835      	ldr	r0, [pc, #212]	; (800ace4 <_printf_i+0x244>)
 800ac10:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ac14:	6823      	ldr	r3, [r4, #0]
 800ac16:	680e      	ldr	r6, [r1, #0]
 800ac18:	061f      	lsls	r7, r3, #24
 800ac1a:	f856 5b04 	ldr.w	r5, [r6], #4
 800ac1e:	600e      	str	r6, [r1, #0]
 800ac20:	d514      	bpl.n	800ac4c <_printf_i+0x1ac>
 800ac22:	07d9      	lsls	r1, r3, #31
 800ac24:	bf44      	itt	mi
 800ac26:	f043 0320 	orrmi.w	r3, r3, #32
 800ac2a:	6023      	strmi	r3, [r4, #0]
 800ac2c:	b91d      	cbnz	r5, 800ac36 <_printf_i+0x196>
 800ac2e:	6823      	ldr	r3, [r4, #0]
 800ac30:	f023 0320 	bic.w	r3, r3, #32
 800ac34:	6023      	str	r3, [r4, #0]
 800ac36:	2310      	movs	r3, #16
 800ac38:	e7b0      	b.n	800ab9c <_printf_i+0xfc>
 800ac3a:	6823      	ldr	r3, [r4, #0]
 800ac3c:	f043 0320 	orr.w	r3, r3, #32
 800ac40:	6023      	str	r3, [r4, #0]
 800ac42:	2378      	movs	r3, #120	; 0x78
 800ac44:	4828      	ldr	r0, [pc, #160]	; (800ace8 <_printf_i+0x248>)
 800ac46:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ac4a:	e7e3      	b.n	800ac14 <_printf_i+0x174>
 800ac4c:	065e      	lsls	r6, r3, #25
 800ac4e:	bf48      	it	mi
 800ac50:	b2ad      	uxthmi	r5, r5
 800ac52:	e7e6      	b.n	800ac22 <_printf_i+0x182>
 800ac54:	4616      	mov	r6, r2
 800ac56:	e7bb      	b.n	800abd0 <_printf_i+0x130>
 800ac58:	680b      	ldr	r3, [r1, #0]
 800ac5a:	6826      	ldr	r6, [r4, #0]
 800ac5c:	6960      	ldr	r0, [r4, #20]
 800ac5e:	1d1d      	adds	r5, r3, #4
 800ac60:	600d      	str	r5, [r1, #0]
 800ac62:	0635      	lsls	r5, r6, #24
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	d501      	bpl.n	800ac6c <_printf_i+0x1cc>
 800ac68:	6018      	str	r0, [r3, #0]
 800ac6a:	e002      	b.n	800ac72 <_printf_i+0x1d2>
 800ac6c:	0671      	lsls	r1, r6, #25
 800ac6e:	d5fb      	bpl.n	800ac68 <_printf_i+0x1c8>
 800ac70:	8018      	strh	r0, [r3, #0]
 800ac72:	2300      	movs	r3, #0
 800ac74:	6123      	str	r3, [r4, #16]
 800ac76:	4616      	mov	r6, r2
 800ac78:	e7ba      	b.n	800abf0 <_printf_i+0x150>
 800ac7a:	680b      	ldr	r3, [r1, #0]
 800ac7c:	1d1a      	adds	r2, r3, #4
 800ac7e:	600a      	str	r2, [r1, #0]
 800ac80:	681e      	ldr	r6, [r3, #0]
 800ac82:	6862      	ldr	r2, [r4, #4]
 800ac84:	2100      	movs	r1, #0
 800ac86:	4630      	mov	r0, r6
 800ac88:	f7f5 faaa 	bl	80001e0 <memchr>
 800ac8c:	b108      	cbz	r0, 800ac92 <_printf_i+0x1f2>
 800ac8e:	1b80      	subs	r0, r0, r6
 800ac90:	6060      	str	r0, [r4, #4]
 800ac92:	6863      	ldr	r3, [r4, #4]
 800ac94:	6123      	str	r3, [r4, #16]
 800ac96:	2300      	movs	r3, #0
 800ac98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac9c:	e7a8      	b.n	800abf0 <_printf_i+0x150>
 800ac9e:	6923      	ldr	r3, [r4, #16]
 800aca0:	4632      	mov	r2, r6
 800aca2:	4649      	mov	r1, r9
 800aca4:	4640      	mov	r0, r8
 800aca6:	47d0      	blx	sl
 800aca8:	3001      	adds	r0, #1
 800acaa:	d0ab      	beq.n	800ac04 <_printf_i+0x164>
 800acac:	6823      	ldr	r3, [r4, #0]
 800acae:	079b      	lsls	r3, r3, #30
 800acb0:	d413      	bmi.n	800acda <_printf_i+0x23a>
 800acb2:	68e0      	ldr	r0, [r4, #12]
 800acb4:	9b03      	ldr	r3, [sp, #12]
 800acb6:	4298      	cmp	r0, r3
 800acb8:	bfb8      	it	lt
 800acba:	4618      	movlt	r0, r3
 800acbc:	e7a4      	b.n	800ac08 <_printf_i+0x168>
 800acbe:	2301      	movs	r3, #1
 800acc0:	4632      	mov	r2, r6
 800acc2:	4649      	mov	r1, r9
 800acc4:	4640      	mov	r0, r8
 800acc6:	47d0      	blx	sl
 800acc8:	3001      	adds	r0, #1
 800acca:	d09b      	beq.n	800ac04 <_printf_i+0x164>
 800accc:	3501      	adds	r5, #1
 800acce:	68e3      	ldr	r3, [r4, #12]
 800acd0:	9903      	ldr	r1, [sp, #12]
 800acd2:	1a5b      	subs	r3, r3, r1
 800acd4:	42ab      	cmp	r3, r5
 800acd6:	dcf2      	bgt.n	800acbe <_printf_i+0x21e>
 800acd8:	e7eb      	b.n	800acb2 <_printf_i+0x212>
 800acda:	2500      	movs	r5, #0
 800acdc:	f104 0619 	add.w	r6, r4, #25
 800ace0:	e7f5      	b.n	800acce <_printf_i+0x22e>
 800ace2:	bf00      	nop
 800ace4:	0800e22e 	.word	0x0800e22e
 800ace8:	0800e23f 	.word	0x0800e23f

0800acec <siprintf>:
 800acec:	b40e      	push	{r1, r2, r3}
 800acee:	b500      	push	{lr}
 800acf0:	b09c      	sub	sp, #112	; 0x70
 800acf2:	ab1d      	add	r3, sp, #116	; 0x74
 800acf4:	9002      	str	r0, [sp, #8]
 800acf6:	9006      	str	r0, [sp, #24]
 800acf8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800acfc:	4809      	ldr	r0, [pc, #36]	; (800ad24 <siprintf+0x38>)
 800acfe:	9107      	str	r1, [sp, #28]
 800ad00:	9104      	str	r1, [sp, #16]
 800ad02:	4909      	ldr	r1, [pc, #36]	; (800ad28 <siprintf+0x3c>)
 800ad04:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad08:	9105      	str	r1, [sp, #20]
 800ad0a:	6800      	ldr	r0, [r0, #0]
 800ad0c:	9301      	str	r3, [sp, #4]
 800ad0e:	a902      	add	r1, sp, #8
 800ad10:	f001 fb34 	bl	800c37c <_svfiprintf_r>
 800ad14:	9b02      	ldr	r3, [sp, #8]
 800ad16:	2200      	movs	r2, #0
 800ad18:	701a      	strb	r2, [r3, #0]
 800ad1a:	b01c      	add	sp, #112	; 0x70
 800ad1c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ad20:	b003      	add	sp, #12
 800ad22:	4770      	bx	lr
 800ad24:	2000017c 	.word	0x2000017c
 800ad28:	ffff0208 	.word	0xffff0208

0800ad2c <quorem>:
 800ad2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad30:	6903      	ldr	r3, [r0, #16]
 800ad32:	690c      	ldr	r4, [r1, #16]
 800ad34:	42a3      	cmp	r3, r4
 800ad36:	4607      	mov	r7, r0
 800ad38:	f2c0 8081 	blt.w	800ae3e <quorem+0x112>
 800ad3c:	3c01      	subs	r4, #1
 800ad3e:	f101 0814 	add.w	r8, r1, #20
 800ad42:	f100 0514 	add.w	r5, r0, #20
 800ad46:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ad4a:	9301      	str	r3, [sp, #4]
 800ad4c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ad50:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ad54:	3301      	adds	r3, #1
 800ad56:	429a      	cmp	r2, r3
 800ad58:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ad5c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ad60:	fbb2 f6f3 	udiv	r6, r2, r3
 800ad64:	d331      	bcc.n	800adca <quorem+0x9e>
 800ad66:	f04f 0e00 	mov.w	lr, #0
 800ad6a:	4640      	mov	r0, r8
 800ad6c:	46ac      	mov	ip, r5
 800ad6e:	46f2      	mov	sl, lr
 800ad70:	f850 2b04 	ldr.w	r2, [r0], #4
 800ad74:	b293      	uxth	r3, r2
 800ad76:	fb06 e303 	mla	r3, r6, r3, lr
 800ad7a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ad7e:	b29b      	uxth	r3, r3
 800ad80:	ebaa 0303 	sub.w	r3, sl, r3
 800ad84:	0c12      	lsrs	r2, r2, #16
 800ad86:	f8dc a000 	ldr.w	sl, [ip]
 800ad8a:	fb06 e202 	mla	r2, r6, r2, lr
 800ad8e:	fa13 f38a 	uxtah	r3, r3, sl
 800ad92:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ad96:	fa1f fa82 	uxth.w	sl, r2
 800ad9a:	f8dc 2000 	ldr.w	r2, [ip]
 800ad9e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800ada2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ada6:	b29b      	uxth	r3, r3
 800ada8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800adac:	4581      	cmp	r9, r0
 800adae:	f84c 3b04 	str.w	r3, [ip], #4
 800adb2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800adb6:	d2db      	bcs.n	800ad70 <quorem+0x44>
 800adb8:	f855 300b 	ldr.w	r3, [r5, fp]
 800adbc:	b92b      	cbnz	r3, 800adca <quorem+0x9e>
 800adbe:	9b01      	ldr	r3, [sp, #4]
 800adc0:	3b04      	subs	r3, #4
 800adc2:	429d      	cmp	r5, r3
 800adc4:	461a      	mov	r2, r3
 800adc6:	d32e      	bcc.n	800ae26 <quorem+0xfa>
 800adc8:	613c      	str	r4, [r7, #16]
 800adca:	4638      	mov	r0, r7
 800adcc:	f001 f8c0 	bl	800bf50 <__mcmp>
 800add0:	2800      	cmp	r0, #0
 800add2:	db24      	blt.n	800ae1e <quorem+0xf2>
 800add4:	3601      	adds	r6, #1
 800add6:	4628      	mov	r0, r5
 800add8:	f04f 0c00 	mov.w	ip, #0
 800addc:	f858 2b04 	ldr.w	r2, [r8], #4
 800ade0:	f8d0 e000 	ldr.w	lr, [r0]
 800ade4:	b293      	uxth	r3, r2
 800ade6:	ebac 0303 	sub.w	r3, ip, r3
 800adea:	0c12      	lsrs	r2, r2, #16
 800adec:	fa13 f38e 	uxtah	r3, r3, lr
 800adf0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800adf4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800adf8:	b29b      	uxth	r3, r3
 800adfa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800adfe:	45c1      	cmp	r9, r8
 800ae00:	f840 3b04 	str.w	r3, [r0], #4
 800ae04:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ae08:	d2e8      	bcs.n	800addc <quorem+0xb0>
 800ae0a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ae0e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ae12:	b922      	cbnz	r2, 800ae1e <quorem+0xf2>
 800ae14:	3b04      	subs	r3, #4
 800ae16:	429d      	cmp	r5, r3
 800ae18:	461a      	mov	r2, r3
 800ae1a:	d30a      	bcc.n	800ae32 <quorem+0x106>
 800ae1c:	613c      	str	r4, [r7, #16]
 800ae1e:	4630      	mov	r0, r6
 800ae20:	b003      	add	sp, #12
 800ae22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae26:	6812      	ldr	r2, [r2, #0]
 800ae28:	3b04      	subs	r3, #4
 800ae2a:	2a00      	cmp	r2, #0
 800ae2c:	d1cc      	bne.n	800adc8 <quorem+0x9c>
 800ae2e:	3c01      	subs	r4, #1
 800ae30:	e7c7      	b.n	800adc2 <quorem+0x96>
 800ae32:	6812      	ldr	r2, [r2, #0]
 800ae34:	3b04      	subs	r3, #4
 800ae36:	2a00      	cmp	r2, #0
 800ae38:	d1f0      	bne.n	800ae1c <quorem+0xf0>
 800ae3a:	3c01      	subs	r4, #1
 800ae3c:	e7eb      	b.n	800ae16 <quorem+0xea>
 800ae3e:	2000      	movs	r0, #0
 800ae40:	e7ee      	b.n	800ae20 <quorem+0xf4>
 800ae42:	0000      	movs	r0, r0
 800ae44:	0000      	movs	r0, r0
	...

0800ae48 <_dtoa_r>:
 800ae48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae4c:	ed2d 8b02 	vpush	{d8}
 800ae50:	ec57 6b10 	vmov	r6, r7, d0
 800ae54:	b095      	sub	sp, #84	; 0x54
 800ae56:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ae58:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ae5c:	9105      	str	r1, [sp, #20]
 800ae5e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800ae62:	4604      	mov	r4, r0
 800ae64:	9209      	str	r2, [sp, #36]	; 0x24
 800ae66:	930f      	str	r3, [sp, #60]	; 0x3c
 800ae68:	b975      	cbnz	r5, 800ae88 <_dtoa_r+0x40>
 800ae6a:	2010      	movs	r0, #16
 800ae6c:	f000 fddc 	bl	800ba28 <malloc>
 800ae70:	4602      	mov	r2, r0
 800ae72:	6260      	str	r0, [r4, #36]	; 0x24
 800ae74:	b920      	cbnz	r0, 800ae80 <_dtoa_r+0x38>
 800ae76:	4bb2      	ldr	r3, [pc, #712]	; (800b140 <_dtoa_r+0x2f8>)
 800ae78:	21ea      	movs	r1, #234	; 0xea
 800ae7a:	48b2      	ldr	r0, [pc, #712]	; (800b144 <_dtoa_r+0x2fc>)
 800ae7c:	f001 fb8e 	bl	800c59c <__assert_func>
 800ae80:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ae84:	6005      	str	r5, [r0, #0]
 800ae86:	60c5      	str	r5, [r0, #12]
 800ae88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ae8a:	6819      	ldr	r1, [r3, #0]
 800ae8c:	b151      	cbz	r1, 800aea4 <_dtoa_r+0x5c>
 800ae8e:	685a      	ldr	r2, [r3, #4]
 800ae90:	604a      	str	r2, [r1, #4]
 800ae92:	2301      	movs	r3, #1
 800ae94:	4093      	lsls	r3, r2
 800ae96:	608b      	str	r3, [r1, #8]
 800ae98:	4620      	mov	r0, r4
 800ae9a:	f000 fe1b 	bl	800bad4 <_Bfree>
 800ae9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aea0:	2200      	movs	r2, #0
 800aea2:	601a      	str	r2, [r3, #0]
 800aea4:	1e3b      	subs	r3, r7, #0
 800aea6:	bfb9      	ittee	lt
 800aea8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800aeac:	9303      	strlt	r3, [sp, #12]
 800aeae:	2300      	movge	r3, #0
 800aeb0:	f8c8 3000 	strge.w	r3, [r8]
 800aeb4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800aeb8:	4ba3      	ldr	r3, [pc, #652]	; (800b148 <_dtoa_r+0x300>)
 800aeba:	bfbc      	itt	lt
 800aebc:	2201      	movlt	r2, #1
 800aebe:	f8c8 2000 	strlt.w	r2, [r8]
 800aec2:	ea33 0309 	bics.w	r3, r3, r9
 800aec6:	d11b      	bne.n	800af00 <_dtoa_r+0xb8>
 800aec8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800aeca:	f242 730f 	movw	r3, #9999	; 0x270f
 800aece:	6013      	str	r3, [r2, #0]
 800aed0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800aed4:	4333      	orrs	r3, r6
 800aed6:	f000 857a 	beq.w	800b9ce <_dtoa_r+0xb86>
 800aeda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aedc:	b963      	cbnz	r3, 800aef8 <_dtoa_r+0xb0>
 800aede:	4b9b      	ldr	r3, [pc, #620]	; (800b14c <_dtoa_r+0x304>)
 800aee0:	e024      	b.n	800af2c <_dtoa_r+0xe4>
 800aee2:	4b9b      	ldr	r3, [pc, #620]	; (800b150 <_dtoa_r+0x308>)
 800aee4:	9300      	str	r3, [sp, #0]
 800aee6:	3308      	adds	r3, #8
 800aee8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800aeea:	6013      	str	r3, [r2, #0]
 800aeec:	9800      	ldr	r0, [sp, #0]
 800aeee:	b015      	add	sp, #84	; 0x54
 800aef0:	ecbd 8b02 	vpop	{d8}
 800aef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aef8:	4b94      	ldr	r3, [pc, #592]	; (800b14c <_dtoa_r+0x304>)
 800aefa:	9300      	str	r3, [sp, #0]
 800aefc:	3303      	adds	r3, #3
 800aefe:	e7f3      	b.n	800aee8 <_dtoa_r+0xa0>
 800af00:	ed9d 7b02 	vldr	d7, [sp, #8]
 800af04:	2200      	movs	r2, #0
 800af06:	ec51 0b17 	vmov	r0, r1, d7
 800af0a:	2300      	movs	r3, #0
 800af0c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800af10:	f7f5 fdda 	bl	8000ac8 <__aeabi_dcmpeq>
 800af14:	4680      	mov	r8, r0
 800af16:	b158      	cbz	r0, 800af30 <_dtoa_r+0xe8>
 800af18:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800af1a:	2301      	movs	r3, #1
 800af1c:	6013      	str	r3, [r2, #0]
 800af1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800af20:	2b00      	cmp	r3, #0
 800af22:	f000 8551 	beq.w	800b9c8 <_dtoa_r+0xb80>
 800af26:	488b      	ldr	r0, [pc, #556]	; (800b154 <_dtoa_r+0x30c>)
 800af28:	6018      	str	r0, [r3, #0]
 800af2a:	1e43      	subs	r3, r0, #1
 800af2c:	9300      	str	r3, [sp, #0]
 800af2e:	e7dd      	b.n	800aeec <_dtoa_r+0xa4>
 800af30:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800af34:	aa12      	add	r2, sp, #72	; 0x48
 800af36:	a913      	add	r1, sp, #76	; 0x4c
 800af38:	4620      	mov	r0, r4
 800af3a:	f001 f8ad 	bl	800c098 <__d2b>
 800af3e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800af42:	4683      	mov	fp, r0
 800af44:	2d00      	cmp	r5, #0
 800af46:	d07c      	beq.n	800b042 <_dtoa_r+0x1fa>
 800af48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af4a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800af4e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800af52:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800af56:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800af5a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800af5e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800af62:	4b7d      	ldr	r3, [pc, #500]	; (800b158 <_dtoa_r+0x310>)
 800af64:	2200      	movs	r2, #0
 800af66:	4630      	mov	r0, r6
 800af68:	4639      	mov	r1, r7
 800af6a:	f7f5 f98d 	bl	8000288 <__aeabi_dsub>
 800af6e:	a36e      	add	r3, pc, #440	; (adr r3, 800b128 <_dtoa_r+0x2e0>)
 800af70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af74:	f7f5 fb40 	bl	80005f8 <__aeabi_dmul>
 800af78:	a36d      	add	r3, pc, #436	; (adr r3, 800b130 <_dtoa_r+0x2e8>)
 800af7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af7e:	f7f5 f985 	bl	800028c <__adddf3>
 800af82:	4606      	mov	r6, r0
 800af84:	4628      	mov	r0, r5
 800af86:	460f      	mov	r7, r1
 800af88:	f7f5 facc 	bl	8000524 <__aeabi_i2d>
 800af8c:	a36a      	add	r3, pc, #424	; (adr r3, 800b138 <_dtoa_r+0x2f0>)
 800af8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af92:	f7f5 fb31 	bl	80005f8 <__aeabi_dmul>
 800af96:	4602      	mov	r2, r0
 800af98:	460b      	mov	r3, r1
 800af9a:	4630      	mov	r0, r6
 800af9c:	4639      	mov	r1, r7
 800af9e:	f7f5 f975 	bl	800028c <__adddf3>
 800afa2:	4606      	mov	r6, r0
 800afa4:	460f      	mov	r7, r1
 800afa6:	f7f5 fdd7 	bl	8000b58 <__aeabi_d2iz>
 800afaa:	2200      	movs	r2, #0
 800afac:	4682      	mov	sl, r0
 800afae:	2300      	movs	r3, #0
 800afb0:	4630      	mov	r0, r6
 800afb2:	4639      	mov	r1, r7
 800afb4:	f7f5 fd92 	bl	8000adc <__aeabi_dcmplt>
 800afb8:	b148      	cbz	r0, 800afce <_dtoa_r+0x186>
 800afba:	4650      	mov	r0, sl
 800afbc:	f7f5 fab2 	bl	8000524 <__aeabi_i2d>
 800afc0:	4632      	mov	r2, r6
 800afc2:	463b      	mov	r3, r7
 800afc4:	f7f5 fd80 	bl	8000ac8 <__aeabi_dcmpeq>
 800afc8:	b908      	cbnz	r0, 800afce <_dtoa_r+0x186>
 800afca:	f10a 3aff 	add.w	sl, sl, #4294967295
 800afce:	f1ba 0f16 	cmp.w	sl, #22
 800afd2:	d854      	bhi.n	800b07e <_dtoa_r+0x236>
 800afd4:	4b61      	ldr	r3, [pc, #388]	; (800b15c <_dtoa_r+0x314>)
 800afd6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800afda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afde:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800afe2:	f7f5 fd7b 	bl	8000adc <__aeabi_dcmplt>
 800afe6:	2800      	cmp	r0, #0
 800afe8:	d04b      	beq.n	800b082 <_dtoa_r+0x23a>
 800afea:	f10a 3aff 	add.w	sl, sl, #4294967295
 800afee:	2300      	movs	r3, #0
 800aff0:	930e      	str	r3, [sp, #56]	; 0x38
 800aff2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800aff4:	1b5d      	subs	r5, r3, r5
 800aff6:	1e6b      	subs	r3, r5, #1
 800aff8:	9304      	str	r3, [sp, #16]
 800affa:	bf43      	ittte	mi
 800affc:	2300      	movmi	r3, #0
 800affe:	f1c5 0801 	rsbmi	r8, r5, #1
 800b002:	9304      	strmi	r3, [sp, #16]
 800b004:	f04f 0800 	movpl.w	r8, #0
 800b008:	f1ba 0f00 	cmp.w	sl, #0
 800b00c:	db3b      	blt.n	800b086 <_dtoa_r+0x23e>
 800b00e:	9b04      	ldr	r3, [sp, #16]
 800b010:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800b014:	4453      	add	r3, sl
 800b016:	9304      	str	r3, [sp, #16]
 800b018:	2300      	movs	r3, #0
 800b01a:	9306      	str	r3, [sp, #24]
 800b01c:	9b05      	ldr	r3, [sp, #20]
 800b01e:	2b09      	cmp	r3, #9
 800b020:	d869      	bhi.n	800b0f6 <_dtoa_r+0x2ae>
 800b022:	2b05      	cmp	r3, #5
 800b024:	bfc4      	itt	gt
 800b026:	3b04      	subgt	r3, #4
 800b028:	9305      	strgt	r3, [sp, #20]
 800b02a:	9b05      	ldr	r3, [sp, #20]
 800b02c:	f1a3 0302 	sub.w	r3, r3, #2
 800b030:	bfcc      	ite	gt
 800b032:	2500      	movgt	r5, #0
 800b034:	2501      	movle	r5, #1
 800b036:	2b03      	cmp	r3, #3
 800b038:	d869      	bhi.n	800b10e <_dtoa_r+0x2c6>
 800b03a:	e8df f003 	tbb	[pc, r3]
 800b03e:	4e2c      	.short	0x4e2c
 800b040:	5a4c      	.short	0x5a4c
 800b042:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800b046:	441d      	add	r5, r3
 800b048:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b04c:	2b20      	cmp	r3, #32
 800b04e:	bfc1      	itttt	gt
 800b050:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b054:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b058:	fa09 f303 	lslgt.w	r3, r9, r3
 800b05c:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b060:	bfda      	itte	le
 800b062:	f1c3 0320 	rsble	r3, r3, #32
 800b066:	fa06 f003 	lslle.w	r0, r6, r3
 800b06a:	4318      	orrgt	r0, r3
 800b06c:	f7f5 fa4a 	bl	8000504 <__aeabi_ui2d>
 800b070:	2301      	movs	r3, #1
 800b072:	4606      	mov	r6, r0
 800b074:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b078:	3d01      	subs	r5, #1
 800b07a:	9310      	str	r3, [sp, #64]	; 0x40
 800b07c:	e771      	b.n	800af62 <_dtoa_r+0x11a>
 800b07e:	2301      	movs	r3, #1
 800b080:	e7b6      	b.n	800aff0 <_dtoa_r+0x1a8>
 800b082:	900e      	str	r0, [sp, #56]	; 0x38
 800b084:	e7b5      	b.n	800aff2 <_dtoa_r+0x1aa>
 800b086:	f1ca 0300 	rsb	r3, sl, #0
 800b08a:	9306      	str	r3, [sp, #24]
 800b08c:	2300      	movs	r3, #0
 800b08e:	eba8 080a 	sub.w	r8, r8, sl
 800b092:	930d      	str	r3, [sp, #52]	; 0x34
 800b094:	e7c2      	b.n	800b01c <_dtoa_r+0x1d4>
 800b096:	2300      	movs	r3, #0
 800b098:	9308      	str	r3, [sp, #32]
 800b09a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	dc39      	bgt.n	800b114 <_dtoa_r+0x2cc>
 800b0a0:	f04f 0901 	mov.w	r9, #1
 800b0a4:	f8cd 9004 	str.w	r9, [sp, #4]
 800b0a8:	464b      	mov	r3, r9
 800b0aa:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800b0ae:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b0b0:	2200      	movs	r2, #0
 800b0b2:	6042      	str	r2, [r0, #4]
 800b0b4:	2204      	movs	r2, #4
 800b0b6:	f102 0614 	add.w	r6, r2, #20
 800b0ba:	429e      	cmp	r6, r3
 800b0bc:	6841      	ldr	r1, [r0, #4]
 800b0be:	d92f      	bls.n	800b120 <_dtoa_r+0x2d8>
 800b0c0:	4620      	mov	r0, r4
 800b0c2:	f000 fcc7 	bl	800ba54 <_Balloc>
 800b0c6:	9000      	str	r0, [sp, #0]
 800b0c8:	2800      	cmp	r0, #0
 800b0ca:	d14b      	bne.n	800b164 <_dtoa_r+0x31c>
 800b0cc:	4b24      	ldr	r3, [pc, #144]	; (800b160 <_dtoa_r+0x318>)
 800b0ce:	4602      	mov	r2, r0
 800b0d0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b0d4:	e6d1      	b.n	800ae7a <_dtoa_r+0x32>
 800b0d6:	2301      	movs	r3, #1
 800b0d8:	e7de      	b.n	800b098 <_dtoa_r+0x250>
 800b0da:	2300      	movs	r3, #0
 800b0dc:	9308      	str	r3, [sp, #32]
 800b0de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0e0:	eb0a 0903 	add.w	r9, sl, r3
 800b0e4:	f109 0301 	add.w	r3, r9, #1
 800b0e8:	2b01      	cmp	r3, #1
 800b0ea:	9301      	str	r3, [sp, #4]
 800b0ec:	bfb8      	it	lt
 800b0ee:	2301      	movlt	r3, #1
 800b0f0:	e7dd      	b.n	800b0ae <_dtoa_r+0x266>
 800b0f2:	2301      	movs	r3, #1
 800b0f4:	e7f2      	b.n	800b0dc <_dtoa_r+0x294>
 800b0f6:	2501      	movs	r5, #1
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	9305      	str	r3, [sp, #20]
 800b0fc:	9508      	str	r5, [sp, #32]
 800b0fe:	f04f 39ff 	mov.w	r9, #4294967295
 800b102:	2200      	movs	r2, #0
 800b104:	f8cd 9004 	str.w	r9, [sp, #4]
 800b108:	2312      	movs	r3, #18
 800b10a:	9209      	str	r2, [sp, #36]	; 0x24
 800b10c:	e7cf      	b.n	800b0ae <_dtoa_r+0x266>
 800b10e:	2301      	movs	r3, #1
 800b110:	9308      	str	r3, [sp, #32]
 800b112:	e7f4      	b.n	800b0fe <_dtoa_r+0x2b6>
 800b114:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800b118:	f8cd 9004 	str.w	r9, [sp, #4]
 800b11c:	464b      	mov	r3, r9
 800b11e:	e7c6      	b.n	800b0ae <_dtoa_r+0x266>
 800b120:	3101      	adds	r1, #1
 800b122:	6041      	str	r1, [r0, #4]
 800b124:	0052      	lsls	r2, r2, #1
 800b126:	e7c6      	b.n	800b0b6 <_dtoa_r+0x26e>
 800b128:	636f4361 	.word	0x636f4361
 800b12c:	3fd287a7 	.word	0x3fd287a7
 800b130:	8b60c8b3 	.word	0x8b60c8b3
 800b134:	3fc68a28 	.word	0x3fc68a28
 800b138:	509f79fb 	.word	0x509f79fb
 800b13c:	3fd34413 	.word	0x3fd34413
 800b140:	0800e25d 	.word	0x0800e25d
 800b144:	0800e274 	.word	0x0800e274
 800b148:	7ff00000 	.word	0x7ff00000
 800b14c:	0800e259 	.word	0x0800e259
 800b150:	0800e250 	.word	0x0800e250
 800b154:	0800e22d 	.word	0x0800e22d
 800b158:	3ff80000 	.word	0x3ff80000
 800b15c:	0800e370 	.word	0x0800e370
 800b160:	0800e2d3 	.word	0x0800e2d3
 800b164:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b166:	9a00      	ldr	r2, [sp, #0]
 800b168:	601a      	str	r2, [r3, #0]
 800b16a:	9b01      	ldr	r3, [sp, #4]
 800b16c:	2b0e      	cmp	r3, #14
 800b16e:	f200 80ad 	bhi.w	800b2cc <_dtoa_r+0x484>
 800b172:	2d00      	cmp	r5, #0
 800b174:	f000 80aa 	beq.w	800b2cc <_dtoa_r+0x484>
 800b178:	f1ba 0f00 	cmp.w	sl, #0
 800b17c:	dd36      	ble.n	800b1ec <_dtoa_r+0x3a4>
 800b17e:	4ac3      	ldr	r2, [pc, #780]	; (800b48c <_dtoa_r+0x644>)
 800b180:	f00a 030f 	and.w	r3, sl, #15
 800b184:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b188:	ed93 7b00 	vldr	d7, [r3]
 800b18c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800b190:	ea4f 172a 	mov.w	r7, sl, asr #4
 800b194:	eeb0 8a47 	vmov.f32	s16, s14
 800b198:	eef0 8a67 	vmov.f32	s17, s15
 800b19c:	d016      	beq.n	800b1cc <_dtoa_r+0x384>
 800b19e:	4bbc      	ldr	r3, [pc, #752]	; (800b490 <_dtoa_r+0x648>)
 800b1a0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b1a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b1a8:	f7f5 fb50 	bl	800084c <__aeabi_ddiv>
 800b1ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b1b0:	f007 070f 	and.w	r7, r7, #15
 800b1b4:	2503      	movs	r5, #3
 800b1b6:	4eb6      	ldr	r6, [pc, #728]	; (800b490 <_dtoa_r+0x648>)
 800b1b8:	b957      	cbnz	r7, 800b1d0 <_dtoa_r+0x388>
 800b1ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b1be:	ec53 2b18 	vmov	r2, r3, d8
 800b1c2:	f7f5 fb43 	bl	800084c <__aeabi_ddiv>
 800b1c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b1ca:	e029      	b.n	800b220 <_dtoa_r+0x3d8>
 800b1cc:	2502      	movs	r5, #2
 800b1ce:	e7f2      	b.n	800b1b6 <_dtoa_r+0x36e>
 800b1d0:	07f9      	lsls	r1, r7, #31
 800b1d2:	d508      	bpl.n	800b1e6 <_dtoa_r+0x39e>
 800b1d4:	ec51 0b18 	vmov	r0, r1, d8
 800b1d8:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b1dc:	f7f5 fa0c 	bl	80005f8 <__aeabi_dmul>
 800b1e0:	ec41 0b18 	vmov	d8, r0, r1
 800b1e4:	3501      	adds	r5, #1
 800b1e6:	107f      	asrs	r7, r7, #1
 800b1e8:	3608      	adds	r6, #8
 800b1ea:	e7e5      	b.n	800b1b8 <_dtoa_r+0x370>
 800b1ec:	f000 80a6 	beq.w	800b33c <_dtoa_r+0x4f4>
 800b1f0:	f1ca 0600 	rsb	r6, sl, #0
 800b1f4:	4ba5      	ldr	r3, [pc, #660]	; (800b48c <_dtoa_r+0x644>)
 800b1f6:	4fa6      	ldr	r7, [pc, #664]	; (800b490 <_dtoa_r+0x648>)
 800b1f8:	f006 020f 	and.w	r2, r6, #15
 800b1fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b200:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b204:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b208:	f7f5 f9f6 	bl	80005f8 <__aeabi_dmul>
 800b20c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b210:	1136      	asrs	r6, r6, #4
 800b212:	2300      	movs	r3, #0
 800b214:	2502      	movs	r5, #2
 800b216:	2e00      	cmp	r6, #0
 800b218:	f040 8085 	bne.w	800b326 <_dtoa_r+0x4de>
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d1d2      	bne.n	800b1c6 <_dtoa_r+0x37e>
 800b220:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b222:	2b00      	cmp	r3, #0
 800b224:	f000 808c 	beq.w	800b340 <_dtoa_r+0x4f8>
 800b228:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b22c:	4b99      	ldr	r3, [pc, #612]	; (800b494 <_dtoa_r+0x64c>)
 800b22e:	2200      	movs	r2, #0
 800b230:	4630      	mov	r0, r6
 800b232:	4639      	mov	r1, r7
 800b234:	f7f5 fc52 	bl	8000adc <__aeabi_dcmplt>
 800b238:	2800      	cmp	r0, #0
 800b23a:	f000 8081 	beq.w	800b340 <_dtoa_r+0x4f8>
 800b23e:	9b01      	ldr	r3, [sp, #4]
 800b240:	2b00      	cmp	r3, #0
 800b242:	d07d      	beq.n	800b340 <_dtoa_r+0x4f8>
 800b244:	f1b9 0f00 	cmp.w	r9, #0
 800b248:	dd3c      	ble.n	800b2c4 <_dtoa_r+0x47c>
 800b24a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800b24e:	9307      	str	r3, [sp, #28]
 800b250:	2200      	movs	r2, #0
 800b252:	4b91      	ldr	r3, [pc, #580]	; (800b498 <_dtoa_r+0x650>)
 800b254:	4630      	mov	r0, r6
 800b256:	4639      	mov	r1, r7
 800b258:	f7f5 f9ce 	bl	80005f8 <__aeabi_dmul>
 800b25c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b260:	3501      	adds	r5, #1
 800b262:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800b266:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b26a:	4628      	mov	r0, r5
 800b26c:	f7f5 f95a 	bl	8000524 <__aeabi_i2d>
 800b270:	4632      	mov	r2, r6
 800b272:	463b      	mov	r3, r7
 800b274:	f7f5 f9c0 	bl	80005f8 <__aeabi_dmul>
 800b278:	4b88      	ldr	r3, [pc, #544]	; (800b49c <_dtoa_r+0x654>)
 800b27a:	2200      	movs	r2, #0
 800b27c:	f7f5 f806 	bl	800028c <__adddf3>
 800b280:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800b284:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b288:	9303      	str	r3, [sp, #12]
 800b28a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d15c      	bne.n	800b34a <_dtoa_r+0x502>
 800b290:	4b83      	ldr	r3, [pc, #524]	; (800b4a0 <_dtoa_r+0x658>)
 800b292:	2200      	movs	r2, #0
 800b294:	4630      	mov	r0, r6
 800b296:	4639      	mov	r1, r7
 800b298:	f7f4 fff6 	bl	8000288 <__aeabi_dsub>
 800b29c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b2a0:	4606      	mov	r6, r0
 800b2a2:	460f      	mov	r7, r1
 800b2a4:	f7f5 fc38 	bl	8000b18 <__aeabi_dcmpgt>
 800b2a8:	2800      	cmp	r0, #0
 800b2aa:	f040 8296 	bne.w	800b7da <_dtoa_r+0x992>
 800b2ae:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b2b2:	4630      	mov	r0, r6
 800b2b4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b2b8:	4639      	mov	r1, r7
 800b2ba:	f7f5 fc0f 	bl	8000adc <__aeabi_dcmplt>
 800b2be:	2800      	cmp	r0, #0
 800b2c0:	f040 8288 	bne.w	800b7d4 <_dtoa_r+0x98c>
 800b2c4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b2c8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b2cc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	f2c0 8158 	blt.w	800b584 <_dtoa_r+0x73c>
 800b2d4:	f1ba 0f0e 	cmp.w	sl, #14
 800b2d8:	f300 8154 	bgt.w	800b584 <_dtoa_r+0x73c>
 800b2dc:	4b6b      	ldr	r3, [pc, #428]	; (800b48c <_dtoa_r+0x644>)
 800b2de:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b2e2:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b2e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	f280 80e3 	bge.w	800b4b4 <_dtoa_r+0x66c>
 800b2ee:	9b01      	ldr	r3, [sp, #4]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	f300 80df 	bgt.w	800b4b4 <_dtoa_r+0x66c>
 800b2f6:	f040 826d 	bne.w	800b7d4 <_dtoa_r+0x98c>
 800b2fa:	4b69      	ldr	r3, [pc, #420]	; (800b4a0 <_dtoa_r+0x658>)
 800b2fc:	2200      	movs	r2, #0
 800b2fe:	4640      	mov	r0, r8
 800b300:	4649      	mov	r1, r9
 800b302:	f7f5 f979 	bl	80005f8 <__aeabi_dmul>
 800b306:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b30a:	f7f5 fbfb 	bl	8000b04 <__aeabi_dcmpge>
 800b30e:	9e01      	ldr	r6, [sp, #4]
 800b310:	4637      	mov	r7, r6
 800b312:	2800      	cmp	r0, #0
 800b314:	f040 8243 	bne.w	800b79e <_dtoa_r+0x956>
 800b318:	9d00      	ldr	r5, [sp, #0]
 800b31a:	2331      	movs	r3, #49	; 0x31
 800b31c:	f805 3b01 	strb.w	r3, [r5], #1
 800b320:	f10a 0a01 	add.w	sl, sl, #1
 800b324:	e23f      	b.n	800b7a6 <_dtoa_r+0x95e>
 800b326:	07f2      	lsls	r2, r6, #31
 800b328:	d505      	bpl.n	800b336 <_dtoa_r+0x4ee>
 800b32a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b32e:	f7f5 f963 	bl	80005f8 <__aeabi_dmul>
 800b332:	3501      	adds	r5, #1
 800b334:	2301      	movs	r3, #1
 800b336:	1076      	asrs	r6, r6, #1
 800b338:	3708      	adds	r7, #8
 800b33a:	e76c      	b.n	800b216 <_dtoa_r+0x3ce>
 800b33c:	2502      	movs	r5, #2
 800b33e:	e76f      	b.n	800b220 <_dtoa_r+0x3d8>
 800b340:	9b01      	ldr	r3, [sp, #4]
 800b342:	f8cd a01c 	str.w	sl, [sp, #28]
 800b346:	930c      	str	r3, [sp, #48]	; 0x30
 800b348:	e78d      	b.n	800b266 <_dtoa_r+0x41e>
 800b34a:	9900      	ldr	r1, [sp, #0]
 800b34c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b34e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b350:	4b4e      	ldr	r3, [pc, #312]	; (800b48c <_dtoa_r+0x644>)
 800b352:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b356:	4401      	add	r1, r0
 800b358:	9102      	str	r1, [sp, #8]
 800b35a:	9908      	ldr	r1, [sp, #32]
 800b35c:	eeb0 8a47 	vmov.f32	s16, s14
 800b360:	eef0 8a67 	vmov.f32	s17, s15
 800b364:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b368:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b36c:	2900      	cmp	r1, #0
 800b36e:	d045      	beq.n	800b3fc <_dtoa_r+0x5b4>
 800b370:	494c      	ldr	r1, [pc, #304]	; (800b4a4 <_dtoa_r+0x65c>)
 800b372:	2000      	movs	r0, #0
 800b374:	f7f5 fa6a 	bl	800084c <__aeabi_ddiv>
 800b378:	ec53 2b18 	vmov	r2, r3, d8
 800b37c:	f7f4 ff84 	bl	8000288 <__aeabi_dsub>
 800b380:	9d00      	ldr	r5, [sp, #0]
 800b382:	ec41 0b18 	vmov	d8, r0, r1
 800b386:	4639      	mov	r1, r7
 800b388:	4630      	mov	r0, r6
 800b38a:	f7f5 fbe5 	bl	8000b58 <__aeabi_d2iz>
 800b38e:	900c      	str	r0, [sp, #48]	; 0x30
 800b390:	f7f5 f8c8 	bl	8000524 <__aeabi_i2d>
 800b394:	4602      	mov	r2, r0
 800b396:	460b      	mov	r3, r1
 800b398:	4630      	mov	r0, r6
 800b39a:	4639      	mov	r1, r7
 800b39c:	f7f4 ff74 	bl	8000288 <__aeabi_dsub>
 800b3a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b3a2:	3330      	adds	r3, #48	; 0x30
 800b3a4:	f805 3b01 	strb.w	r3, [r5], #1
 800b3a8:	ec53 2b18 	vmov	r2, r3, d8
 800b3ac:	4606      	mov	r6, r0
 800b3ae:	460f      	mov	r7, r1
 800b3b0:	f7f5 fb94 	bl	8000adc <__aeabi_dcmplt>
 800b3b4:	2800      	cmp	r0, #0
 800b3b6:	d165      	bne.n	800b484 <_dtoa_r+0x63c>
 800b3b8:	4632      	mov	r2, r6
 800b3ba:	463b      	mov	r3, r7
 800b3bc:	4935      	ldr	r1, [pc, #212]	; (800b494 <_dtoa_r+0x64c>)
 800b3be:	2000      	movs	r0, #0
 800b3c0:	f7f4 ff62 	bl	8000288 <__aeabi_dsub>
 800b3c4:	ec53 2b18 	vmov	r2, r3, d8
 800b3c8:	f7f5 fb88 	bl	8000adc <__aeabi_dcmplt>
 800b3cc:	2800      	cmp	r0, #0
 800b3ce:	f040 80b9 	bne.w	800b544 <_dtoa_r+0x6fc>
 800b3d2:	9b02      	ldr	r3, [sp, #8]
 800b3d4:	429d      	cmp	r5, r3
 800b3d6:	f43f af75 	beq.w	800b2c4 <_dtoa_r+0x47c>
 800b3da:	4b2f      	ldr	r3, [pc, #188]	; (800b498 <_dtoa_r+0x650>)
 800b3dc:	ec51 0b18 	vmov	r0, r1, d8
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	f7f5 f909 	bl	80005f8 <__aeabi_dmul>
 800b3e6:	4b2c      	ldr	r3, [pc, #176]	; (800b498 <_dtoa_r+0x650>)
 800b3e8:	ec41 0b18 	vmov	d8, r0, r1
 800b3ec:	2200      	movs	r2, #0
 800b3ee:	4630      	mov	r0, r6
 800b3f0:	4639      	mov	r1, r7
 800b3f2:	f7f5 f901 	bl	80005f8 <__aeabi_dmul>
 800b3f6:	4606      	mov	r6, r0
 800b3f8:	460f      	mov	r7, r1
 800b3fa:	e7c4      	b.n	800b386 <_dtoa_r+0x53e>
 800b3fc:	ec51 0b17 	vmov	r0, r1, d7
 800b400:	f7f5 f8fa 	bl	80005f8 <__aeabi_dmul>
 800b404:	9b02      	ldr	r3, [sp, #8]
 800b406:	9d00      	ldr	r5, [sp, #0]
 800b408:	930c      	str	r3, [sp, #48]	; 0x30
 800b40a:	ec41 0b18 	vmov	d8, r0, r1
 800b40e:	4639      	mov	r1, r7
 800b410:	4630      	mov	r0, r6
 800b412:	f7f5 fba1 	bl	8000b58 <__aeabi_d2iz>
 800b416:	9011      	str	r0, [sp, #68]	; 0x44
 800b418:	f7f5 f884 	bl	8000524 <__aeabi_i2d>
 800b41c:	4602      	mov	r2, r0
 800b41e:	460b      	mov	r3, r1
 800b420:	4630      	mov	r0, r6
 800b422:	4639      	mov	r1, r7
 800b424:	f7f4 ff30 	bl	8000288 <__aeabi_dsub>
 800b428:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b42a:	3330      	adds	r3, #48	; 0x30
 800b42c:	f805 3b01 	strb.w	r3, [r5], #1
 800b430:	9b02      	ldr	r3, [sp, #8]
 800b432:	429d      	cmp	r5, r3
 800b434:	4606      	mov	r6, r0
 800b436:	460f      	mov	r7, r1
 800b438:	f04f 0200 	mov.w	r2, #0
 800b43c:	d134      	bne.n	800b4a8 <_dtoa_r+0x660>
 800b43e:	4b19      	ldr	r3, [pc, #100]	; (800b4a4 <_dtoa_r+0x65c>)
 800b440:	ec51 0b18 	vmov	r0, r1, d8
 800b444:	f7f4 ff22 	bl	800028c <__adddf3>
 800b448:	4602      	mov	r2, r0
 800b44a:	460b      	mov	r3, r1
 800b44c:	4630      	mov	r0, r6
 800b44e:	4639      	mov	r1, r7
 800b450:	f7f5 fb62 	bl	8000b18 <__aeabi_dcmpgt>
 800b454:	2800      	cmp	r0, #0
 800b456:	d175      	bne.n	800b544 <_dtoa_r+0x6fc>
 800b458:	ec53 2b18 	vmov	r2, r3, d8
 800b45c:	4911      	ldr	r1, [pc, #68]	; (800b4a4 <_dtoa_r+0x65c>)
 800b45e:	2000      	movs	r0, #0
 800b460:	f7f4 ff12 	bl	8000288 <__aeabi_dsub>
 800b464:	4602      	mov	r2, r0
 800b466:	460b      	mov	r3, r1
 800b468:	4630      	mov	r0, r6
 800b46a:	4639      	mov	r1, r7
 800b46c:	f7f5 fb36 	bl	8000adc <__aeabi_dcmplt>
 800b470:	2800      	cmp	r0, #0
 800b472:	f43f af27 	beq.w	800b2c4 <_dtoa_r+0x47c>
 800b476:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b478:	1e6b      	subs	r3, r5, #1
 800b47a:	930c      	str	r3, [sp, #48]	; 0x30
 800b47c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b480:	2b30      	cmp	r3, #48	; 0x30
 800b482:	d0f8      	beq.n	800b476 <_dtoa_r+0x62e>
 800b484:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800b488:	e04a      	b.n	800b520 <_dtoa_r+0x6d8>
 800b48a:	bf00      	nop
 800b48c:	0800e370 	.word	0x0800e370
 800b490:	0800e348 	.word	0x0800e348
 800b494:	3ff00000 	.word	0x3ff00000
 800b498:	40240000 	.word	0x40240000
 800b49c:	401c0000 	.word	0x401c0000
 800b4a0:	40140000 	.word	0x40140000
 800b4a4:	3fe00000 	.word	0x3fe00000
 800b4a8:	4baf      	ldr	r3, [pc, #700]	; (800b768 <_dtoa_r+0x920>)
 800b4aa:	f7f5 f8a5 	bl	80005f8 <__aeabi_dmul>
 800b4ae:	4606      	mov	r6, r0
 800b4b0:	460f      	mov	r7, r1
 800b4b2:	e7ac      	b.n	800b40e <_dtoa_r+0x5c6>
 800b4b4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b4b8:	9d00      	ldr	r5, [sp, #0]
 800b4ba:	4642      	mov	r2, r8
 800b4bc:	464b      	mov	r3, r9
 800b4be:	4630      	mov	r0, r6
 800b4c0:	4639      	mov	r1, r7
 800b4c2:	f7f5 f9c3 	bl	800084c <__aeabi_ddiv>
 800b4c6:	f7f5 fb47 	bl	8000b58 <__aeabi_d2iz>
 800b4ca:	9002      	str	r0, [sp, #8]
 800b4cc:	f7f5 f82a 	bl	8000524 <__aeabi_i2d>
 800b4d0:	4642      	mov	r2, r8
 800b4d2:	464b      	mov	r3, r9
 800b4d4:	f7f5 f890 	bl	80005f8 <__aeabi_dmul>
 800b4d8:	4602      	mov	r2, r0
 800b4da:	460b      	mov	r3, r1
 800b4dc:	4630      	mov	r0, r6
 800b4de:	4639      	mov	r1, r7
 800b4e0:	f7f4 fed2 	bl	8000288 <__aeabi_dsub>
 800b4e4:	9e02      	ldr	r6, [sp, #8]
 800b4e6:	9f01      	ldr	r7, [sp, #4]
 800b4e8:	3630      	adds	r6, #48	; 0x30
 800b4ea:	f805 6b01 	strb.w	r6, [r5], #1
 800b4ee:	9e00      	ldr	r6, [sp, #0]
 800b4f0:	1bae      	subs	r6, r5, r6
 800b4f2:	42b7      	cmp	r7, r6
 800b4f4:	4602      	mov	r2, r0
 800b4f6:	460b      	mov	r3, r1
 800b4f8:	d137      	bne.n	800b56a <_dtoa_r+0x722>
 800b4fa:	f7f4 fec7 	bl	800028c <__adddf3>
 800b4fe:	4642      	mov	r2, r8
 800b500:	464b      	mov	r3, r9
 800b502:	4606      	mov	r6, r0
 800b504:	460f      	mov	r7, r1
 800b506:	f7f5 fb07 	bl	8000b18 <__aeabi_dcmpgt>
 800b50a:	b9c8      	cbnz	r0, 800b540 <_dtoa_r+0x6f8>
 800b50c:	4642      	mov	r2, r8
 800b50e:	464b      	mov	r3, r9
 800b510:	4630      	mov	r0, r6
 800b512:	4639      	mov	r1, r7
 800b514:	f7f5 fad8 	bl	8000ac8 <__aeabi_dcmpeq>
 800b518:	b110      	cbz	r0, 800b520 <_dtoa_r+0x6d8>
 800b51a:	9b02      	ldr	r3, [sp, #8]
 800b51c:	07d9      	lsls	r1, r3, #31
 800b51e:	d40f      	bmi.n	800b540 <_dtoa_r+0x6f8>
 800b520:	4620      	mov	r0, r4
 800b522:	4659      	mov	r1, fp
 800b524:	f000 fad6 	bl	800bad4 <_Bfree>
 800b528:	2300      	movs	r3, #0
 800b52a:	702b      	strb	r3, [r5, #0]
 800b52c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b52e:	f10a 0001 	add.w	r0, sl, #1
 800b532:	6018      	str	r0, [r3, #0]
 800b534:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b536:	2b00      	cmp	r3, #0
 800b538:	f43f acd8 	beq.w	800aeec <_dtoa_r+0xa4>
 800b53c:	601d      	str	r5, [r3, #0]
 800b53e:	e4d5      	b.n	800aeec <_dtoa_r+0xa4>
 800b540:	f8cd a01c 	str.w	sl, [sp, #28]
 800b544:	462b      	mov	r3, r5
 800b546:	461d      	mov	r5, r3
 800b548:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b54c:	2a39      	cmp	r2, #57	; 0x39
 800b54e:	d108      	bne.n	800b562 <_dtoa_r+0x71a>
 800b550:	9a00      	ldr	r2, [sp, #0]
 800b552:	429a      	cmp	r2, r3
 800b554:	d1f7      	bne.n	800b546 <_dtoa_r+0x6fe>
 800b556:	9a07      	ldr	r2, [sp, #28]
 800b558:	9900      	ldr	r1, [sp, #0]
 800b55a:	3201      	adds	r2, #1
 800b55c:	9207      	str	r2, [sp, #28]
 800b55e:	2230      	movs	r2, #48	; 0x30
 800b560:	700a      	strb	r2, [r1, #0]
 800b562:	781a      	ldrb	r2, [r3, #0]
 800b564:	3201      	adds	r2, #1
 800b566:	701a      	strb	r2, [r3, #0]
 800b568:	e78c      	b.n	800b484 <_dtoa_r+0x63c>
 800b56a:	4b7f      	ldr	r3, [pc, #508]	; (800b768 <_dtoa_r+0x920>)
 800b56c:	2200      	movs	r2, #0
 800b56e:	f7f5 f843 	bl	80005f8 <__aeabi_dmul>
 800b572:	2200      	movs	r2, #0
 800b574:	2300      	movs	r3, #0
 800b576:	4606      	mov	r6, r0
 800b578:	460f      	mov	r7, r1
 800b57a:	f7f5 faa5 	bl	8000ac8 <__aeabi_dcmpeq>
 800b57e:	2800      	cmp	r0, #0
 800b580:	d09b      	beq.n	800b4ba <_dtoa_r+0x672>
 800b582:	e7cd      	b.n	800b520 <_dtoa_r+0x6d8>
 800b584:	9a08      	ldr	r2, [sp, #32]
 800b586:	2a00      	cmp	r2, #0
 800b588:	f000 80c4 	beq.w	800b714 <_dtoa_r+0x8cc>
 800b58c:	9a05      	ldr	r2, [sp, #20]
 800b58e:	2a01      	cmp	r2, #1
 800b590:	f300 80a8 	bgt.w	800b6e4 <_dtoa_r+0x89c>
 800b594:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b596:	2a00      	cmp	r2, #0
 800b598:	f000 80a0 	beq.w	800b6dc <_dtoa_r+0x894>
 800b59c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b5a0:	9e06      	ldr	r6, [sp, #24]
 800b5a2:	4645      	mov	r5, r8
 800b5a4:	9a04      	ldr	r2, [sp, #16]
 800b5a6:	2101      	movs	r1, #1
 800b5a8:	441a      	add	r2, r3
 800b5aa:	4620      	mov	r0, r4
 800b5ac:	4498      	add	r8, r3
 800b5ae:	9204      	str	r2, [sp, #16]
 800b5b0:	f000 fb4c 	bl	800bc4c <__i2b>
 800b5b4:	4607      	mov	r7, r0
 800b5b6:	2d00      	cmp	r5, #0
 800b5b8:	dd0b      	ble.n	800b5d2 <_dtoa_r+0x78a>
 800b5ba:	9b04      	ldr	r3, [sp, #16]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	dd08      	ble.n	800b5d2 <_dtoa_r+0x78a>
 800b5c0:	42ab      	cmp	r3, r5
 800b5c2:	9a04      	ldr	r2, [sp, #16]
 800b5c4:	bfa8      	it	ge
 800b5c6:	462b      	movge	r3, r5
 800b5c8:	eba8 0803 	sub.w	r8, r8, r3
 800b5cc:	1aed      	subs	r5, r5, r3
 800b5ce:	1ad3      	subs	r3, r2, r3
 800b5d0:	9304      	str	r3, [sp, #16]
 800b5d2:	9b06      	ldr	r3, [sp, #24]
 800b5d4:	b1fb      	cbz	r3, 800b616 <_dtoa_r+0x7ce>
 800b5d6:	9b08      	ldr	r3, [sp, #32]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	f000 809f 	beq.w	800b71c <_dtoa_r+0x8d4>
 800b5de:	2e00      	cmp	r6, #0
 800b5e0:	dd11      	ble.n	800b606 <_dtoa_r+0x7be>
 800b5e2:	4639      	mov	r1, r7
 800b5e4:	4632      	mov	r2, r6
 800b5e6:	4620      	mov	r0, r4
 800b5e8:	f000 fbec 	bl	800bdc4 <__pow5mult>
 800b5ec:	465a      	mov	r2, fp
 800b5ee:	4601      	mov	r1, r0
 800b5f0:	4607      	mov	r7, r0
 800b5f2:	4620      	mov	r0, r4
 800b5f4:	f000 fb40 	bl	800bc78 <__multiply>
 800b5f8:	4659      	mov	r1, fp
 800b5fa:	9007      	str	r0, [sp, #28]
 800b5fc:	4620      	mov	r0, r4
 800b5fe:	f000 fa69 	bl	800bad4 <_Bfree>
 800b602:	9b07      	ldr	r3, [sp, #28]
 800b604:	469b      	mov	fp, r3
 800b606:	9b06      	ldr	r3, [sp, #24]
 800b608:	1b9a      	subs	r2, r3, r6
 800b60a:	d004      	beq.n	800b616 <_dtoa_r+0x7ce>
 800b60c:	4659      	mov	r1, fp
 800b60e:	4620      	mov	r0, r4
 800b610:	f000 fbd8 	bl	800bdc4 <__pow5mult>
 800b614:	4683      	mov	fp, r0
 800b616:	2101      	movs	r1, #1
 800b618:	4620      	mov	r0, r4
 800b61a:	f000 fb17 	bl	800bc4c <__i2b>
 800b61e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b620:	2b00      	cmp	r3, #0
 800b622:	4606      	mov	r6, r0
 800b624:	dd7c      	ble.n	800b720 <_dtoa_r+0x8d8>
 800b626:	461a      	mov	r2, r3
 800b628:	4601      	mov	r1, r0
 800b62a:	4620      	mov	r0, r4
 800b62c:	f000 fbca 	bl	800bdc4 <__pow5mult>
 800b630:	9b05      	ldr	r3, [sp, #20]
 800b632:	2b01      	cmp	r3, #1
 800b634:	4606      	mov	r6, r0
 800b636:	dd76      	ble.n	800b726 <_dtoa_r+0x8de>
 800b638:	2300      	movs	r3, #0
 800b63a:	9306      	str	r3, [sp, #24]
 800b63c:	6933      	ldr	r3, [r6, #16]
 800b63e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b642:	6918      	ldr	r0, [r3, #16]
 800b644:	f000 fab2 	bl	800bbac <__hi0bits>
 800b648:	f1c0 0020 	rsb	r0, r0, #32
 800b64c:	9b04      	ldr	r3, [sp, #16]
 800b64e:	4418      	add	r0, r3
 800b650:	f010 001f 	ands.w	r0, r0, #31
 800b654:	f000 8086 	beq.w	800b764 <_dtoa_r+0x91c>
 800b658:	f1c0 0320 	rsb	r3, r0, #32
 800b65c:	2b04      	cmp	r3, #4
 800b65e:	dd7f      	ble.n	800b760 <_dtoa_r+0x918>
 800b660:	f1c0 001c 	rsb	r0, r0, #28
 800b664:	9b04      	ldr	r3, [sp, #16]
 800b666:	4403      	add	r3, r0
 800b668:	4480      	add	r8, r0
 800b66a:	4405      	add	r5, r0
 800b66c:	9304      	str	r3, [sp, #16]
 800b66e:	f1b8 0f00 	cmp.w	r8, #0
 800b672:	dd05      	ble.n	800b680 <_dtoa_r+0x838>
 800b674:	4659      	mov	r1, fp
 800b676:	4642      	mov	r2, r8
 800b678:	4620      	mov	r0, r4
 800b67a:	f000 fbfd 	bl	800be78 <__lshift>
 800b67e:	4683      	mov	fp, r0
 800b680:	9b04      	ldr	r3, [sp, #16]
 800b682:	2b00      	cmp	r3, #0
 800b684:	dd05      	ble.n	800b692 <_dtoa_r+0x84a>
 800b686:	4631      	mov	r1, r6
 800b688:	461a      	mov	r2, r3
 800b68a:	4620      	mov	r0, r4
 800b68c:	f000 fbf4 	bl	800be78 <__lshift>
 800b690:	4606      	mov	r6, r0
 800b692:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b694:	2b00      	cmp	r3, #0
 800b696:	d069      	beq.n	800b76c <_dtoa_r+0x924>
 800b698:	4631      	mov	r1, r6
 800b69a:	4658      	mov	r0, fp
 800b69c:	f000 fc58 	bl	800bf50 <__mcmp>
 800b6a0:	2800      	cmp	r0, #0
 800b6a2:	da63      	bge.n	800b76c <_dtoa_r+0x924>
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	4659      	mov	r1, fp
 800b6a8:	220a      	movs	r2, #10
 800b6aa:	4620      	mov	r0, r4
 800b6ac:	f000 fa34 	bl	800bb18 <__multadd>
 800b6b0:	9b08      	ldr	r3, [sp, #32]
 800b6b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b6b6:	4683      	mov	fp, r0
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	f000 818f 	beq.w	800b9dc <_dtoa_r+0xb94>
 800b6be:	4639      	mov	r1, r7
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	220a      	movs	r2, #10
 800b6c4:	4620      	mov	r0, r4
 800b6c6:	f000 fa27 	bl	800bb18 <__multadd>
 800b6ca:	f1b9 0f00 	cmp.w	r9, #0
 800b6ce:	4607      	mov	r7, r0
 800b6d0:	f300 808e 	bgt.w	800b7f0 <_dtoa_r+0x9a8>
 800b6d4:	9b05      	ldr	r3, [sp, #20]
 800b6d6:	2b02      	cmp	r3, #2
 800b6d8:	dc50      	bgt.n	800b77c <_dtoa_r+0x934>
 800b6da:	e089      	b.n	800b7f0 <_dtoa_r+0x9a8>
 800b6dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b6de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b6e2:	e75d      	b.n	800b5a0 <_dtoa_r+0x758>
 800b6e4:	9b01      	ldr	r3, [sp, #4]
 800b6e6:	1e5e      	subs	r6, r3, #1
 800b6e8:	9b06      	ldr	r3, [sp, #24]
 800b6ea:	42b3      	cmp	r3, r6
 800b6ec:	bfbf      	itttt	lt
 800b6ee:	9b06      	ldrlt	r3, [sp, #24]
 800b6f0:	9606      	strlt	r6, [sp, #24]
 800b6f2:	1af2      	sublt	r2, r6, r3
 800b6f4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800b6f6:	bfb6      	itet	lt
 800b6f8:	189b      	addlt	r3, r3, r2
 800b6fa:	1b9e      	subge	r6, r3, r6
 800b6fc:	930d      	strlt	r3, [sp, #52]	; 0x34
 800b6fe:	9b01      	ldr	r3, [sp, #4]
 800b700:	bfb8      	it	lt
 800b702:	2600      	movlt	r6, #0
 800b704:	2b00      	cmp	r3, #0
 800b706:	bfb5      	itete	lt
 800b708:	eba8 0503 	sublt.w	r5, r8, r3
 800b70c:	9b01      	ldrge	r3, [sp, #4]
 800b70e:	2300      	movlt	r3, #0
 800b710:	4645      	movge	r5, r8
 800b712:	e747      	b.n	800b5a4 <_dtoa_r+0x75c>
 800b714:	9e06      	ldr	r6, [sp, #24]
 800b716:	9f08      	ldr	r7, [sp, #32]
 800b718:	4645      	mov	r5, r8
 800b71a:	e74c      	b.n	800b5b6 <_dtoa_r+0x76e>
 800b71c:	9a06      	ldr	r2, [sp, #24]
 800b71e:	e775      	b.n	800b60c <_dtoa_r+0x7c4>
 800b720:	9b05      	ldr	r3, [sp, #20]
 800b722:	2b01      	cmp	r3, #1
 800b724:	dc18      	bgt.n	800b758 <_dtoa_r+0x910>
 800b726:	9b02      	ldr	r3, [sp, #8]
 800b728:	b9b3      	cbnz	r3, 800b758 <_dtoa_r+0x910>
 800b72a:	9b03      	ldr	r3, [sp, #12]
 800b72c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b730:	b9a3      	cbnz	r3, 800b75c <_dtoa_r+0x914>
 800b732:	9b03      	ldr	r3, [sp, #12]
 800b734:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b738:	0d1b      	lsrs	r3, r3, #20
 800b73a:	051b      	lsls	r3, r3, #20
 800b73c:	b12b      	cbz	r3, 800b74a <_dtoa_r+0x902>
 800b73e:	9b04      	ldr	r3, [sp, #16]
 800b740:	3301      	adds	r3, #1
 800b742:	9304      	str	r3, [sp, #16]
 800b744:	f108 0801 	add.w	r8, r8, #1
 800b748:	2301      	movs	r3, #1
 800b74a:	9306      	str	r3, [sp, #24]
 800b74c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b74e:	2b00      	cmp	r3, #0
 800b750:	f47f af74 	bne.w	800b63c <_dtoa_r+0x7f4>
 800b754:	2001      	movs	r0, #1
 800b756:	e779      	b.n	800b64c <_dtoa_r+0x804>
 800b758:	2300      	movs	r3, #0
 800b75a:	e7f6      	b.n	800b74a <_dtoa_r+0x902>
 800b75c:	9b02      	ldr	r3, [sp, #8]
 800b75e:	e7f4      	b.n	800b74a <_dtoa_r+0x902>
 800b760:	d085      	beq.n	800b66e <_dtoa_r+0x826>
 800b762:	4618      	mov	r0, r3
 800b764:	301c      	adds	r0, #28
 800b766:	e77d      	b.n	800b664 <_dtoa_r+0x81c>
 800b768:	40240000 	.word	0x40240000
 800b76c:	9b01      	ldr	r3, [sp, #4]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	dc38      	bgt.n	800b7e4 <_dtoa_r+0x99c>
 800b772:	9b05      	ldr	r3, [sp, #20]
 800b774:	2b02      	cmp	r3, #2
 800b776:	dd35      	ble.n	800b7e4 <_dtoa_r+0x99c>
 800b778:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b77c:	f1b9 0f00 	cmp.w	r9, #0
 800b780:	d10d      	bne.n	800b79e <_dtoa_r+0x956>
 800b782:	4631      	mov	r1, r6
 800b784:	464b      	mov	r3, r9
 800b786:	2205      	movs	r2, #5
 800b788:	4620      	mov	r0, r4
 800b78a:	f000 f9c5 	bl	800bb18 <__multadd>
 800b78e:	4601      	mov	r1, r0
 800b790:	4606      	mov	r6, r0
 800b792:	4658      	mov	r0, fp
 800b794:	f000 fbdc 	bl	800bf50 <__mcmp>
 800b798:	2800      	cmp	r0, #0
 800b79a:	f73f adbd 	bgt.w	800b318 <_dtoa_r+0x4d0>
 800b79e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7a0:	9d00      	ldr	r5, [sp, #0]
 800b7a2:	ea6f 0a03 	mvn.w	sl, r3
 800b7a6:	f04f 0800 	mov.w	r8, #0
 800b7aa:	4631      	mov	r1, r6
 800b7ac:	4620      	mov	r0, r4
 800b7ae:	f000 f991 	bl	800bad4 <_Bfree>
 800b7b2:	2f00      	cmp	r7, #0
 800b7b4:	f43f aeb4 	beq.w	800b520 <_dtoa_r+0x6d8>
 800b7b8:	f1b8 0f00 	cmp.w	r8, #0
 800b7bc:	d005      	beq.n	800b7ca <_dtoa_r+0x982>
 800b7be:	45b8      	cmp	r8, r7
 800b7c0:	d003      	beq.n	800b7ca <_dtoa_r+0x982>
 800b7c2:	4641      	mov	r1, r8
 800b7c4:	4620      	mov	r0, r4
 800b7c6:	f000 f985 	bl	800bad4 <_Bfree>
 800b7ca:	4639      	mov	r1, r7
 800b7cc:	4620      	mov	r0, r4
 800b7ce:	f000 f981 	bl	800bad4 <_Bfree>
 800b7d2:	e6a5      	b.n	800b520 <_dtoa_r+0x6d8>
 800b7d4:	2600      	movs	r6, #0
 800b7d6:	4637      	mov	r7, r6
 800b7d8:	e7e1      	b.n	800b79e <_dtoa_r+0x956>
 800b7da:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800b7dc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800b7e0:	4637      	mov	r7, r6
 800b7e2:	e599      	b.n	800b318 <_dtoa_r+0x4d0>
 800b7e4:	9b08      	ldr	r3, [sp, #32]
 800b7e6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	f000 80fd 	beq.w	800b9ea <_dtoa_r+0xba2>
 800b7f0:	2d00      	cmp	r5, #0
 800b7f2:	dd05      	ble.n	800b800 <_dtoa_r+0x9b8>
 800b7f4:	4639      	mov	r1, r7
 800b7f6:	462a      	mov	r2, r5
 800b7f8:	4620      	mov	r0, r4
 800b7fa:	f000 fb3d 	bl	800be78 <__lshift>
 800b7fe:	4607      	mov	r7, r0
 800b800:	9b06      	ldr	r3, [sp, #24]
 800b802:	2b00      	cmp	r3, #0
 800b804:	d05c      	beq.n	800b8c0 <_dtoa_r+0xa78>
 800b806:	6879      	ldr	r1, [r7, #4]
 800b808:	4620      	mov	r0, r4
 800b80a:	f000 f923 	bl	800ba54 <_Balloc>
 800b80e:	4605      	mov	r5, r0
 800b810:	b928      	cbnz	r0, 800b81e <_dtoa_r+0x9d6>
 800b812:	4b80      	ldr	r3, [pc, #512]	; (800ba14 <_dtoa_r+0xbcc>)
 800b814:	4602      	mov	r2, r0
 800b816:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b81a:	f7ff bb2e 	b.w	800ae7a <_dtoa_r+0x32>
 800b81e:	693a      	ldr	r2, [r7, #16]
 800b820:	3202      	adds	r2, #2
 800b822:	0092      	lsls	r2, r2, #2
 800b824:	f107 010c 	add.w	r1, r7, #12
 800b828:	300c      	adds	r0, #12
 800b82a:	f000 f905 	bl	800ba38 <memcpy>
 800b82e:	2201      	movs	r2, #1
 800b830:	4629      	mov	r1, r5
 800b832:	4620      	mov	r0, r4
 800b834:	f000 fb20 	bl	800be78 <__lshift>
 800b838:	9b00      	ldr	r3, [sp, #0]
 800b83a:	3301      	adds	r3, #1
 800b83c:	9301      	str	r3, [sp, #4]
 800b83e:	9b00      	ldr	r3, [sp, #0]
 800b840:	444b      	add	r3, r9
 800b842:	9307      	str	r3, [sp, #28]
 800b844:	9b02      	ldr	r3, [sp, #8]
 800b846:	f003 0301 	and.w	r3, r3, #1
 800b84a:	46b8      	mov	r8, r7
 800b84c:	9306      	str	r3, [sp, #24]
 800b84e:	4607      	mov	r7, r0
 800b850:	9b01      	ldr	r3, [sp, #4]
 800b852:	4631      	mov	r1, r6
 800b854:	3b01      	subs	r3, #1
 800b856:	4658      	mov	r0, fp
 800b858:	9302      	str	r3, [sp, #8]
 800b85a:	f7ff fa67 	bl	800ad2c <quorem>
 800b85e:	4603      	mov	r3, r0
 800b860:	3330      	adds	r3, #48	; 0x30
 800b862:	9004      	str	r0, [sp, #16]
 800b864:	4641      	mov	r1, r8
 800b866:	4658      	mov	r0, fp
 800b868:	9308      	str	r3, [sp, #32]
 800b86a:	f000 fb71 	bl	800bf50 <__mcmp>
 800b86e:	463a      	mov	r2, r7
 800b870:	4681      	mov	r9, r0
 800b872:	4631      	mov	r1, r6
 800b874:	4620      	mov	r0, r4
 800b876:	f000 fb87 	bl	800bf88 <__mdiff>
 800b87a:	68c2      	ldr	r2, [r0, #12]
 800b87c:	9b08      	ldr	r3, [sp, #32]
 800b87e:	4605      	mov	r5, r0
 800b880:	bb02      	cbnz	r2, 800b8c4 <_dtoa_r+0xa7c>
 800b882:	4601      	mov	r1, r0
 800b884:	4658      	mov	r0, fp
 800b886:	f000 fb63 	bl	800bf50 <__mcmp>
 800b88a:	9b08      	ldr	r3, [sp, #32]
 800b88c:	4602      	mov	r2, r0
 800b88e:	4629      	mov	r1, r5
 800b890:	4620      	mov	r0, r4
 800b892:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800b896:	f000 f91d 	bl	800bad4 <_Bfree>
 800b89a:	9b05      	ldr	r3, [sp, #20]
 800b89c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b89e:	9d01      	ldr	r5, [sp, #4]
 800b8a0:	ea43 0102 	orr.w	r1, r3, r2
 800b8a4:	9b06      	ldr	r3, [sp, #24]
 800b8a6:	430b      	orrs	r3, r1
 800b8a8:	9b08      	ldr	r3, [sp, #32]
 800b8aa:	d10d      	bne.n	800b8c8 <_dtoa_r+0xa80>
 800b8ac:	2b39      	cmp	r3, #57	; 0x39
 800b8ae:	d029      	beq.n	800b904 <_dtoa_r+0xabc>
 800b8b0:	f1b9 0f00 	cmp.w	r9, #0
 800b8b4:	dd01      	ble.n	800b8ba <_dtoa_r+0xa72>
 800b8b6:	9b04      	ldr	r3, [sp, #16]
 800b8b8:	3331      	adds	r3, #49	; 0x31
 800b8ba:	9a02      	ldr	r2, [sp, #8]
 800b8bc:	7013      	strb	r3, [r2, #0]
 800b8be:	e774      	b.n	800b7aa <_dtoa_r+0x962>
 800b8c0:	4638      	mov	r0, r7
 800b8c2:	e7b9      	b.n	800b838 <_dtoa_r+0x9f0>
 800b8c4:	2201      	movs	r2, #1
 800b8c6:	e7e2      	b.n	800b88e <_dtoa_r+0xa46>
 800b8c8:	f1b9 0f00 	cmp.w	r9, #0
 800b8cc:	db06      	blt.n	800b8dc <_dtoa_r+0xa94>
 800b8ce:	9905      	ldr	r1, [sp, #20]
 800b8d0:	ea41 0909 	orr.w	r9, r1, r9
 800b8d4:	9906      	ldr	r1, [sp, #24]
 800b8d6:	ea59 0101 	orrs.w	r1, r9, r1
 800b8da:	d120      	bne.n	800b91e <_dtoa_r+0xad6>
 800b8dc:	2a00      	cmp	r2, #0
 800b8de:	ddec      	ble.n	800b8ba <_dtoa_r+0xa72>
 800b8e0:	4659      	mov	r1, fp
 800b8e2:	2201      	movs	r2, #1
 800b8e4:	4620      	mov	r0, r4
 800b8e6:	9301      	str	r3, [sp, #4]
 800b8e8:	f000 fac6 	bl	800be78 <__lshift>
 800b8ec:	4631      	mov	r1, r6
 800b8ee:	4683      	mov	fp, r0
 800b8f0:	f000 fb2e 	bl	800bf50 <__mcmp>
 800b8f4:	2800      	cmp	r0, #0
 800b8f6:	9b01      	ldr	r3, [sp, #4]
 800b8f8:	dc02      	bgt.n	800b900 <_dtoa_r+0xab8>
 800b8fa:	d1de      	bne.n	800b8ba <_dtoa_r+0xa72>
 800b8fc:	07da      	lsls	r2, r3, #31
 800b8fe:	d5dc      	bpl.n	800b8ba <_dtoa_r+0xa72>
 800b900:	2b39      	cmp	r3, #57	; 0x39
 800b902:	d1d8      	bne.n	800b8b6 <_dtoa_r+0xa6e>
 800b904:	9a02      	ldr	r2, [sp, #8]
 800b906:	2339      	movs	r3, #57	; 0x39
 800b908:	7013      	strb	r3, [r2, #0]
 800b90a:	462b      	mov	r3, r5
 800b90c:	461d      	mov	r5, r3
 800b90e:	3b01      	subs	r3, #1
 800b910:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b914:	2a39      	cmp	r2, #57	; 0x39
 800b916:	d050      	beq.n	800b9ba <_dtoa_r+0xb72>
 800b918:	3201      	adds	r2, #1
 800b91a:	701a      	strb	r2, [r3, #0]
 800b91c:	e745      	b.n	800b7aa <_dtoa_r+0x962>
 800b91e:	2a00      	cmp	r2, #0
 800b920:	dd03      	ble.n	800b92a <_dtoa_r+0xae2>
 800b922:	2b39      	cmp	r3, #57	; 0x39
 800b924:	d0ee      	beq.n	800b904 <_dtoa_r+0xabc>
 800b926:	3301      	adds	r3, #1
 800b928:	e7c7      	b.n	800b8ba <_dtoa_r+0xa72>
 800b92a:	9a01      	ldr	r2, [sp, #4]
 800b92c:	9907      	ldr	r1, [sp, #28]
 800b92e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b932:	428a      	cmp	r2, r1
 800b934:	d02a      	beq.n	800b98c <_dtoa_r+0xb44>
 800b936:	4659      	mov	r1, fp
 800b938:	2300      	movs	r3, #0
 800b93a:	220a      	movs	r2, #10
 800b93c:	4620      	mov	r0, r4
 800b93e:	f000 f8eb 	bl	800bb18 <__multadd>
 800b942:	45b8      	cmp	r8, r7
 800b944:	4683      	mov	fp, r0
 800b946:	f04f 0300 	mov.w	r3, #0
 800b94a:	f04f 020a 	mov.w	r2, #10
 800b94e:	4641      	mov	r1, r8
 800b950:	4620      	mov	r0, r4
 800b952:	d107      	bne.n	800b964 <_dtoa_r+0xb1c>
 800b954:	f000 f8e0 	bl	800bb18 <__multadd>
 800b958:	4680      	mov	r8, r0
 800b95a:	4607      	mov	r7, r0
 800b95c:	9b01      	ldr	r3, [sp, #4]
 800b95e:	3301      	adds	r3, #1
 800b960:	9301      	str	r3, [sp, #4]
 800b962:	e775      	b.n	800b850 <_dtoa_r+0xa08>
 800b964:	f000 f8d8 	bl	800bb18 <__multadd>
 800b968:	4639      	mov	r1, r7
 800b96a:	4680      	mov	r8, r0
 800b96c:	2300      	movs	r3, #0
 800b96e:	220a      	movs	r2, #10
 800b970:	4620      	mov	r0, r4
 800b972:	f000 f8d1 	bl	800bb18 <__multadd>
 800b976:	4607      	mov	r7, r0
 800b978:	e7f0      	b.n	800b95c <_dtoa_r+0xb14>
 800b97a:	f1b9 0f00 	cmp.w	r9, #0
 800b97e:	9a00      	ldr	r2, [sp, #0]
 800b980:	bfcc      	ite	gt
 800b982:	464d      	movgt	r5, r9
 800b984:	2501      	movle	r5, #1
 800b986:	4415      	add	r5, r2
 800b988:	f04f 0800 	mov.w	r8, #0
 800b98c:	4659      	mov	r1, fp
 800b98e:	2201      	movs	r2, #1
 800b990:	4620      	mov	r0, r4
 800b992:	9301      	str	r3, [sp, #4]
 800b994:	f000 fa70 	bl	800be78 <__lshift>
 800b998:	4631      	mov	r1, r6
 800b99a:	4683      	mov	fp, r0
 800b99c:	f000 fad8 	bl	800bf50 <__mcmp>
 800b9a0:	2800      	cmp	r0, #0
 800b9a2:	dcb2      	bgt.n	800b90a <_dtoa_r+0xac2>
 800b9a4:	d102      	bne.n	800b9ac <_dtoa_r+0xb64>
 800b9a6:	9b01      	ldr	r3, [sp, #4]
 800b9a8:	07db      	lsls	r3, r3, #31
 800b9aa:	d4ae      	bmi.n	800b90a <_dtoa_r+0xac2>
 800b9ac:	462b      	mov	r3, r5
 800b9ae:	461d      	mov	r5, r3
 800b9b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b9b4:	2a30      	cmp	r2, #48	; 0x30
 800b9b6:	d0fa      	beq.n	800b9ae <_dtoa_r+0xb66>
 800b9b8:	e6f7      	b.n	800b7aa <_dtoa_r+0x962>
 800b9ba:	9a00      	ldr	r2, [sp, #0]
 800b9bc:	429a      	cmp	r2, r3
 800b9be:	d1a5      	bne.n	800b90c <_dtoa_r+0xac4>
 800b9c0:	f10a 0a01 	add.w	sl, sl, #1
 800b9c4:	2331      	movs	r3, #49	; 0x31
 800b9c6:	e779      	b.n	800b8bc <_dtoa_r+0xa74>
 800b9c8:	4b13      	ldr	r3, [pc, #76]	; (800ba18 <_dtoa_r+0xbd0>)
 800b9ca:	f7ff baaf 	b.w	800af2c <_dtoa_r+0xe4>
 800b9ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	f47f aa86 	bne.w	800aee2 <_dtoa_r+0x9a>
 800b9d6:	4b11      	ldr	r3, [pc, #68]	; (800ba1c <_dtoa_r+0xbd4>)
 800b9d8:	f7ff baa8 	b.w	800af2c <_dtoa_r+0xe4>
 800b9dc:	f1b9 0f00 	cmp.w	r9, #0
 800b9e0:	dc03      	bgt.n	800b9ea <_dtoa_r+0xba2>
 800b9e2:	9b05      	ldr	r3, [sp, #20]
 800b9e4:	2b02      	cmp	r3, #2
 800b9e6:	f73f aec9 	bgt.w	800b77c <_dtoa_r+0x934>
 800b9ea:	9d00      	ldr	r5, [sp, #0]
 800b9ec:	4631      	mov	r1, r6
 800b9ee:	4658      	mov	r0, fp
 800b9f0:	f7ff f99c 	bl	800ad2c <quorem>
 800b9f4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800b9f8:	f805 3b01 	strb.w	r3, [r5], #1
 800b9fc:	9a00      	ldr	r2, [sp, #0]
 800b9fe:	1aaa      	subs	r2, r5, r2
 800ba00:	4591      	cmp	r9, r2
 800ba02:	ddba      	ble.n	800b97a <_dtoa_r+0xb32>
 800ba04:	4659      	mov	r1, fp
 800ba06:	2300      	movs	r3, #0
 800ba08:	220a      	movs	r2, #10
 800ba0a:	4620      	mov	r0, r4
 800ba0c:	f000 f884 	bl	800bb18 <__multadd>
 800ba10:	4683      	mov	fp, r0
 800ba12:	e7eb      	b.n	800b9ec <_dtoa_r+0xba4>
 800ba14:	0800e2d3 	.word	0x0800e2d3
 800ba18:	0800e22c 	.word	0x0800e22c
 800ba1c:	0800e250 	.word	0x0800e250

0800ba20 <_localeconv_r>:
 800ba20:	4800      	ldr	r0, [pc, #0]	; (800ba24 <_localeconv_r+0x4>)
 800ba22:	4770      	bx	lr
 800ba24:	200002d0 	.word	0x200002d0

0800ba28 <malloc>:
 800ba28:	4b02      	ldr	r3, [pc, #8]	; (800ba34 <malloc+0xc>)
 800ba2a:	4601      	mov	r1, r0
 800ba2c:	6818      	ldr	r0, [r3, #0]
 800ba2e:	f000 bbef 	b.w	800c210 <_malloc_r>
 800ba32:	bf00      	nop
 800ba34:	2000017c 	.word	0x2000017c

0800ba38 <memcpy>:
 800ba38:	440a      	add	r2, r1
 800ba3a:	4291      	cmp	r1, r2
 800ba3c:	f100 33ff 	add.w	r3, r0, #4294967295
 800ba40:	d100      	bne.n	800ba44 <memcpy+0xc>
 800ba42:	4770      	bx	lr
 800ba44:	b510      	push	{r4, lr}
 800ba46:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ba4e:	4291      	cmp	r1, r2
 800ba50:	d1f9      	bne.n	800ba46 <memcpy+0xe>
 800ba52:	bd10      	pop	{r4, pc}

0800ba54 <_Balloc>:
 800ba54:	b570      	push	{r4, r5, r6, lr}
 800ba56:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ba58:	4604      	mov	r4, r0
 800ba5a:	460d      	mov	r5, r1
 800ba5c:	b976      	cbnz	r6, 800ba7c <_Balloc+0x28>
 800ba5e:	2010      	movs	r0, #16
 800ba60:	f7ff ffe2 	bl	800ba28 <malloc>
 800ba64:	4602      	mov	r2, r0
 800ba66:	6260      	str	r0, [r4, #36]	; 0x24
 800ba68:	b920      	cbnz	r0, 800ba74 <_Balloc+0x20>
 800ba6a:	4b18      	ldr	r3, [pc, #96]	; (800bacc <_Balloc+0x78>)
 800ba6c:	4818      	ldr	r0, [pc, #96]	; (800bad0 <_Balloc+0x7c>)
 800ba6e:	2166      	movs	r1, #102	; 0x66
 800ba70:	f000 fd94 	bl	800c59c <__assert_func>
 800ba74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ba78:	6006      	str	r6, [r0, #0]
 800ba7a:	60c6      	str	r6, [r0, #12]
 800ba7c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ba7e:	68f3      	ldr	r3, [r6, #12]
 800ba80:	b183      	cbz	r3, 800baa4 <_Balloc+0x50>
 800ba82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ba84:	68db      	ldr	r3, [r3, #12]
 800ba86:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ba8a:	b9b8      	cbnz	r0, 800babc <_Balloc+0x68>
 800ba8c:	2101      	movs	r1, #1
 800ba8e:	fa01 f605 	lsl.w	r6, r1, r5
 800ba92:	1d72      	adds	r2, r6, #5
 800ba94:	0092      	lsls	r2, r2, #2
 800ba96:	4620      	mov	r0, r4
 800ba98:	f000 fb5a 	bl	800c150 <_calloc_r>
 800ba9c:	b160      	cbz	r0, 800bab8 <_Balloc+0x64>
 800ba9e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800baa2:	e00e      	b.n	800bac2 <_Balloc+0x6e>
 800baa4:	2221      	movs	r2, #33	; 0x21
 800baa6:	2104      	movs	r1, #4
 800baa8:	4620      	mov	r0, r4
 800baaa:	f000 fb51 	bl	800c150 <_calloc_r>
 800baae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bab0:	60f0      	str	r0, [r6, #12]
 800bab2:	68db      	ldr	r3, [r3, #12]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d1e4      	bne.n	800ba82 <_Balloc+0x2e>
 800bab8:	2000      	movs	r0, #0
 800baba:	bd70      	pop	{r4, r5, r6, pc}
 800babc:	6802      	ldr	r2, [r0, #0]
 800babe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bac2:	2300      	movs	r3, #0
 800bac4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bac8:	e7f7      	b.n	800baba <_Balloc+0x66>
 800baca:	bf00      	nop
 800bacc:	0800e25d 	.word	0x0800e25d
 800bad0:	0800e2e4 	.word	0x0800e2e4

0800bad4 <_Bfree>:
 800bad4:	b570      	push	{r4, r5, r6, lr}
 800bad6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bad8:	4605      	mov	r5, r0
 800bada:	460c      	mov	r4, r1
 800badc:	b976      	cbnz	r6, 800bafc <_Bfree+0x28>
 800bade:	2010      	movs	r0, #16
 800bae0:	f7ff ffa2 	bl	800ba28 <malloc>
 800bae4:	4602      	mov	r2, r0
 800bae6:	6268      	str	r0, [r5, #36]	; 0x24
 800bae8:	b920      	cbnz	r0, 800baf4 <_Bfree+0x20>
 800baea:	4b09      	ldr	r3, [pc, #36]	; (800bb10 <_Bfree+0x3c>)
 800baec:	4809      	ldr	r0, [pc, #36]	; (800bb14 <_Bfree+0x40>)
 800baee:	218a      	movs	r1, #138	; 0x8a
 800baf0:	f000 fd54 	bl	800c59c <__assert_func>
 800baf4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800baf8:	6006      	str	r6, [r0, #0]
 800bafa:	60c6      	str	r6, [r0, #12]
 800bafc:	b13c      	cbz	r4, 800bb0e <_Bfree+0x3a>
 800bafe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bb00:	6862      	ldr	r2, [r4, #4]
 800bb02:	68db      	ldr	r3, [r3, #12]
 800bb04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bb08:	6021      	str	r1, [r4, #0]
 800bb0a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bb0e:	bd70      	pop	{r4, r5, r6, pc}
 800bb10:	0800e25d 	.word	0x0800e25d
 800bb14:	0800e2e4 	.word	0x0800e2e4

0800bb18 <__multadd>:
 800bb18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb1c:	690e      	ldr	r6, [r1, #16]
 800bb1e:	4607      	mov	r7, r0
 800bb20:	4698      	mov	r8, r3
 800bb22:	460c      	mov	r4, r1
 800bb24:	f101 0014 	add.w	r0, r1, #20
 800bb28:	2300      	movs	r3, #0
 800bb2a:	6805      	ldr	r5, [r0, #0]
 800bb2c:	b2a9      	uxth	r1, r5
 800bb2e:	fb02 8101 	mla	r1, r2, r1, r8
 800bb32:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800bb36:	0c2d      	lsrs	r5, r5, #16
 800bb38:	fb02 c505 	mla	r5, r2, r5, ip
 800bb3c:	b289      	uxth	r1, r1
 800bb3e:	3301      	adds	r3, #1
 800bb40:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800bb44:	429e      	cmp	r6, r3
 800bb46:	f840 1b04 	str.w	r1, [r0], #4
 800bb4a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800bb4e:	dcec      	bgt.n	800bb2a <__multadd+0x12>
 800bb50:	f1b8 0f00 	cmp.w	r8, #0
 800bb54:	d022      	beq.n	800bb9c <__multadd+0x84>
 800bb56:	68a3      	ldr	r3, [r4, #8]
 800bb58:	42b3      	cmp	r3, r6
 800bb5a:	dc19      	bgt.n	800bb90 <__multadd+0x78>
 800bb5c:	6861      	ldr	r1, [r4, #4]
 800bb5e:	4638      	mov	r0, r7
 800bb60:	3101      	adds	r1, #1
 800bb62:	f7ff ff77 	bl	800ba54 <_Balloc>
 800bb66:	4605      	mov	r5, r0
 800bb68:	b928      	cbnz	r0, 800bb76 <__multadd+0x5e>
 800bb6a:	4602      	mov	r2, r0
 800bb6c:	4b0d      	ldr	r3, [pc, #52]	; (800bba4 <__multadd+0x8c>)
 800bb6e:	480e      	ldr	r0, [pc, #56]	; (800bba8 <__multadd+0x90>)
 800bb70:	21b5      	movs	r1, #181	; 0xb5
 800bb72:	f000 fd13 	bl	800c59c <__assert_func>
 800bb76:	6922      	ldr	r2, [r4, #16]
 800bb78:	3202      	adds	r2, #2
 800bb7a:	f104 010c 	add.w	r1, r4, #12
 800bb7e:	0092      	lsls	r2, r2, #2
 800bb80:	300c      	adds	r0, #12
 800bb82:	f7ff ff59 	bl	800ba38 <memcpy>
 800bb86:	4621      	mov	r1, r4
 800bb88:	4638      	mov	r0, r7
 800bb8a:	f7ff ffa3 	bl	800bad4 <_Bfree>
 800bb8e:	462c      	mov	r4, r5
 800bb90:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800bb94:	3601      	adds	r6, #1
 800bb96:	f8c3 8014 	str.w	r8, [r3, #20]
 800bb9a:	6126      	str	r6, [r4, #16]
 800bb9c:	4620      	mov	r0, r4
 800bb9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bba2:	bf00      	nop
 800bba4:	0800e2d3 	.word	0x0800e2d3
 800bba8:	0800e2e4 	.word	0x0800e2e4

0800bbac <__hi0bits>:
 800bbac:	0c03      	lsrs	r3, r0, #16
 800bbae:	041b      	lsls	r3, r3, #16
 800bbb0:	b9d3      	cbnz	r3, 800bbe8 <__hi0bits+0x3c>
 800bbb2:	0400      	lsls	r0, r0, #16
 800bbb4:	2310      	movs	r3, #16
 800bbb6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bbba:	bf04      	itt	eq
 800bbbc:	0200      	lsleq	r0, r0, #8
 800bbbe:	3308      	addeq	r3, #8
 800bbc0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bbc4:	bf04      	itt	eq
 800bbc6:	0100      	lsleq	r0, r0, #4
 800bbc8:	3304      	addeq	r3, #4
 800bbca:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bbce:	bf04      	itt	eq
 800bbd0:	0080      	lsleq	r0, r0, #2
 800bbd2:	3302      	addeq	r3, #2
 800bbd4:	2800      	cmp	r0, #0
 800bbd6:	db05      	blt.n	800bbe4 <__hi0bits+0x38>
 800bbd8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bbdc:	f103 0301 	add.w	r3, r3, #1
 800bbe0:	bf08      	it	eq
 800bbe2:	2320      	moveq	r3, #32
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	4770      	bx	lr
 800bbe8:	2300      	movs	r3, #0
 800bbea:	e7e4      	b.n	800bbb6 <__hi0bits+0xa>

0800bbec <__lo0bits>:
 800bbec:	6803      	ldr	r3, [r0, #0]
 800bbee:	f013 0207 	ands.w	r2, r3, #7
 800bbf2:	4601      	mov	r1, r0
 800bbf4:	d00b      	beq.n	800bc0e <__lo0bits+0x22>
 800bbf6:	07da      	lsls	r2, r3, #31
 800bbf8:	d424      	bmi.n	800bc44 <__lo0bits+0x58>
 800bbfa:	0798      	lsls	r0, r3, #30
 800bbfc:	bf49      	itett	mi
 800bbfe:	085b      	lsrmi	r3, r3, #1
 800bc00:	089b      	lsrpl	r3, r3, #2
 800bc02:	2001      	movmi	r0, #1
 800bc04:	600b      	strmi	r3, [r1, #0]
 800bc06:	bf5c      	itt	pl
 800bc08:	600b      	strpl	r3, [r1, #0]
 800bc0a:	2002      	movpl	r0, #2
 800bc0c:	4770      	bx	lr
 800bc0e:	b298      	uxth	r0, r3
 800bc10:	b9b0      	cbnz	r0, 800bc40 <__lo0bits+0x54>
 800bc12:	0c1b      	lsrs	r3, r3, #16
 800bc14:	2010      	movs	r0, #16
 800bc16:	f013 0fff 	tst.w	r3, #255	; 0xff
 800bc1a:	bf04      	itt	eq
 800bc1c:	0a1b      	lsreq	r3, r3, #8
 800bc1e:	3008      	addeq	r0, #8
 800bc20:	071a      	lsls	r2, r3, #28
 800bc22:	bf04      	itt	eq
 800bc24:	091b      	lsreq	r3, r3, #4
 800bc26:	3004      	addeq	r0, #4
 800bc28:	079a      	lsls	r2, r3, #30
 800bc2a:	bf04      	itt	eq
 800bc2c:	089b      	lsreq	r3, r3, #2
 800bc2e:	3002      	addeq	r0, #2
 800bc30:	07da      	lsls	r2, r3, #31
 800bc32:	d403      	bmi.n	800bc3c <__lo0bits+0x50>
 800bc34:	085b      	lsrs	r3, r3, #1
 800bc36:	f100 0001 	add.w	r0, r0, #1
 800bc3a:	d005      	beq.n	800bc48 <__lo0bits+0x5c>
 800bc3c:	600b      	str	r3, [r1, #0]
 800bc3e:	4770      	bx	lr
 800bc40:	4610      	mov	r0, r2
 800bc42:	e7e8      	b.n	800bc16 <__lo0bits+0x2a>
 800bc44:	2000      	movs	r0, #0
 800bc46:	4770      	bx	lr
 800bc48:	2020      	movs	r0, #32
 800bc4a:	4770      	bx	lr

0800bc4c <__i2b>:
 800bc4c:	b510      	push	{r4, lr}
 800bc4e:	460c      	mov	r4, r1
 800bc50:	2101      	movs	r1, #1
 800bc52:	f7ff feff 	bl	800ba54 <_Balloc>
 800bc56:	4602      	mov	r2, r0
 800bc58:	b928      	cbnz	r0, 800bc66 <__i2b+0x1a>
 800bc5a:	4b05      	ldr	r3, [pc, #20]	; (800bc70 <__i2b+0x24>)
 800bc5c:	4805      	ldr	r0, [pc, #20]	; (800bc74 <__i2b+0x28>)
 800bc5e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800bc62:	f000 fc9b 	bl	800c59c <__assert_func>
 800bc66:	2301      	movs	r3, #1
 800bc68:	6144      	str	r4, [r0, #20]
 800bc6a:	6103      	str	r3, [r0, #16]
 800bc6c:	bd10      	pop	{r4, pc}
 800bc6e:	bf00      	nop
 800bc70:	0800e2d3 	.word	0x0800e2d3
 800bc74:	0800e2e4 	.word	0x0800e2e4

0800bc78 <__multiply>:
 800bc78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc7c:	4614      	mov	r4, r2
 800bc7e:	690a      	ldr	r2, [r1, #16]
 800bc80:	6923      	ldr	r3, [r4, #16]
 800bc82:	429a      	cmp	r2, r3
 800bc84:	bfb8      	it	lt
 800bc86:	460b      	movlt	r3, r1
 800bc88:	460d      	mov	r5, r1
 800bc8a:	bfbc      	itt	lt
 800bc8c:	4625      	movlt	r5, r4
 800bc8e:	461c      	movlt	r4, r3
 800bc90:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800bc94:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800bc98:	68ab      	ldr	r3, [r5, #8]
 800bc9a:	6869      	ldr	r1, [r5, #4]
 800bc9c:	eb0a 0709 	add.w	r7, sl, r9
 800bca0:	42bb      	cmp	r3, r7
 800bca2:	b085      	sub	sp, #20
 800bca4:	bfb8      	it	lt
 800bca6:	3101      	addlt	r1, #1
 800bca8:	f7ff fed4 	bl	800ba54 <_Balloc>
 800bcac:	b930      	cbnz	r0, 800bcbc <__multiply+0x44>
 800bcae:	4602      	mov	r2, r0
 800bcb0:	4b42      	ldr	r3, [pc, #264]	; (800bdbc <__multiply+0x144>)
 800bcb2:	4843      	ldr	r0, [pc, #268]	; (800bdc0 <__multiply+0x148>)
 800bcb4:	f240 115d 	movw	r1, #349	; 0x15d
 800bcb8:	f000 fc70 	bl	800c59c <__assert_func>
 800bcbc:	f100 0614 	add.w	r6, r0, #20
 800bcc0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800bcc4:	4633      	mov	r3, r6
 800bcc6:	2200      	movs	r2, #0
 800bcc8:	4543      	cmp	r3, r8
 800bcca:	d31e      	bcc.n	800bd0a <__multiply+0x92>
 800bccc:	f105 0c14 	add.w	ip, r5, #20
 800bcd0:	f104 0314 	add.w	r3, r4, #20
 800bcd4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800bcd8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800bcdc:	9202      	str	r2, [sp, #8]
 800bcde:	ebac 0205 	sub.w	r2, ip, r5
 800bce2:	3a15      	subs	r2, #21
 800bce4:	f022 0203 	bic.w	r2, r2, #3
 800bce8:	3204      	adds	r2, #4
 800bcea:	f105 0115 	add.w	r1, r5, #21
 800bcee:	458c      	cmp	ip, r1
 800bcf0:	bf38      	it	cc
 800bcf2:	2204      	movcc	r2, #4
 800bcf4:	9201      	str	r2, [sp, #4]
 800bcf6:	9a02      	ldr	r2, [sp, #8]
 800bcf8:	9303      	str	r3, [sp, #12]
 800bcfa:	429a      	cmp	r2, r3
 800bcfc:	d808      	bhi.n	800bd10 <__multiply+0x98>
 800bcfe:	2f00      	cmp	r7, #0
 800bd00:	dc55      	bgt.n	800bdae <__multiply+0x136>
 800bd02:	6107      	str	r7, [r0, #16]
 800bd04:	b005      	add	sp, #20
 800bd06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd0a:	f843 2b04 	str.w	r2, [r3], #4
 800bd0e:	e7db      	b.n	800bcc8 <__multiply+0x50>
 800bd10:	f8b3 a000 	ldrh.w	sl, [r3]
 800bd14:	f1ba 0f00 	cmp.w	sl, #0
 800bd18:	d020      	beq.n	800bd5c <__multiply+0xe4>
 800bd1a:	f105 0e14 	add.w	lr, r5, #20
 800bd1e:	46b1      	mov	r9, r6
 800bd20:	2200      	movs	r2, #0
 800bd22:	f85e 4b04 	ldr.w	r4, [lr], #4
 800bd26:	f8d9 b000 	ldr.w	fp, [r9]
 800bd2a:	b2a1      	uxth	r1, r4
 800bd2c:	fa1f fb8b 	uxth.w	fp, fp
 800bd30:	fb0a b101 	mla	r1, sl, r1, fp
 800bd34:	4411      	add	r1, r2
 800bd36:	f8d9 2000 	ldr.w	r2, [r9]
 800bd3a:	0c24      	lsrs	r4, r4, #16
 800bd3c:	0c12      	lsrs	r2, r2, #16
 800bd3e:	fb0a 2404 	mla	r4, sl, r4, r2
 800bd42:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800bd46:	b289      	uxth	r1, r1
 800bd48:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800bd4c:	45f4      	cmp	ip, lr
 800bd4e:	f849 1b04 	str.w	r1, [r9], #4
 800bd52:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800bd56:	d8e4      	bhi.n	800bd22 <__multiply+0xaa>
 800bd58:	9901      	ldr	r1, [sp, #4]
 800bd5a:	5072      	str	r2, [r6, r1]
 800bd5c:	9a03      	ldr	r2, [sp, #12]
 800bd5e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bd62:	3304      	adds	r3, #4
 800bd64:	f1b9 0f00 	cmp.w	r9, #0
 800bd68:	d01f      	beq.n	800bdaa <__multiply+0x132>
 800bd6a:	6834      	ldr	r4, [r6, #0]
 800bd6c:	f105 0114 	add.w	r1, r5, #20
 800bd70:	46b6      	mov	lr, r6
 800bd72:	f04f 0a00 	mov.w	sl, #0
 800bd76:	880a      	ldrh	r2, [r1, #0]
 800bd78:	f8be b002 	ldrh.w	fp, [lr, #2]
 800bd7c:	fb09 b202 	mla	r2, r9, r2, fp
 800bd80:	4492      	add	sl, r2
 800bd82:	b2a4      	uxth	r4, r4
 800bd84:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800bd88:	f84e 4b04 	str.w	r4, [lr], #4
 800bd8c:	f851 4b04 	ldr.w	r4, [r1], #4
 800bd90:	f8be 2000 	ldrh.w	r2, [lr]
 800bd94:	0c24      	lsrs	r4, r4, #16
 800bd96:	fb09 2404 	mla	r4, r9, r4, r2
 800bd9a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800bd9e:	458c      	cmp	ip, r1
 800bda0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800bda4:	d8e7      	bhi.n	800bd76 <__multiply+0xfe>
 800bda6:	9a01      	ldr	r2, [sp, #4]
 800bda8:	50b4      	str	r4, [r6, r2]
 800bdaa:	3604      	adds	r6, #4
 800bdac:	e7a3      	b.n	800bcf6 <__multiply+0x7e>
 800bdae:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d1a5      	bne.n	800bd02 <__multiply+0x8a>
 800bdb6:	3f01      	subs	r7, #1
 800bdb8:	e7a1      	b.n	800bcfe <__multiply+0x86>
 800bdba:	bf00      	nop
 800bdbc:	0800e2d3 	.word	0x0800e2d3
 800bdc0:	0800e2e4 	.word	0x0800e2e4

0800bdc4 <__pow5mult>:
 800bdc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bdc8:	4615      	mov	r5, r2
 800bdca:	f012 0203 	ands.w	r2, r2, #3
 800bdce:	4606      	mov	r6, r0
 800bdd0:	460f      	mov	r7, r1
 800bdd2:	d007      	beq.n	800bde4 <__pow5mult+0x20>
 800bdd4:	4c25      	ldr	r4, [pc, #148]	; (800be6c <__pow5mult+0xa8>)
 800bdd6:	3a01      	subs	r2, #1
 800bdd8:	2300      	movs	r3, #0
 800bdda:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bdde:	f7ff fe9b 	bl	800bb18 <__multadd>
 800bde2:	4607      	mov	r7, r0
 800bde4:	10ad      	asrs	r5, r5, #2
 800bde6:	d03d      	beq.n	800be64 <__pow5mult+0xa0>
 800bde8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800bdea:	b97c      	cbnz	r4, 800be0c <__pow5mult+0x48>
 800bdec:	2010      	movs	r0, #16
 800bdee:	f7ff fe1b 	bl	800ba28 <malloc>
 800bdf2:	4602      	mov	r2, r0
 800bdf4:	6270      	str	r0, [r6, #36]	; 0x24
 800bdf6:	b928      	cbnz	r0, 800be04 <__pow5mult+0x40>
 800bdf8:	4b1d      	ldr	r3, [pc, #116]	; (800be70 <__pow5mult+0xac>)
 800bdfa:	481e      	ldr	r0, [pc, #120]	; (800be74 <__pow5mult+0xb0>)
 800bdfc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800be00:	f000 fbcc 	bl	800c59c <__assert_func>
 800be04:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800be08:	6004      	str	r4, [r0, #0]
 800be0a:	60c4      	str	r4, [r0, #12]
 800be0c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800be10:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800be14:	b94c      	cbnz	r4, 800be2a <__pow5mult+0x66>
 800be16:	f240 2171 	movw	r1, #625	; 0x271
 800be1a:	4630      	mov	r0, r6
 800be1c:	f7ff ff16 	bl	800bc4c <__i2b>
 800be20:	2300      	movs	r3, #0
 800be22:	f8c8 0008 	str.w	r0, [r8, #8]
 800be26:	4604      	mov	r4, r0
 800be28:	6003      	str	r3, [r0, #0]
 800be2a:	f04f 0900 	mov.w	r9, #0
 800be2e:	07eb      	lsls	r3, r5, #31
 800be30:	d50a      	bpl.n	800be48 <__pow5mult+0x84>
 800be32:	4639      	mov	r1, r7
 800be34:	4622      	mov	r2, r4
 800be36:	4630      	mov	r0, r6
 800be38:	f7ff ff1e 	bl	800bc78 <__multiply>
 800be3c:	4639      	mov	r1, r7
 800be3e:	4680      	mov	r8, r0
 800be40:	4630      	mov	r0, r6
 800be42:	f7ff fe47 	bl	800bad4 <_Bfree>
 800be46:	4647      	mov	r7, r8
 800be48:	106d      	asrs	r5, r5, #1
 800be4a:	d00b      	beq.n	800be64 <__pow5mult+0xa0>
 800be4c:	6820      	ldr	r0, [r4, #0]
 800be4e:	b938      	cbnz	r0, 800be60 <__pow5mult+0x9c>
 800be50:	4622      	mov	r2, r4
 800be52:	4621      	mov	r1, r4
 800be54:	4630      	mov	r0, r6
 800be56:	f7ff ff0f 	bl	800bc78 <__multiply>
 800be5a:	6020      	str	r0, [r4, #0]
 800be5c:	f8c0 9000 	str.w	r9, [r0]
 800be60:	4604      	mov	r4, r0
 800be62:	e7e4      	b.n	800be2e <__pow5mult+0x6a>
 800be64:	4638      	mov	r0, r7
 800be66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be6a:	bf00      	nop
 800be6c:	0800e438 	.word	0x0800e438
 800be70:	0800e25d 	.word	0x0800e25d
 800be74:	0800e2e4 	.word	0x0800e2e4

0800be78 <__lshift>:
 800be78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be7c:	460c      	mov	r4, r1
 800be7e:	6849      	ldr	r1, [r1, #4]
 800be80:	6923      	ldr	r3, [r4, #16]
 800be82:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800be86:	68a3      	ldr	r3, [r4, #8]
 800be88:	4607      	mov	r7, r0
 800be8a:	4691      	mov	r9, r2
 800be8c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800be90:	f108 0601 	add.w	r6, r8, #1
 800be94:	42b3      	cmp	r3, r6
 800be96:	db0b      	blt.n	800beb0 <__lshift+0x38>
 800be98:	4638      	mov	r0, r7
 800be9a:	f7ff fddb 	bl	800ba54 <_Balloc>
 800be9e:	4605      	mov	r5, r0
 800bea0:	b948      	cbnz	r0, 800beb6 <__lshift+0x3e>
 800bea2:	4602      	mov	r2, r0
 800bea4:	4b28      	ldr	r3, [pc, #160]	; (800bf48 <__lshift+0xd0>)
 800bea6:	4829      	ldr	r0, [pc, #164]	; (800bf4c <__lshift+0xd4>)
 800bea8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800beac:	f000 fb76 	bl	800c59c <__assert_func>
 800beb0:	3101      	adds	r1, #1
 800beb2:	005b      	lsls	r3, r3, #1
 800beb4:	e7ee      	b.n	800be94 <__lshift+0x1c>
 800beb6:	2300      	movs	r3, #0
 800beb8:	f100 0114 	add.w	r1, r0, #20
 800bebc:	f100 0210 	add.w	r2, r0, #16
 800bec0:	4618      	mov	r0, r3
 800bec2:	4553      	cmp	r3, sl
 800bec4:	db33      	blt.n	800bf2e <__lshift+0xb6>
 800bec6:	6920      	ldr	r0, [r4, #16]
 800bec8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800becc:	f104 0314 	add.w	r3, r4, #20
 800bed0:	f019 091f 	ands.w	r9, r9, #31
 800bed4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bed8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bedc:	d02b      	beq.n	800bf36 <__lshift+0xbe>
 800bede:	f1c9 0e20 	rsb	lr, r9, #32
 800bee2:	468a      	mov	sl, r1
 800bee4:	2200      	movs	r2, #0
 800bee6:	6818      	ldr	r0, [r3, #0]
 800bee8:	fa00 f009 	lsl.w	r0, r0, r9
 800beec:	4302      	orrs	r2, r0
 800beee:	f84a 2b04 	str.w	r2, [sl], #4
 800bef2:	f853 2b04 	ldr.w	r2, [r3], #4
 800bef6:	459c      	cmp	ip, r3
 800bef8:	fa22 f20e 	lsr.w	r2, r2, lr
 800befc:	d8f3      	bhi.n	800bee6 <__lshift+0x6e>
 800befe:	ebac 0304 	sub.w	r3, ip, r4
 800bf02:	3b15      	subs	r3, #21
 800bf04:	f023 0303 	bic.w	r3, r3, #3
 800bf08:	3304      	adds	r3, #4
 800bf0a:	f104 0015 	add.w	r0, r4, #21
 800bf0e:	4584      	cmp	ip, r0
 800bf10:	bf38      	it	cc
 800bf12:	2304      	movcc	r3, #4
 800bf14:	50ca      	str	r2, [r1, r3]
 800bf16:	b10a      	cbz	r2, 800bf1c <__lshift+0xa4>
 800bf18:	f108 0602 	add.w	r6, r8, #2
 800bf1c:	3e01      	subs	r6, #1
 800bf1e:	4638      	mov	r0, r7
 800bf20:	612e      	str	r6, [r5, #16]
 800bf22:	4621      	mov	r1, r4
 800bf24:	f7ff fdd6 	bl	800bad4 <_Bfree>
 800bf28:	4628      	mov	r0, r5
 800bf2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf2e:	f842 0f04 	str.w	r0, [r2, #4]!
 800bf32:	3301      	adds	r3, #1
 800bf34:	e7c5      	b.n	800bec2 <__lshift+0x4a>
 800bf36:	3904      	subs	r1, #4
 800bf38:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf3c:	f841 2f04 	str.w	r2, [r1, #4]!
 800bf40:	459c      	cmp	ip, r3
 800bf42:	d8f9      	bhi.n	800bf38 <__lshift+0xc0>
 800bf44:	e7ea      	b.n	800bf1c <__lshift+0xa4>
 800bf46:	bf00      	nop
 800bf48:	0800e2d3 	.word	0x0800e2d3
 800bf4c:	0800e2e4 	.word	0x0800e2e4

0800bf50 <__mcmp>:
 800bf50:	b530      	push	{r4, r5, lr}
 800bf52:	6902      	ldr	r2, [r0, #16]
 800bf54:	690c      	ldr	r4, [r1, #16]
 800bf56:	1b12      	subs	r2, r2, r4
 800bf58:	d10e      	bne.n	800bf78 <__mcmp+0x28>
 800bf5a:	f100 0314 	add.w	r3, r0, #20
 800bf5e:	3114      	adds	r1, #20
 800bf60:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bf64:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bf68:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bf6c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bf70:	42a5      	cmp	r5, r4
 800bf72:	d003      	beq.n	800bf7c <__mcmp+0x2c>
 800bf74:	d305      	bcc.n	800bf82 <__mcmp+0x32>
 800bf76:	2201      	movs	r2, #1
 800bf78:	4610      	mov	r0, r2
 800bf7a:	bd30      	pop	{r4, r5, pc}
 800bf7c:	4283      	cmp	r3, r0
 800bf7e:	d3f3      	bcc.n	800bf68 <__mcmp+0x18>
 800bf80:	e7fa      	b.n	800bf78 <__mcmp+0x28>
 800bf82:	f04f 32ff 	mov.w	r2, #4294967295
 800bf86:	e7f7      	b.n	800bf78 <__mcmp+0x28>

0800bf88 <__mdiff>:
 800bf88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf8c:	460c      	mov	r4, r1
 800bf8e:	4606      	mov	r6, r0
 800bf90:	4611      	mov	r1, r2
 800bf92:	4620      	mov	r0, r4
 800bf94:	4617      	mov	r7, r2
 800bf96:	f7ff ffdb 	bl	800bf50 <__mcmp>
 800bf9a:	1e05      	subs	r5, r0, #0
 800bf9c:	d110      	bne.n	800bfc0 <__mdiff+0x38>
 800bf9e:	4629      	mov	r1, r5
 800bfa0:	4630      	mov	r0, r6
 800bfa2:	f7ff fd57 	bl	800ba54 <_Balloc>
 800bfa6:	b930      	cbnz	r0, 800bfb6 <__mdiff+0x2e>
 800bfa8:	4b39      	ldr	r3, [pc, #228]	; (800c090 <__mdiff+0x108>)
 800bfaa:	4602      	mov	r2, r0
 800bfac:	f240 2132 	movw	r1, #562	; 0x232
 800bfb0:	4838      	ldr	r0, [pc, #224]	; (800c094 <__mdiff+0x10c>)
 800bfb2:	f000 faf3 	bl	800c59c <__assert_func>
 800bfb6:	2301      	movs	r3, #1
 800bfb8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bfbc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfc0:	bfa4      	itt	ge
 800bfc2:	463b      	movge	r3, r7
 800bfc4:	4627      	movge	r7, r4
 800bfc6:	4630      	mov	r0, r6
 800bfc8:	6879      	ldr	r1, [r7, #4]
 800bfca:	bfa6      	itte	ge
 800bfcc:	461c      	movge	r4, r3
 800bfce:	2500      	movge	r5, #0
 800bfd0:	2501      	movlt	r5, #1
 800bfd2:	f7ff fd3f 	bl	800ba54 <_Balloc>
 800bfd6:	b920      	cbnz	r0, 800bfe2 <__mdiff+0x5a>
 800bfd8:	4b2d      	ldr	r3, [pc, #180]	; (800c090 <__mdiff+0x108>)
 800bfda:	4602      	mov	r2, r0
 800bfdc:	f44f 7110 	mov.w	r1, #576	; 0x240
 800bfe0:	e7e6      	b.n	800bfb0 <__mdiff+0x28>
 800bfe2:	693e      	ldr	r6, [r7, #16]
 800bfe4:	60c5      	str	r5, [r0, #12]
 800bfe6:	6925      	ldr	r5, [r4, #16]
 800bfe8:	f107 0114 	add.w	r1, r7, #20
 800bfec:	f104 0914 	add.w	r9, r4, #20
 800bff0:	f100 0e14 	add.w	lr, r0, #20
 800bff4:	f107 0210 	add.w	r2, r7, #16
 800bff8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800bffc:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800c000:	46f2      	mov	sl, lr
 800c002:	2700      	movs	r7, #0
 800c004:	f859 3b04 	ldr.w	r3, [r9], #4
 800c008:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c00c:	fa1f f883 	uxth.w	r8, r3
 800c010:	fa17 f78b 	uxtah	r7, r7, fp
 800c014:	0c1b      	lsrs	r3, r3, #16
 800c016:	eba7 0808 	sub.w	r8, r7, r8
 800c01a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c01e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c022:	fa1f f888 	uxth.w	r8, r8
 800c026:	141f      	asrs	r7, r3, #16
 800c028:	454d      	cmp	r5, r9
 800c02a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c02e:	f84a 3b04 	str.w	r3, [sl], #4
 800c032:	d8e7      	bhi.n	800c004 <__mdiff+0x7c>
 800c034:	1b2b      	subs	r3, r5, r4
 800c036:	3b15      	subs	r3, #21
 800c038:	f023 0303 	bic.w	r3, r3, #3
 800c03c:	3304      	adds	r3, #4
 800c03e:	3415      	adds	r4, #21
 800c040:	42a5      	cmp	r5, r4
 800c042:	bf38      	it	cc
 800c044:	2304      	movcc	r3, #4
 800c046:	4419      	add	r1, r3
 800c048:	4473      	add	r3, lr
 800c04a:	469e      	mov	lr, r3
 800c04c:	460d      	mov	r5, r1
 800c04e:	4565      	cmp	r5, ip
 800c050:	d30e      	bcc.n	800c070 <__mdiff+0xe8>
 800c052:	f10c 0203 	add.w	r2, ip, #3
 800c056:	1a52      	subs	r2, r2, r1
 800c058:	f022 0203 	bic.w	r2, r2, #3
 800c05c:	3903      	subs	r1, #3
 800c05e:	458c      	cmp	ip, r1
 800c060:	bf38      	it	cc
 800c062:	2200      	movcc	r2, #0
 800c064:	441a      	add	r2, r3
 800c066:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c06a:	b17b      	cbz	r3, 800c08c <__mdiff+0x104>
 800c06c:	6106      	str	r6, [r0, #16]
 800c06e:	e7a5      	b.n	800bfbc <__mdiff+0x34>
 800c070:	f855 8b04 	ldr.w	r8, [r5], #4
 800c074:	fa17 f488 	uxtah	r4, r7, r8
 800c078:	1422      	asrs	r2, r4, #16
 800c07a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800c07e:	b2a4      	uxth	r4, r4
 800c080:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800c084:	f84e 4b04 	str.w	r4, [lr], #4
 800c088:	1417      	asrs	r7, r2, #16
 800c08a:	e7e0      	b.n	800c04e <__mdiff+0xc6>
 800c08c:	3e01      	subs	r6, #1
 800c08e:	e7ea      	b.n	800c066 <__mdiff+0xde>
 800c090:	0800e2d3 	.word	0x0800e2d3
 800c094:	0800e2e4 	.word	0x0800e2e4

0800c098 <__d2b>:
 800c098:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c09c:	4689      	mov	r9, r1
 800c09e:	2101      	movs	r1, #1
 800c0a0:	ec57 6b10 	vmov	r6, r7, d0
 800c0a4:	4690      	mov	r8, r2
 800c0a6:	f7ff fcd5 	bl	800ba54 <_Balloc>
 800c0aa:	4604      	mov	r4, r0
 800c0ac:	b930      	cbnz	r0, 800c0bc <__d2b+0x24>
 800c0ae:	4602      	mov	r2, r0
 800c0b0:	4b25      	ldr	r3, [pc, #148]	; (800c148 <__d2b+0xb0>)
 800c0b2:	4826      	ldr	r0, [pc, #152]	; (800c14c <__d2b+0xb4>)
 800c0b4:	f240 310a 	movw	r1, #778	; 0x30a
 800c0b8:	f000 fa70 	bl	800c59c <__assert_func>
 800c0bc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c0c0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c0c4:	bb35      	cbnz	r5, 800c114 <__d2b+0x7c>
 800c0c6:	2e00      	cmp	r6, #0
 800c0c8:	9301      	str	r3, [sp, #4]
 800c0ca:	d028      	beq.n	800c11e <__d2b+0x86>
 800c0cc:	4668      	mov	r0, sp
 800c0ce:	9600      	str	r6, [sp, #0]
 800c0d0:	f7ff fd8c 	bl	800bbec <__lo0bits>
 800c0d4:	9900      	ldr	r1, [sp, #0]
 800c0d6:	b300      	cbz	r0, 800c11a <__d2b+0x82>
 800c0d8:	9a01      	ldr	r2, [sp, #4]
 800c0da:	f1c0 0320 	rsb	r3, r0, #32
 800c0de:	fa02 f303 	lsl.w	r3, r2, r3
 800c0e2:	430b      	orrs	r3, r1
 800c0e4:	40c2      	lsrs	r2, r0
 800c0e6:	6163      	str	r3, [r4, #20]
 800c0e8:	9201      	str	r2, [sp, #4]
 800c0ea:	9b01      	ldr	r3, [sp, #4]
 800c0ec:	61a3      	str	r3, [r4, #24]
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	bf14      	ite	ne
 800c0f2:	2202      	movne	r2, #2
 800c0f4:	2201      	moveq	r2, #1
 800c0f6:	6122      	str	r2, [r4, #16]
 800c0f8:	b1d5      	cbz	r5, 800c130 <__d2b+0x98>
 800c0fa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c0fe:	4405      	add	r5, r0
 800c100:	f8c9 5000 	str.w	r5, [r9]
 800c104:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c108:	f8c8 0000 	str.w	r0, [r8]
 800c10c:	4620      	mov	r0, r4
 800c10e:	b003      	add	sp, #12
 800c110:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c114:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c118:	e7d5      	b.n	800c0c6 <__d2b+0x2e>
 800c11a:	6161      	str	r1, [r4, #20]
 800c11c:	e7e5      	b.n	800c0ea <__d2b+0x52>
 800c11e:	a801      	add	r0, sp, #4
 800c120:	f7ff fd64 	bl	800bbec <__lo0bits>
 800c124:	9b01      	ldr	r3, [sp, #4]
 800c126:	6163      	str	r3, [r4, #20]
 800c128:	2201      	movs	r2, #1
 800c12a:	6122      	str	r2, [r4, #16]
 800c12c:	3020      	adds	r0, #32
 800c12e:	e7e3      	b.n	800c0f8 <__d2b+0x60>
 800c130:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c134:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c138:	f8c9 0000 	str.w	r0, [r9]
 800c13c:	6918      	ldr	r0, [r3, #16]
 800c13e:	f7ff fd35 	bl	800bbac <__hi0bits>
 800c142:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c146:	e7df      	b.n	800c108 <__d2b+0x70>
 800c148:	0800e2d3 	.word	0x0800e2d3
 800c14c:	0800e2e4 	.word	0x0800e2e4

0800c150 <_calloc_r>:
 800c150:	b513      	push	{r0, r1, r4, lr}
 800c152:	434a      	muls	r2, r1
 800c154:	4611      	mov	r1, r2
 800c156:	9201      	str	r2, [sp, #4]
 800c158:	f000 f85a 	bl	800c210 <_malloc_r>
 800c15c:	4604      	mov	r4, r0
 800c15e:	b118      	cbz	r0, 800c168 <_calloc_r+0x18>
 800c160:	9a01      	ldr	r2, [sp, #4]
 800c162:	2100      	movs	r1, #0
 800c164:	f7fe f950 	bl	800a408 <memset>
 800c168:	4620      	mov	r0, r4
 800c16a:	b002      	add	sp, #8
 800c16c:	bd10      	pop	{r4, pc}
	...

0800c170 <_free_r>:
 800c170:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c172:	2900      	cmp	r1, #0
 800c174:	d048      	beq.n	800c208 <_free_r+0x98>
 800c176:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c17a:	9001      	str	r0, [sp, #4]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	f1a1 0404 	sub.w	r4, r1, #4
 800c182:	bfb8      	it	lt
 800c184:	18e4      	addlt	r4, r4, r3
 800c186:	f000 fa65 	bl	800c654 <__malloc_lock>
 800c18a:	4a20      	ldr	r2, [pc, #128]	; (800c20c <_free_r+0x9c>)
 800c18c:	9801      	ldr	r0, [sp, #4]
 800c18e:	6813      	ldr	r3, [r2, #0]
 800c190:	4615      	mov	r5, r2
 800c192:	b933      	cbnz	r3, 800c1a2 <_free_r+0x32>
 800c194:	6063      	str	r3, [r4, #4]
 800c196:	6014      	str	r4, [r2, #0]
 800c198:	b003      	add	sp, #12
 800c19a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c19e:	f000 ba5f 	b.w	800c660 <__malloc_unlock>
 800c1a2:	42a3      	cmp	r3, r4
 800c1a4:	d90b      	bls.n	800c1be <_free_r+0x4e>
 800c1a6:	6821      	ldr	r1, [r4, #0]
 800c1a8:	1862      	adds	r2, r4, r1
 800c1aa:	4293      	cmp	r3, r2
 800c1ac:	bf04      	itt	eq
 800c1ae:	681a      	ldreq	r2, [r3, #0]
 800c1b0:	685b      	ldreq	r3, [r3, #4]
 800c1b2:	6063      	str	r3, [r4, #4]
 800c1b4:	bf04      	itt	eq
 800c1b6:	1852      	addeq	r2, r2, r1
 800c1b8:	6022      	streq	r2, [r4, #0]
 800c1ba:	602c      	str	r4, [r5, #0]
 800c1bc:	e7ec      	b.n	800c198 <_free_r+0x28>
 800c1be:	461a      	mov	r2, r3
 800c1c0:	685b      	ldr	r3, [r3, #4]
 800c1c2:	b10b      	cbz	r3, 800c1c8 <_free_r+0x58>
 800c1c4:	42a3      	cmp	r3, r4
 800c1c6:	d9fa      	bls.n	800c1be <_free_r+0x4e>
 800c1c8:	6811      	ldr	r1, [r2, #0]
 800c1ca:	1855      	adds	r5, r2, r1
 800c1cc:	42a5      	cmp	r5, r4
 800c1ce:	d10b      	bne.n	800c1e8 <_free_r+0x78>
 800c1d0:	6824      	ldr	r4, [r4, #0]
 800c1d2:	4421      	add	r1, r4
 800c1d4:	1854      	adds	r4, r2, r1
 800c1d6:	42a3      	cmp	r3, r4
 800c1d8:	6011      	str	r1, [r2, #0]
 800c1da:	d1dd      	bne.n	800c198 <_free_r+0x28>
 800c1dc:	681c      	ldr	r4, [r3, #0]
 800c1de:	685b      	ldr	r3, [r3, #4]
 800c1e0:	6053      	str	r3, [r2, #4]
 800c1e2:	4421      	add	r1, r4
 800c1e4:	6011      	str	r1, [r2, #0]
 800c1e6:	e7d7      	b.n	800c198 <_free_r+0x28>
 800c1e8:	d902      	bls.n	800c1f0 <_free_r+0x80>
 800c1ea:	230c      	movs	r3, #12
 800c1ec:	6003      	str	r3, [r0, #0]
 800c1ee:	e7d3      	b.n	800c198 <_free_r+0x28>
 800c1f0:	6825      	ldr	r5, [r4, #0]
 800c1f2:	1961      	adds	r1, r4, r5
 800c1f4:	428b      	cmp	r3, r1
 800c1f6:	bf04      	itt	eq
 800c1f8:	6819      	ldreq	r1, [r3, #0]
 800c1fa:	685b      	ldreq	r3, [r3, #4]
 800c1fc:	6063      	str	r3, [r4, #4]
 800c1fe:	bf04      	itt	eq
 800c200:	1949      	addeq	r1, r1, r5
 800c202:	6021      	streq	r1, [r4, #0]
 800c204:	6054      	str	r4, [r2, #4]
 800c206:	e7c7      	b.n	800c198 <_free_r+0x28>
 800c208:	b003      	add	sp, #12
 800c20a:	bd30      	pop	{r4, r5, pc}
 800c20c:	20000594 	.word	0x20000594

0800c210 <_malloc_r>:
 800c210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c212:	1ccd      	adds	r5, r1, #3
 800c214:	f025 0503 	bic.w	r5, r5, #3
 800c218:	3508      	adds	r5, #8
 800c21a:	2d0c      	cmp	r5, #12
 800c21c:	bf38      	it	cc
 800c21e:	250c      	movcc	r5, #12
 800c220:	2d00      	cmp	r5, #0
 800c222:	4606      	mov	r6, r0
 800c224:	db01      	blt.n	800c22a <_malloc_r+0x1a>
 800c226:	42a9      	cmp	r1, r5
 800c228:	d903      	bls.n	800c232 <_malloc_r+0x22>
 800c22a:	230c      	movs	r3, #12
 800c22c:	6033      	str	r3, [r6, #0]
 800c22e:	2000      	movs	r0, #0
 800c230:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c232:	f000 fa0f 	bl	800c654 <__malloc_lock>
 800c236:	4921      	ldr	r1, [pc, #132]	; (800c2bc <_malloc_r+0xac>)
 800c238:	680a      	ldr	r2, [r1, #0]
 800c23a:	4614      	mov	r4, r2
 800c23c:	b99c      	cbnz	r4, 800c266 <_malloc_r+0x56>
 800c23e:	4f20      	ldr	r7, [pc, #128]	; (800c2c0 <_malloc_r+0xb0>)
 800c240:	683b      	ldr	r3, [r7, #0]
 800c242:	b923      	cbnz	r3, 800c24e <_malloc_r+0x3e>
 800c244:	4621      	mov	r1, r4
 800c246:	4630      	mov	r0, r6
 800c248:	f000 f998 	bl	800c57c <_sbrk_r>
 800c24c:	6038      	str	r0, [r7, #0]
 800c24e:	4629      	mov	r1, r5
 800c250:	4630      	mov	r0, r6
 800c252:	f000 f993 	bl	800c57c <_sbrk_r>
 800c256:	1c43      	adds	r3, r0, #1
 800c258:	d123      	bne.n	800c2a2 <_malloc_r+0x92>
 800c25a:	230c      	movs	r3, #12
 800c25c:	6033      	str	r3, [r6, #0]
 800c25e:	4630      	mov	r0, r6
 800c260:	f000 f9fe 	bl	800c660 <__malloc_unlock>
 800c264:	e7e3      	b.n	800c22e <_malloc_r+0x1e>
 800c266:	6823      	ldr	r3, [r4, #0]
 800c268:	1b5b      	subs	r3, r3, r5
 800c26a:	d417      	bmi.n	800c29c <_malloc_r+0x8c>
 800c26c:	2b0b      	cmp	r3, #11
 800c26e:	d903      	bls.n	800c278 <_malloc_r+0x68>
 800c270:	6023      	str	r3, [r4, #0]
 800c272:	441c      	add	r4, r3
 800c274:	6025      	str	r5, [r4, #0]
 800c276:	e004      	b.n	800c282 <_malloc_r+0x72>
 800c278:	6863      	ldr	r3, [r4, #4]
 800c27a:	42a2      	cmp	r2, r4
 800c27c:	bf0c      	ite	eq
 800c27e:	600b      	streq	r3, [r1, #0]
 800c280:	6053      	strne	r3, [r2, #4]
 800c282:	4630      	mov	r0, r6
 800c284:	f000 f9ec 	bl	800c660 <__malloc_unlock>
 800c288:	f104 000b 	add.w	r0, r4, #11
 800c28c:	1d23      	adds	r3, r4, #4
 800c28e:	f020 0007 	bic.w	r0, r0, #7
 800c292:	1ac2      	subs	r2, r0, r3
 800c294:	d0cc      	beq.n	800c230 <_malloc_r+0x20>
 800c296:	1a1b      	subs	r3, r3, r0
 800c298:	50a3      	str	r3, [r4, r2]
 800c29a:	e7c9      	b.n	800c230 <_malloc_r+0x20>
 800c29c:	4622      	mov	r2, r4
 800c29e:	6864      	ldr	r4, [r4, #4]
 800c2a0:	e7cc      	b.n	800c23c <_malloc_r+0x2c>
 800c2a2:	1cc4      	adds	r4, r0, #3
 800c2a4:	f024 0403 	bic.w	r4, r4, #3
 800c2a8:	42a0      	cmp	r0, r4
 800c2aa:	d0e3      	beq.n	800c274 <_malloc_r+0x64>
 800c2ac:	1a21      	subs	r1, r4, r0
 800c2ae:	4630      	mov	r0, r6
 800c2b0:	f000 f964 	bl	800c57c <_sbrk_r>
 800c2b4:	3001      	adds	r0, #1
 800c2b6:	d1dd      	bne.n	800c274 <_malloc_r+0x64>
 800c2b8:	e7cf      	b.n	800c25a <_malloc_r+0x4a>
 800c2ba:	bf00      	nop
 800c2bc:	20000594 	.word	0x20000594
 800c2c0:	20000598 	.word	0x20000598

0800c2c4 <__ssputs_r>:
 800c2c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c2c8:	688e      	ldr	r6, [r1, #8]
 800c2ca:	429e      	cmp	r6, r3
 800c2cc:	4682      	mov	sl, r0
 800c2ce:	460c      	mov	r4, r1
 800c2d0:	4690      	mov	r8, r2
 800c2d2:	461f      	mov	r7, r3
 800c2d4:	d838      	bhi.n	800c348 <__ssputs_r+0x84>
 800c2d6:	898a      	ldrh	r2, [r1, #12]
 800c2d8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c2dc:	d032      	beq.n	800c344 <__ssputs_r+0x80>
 800c2de:	6825      	ldr	r5, [r4, #0]
 800c2e0:	6909      	ldr	r1, [r1, #16]
 800c2e2:	eba5 0901 	sub.w	r9, r5, r1
 800c2e6:	6965      	ldr	r5, [r4, #20]
 800c2e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c2ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c2f0:	3301      	adds	r3, #1
 800c2f2:	444b      	add	r3, r9
 800c2f4:	106d      	asrs	r5, r5, #1
 800c2f6:	429d      	cmp	r5, r3
 800c2f8:	bf38      	it	cc
 800c2fa:	461d      	movcc	r5, r3
 800c2fc:	0553      	lsls	r3, r2, #21
 800c2fe:	d531      	bpl.n	800c364 <__ssputs_r+0xa0>
 800c300:	4629      	mov	r1, r5
 800c302:	f7ff ff85 	bl	800c210 <_malloc_r>
 800c306:	4606      	mov	r6, r0
 800c308:	b950      	cbnz	r0, 800c320 <__ssputs_r+0x5c>
 800c30a:	230c      	movs	r3, #12
 800c30c:	f8ca 3000 	str.w	r3, [sl]
 800c310:	89a3      	ldrh	r3, [r4, #12]
 800c312:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c316:	81a3      	strh	r3, [r4, #12]
 800c318:	f04f 30ff 	mov.w	r0, #4294967295
 800c31c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c320:	6921      	ldr	r1, [r4, #16]
 800c322:	464a      	mov	r2, r9
 800c324:	f7ff fb88 	bl	800ba38 <memcpy>
 800c328:	89a3      	ldrh	r3, [r4, #12]
 800c32a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c32e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c332:	81a3      	strh	r3, [r4, #12]
 800c334:	6126      	str	r6, [r4, #16]
 800c336:	6165      	str	r5, [r4, #20]
 800c338:	444e      	add	r6, r9
 800c33a:	eba5 0509 	sub.w	r5, r5, r9
 800c33e:	6026      	str	r6, [r4, #0]
 800c340:	60a5      	str	r5, [r4, #8]
 800c342:	463e      	mov	r6, r7
 800c344:	42be      	cmp	r6, r7
 800c346:	d900      	bls.n	800c34a <__ssputs_r+0x86>
 800c348:	463e      	mov	r6, r7
 800c34a:	4632      	mov	r2, r6
 800c34c:	6820      	ldr	r0, [r4, #0]
 800c34e:	4641      	mov	r1, r8
 800c350:	f000 f966 	bl	800c620 <memmove>
 800c354:	68a3      	ldr	r3, [r4, #8]
 800c356:	6822      	ldr	r2, [r4, #0]
 800c358:	1b9b      	subs	r3, r3, r6
 800c35a:	4432      	add	r2, r6
 800c35c:	60a3      	str	r3, [r4, #8]
 800c35e:	6022      	str	r2, [r4, #0]
 800c360:	2000      	movs	r0, #0
 800c362:	e7db      	b.n	800c31c <__ssputs_r+0x58>
 800c364:	462a      	mov	r2, r5
 800c366:	f000 f981 	bl	800c66c <_realloc_r>
 800c36a:	4606      	mov	r6, r0
 800c36c:	2800      	cmp	r0, #0
 800c36e:	d1e1      	bne.n	800c334 <__ssputs_r+0x70>
 800c370:	6921      	ldr	r1, [r4, #16]
 800c372:	4650      	mov	r0, sl
 800c374:	f7ff fefc 	bl	800c170 <_free_r>
 800c378:	e7c7      	b.n	800c30a <__ssputs_r+0x46>
	...

0800c37c <_svfiprintf_r>:
 800c37c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c380:	4698      	mov	r8, r3
 800c382:	898b      	ldrh	r3, [r1, #12]
 800c384:	061b      	lsls	r3, r3, #24
 800c386:	b09d      	sub	sp, #116	; 0x74
 800c388:	4607      	mov	r7, r0
 800c38a:	460d      	mov	r5, r1
 800c38c:	4614      	mov	r4, r2
 800c38e:	d50e      	bpl.n	800c3ae <_svfiprintf_r+0x32>
 800c390:	690b      	ldr	r3, [r1, #16]
 800c392:	b963      	cbnz	r3, 800c3ae <_svfiprintf_r+0x32>
 800c394:	2140      	movs	r1, #64	; 0x40
 800c396:	f7ff ff3b 	bl	800c210 <_malloc_r>
 800c39a:	6028      	str	r0, [r5, #0]
 800c39c:	6128      	str	r0, [r5, #16]
 800c39e:	b920      	cbnz	r0, 800c3aa <_svfiprintf_r+0x2e>
 800c3a0:	230c      	movs	r3, #12
 800c3a2:	603b      	str	r3, [r7, #0]
 800c3a4:	f04f 30ff 	mov.w	r0, #4294967295
 800c3a8:	e0d1      	b.n	800c54e <_svfiprintf_r+0x1d2>
 800c3aa:	2340      	movs	r3, #64	; 0x40
 800c3ac:	616b      	str	r3, [r5, #20]
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	9309      	str	r3, [sp, #36]	; 0x24
 800c3b2:	2320      	movs	r3, #32
 800c3b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c3b8:	f8cd 800c 	str.w	r8, [sp, #12]
 800c3bc:	2330      	movs	r3, #48	; 0x30
 800c3be:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c568 <_svfiprintf_r+0x1ec>
 800c3c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c3c6:	f04f 0901 	mov.w	r9, #1
 800c3ca:	4623      	mov	r3, r4
 800c3cc:	469a      	mov	sl, r3
 800c3ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c3d2:	b10a      	cbz	r2, 800c3d8 <_svfiprintf_r+0x5c>
 800c3d4:	2a25      	cmp	r2, #37	; 0x25
 800c3d6:	d1f9      	bne.n	800c3cc <_svfiprintf_r+0x50>
 800c3d8:	ebba 0b04 	subs.w	fp, sl, r4
 800c3dc:	d00b      	beq.n	800c3f6 <_svfiprintf_r+0x7a>
 800c3de:	465b      	mov	r3, fp
 800c3e0:	4622      	mov	r2, r4
 800c3e2:	4629      	mov	r1, r5
 800c3e4:	4638      	mov	r0, r7
 800c3e6:	f7ff ff6d 	bl	800c2c4 <__ssputs_r>
 800c3ea:	3001      	adds	r0, #1
 800c3ec:	f000 80aa 	beq.w	800c544 <_svfiprintf_r+0x1c8>
 800c3f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c3f2:	445a      	add	r2, fp
 800c3f4:	9209      	str	r2, [sp, #36]	; 0x24
 800c3f6:	f89a 3000 	ldrb.w	r3, [sl]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	f000 80a2 	beq.w	800c544 <_svfiprintf_r+0x1c8>
 800c400:	2300      	movs	r3, #0
 800c402:	f04f 32ff 	mov.w	r2, #4294967295
 800c406:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c40a:	f10a 0a01 	add.w	sl, sl, #1
 800c40e:	9304      	str	r3, [sp, #16]
 800c410:	9307      	str	r3, [sp, #28]
 800c412:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c416:	931a      	str	r3, [sp, #104]	; 0x68
 800c418:	4654      	mov	r4, sl
 800c41a:	2205      	movs	r2, #5
 800c41c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c420:	4851      	ldr	r0, [pc, #324]	; (800c568 <_svfiprintf_r+0x1ec>)
 800c422:	f7f3 fedd 	bl	80001e0 <memchr>
 800c426:	9a04      	ldr	r2, [sp, #16]
 800c428:	b9d8      	cbnz	r0, 800c462 <_svfiprintf_r+0xe6>
 800c42a:	06d0      	lsls	r0, r2, #27
 800c42c:	bf44      	itt	mi
 800c42e:	2320      	movmi	r3, #32
 800c430:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c434:	0711      	lsls	r1, r2, #28
 800c436:	bf44      	itt	mi
 800c438:	232b      	movmi	r3, #43	; 0x2b
 800c43a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c43e:	f89a 3000 	ldrb.w	r3, [sl]
 800c442:	2b2a      	cmp	r3, #42	; 0x2a
 800c444:	d015      	beq.n	800c472 <_svfiprintf_r+0xf6>
 800c446:	9a07      	ldr	r2, [sp, #28]
 800c448:	4654      	mov	r4, sl
 800c44a:	2000      	movs	r0, #0
 800c44c:	f04f 0c0a 	mov.w	ip, #10
 800c450:	4621      	mov	r1, r4
 800c452:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c456:	3b30      	subs	r3, #48	; 0x30
 800c458:	2b09      	cmp	r3, #9
 800c45a:	d94e      	bls.n	800c4fa <_svfiprintf_r+0x17e>
 800c45c:	b1b0      	cbz	r0, 800c48c <_svfiprintf_r+0x110>
 800c45e:	9207      	str	r2, [sp, #28]
 800c460:	e014      	b.n	800c48c <_svfiprintf_r+0x110>
 800c462:	eba0 0308 	sub.w	r3, r0, r8
 800c466:	fa09 f303 	lsl.w	r3, r9, r3
 800c46a:	4313      	orrs	r3, r2
 800c46c:	9304      	str	r3, [sp, #16]
 800c46e:	46a2      	mov	sl, r4
 800c470:	e7d2      	b.n	800c418 <_svfiprintf_r+0x9c>
 800c472:	9b03      	ldr	r3, [sp, #12]
 800c474:	1d19      	adds	r1, r3, #4
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	9103      	str	r1, [sp, #12]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	bfbb      	ittet	lt
 800c47e:	425b      	neglt	r3, r3
 800c480:	f042 0202 	orrlt.w	r2, r2, #2
 800c484:	9307      	strge	r3, [sp, #28]
 800c486:	9307      	strlt	r3, [sp, #28]
 800c488:	bfb8      	it	lt
 800c48a:	9204      	strlt	r2, [sp, #16]
 800c48c:	7823      	ldrb	r3, [r4, #0]
 800c48e:	2b2e      	cmp	r3, #46	; 0x2e
 800c490:	d10c      	bne.n	800c4ac <_svfiprintf_r+0x130>
 800c492:	7863      	ldrb	r3, [r4, #1]
 800c494:	2b2a      	cmp	r3, #42	; 0x2a
 800c496:	d135      	bne.n	800c504 <_svfiprintf_r+0x188>
 800c498:	9b03      	ldr	r3, [sp, #12]
 800c49a:	1d1a      	adds	r2, r3, #4
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	9203      	str	r2, [sp, #12]
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	bfb8      	it	lt
 800c4a4:	f04f 33ff 	movlt.w	r3, #4294967295
 800c4a8:	3402      	adds	r4, #2
 800c4aa:	9305      	str	r3, [sp, #20]
 800c4ac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c578 <_svfiprintf_r+0x1fc>
 800c4b0:	7821      	ldrb	r1, [r4, #0]
 800c4b2:	2203      	movs	r2, #3
 800c4b4:	4650      	mov	r0, sl
 800c4b6:	f7f3 fe93 	bl	80001e0 <memchr>
 800c4ba:	b140      	cbz	r0, 800c4ce <_svfiprintf_r+0x152>
 800c4bc:	2340      	movs	r3, #64	; 0x40
 800c4be:	eba0 000a 	sub.w	r0, r0, sl
 800c4c2:	fa03 f000 	lsl.w	r0, r3, r0
 800c4c6:	9b04      	ldr	r3, [sp, #16]
 800c4c8:	4303      	orrs	r3, r0
 800c4ca:	3401      	adds	r4, #1
 800c4cc:	9304      	str	r3, [sp, #16]
 800c4ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4d2:	4826      	ldr	r0, [pc, #152]	; (800c56c <_svfiprintf_r+0x1f0>)
 800c4d4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c4d8:	2206      	movs	r2, #6
 800c4da:	f7f3 fe81 	bl	80001e0 <memchr>
 800c4de:	2800      	cmp	r0, #0
 800c4e0:	d038      	beq.n	800c554 <_svfiprintf_r+0x1d8>
 800c4e2:	4b23      	ldr	r3, [pc, #140]	; (800c570 <_svfiprintf_r+0x1f4>)
 800c4e4:	bb1b      	cbnz	r3, 800c52e <_svfiprintf_r+0x1b2>
 800c4e6:	9b03      	ldr	r3, [sp, #12]
 800c4e8:	3307      	adds	r3, #7
 800c4ea:	f023 0307 	bic.w	r3, r3, #7
 800c4ee:	3308      	adds	r3, #8
 800c4f0:	9303      	str	r3, [sp, #12]
 800c4f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4f4:	4433      	add	r3, r6
 800c4f6:	9309      	str	r3, [sp, #36]	; 0x24
 800c4f8:	e767      	b.n	800c3ca <_svfiprintf_r+0x4e>
 800c4fa:	fb0c 3202 	mla	r2, ip, r2, r3
 800c4fe:	460c      	mov	r4, r1
 800c500:	2001      	movs	r0, #1
 800c502:	e7a5      	b.n	800c450 <_svfiprintf_r+0xd4>
 800c504:	2300      	movs	r3, #0
 800c506:	3401      	adds	r4, #1
 800c508:	9305      	str	r3, [sp, #20]
 800c50a:	4619      	mov	r1, r3
 800c50c:	f04f 0c0a 	mov.w	ip, #10
 800c510:	4620      	mov	r0, r4
 800c512:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c516:	3a30      	subs	r2, #48	; 0x30
 800c518:	2a09      	cmp	r2, #9
 800c51a:	d903      	bls.n	800c524 <_svfiprintf_r+0x1a8>
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d0c5      	beq.n	800c4ac <_svfiprintf_r+0x130>
 800c520:	9105      	str	r1, [sp, #20]
 800c522:	e7c3      	b.n	800c4ac <_svfiprintf_r+0x130>
 800c524:	fb0c 2101 	mla	r1, ip, r1, r2
 800c528:	4604      	mov	r4, r0
 800c52a:	2301      	movs	r3, #1
 800c52c:	e7f0      	b.n	800c510 <_svfiprintf_r+0x194>
 800c52e:	ab03      	add	r3, sp, #12
 800c530:	9300      	str	r3, [sp, #0]
 800c532:	462a      	mov	r2, r5
 800c534:	4b0f      	ldr	r3, [pc, #60]	; (800c574 <_svfiprintf_r+0x1f8>)
 800c536:	a904      	add	r1, sp, #16
 800c538:	4638      	mov	r0, r7
 800c53a:	f7fe f80d 	bl	800a558 <_printf_float>
 800c53e:	1c42      	adds	r2, r0, #1
 800c540:	4606      	mov	r6, r0
 800c542:	d1d6      	bne.n	800c4f2 <_svfiprintf_r+0x176>
 800c544:	89ab      	ldrh	r3, [r5, #12]
 800c546:	065b      	lsls	r3, r3, #25
 800c548:	f53f af2c 	bmi.w	800c3a4 <_svfiprintf_r+0x28>
 800c54c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c54e:	b01d      	add	sp, #116	; 0x74
 800c550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c554:	ab03      	add	r3, sp, #12
 800c556:	9300      	str	r3, [sp, #0]
 800c558:	462a      	mov	r2, r5
 800c55a:	4b06      	ldr	r3, [pc, #24]	; (800c574 <_svfiprintf_r+0x1f8>)
 800c55c:	a904      	add	r1, sp, #16
 800c55e:	4638      	mov	r0, r7
 800c560:	f7fe fa9e 	bl	800aaa0 <_printf_i>
 800c564:	e7eb      	b.n	800c53e <_svfiprintf_r+0x1c2>
 800c566:	bf00      	nop
 800c568:	0800e444 	.word	0x0800e444
 800c56c:	0800e44e 	.word	0x0800e44e
 800c570:	0800a559 	.word	0x0800a559
 800c574:	0800c2c5 	.word	0x0800c2c5
 800c578:	0800e44a 	.word	0x0800e44a

0800c57c <_sbrk_r>:
 800c57c:	b538      	push	{r3, r4, r5, lr}
 800c57e:	4d06      	ldr	r5, [pc, #24]	; (800c598 <_sbrk_r+0x1c>)
 800c580:	2300      	movs	r3, #0
 800c582:	4604      	mov	r4, r0
 800c584:	4608      	mov	r0, r1
 800c586:	602b      	str	r3, [r5, #0]
 800c588:	f7f5 f9ca 	bl	8001920 <_sbrk>
 800c58c:	1c43      	adds	r3, r0, #1
 800c58e:	d102      	bne.n	800c596 <_sbrk_r+0x1a>
 800c590:	682b      	ldr	r3, [r5, #0]
 800c592:	b103      	cbz	r3, 800c596 <_sbrk_r+0x1a>
 800c594:	6023      	str	r3, [r4, #0]
 800c596:	bd38      	pop	{r3, r4, r5, pc}
 800c598:	2000161c 	.word	0x2000161c

0800c59c <__assert_func>:
 800c59c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c59e:	4614      	mov	r4, r2
 800c5a0:	461a      	mov	r2, r3
 800c5a2:	4b09      	ldr	r3, [pc, #36]	; (800c5c8 <__assert_func+0x2c>)
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	4605      	mov	r5, r0
 800c5a8:	68d8      	ldr	r0, [r3, #12]
 800c5aa:	b14c      	cbz	r4, 800c5c0 <__assert_func+0x24>
 800c5ac:	4b07      	ldr	r3, [pc, #28]	; (800c5cc <__assert_func+0x30>)
 800c5ae:	9100      	str	r1, [sp, #0]
 800c5b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c5b4:	4906      	ldr	r1, [pc, #24]	; (800c5d0 <__assert_func+0x34>)
 800c5b6:	462b      	mov	r3, r5
 800c5b8:	f000 f80e 	bl	800c5d8 <fiprintf>
 800c5bc:	f000 faa4 	bl	800cb08 <abort>
 800c5c0:	4b04      	ldr	r3, [pc, #16]	; (800c5d4 <__assert_func+0x38>)
 800c5c2:	461c      	mov	r4, r3
 800c5c4:	e7f3      	b.n	800c5ae <__assert_func+0x12>
 800c5c6:	bf00      	nop
 800c5c8:	2000017c 	.word	0x2000017c
 800c5cc:	0800e455 	.word	0x0800e455
 800c5d0:	0800e462 	.word	0x0800e462
 800c5d4:	0800e490 	.word	0x0800e490

0800c5d8 <fiprintf>:
 800c5d8:	b40e      	push	{r1, r2, r3}
 800c5da:	b503      	push	{r0, r1, lr}
 800c5dc:	4601      	mov	r1, r0
 800c5de:	ab03      	add	r3, sp, #12
 800c5e0:	4805      	ldr	r0, [pc, #20]	; (800c5f8 <fiprintf+0x20>)
 800c5e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c5e6:	6800      	ldr	r0, [r0, #0]
 800c5e8:	9301      	str	r3, [sp, #4]
 800c5ea:	f000 f88f 	bl	800c70c <_vfiprintf_r>
 800c5ee:	b002      	add	sp, #8
 800c5f0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c5f4:	b003      	add	sp, #12
 800c5f6:	4770      	bx	lr
 800c5f8:	2000017c 	.word	0x2000017c

0800c5fc <__ascii_mbtowc>:
 800c5fc:	b082      	sub	sp, #8
 800c5fe:	b901      	cbnz	r1, 800c602 <__ascii_mbtowc+0x6>
 800c600:	a901      	add	r1, sp, #4
 800c602:	b142      	cbz	r2, 800c616 <__ascii_mbtowc+0x1a>
 800c604:	b14b      	cbz	r3, 800c61a <__ascii_mbtowc+0x1e>
 800c606:	7813      	ldrb	r3, [r2, #0]
 800c608:	600b      	str	r3, [r1, #0]
 800c60a:	7812      	ldrb	r2, [r2, #0]
 800c60c:	1e10      	subs	r0, r2, #0
 800c60e:	bf18      	it	ne
 800c610:	2001      	movne	r0, #1
 800c612:	b002      	add	sp, #8
 800c614:	4770      	bx	lr
 800c616:	4610      	mov	r0, r2
 800c618:	e7fb      	b.n	800c612 <__ascii_mbtowc+0x16>
 800c61a:	f06f 0001 	mvn.w	r0, #1
 800c61e:	e7f8      	b.n	800c612 <__ascii_mbtowc+0x16>

0800c620 <memmove>:
 800c620:	4288      	cmp	r0, r1
 800c622:	b510      	push	{r4, lr}
 800c624:	eb01 0402 	add.w	r4, r1, r2
 800c628:	d902      	bls.n	800c630 <memmove+0x10>
 800c62a:	4284      	cmp	r4, r0
 800c62c:	4623      	mov	r3, r4
 800c62e:	d807      	bhi.n	800c640 <memmove+0x20>
 800c630:	1e43      	subs	r3, r0, #1
 800c632:	42a1      	cmp	r1, r4
 800c634:	d008      	beq.n	800c648 <memmove+0x28>
 800c636:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c63a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c63e:	e7f8      	b.n	800c632 <memmove+0x12>
 800c640:	4402      	add	r2, r0
 800c642:	4601      	mov	r1, r0
 800c644:	428a      	cmp	r2, r1
 800c646:	d100      	bne.n	800c64a <memmove+0x2a>
 800c648:	bd10      	pop	{r4, pc}
 800c64a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c64e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c652:	e7f7      	b.n	800c644 <memmove+0x24>

0800c654 <__malloc_lock>:
 800c654:	4801      	ldr	r0, [pc, #4]	; (800c65c <__malloc_lock+0x8>)
 800c656:	f000 bc17 	b.w	800ce88 <__retarget_lock_acquire_recursive>
 800c65a:	bf00      	nop
 800c65c:	20001624 	.word	0x20001624

0800c660 <__malloc_unlock>:
 800c660:	4801      	ldr	r0, [pc, #4]	; (800c668 <__malloc_unlock+0x8>)
 800c662:	f000 bc12 	b.w	800ce8a <__retarget_lock_release_recursive>
 800c666:	bf00      	nop
 800c668:	20001624 	.word	0x20001624

0800c66c <_realloc_r>:
 800c66c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c66e:	4607      	mov	r7, r0
 800c670:	4614      	mov	r4, r2
 800c672:	460e      	mov	r6, r1
 800c674:	b921      	cbnz	r1, 800c680 <_realloc_r+0x14>
 800c676:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c67a:	4611      	mov	r1, r2
 800c67c:	f7ff bdc8 	b.w	800c210 <_malloc_r>
 800c680:	b922      	cbnz	r2, 800c68c <_realloc_r+0x20>
 800c682:	f7ff fd75 	bl	800c170 <_free_r>
 800c686:	4625      	mov	r5, r4
 800c688:	4628      	mov	r0, r5
 800c68a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c68c:	f000 fc62 	bl	800cf54 <_malloc_usable_size_r>
 800c690:	42a0      	cmp	r0, r4
 800c692:	d20f      	bcs.n	800c6b4 <_realloc_r+0x48>
 800c694:	4621      	mov	r1, r4
 800c696:	4638      	mov	r0, r7
 800c698:	f7ff fdba 	bl	800c210 <_malloc_r>
 800c69c:	4605      	mov	r5, r0
 800c69e:	2800      	cmp	r0, #0
 800c6a0:	d0f2      	beq.n	800c688 <_realloc_r+0x1c>
 800c6a2:	4631      	mov	r1, r6
 800c6a4:	4622      	mov	r2, r4
 800c6a6:	f7ff f9c7 	bl	800ba38 <memcpy>
 800c6aa:	4631      	mov	r1, r6
 800c6ac:	4638      	mov	r0, r7
 800c6ae:	f7ff fd5f 	bl	800c170 <_free_r>
 800c6b2:	e7e9      	b.n	800c688 <_realloc_r+0x1c>
 800c6b4:	4635      	mov	r5, r6
 800c6b6:	e7e7      	b.n	800c688 <_realloc_r+0x1c>

0800c6b8 <__sfputc_r>:
 800c6b8:	6893      	ldr	r3, [r2, #8]
 800c6ba:	3b01      	subs	r3, #1
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	b410      	push	{r4}
 800c6c0:	6093      	str	r3, [r2, #8]
 800c6c2:	da08      	bge.n	800c6d6 <__sfputc_r+0x1e>
 800c6c4:	6994      	ldr	r4, [r2, #24]
 800c6c6:	42a3      	cmp	r3, r4
 800c6c8:	db01      	blt.n	800c6ce <__sfputc_r+0x16>
 800c6ca:	290a      	cmp	r1, #10
 800c6cc:	d103      	bne.n	800c6d6 <__sfputc_r+0x1e>
 800c6ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c6d2:	f000 b94b 	b.w	800c96c <__swbuf_r>
 800c6d6:	6813      	ldr	r3, [r2, #0]
 800c6d8:	1c58      	adds	r0, r3, #1
 800c6da:	6010      	str	r0, [r2, #0]
 800c6dc:	7019      	strb	r1, [r3, #0]
 800c6de:	4608      	mov	r0, r1
 800c6e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c6e4:	4770      	bx	lr

0800c6e6 <__sfputs_r>:
 800c6e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6e8:	4606      	mov	r6, r0
 800c6ea:	460f      	mov	r7, r1
 800c6ec:	4614      	mov	r4, r2
 800c6ee:	18d5      	adds	r5, r2, r3
 800c6f0:	42ac      	cmp	r4, r5
 800c6f2:	d101      	bne.n	800c6f8 <__sfputs_r+0x12>
 800c6f4:	2000      	movs	r0, #0
 800c6f6:	e007      	b.n	800c708 <__sfputs_r+0x22>
 800c6f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6fc:	463a      	mov	r2, r7
 800c6fe:	4630      	mov	r0, r6
 800c700:	f7ff ffda 	bl	800c6b8 <__sfputc_r>
 800c704:	1c43      	adds	r3, r0, #1
 800c706:	d1f3      	bne.n	800c6f0 <__sfputs_r+0xa>
 800c708:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c70c <_vfiprintf_r>:
 800c70c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c710:	460d      	mov	r5, r1
 800c712:	b09d      	sub	sp, #116	; 0x74
 800c714:	4614      	mov	r4, r2
 800c716:	4698      	mov	r8, r3
 800c718:	4606      	mov	r6, r0
 800c71a:	b118      	cbz	r0, 800c724 <_vfiprintf_r+0x18>
 800c71c:	6983      	ldr	r3, [r0, #24]
 800c71e:	b90b      	cbnz	r3, 800c724 <_vfiprintf_r+0x18>
 800c720:	f000 fb14 	bl	800cd4c <__sinit>
 800c724:	4b89      	ldr	r3, [pc, #548]	; (800c94c <_vfiprintf_r+0x240>)
 800c726:	429d      	cmp	r5, r3
 800c728:	d11b      	bne.n	800c762 <_vfiprintf_r+0x56>
 800c72a:	6875      	ldr	r5, [r6, #4]
 800c72c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c72e:	07d9      	lsls	r1, r3, #31
 800c730:	d405      	bmi.n	800c73e <_vfiprintf_r+0x32>
 800c732:	89ab      	ldrh	r3, [r5, #12]
 800c734:	059a      	lsls	r2, r3, #22
 800c736:	d402      	bmi.n	800c73e <_vfiprintf_r+0x32>
 800c738:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c73a:	f000 fba5 	bl	800ce88 <__retarget_lock_acquire_recursive>
 800c73e:	89ab      	ldrh	r3, [r5, #12]
 800c740:	071b      	lsls	r3, r3, #28
 800c742:	d501      	bpl.n	800c748 <_vfiprintf_r+0x3c>
 800c744:	692b      	ldr	r3, [r5, #16]
 800c746:	b9eb      	cbnz	r3, 800c784 <_vfiprintf_r+0x78>
 800c748:	4629      	mov	r1, r5
 800c74a:	4630      	mov	r0, r6
 800c74c:	f000 f96e 	bl	800ca2c <__swsetup_r>
 800c750:	b1c0      	cbz	r0, 800c784 <_vfiprintf_r+0x78>
 800c752:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c754:	07dc      	lsls	r4, r3, #31
 800c756:	d50e      	bpl.n	800c776 <_vfiprintf_r+0x6a>
 800c758:	f04f 30ff 	mov.w	r0, #4294967295
 800c75c:	b01d      	add	sp, #116	; 0x74
 800c75e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c762:	4b7b      	ldr	r3, [pc, #492]	; (800c950 <_vfiprintf_r+0x244>)
 800c764:	429d      	cmp	r5, r3
 800c766:	d101      	bne.n	800c76c <_vfiprintf_r+0x60>
 800c768:	68b5      	ldr	r5, [r6, #8]
 800c76a:	e7df      	b.n	800c72c <_vfiprintf_r+0x20>
 800c76c:	4b79      	ldr	r3, [pc, #484]	; (800c954 <_vfiprintf_r+0x248>)
 800c76e:	429d      	cmp	r5, r3
 800c770:	bf08      	it	eq
 800c772:	68f5      	ldreq	r5, [r6, #12]
 800c774:	e7da      	b.n	800c72c <_vfiprintf_r+0x20>
 800c776:	89ab      	ldrh	r3, [r5, #12]
 800c778:	0598      	lsls	r0, r3, #22
 800c77a:	d4ed      	bmi.n	800c758 <_vfiprintf_r+0x4c>
 800c77c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c77e:	f000 fb84 	bl	800ce8a <__retarget_lock_release_recursive>
 800c782:	e7e9      	b.n	800c758 <_vfiprintf_r+0x4c>
 800c784:	2300      	movs	r3, #0
 800c786:	9309      	str	r3, [sp, #36]	; 0x24
 800c788:	2320      	movs	r3, #32
 800c78a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c78e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c792:	2330      	movs	r3, #48	; 0x30
 800c794:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c958 <_vfiprintf_r+0x24c>
 800c798:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c79c:	f04f 0901 	mov.w	r9, #1
 800c7a0:	4623      	mov	r3, r4
 800c7a2:	469a      	mov	sl, r3
 800c7a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c7a8:	b10a      	cbz	r2, 800c7ae <_vfiprintf_r+0xa2>
 800c7aa:	2a25      	cmp	r2, #37	; 0x25
 800c7ac:	d1f9      	bne.n	800c7a2 <_vfiprintf_r+0x96>
 800c7ae:	ebba 0b04 	subs.w	fp, sl, r4
 800c7b2:	d00b      	beq.n	800c7cc <_vfiprintf_r+0xc0>
 800c7b4:	465b      	mov	r3, fp
 800c7b6:	4622      	mov	r2, r4
 800c7b8:	4629      	mov	r1, r5
 800c7ba:	4630      	mov	r0, r6
 800c7bc:	f7ff ff93 	bl	800c6e6 <__sfputs_r>
 800c7c0:	3001      	adds	r0, #1
 800c7c2:	f000 80aa 	beq.w	800c91a <_vfiprintf_r+0x20e>
 800c7c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c7c8:	445a      	add	r2, fp
 800c7ca:	9209      	str	r2, [sp, #36]	; 0x24
 800c7cc:	f89a 3000 	ldrb.w	r3, [sl]
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	f000 80a2 	beq.w	800c91a <_vfiprintf_r+0x20e>
 800c7d6:	2300      	movs	r3, #0
 800c7d8:	f04f 32ff 	mov.w	r2, #4294967295
 800c7dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c7e0:	f10a 0a01 	add.w	sl, sl, #1
 800c7e4:	9304      	str	r3, [sp, #16]
 800c7e6:	9307      	str	r3, [sp, #28]
 800c7e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c7ec:	931a      	str	r3, [sp, #104]	; 0x68
 800c7ee:	4654      	mov	r4, sl
 800c7f0:	2205      	movs	r2, #5
 800c7f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7f6:	4858      	ldr	r0, [pc, #352]	; (800c958 <_vfiprintf_r+0x24c>)
 800c7f8:	f7f3 fcf2 	bl	80001e0 <memchr>
 800c7fc:	9a04      	ldr	r2, [sp, #16]
 800c7fe:	b9d8      	cbnz	r0, 800c838 <_vfiprintf_r+0x12c>
 800c800:	06d1      	lsls	r1, r2, #27
 800c802:	bf44      	itt	mi
 800c804:	2320      	movmi	r3, #32
 800c806:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c80a:	0713      	lsls	r3, r2, #28
 800c80c:	bf44      	itt	mi
 800c80e:	232b      	movmi	r3, #43	; 0x2b
 800c810:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c814:	f89a 3000 	ldrb.w	r3, [sl]
 800c818:	2b2a      	cmp	r3, #42	; 0x2a
 800c81a:	d015      	beq.n	800c848 <_vfiprintf_r+0x13c>
 800c81c:	9a07      	ldr	r2, [sp, #28]
 800c81e:	4654      	mov	r4, sl
 800c820:	2000      	movs	r0, #0
 800c822:	f04f 0c0a 	mov.w	ip, #10
 800c826:	4621      	mov	r1, r4
 800c828:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c82c:	3b30      	subs	r3, #48	; 0x30
 800c82e:	2b09      	cmp	r3, #9
 800c830:	d94e      	bls.n	800c8d0 <_vfiprintf_r+0x1c4>
 800c832:	b1b0      	cbz	r0, 800c862 <_vfiprintf_r+0x156>
 800c834:	9207      	str	r2, [sp, #28]
 800c836:	e014      	b.n	800c862 <_vfiprintf_r+0x156>
 800c838:	eba0 0308 	sub.w	r3, r0, r8
 800c83c:	fa09 f303 	lsl.w	r3, r9, r3
 800c840:	4313      	orrs	r3, r2
 800c842:	9304      	str	r3, [sp, #16]
 800c844:	46a2      	mov	sl, r4
 800c846:	e7d2      	b.n	800c7ee <_vfiprintf_r+0xe2>
 800c848:	9b03      	ldr	r3, [sp, #12]
 800c84a:	1d19      	adds	r1, r3, #4
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	9103      	str	r1, [sp, #12]
 800c850:	2b00      	cmp	r3, #0
 800c852:	bfbb      	ittet	lt
 800c854:	425b      	neglt	r3, r3
 800c856:	f042 0202 	orrlt.w	r2, r2, #2
 800c85a:	9307      	strge	r3, [sp, #28]
 800c85c:	9307      	strlt	r3, [sp, #28]
 800c85e:	bfb8      	it	lt
 800c860:	9204      	strlt	r2, [sp, #16]
 800c862:	7823      	ldrb	r3, [r4, #0]
 800c864:	2b2e      	cmp	r3, #46	; 0x2e
 800c866:	d10c      	bne.n	800c882 <_vfiprintf_r+0x176>
 800c868:	7863      	ldrb	r3, [r4, #1]
 800c86a:	2b2a      	cmp	r3, #42	; 0x2a
 800c86c:	d135      	bne.n	800c8da <_vfiprintf_r+0x1ce>
 800c86e:	9b03      	ldr	r3, [sp, #12]
 800c870:	1d1a      	adds	r2, r3, #4
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	9203      	str	r2, [sp, #12]
 800c876:	2b00      	cmp	r3, #0
 800c878:	bfb8      	it	lt
 800c87a:	f04f 33ff 	movlt.w	r3, #4294967295
 800c87e:	3402      	adds	r4, #2
 800c880:	9305      	str	r3, [sp, #20]
 800c882:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c968 <_vfiprintf_r+0x25c>
 800c886:	7821      	ldrb	r1, [r4, #0]
 800c888:	2203      	movs	r2, #3
 800c88a:	4650      	mov	r0, sl
 800c88c:	f7f3 fca8 	bl	80001e0 <memchr>
 800c890:	b140      	cbz	r0, 800c8a4 <_vfiprintf_r+0x198>
 800c892:	2340      	movs	r3, #64	; 0x40
 800c894:	eba0 000a 	sub.w	r0, r0, sl
 800c898:	fa03 f000 	lsl.w	r0, r3, r0
 800c89c:	9b04      	ldr	r3, [sp, #16]
 800c89e:	4303      	orrs	r3, r0
 800c8a0:	3401      	adds	r4, #1
 800c8a2:	9304      	str	r3, [sp, #16]
 800c8a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8a8:	482c      	ldr	r0, [pc, #176]	; (800c95c <_vfiprintf_r+0x250>)
 800c8aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c8ae:	2206      	movs	r2, #6
 800c8b0:	f7f3 fc96 	bl	80001e0 <memchr>
 800c8b4:	2800      	cmp	r0, #0
 800c8b6:	d03f      	beq.n	800c938 <_vfiprintf_r+0x22c>
 800c8b8:	4b29      	ldr	r3, [pc, #164]	; (800c960 <_vfiprintf_r+0x254>)
 800c8ba:	bb1b      	cbnz	r3, 800c904 <_vfiprintf_r+0x1f8>
 800c8bc:	9b03      	ldr	r3, [sp, #12]
 800c8be:	3307      	adds	r3, #7
 800c8c0:	f023 0307 	bic.w	r3, r3, #7
 800c8c4:	3308      	adds	r3, #8
 800c8c6:	9303      	str	r3, [sp, #12]
 800c8c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8ca:	443b      	add	r3, r7
 800c8cc:	9309      	str	r3, [sp, #36]	; 0x24
 800c8ce:	e767      	b.n	800c7a0 <_vfiprintf_r+0x94>
 800c8d0:	fb0c 3202 	mla	r2, ip, r2, r3
 800c8d4:	460c      	mov	r4, r1
 800c8d6:	2001      	movs	r0, #1
 800c8d8:	e7a5      	b.n	800c826 <_vfiprintf_r+0x11a>
 800c8da:	2300      	movs	r3, #0
 800c8dc:	3401      	adds	r4, #1
 800c8de:	9305      	str	r3, [sp, #20]
 800c8e0:	4619      	mov	r1, r3
 800c8e2:	f04f 0c0a 	mov.w	ip, #10
 800c8e6:	4620      	mov	r0, r4
 800c8e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c8ec:	3a30      	subs	r2, #48	; 0x30
 800c8ee:	2a09      	cmp	r2, #9
 800c8f0:	d903      	bls.n	800c8fa <_vfiprintf_r+0x1ee>
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d0c5      	beq.n	800c882 <_vfiprintf_r+0x176>
 800c8f6:	9105      	str	r1, [sp, #20]
 800c8f8:	e7c3      	b.n	800c882 <_vfiprintf_r+0x176>
 800c8fa:	fb0c 2101 	mla	r1, ip, r1, r2
 800c8fe:	4604      	mov	r4, r0
 800c900:	2301      	movs	r3, #1
 800c902:	e7f0      	b.n	800c8e6 <_vfiprintf_r+0x1da>
 800c904:	ab03      	add	r3, sp, #12
 800c906:	9300      	str	r3, [sp, #0]
 800c908:	462a      	mov	r2, r5
 800c90a:	4b16      	ldr	r3, [pc, #88]	; (800c964 <_vfiprintf_r+0x258>)
 800c90c:	a904      	add	r1, sp, #16
 800c90e:	4630      	mov	r0, r6
 800c910:	f7fd fe22 	bl	800a558 <_printf_float>
 800c914:	4607      	mov	r7, r0
 800c916:	1c78      	adds	r0, r7, #1
 800c918:	d1d6      	bne.n	800c8c8 <_vfiprintf_r+0x1bc>
 800c91a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c91c:	07d9      	lsls	r1, r3, #31
 800c91e:	d405      	bmi.n	800c92c <_vfiprintf_r+0x220>
 800c920:	89ab      	ldrh	r3, [r5, #12]
 800c922:	059a      	lsls	r2, r3, #22
 800c924:	d402      	bmi.n	800c92c <_vfiprintf_r+0x220>
 800c926:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c928:	f000 faaf 	bl	800ce8a <__retarget_lock_release_recursive>
 800c92c:	89ab      	ldrh	r3, [r5, #12]
 800c92e:	065b      	lsls	r3, r3, #25
 800c930:	f53f af12 	bmi.w	800c758 <_vfiprintf_r+0x4c>
 800c934:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c936:	e711      	b.n	800c75c <_vfiprintf_r+0x50>
 800c938:	ab03      	add	r3, sp, #12
 800c93a:	9300      	str	r3, [sp, #0]
 800c93c:	462a      	mov	r2, r5
 800c93e:	4b09      	ldr	r3, [pc, #36]	; (800c964 <_vfiprintf_r+0x258>)
 800c940:	a904      	add	r1, sp, #16
 800c942:	4630      	mov	r0, r6
 800c944:	f7fe f8ac 	bl	800aaa0 <_printf_i>
 800c948:	e7e4      	b.n	800c914 <_vfiprintf_r+0x208>
 800c94a:	bf00      	nop
 800c94c:	0800e5bc 	.word	0x0800e5bc
 800c950:	0800e5dc 	.word	0x0800e5dc
 800c954:	0800e59c 	.word	0x0800e59c
 800c958:	0800e444 	.word	0x0800e444
 800c95c:	0800e44e 	.word	0x0800e44e
 800c960:	0800a559 	.word	0x0800a559
 800c964:	0800c6e7 	.word	0x0800c6e7
 800c968:	0800e44a 	.word	0x0800e44a

0800c96c <__swbuf_r>:
 800c96c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c96e:	460e      	mov	r6, r1
 800c970:	4614      	mov	r4, r2
 800c972:	4605      	mov	r5, r0
 800c974:	b118      	cbz	r0, 800c97e <__swbuf_r+0x12>
 800c976:	6983      	ldr	r3, [r0, #24]
 800c978:	b90b      	cbnz	r3, 800c97e <__swbuf_r+0x12>
 800c97a:	f000 f9e7 	bl	800cd4c <__sinit>
 800c97e:	4b21      	ldr	r3, [pc, #132]	; (800ca04 <__swbuf_r+0x98>)
 800c980:	429c      	cmp	r4, r3
 800c982:	d12b      	bne.n	800c9dc <__swbuf_r+0x70>
 800c984:	686c      	ldr	r4, [r5, #4]
 800c986:	69a3      	ldr	r3, [r4, #24]
 800c988:	60a3      	str	r3, [r4, #8]
 800c98a:	89a3      	ldrh	r3, [r4, #12]
 800c98c:	071a      	lsls	r2, r3, #28
 800c98e:	d52f      	bpl.n	800c9f0 <__swbuf_r+0x84>
 800c990:	6923      	ldr	r3, [r4, #16]
 800c992:	b36b      	cbz	r3, 800c9f0 <__swbuf_r+0x84>
 800c994:	6923      	ldr	r3, [r4, #16]
 800c996:	6820      	ldr	r0, [r4, #0]
 800c998:	1ac0      	subs	r0, r0, r3
 800c99a:	6963      	ldr	r3, [r4, #20]
 800c99c:	b2f6      	uxtb	r6, r6
 800c99e:	4283      	cmp	r3, r0
 800c9a0:	4637      	mov	r7, r6
 800c9a2:	dc04      	bgt.n	800c9ae <__swbuf_r+0x42>
 800c9a4:	4621      	mov	r1, r4
 800c9a6:	4628      	mov	r0, r5
 800c9a8:	f000 f93c 	bl	800cc24 <_fflush_r>
 800c9ac:	bb30      	cbnz	r0, 800c9fc <__swbuf_r+0x90>
 800c9ae:	68a3      	ldr	r3, [r4, #8]
 800c9b0:	3b01      	subs	r3, #1
 800c9b2:	60a3      	str	r3, [r4, #8]
 800c9b4:	6823      	ldr	r3, [r4, #0]
 800c9b6:	1c5a      	adds	r2, r3, #1
 800c9b8:	6022      	str	r2, [r4, #0]
 800c9ba:	701e      	strb	r6, [r3, #0]
 800c9bc:	6963      	ldr	r3, [r4, #20]
 800c9be:	3001      	adds	r0, #1
 800c9c0:	4283      	cmp	r3, r0
 800c9c2:	d004      	beq.n	800c9ce <__swbuf_r+0x62>
 800c9c4:	89a3      	ldrh	r3, [r4, #12]
 800c9c6:	07db      	lsls	r3, r3, #31
 800c9c8:	d506      	bpl.n	800c9d8 <__swbuf_r+0x6c>
 800c9ca:	2e0a      	cmp	r6, #10
 800c9cc:	d104      	bne.n	800c9d8 <__swbuf_r+0x6c>
 800c9ce:	4621      	mov	r1, r4
 800c9d0:	4628      	mov	r0, r5
 800c9d2:	f000 f927 	bl	800cc24 <_fflush_r>
 800c9d6:	b988      	cbnz	r0, 800c9fc <__swbuf_r+0x90>
 800c9d8:	4638      	mov	r0, r7
 800c9da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c9dc:	4b0a      	ldr	r3, [pc, #40]	; (800ca08 <__swbuf_r+0x9c>)
 800c9de:	429c      	cmp	r4, r3
 800c9e0:	d101      	bne.n	800c9e6 <__swbuf_r+0x7a>
 800c9e2:	68ac      	ldr	r4, [r5, #8]
 800c9e4:	e7cf      	b.n	800c986 <__swbuf_r+0x1a>
 800c9e6:	4b09      	ldr	r3, [pc, #36]	; (800ca0c <__swbuf_r+0xa0>)
 800c9e8:	429c      	cmp	r4, r3
 800c9ea:	bf08      	it	eq
 800c9ec:	68ec      	ldreq	r4, [r5, #12]
 800c9ee:	e7ca      	b.n	800c986 <__swbuf_r+0x1a>
 800c9f0:	4621      	mov	r1, r4
 800c9f2:	4628      	mov	r0, r5
 800c9f4:	f000 f81a 	bl	800ca2c <__swsetup_r>
 800c9f8:	2800      	cmp	r0, #0
 800c9fa:	d0cb      	beq.n	800c994 <__swbuf_r+0x28>
 800c9fc:	f04f 37ff 	mov.w	r7, #4294967295
 800ca00:	e7ea      	b.n	800c9d8 <__swbuf_r+0x6c>
 800ca02:	bf00      	nop
 800ca04:	0800e5bc 	.word	0x0800e5bc
 800ca08:	0800e5dc 	.word	0x0800e5dc
 800ca0c:	0800e59c 	.word	0x0800e59c

0800ca10 <__ascii_wctomb>:
 800ca10:	b149      	cbz	r1, 800ca26 <__ascii_wctomb+0x16>
 800ca12:	2aff      	cmp	r2, #255	; 0xff
 800ca14:	bf85      	ittet	hi
 800ca16:	238a      	movhi	r3, #138	; 0x8a
 800ca18:	6003      	strhi	r3, [r0, #0]
 800ca1a:	700a      	strbls	r2, [r1, #0]
 800ca1c:	f04f 30ff 	movhi.w	r0, #4294967295
 800ca20:	bf98      	it	ls
 800ca22:	2001      	movls	r0, #1
 800ca24:	4770      	bx	lr
 800ca26:	4608      	mov	r0, r1
 800ca28:	4770      	bx	lr
	...

0800ca2c <__swsetup_r>:
 800ca2c:	4b32      	ldr	r3, [pc, #200]	; (800caf8 <__swsetup_r+0xcc>)
 800ca2e:	b570      	push	{r4, r5, r6, lr}
 800ca30:	681d      	ldr	r5, [r3, #0]
 800ca32:	4606      	mov	r6, r0
 800ca34:	460c      	mov	r4, r1
 800ca36:	b125      	cbz	r5, 800ca42 <__swsetup_r+0x16>
 800ca38:	69ab      	ldr	r3, [r5, #24]
 800ca3a:	b913      	cbnz	r3, 800ca42 <__swsetup_r+0x16>
 800ca3c:	4628      	mov	r0, r5
 800ca3e:	f000 f985 	bl	800cd4c <__sinit>
 800ca42:	4b2e      	ldr	r3, [pc, #184]	; (800cafc <__swsetup_r+0xd0>)
 800ca44:	429c      	cmp	r4, r3
 800ca46:	d10f      	bne.n	800ca68 <__swsetup_r+0x3c>
 800ca48:	686c      	ldr	r4, [r5, #4]
 800ca4a:	89a3      	ldrh	r3, [r4, #12]
 800ca4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ca50:	0719      	lsls	r1, r3, #28
 800ca52:	d42c      	bmi.n	800caae <__swsetup_r+0x82>
 800ca54:	06dd      	lsls	r5, r3, #27
 800ca56:	d411      	bmi.n	800ca7c <__swsetup_r+0x50>
 800ca58:	2309      	movs	r3, #9
 800ca5a:	6033      	str	r3, [r6, #0]
 800ca5c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ca60:	81a3      	strh	r3, [r4, #12]
 800ca62:	f04f 30ff 	mov.w	r0, #4294967295
 800ca66:	e03e      	b.n	800cae6 <__swsetup_r+0xba>
 800ca68:	4b25      	ldr	r3, [pc, #148]	; (800cb00 <__swsetup_r+0xd4>)
 800ca6a:	429c      	cmp	r4, r3
 800ca6c:	d101      	bne.n	800ca72 <__swsetup_r+0x46>
 800ca6e:	68ac      	ldr	r4, [r5, #8]
 800ca70:	e7eb      	b.n	800ca4a <__swsetup_r+0x1e>
 800ca72:	4b24      	ldr	r3, [pc, #144]	; (800cb04 <__swsetup_r+0xd8>)
 800ca74:	429c      	cmp	r4, r3
 800ca76:	bf08      	it	eq
 800ca78:	68ec      	ldreq	r4, [r5, #12]
 800ca7a:	e7e6      	b.n	800ca4a <__swsetup_r+0x1e>
 800ca7c:	0758      	lsls	r0, r3, #29
 800ca7e:	d512      	bpl.n	800caa6 <__swsetup_r+0x7a>
 800ca80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ca82:	b141      	cbz	r1, 800ca96 <__swsetup_r+0x6a>
 800ca84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ca88:	4299      	cmp	r1, r3
 800ca8a:	d002      	beq.n	800ca92 <__swsetup_r+0x66>
 800ca8c:	4630      	mov	r0, r6
 800ca8e:	f7ff fb6f 	bl	800c170 <_free_r>
 800ca92:	2300      	movs	r3, #0
 800ca94:	6363      	str	r3, [r4, #52]	; 0x34
 800ca96:	89a3      	ldrh	r3, [r4, #12]
 800ca98:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ca9c:	81a3      	strh	r3, [r4, #12]
 800ca9e:	2300      	movs	r3, #0
 800caa0:	6063      	str	r3, [r4, #4]
 800caa2:	6923      	ldr	r3, [r4, #16]
 800caa4:	6023      	str	r3, [r4, #0]
 800caa6:	89a3      	ldrh	r3, [r4, #12]
 800caa8:	f043 0308 	orr.w	r3, r3, #8
 800caac:	81a3      	strh	r3, [r4, #12]
 800caae:	6923      	ldr	r3, [r4, #16]
 800cab0:	b94b      	cbnz	r3, 800cac6 <__swsetup_r+0x9a>
 800cab2:	89a3      	ldrh	r3, [r4, #12]
 800cab4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cab8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cabc:	d003      	beq.n	800cac6 <__swsetup_r+0x9a>
 800cabe:	4621      	mov	r1, r4
 800cac0:	4630      	mov	r0, r6
 800cac2:	f000 fa07 	bl	800ced4 <__smakebuf_r>
 800cac6:	89a0      	ldrh	r0, [r4, #12]
 800cac8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cacc:	f010 0301 	ands.w	r3, r0, #1
 800cad0:	d00a      	beq.n	800cae8 <__swsetup_r+0xbc>
 800cad2:	2300      	movs	r3, #0
 800cad4:	60a3      	str	r3, [r4, #8]
 800cad6:	6963      	ldr	r3, [r4, #20]
 800cad8:	425b      	negs	r3, r3
 800cada:	61a3      	str	r3, [r4, #24]
 800cadc:	6923      	ldr	r3, [r4, #16]
 800cade:	b943      	cbnz	r3, 800caf2 <__swsetup_r+0xc6>
 800cae0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cae4:	d1ba      	bne.n	800ca5c <__swsetup_r+0x30>
 800cae6:	bd70      	pop	{r4, r5, r6, pc}
 800cae8:	0781      	lsls	r1, r0, #30
 800caea:	bf58      	it	pl
 800caec:	6963      	ldrpl	r3, [r4, #20]
 800caee:	60a3      	str	r3, [r4, #8]
 800caf0:	e7f4      	b.n	800cadc <__swsetup_r+0xb0>
 800caf2:	2000      	movs	r0, #0
 800caf4:	e7f7      	b.n	800cae6 <__swsetup_r+0xba>
 800caf6:	bf00      	nop
 800caf8:	2000017c 	.word	0x2000017c
 800cafc:	0800e5bc 	.word	0x0800e5bc
 800cb00:	0800e5dc 	.word	0x0800e5dc
 800cb04:	0800e59c 	.word	0x0800e59c

0800cb08 <abort>:
 800cb08:	b508      	push	{r3, lr}
 800cb0a:	2006      	movs	r0, #6
 800cb0c:	f000 fa52 	bl	800cfb4 <raise>
 800cb10:	2001      	movs	r0, #1
 800cb12:	f7f4 fe8d 	bl	8001830 <_exit>
	...

0800cb18 <__sflush_r>:
 800cb18:	898a      	ldrh	r2, [r1, #12]
 800cb1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb1e:	4605      	mov	r5, r0
 800cb20:	0710      	lsls	r0, r2, #28
 800cb22:	460c      	mov	r4, r1
 800cb24:	d458      	bmi.n	800cbd8 <__sflush_r+0xc0>
 800cb26:	684b      	ldr	r3, [r1, #4]
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	dc05      	bgt.n	800cb38 <__sflush_r+0x20>
 800cb2c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	dc02      	bgt.n	800cb38 <__sflush_r+0x20>
 800cb32:	2000      	movs	r0, #0
 800cb34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cb3a:	2e00      	cmp	r6, #0
 800cb3c:	d0f9      	beq.n	800cb32 <__sflush_r+0x1a>
 800cb3e:	2300      	movs	r3, #0
 800cb40:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cb44:	682f      	ldr	r7, [r5, #0]
 800cb46:	602b      	str	r3, [r5, #0]
 800cb48:	d032      	beq.n	800cbb0 <__sflush_r+0x98>
 800cb4a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cb4c:	89a3      	ldrh	r3, [r4, #12]
 800cb4e:	075a      	lsls	r2, r3, #29
 800cb50:	d505      	bpl.n	800cb5e <__sflush_r+0x46>
 800cb52:	6863      	ldr	r3, [r4, #4]
 800cb54:	1ac0      	subs	r0, r0, r3
 800cb56:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cb58:	b10b      	cbz	r3, 800cb5e <__sflush_r+0x46>
 800cb5a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cb5c:	1ac0      	subs	r0, r0, r3
 800cb5e:	2300      	movs	r3, #0
 800cb60:	4602      	mov	r2, r0
 800cb62:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cb64:	6a21      	ldr	r1, [r4, #32]
 800cb66:	4628      	mov	r0, r5
 800cb68:	47b0      	blx	r6
 800cb6a:	1c43      	adds	r3, r0, #1
 800cb6c:	89a3      	ldrh	r3, [r4, #12]
 800cb6e:	d106      	bne.n	800cb7e <__sflush_r+0x66>
 800cb70:	6829      	ldr	r1, [r5, #0]
 800cb72:	291d      	cmp	r1, #29
 800cb74:	d82c      	bhi.n	800cbd0 <__sflush_r+0xb8>
 800cb76:	4a2a      	ldr	r2, [pc, #168]	; (800cc20 <__sflush_r+0x108>)
 800cb78:	40ca      	lsrs	r2, r1
 800cb7a:	07d6      	lsls	r6, r2, #31
 800cb7c:	d528      	bpl.n	800cbd0 <__sflush_r+0xb8>
 800cb7e:	2200      	movs	r2, #0
 800cb80:	6062      	str	r2, [r4, #4]
 800cb82:	04d9      	lsls	r1, r3, #19
 800cb84:	6922      	ldr	r2, [r4, #16]
 800cb86:	6022      	str	r2, [r4, #0]
 800cb88:	d504      	bpl.n	800cb94 <__sflush_r+0x7c>
 800cb8a:	1c42      	adds	r2, r0, #1
 800cb8c:	d101      	bne.n	800cb92 <__sflush_r+0x7a>
 800cb8e:	682b      	ldr	r3, [r5, #0]
 800cb90:	b903      	cbnz	r3, 800cb94 <__sflush_r+0x7c>
 800cb92:	6560      	str	r0, [r4, #84]	; 0x54
 800cb94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cb96:	602f      	str	r7, [r5, #0]
 800cb98:	2900      	cmp	r1, #0
 800cb9a:	d0ca      	beq.n	800cb32 <__sflush_r+0x1a>
 800cb9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cba0:	4299      	cmp	r1, r3
 800cba2:	d002      	beq.n	800cbaa <__sflush_r+0x92>
 800cba4:	4628      	mov	r0, r5
 800cba6:	f7ff fae3 	bl	800c170 <_free_r>
 800cbaa:	2000      	movs	r0, #0
 800cbac:	6360      	str	r0, [r4, #52]	; 0x34
 800cbae:	e7c1      	b.n	800cb34 <__sflush_r+0x1c>
 800cbb0:	6a21      	ldr	r1, [r4, #32]
 800cbb2:	2301      	movs	r3, #1
 800cbb4:	4628      	mov	r0, r5
 800cbb6:	47b0      	blx	r6
 800cbb8:	1c41      	adds	r1, r0, #1
 800cbba:	d1c7      	bne.n	800cb4c <__sflush_r+0x34>
 800cbbc:	682b      	ldr	r3, [r5, #0]
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d0c4      	beq.n	800cb4c <__sflush_r+0x34>
 800cbc2:	2b1d      	cmp	r3, #29
 800cbc4:	d001      	beq.n	800cbca <__sflush_r+0xb2>
 800cbc6:	2b16      	cmp	r3, #22
 800cbc8:	d101      	bne.n	800cbce <__sflush_r+0xb6>
 800cbca:	602f      	str	r7, [r5, #0]
 800cbcc:	e7b1      	b.n	800cb32 <__sflush_r+0x1a>
 800cbce:	89a3      	ldrh	r3, [r4, #12]
 800cbd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cbd4:	81a3      	strh	r3, [r4, #12]
 800cbd6:	e7ad      	b.n	800cb34 <__sflush_r+0x1c>
 800cbd8:	690f      	ldr	r7, [r1, #16]
 800cbda:	2f00      	cmp	r7, #0
 800cbdc:	d0a9      	beq.n	800cb32 <__sflush_r+0x1a>
 800cbde:	0793      	lsls	r3, r2, #30
 800cbe0:	680e      	ldr	r6, [r1, #0]
 800cbe2:	bf08      	it	eq
 800cbe4:	694b      	ldreq	r3, [r1, #20]
 800cbe6:	600f      	str	r7, [r1, #0]
 800cbe8:	bf18      	it	ne
 800cbea:	2300      	movne	r3, #0
 800cbec:	eba6 0807 	sub.w	r8, r6, r7
 800cbf0:	608b      	str	r3, [r1, #8]
 800cbf2:	f1b8 0f00 	cmp.w	r8, #0
 800cbf6:	dd9c      	ble.n	800cb32 <__sflush_r+0x1a>
 800cbf8:	6a21      	ldr	r1, [r4, #32]
 800cbfa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cbfc:	4643      	mov	r3, r8
 800cbfe:	463a      	mov	r2, r7
 800cc00:	4628      	mov	r0, r5
 800cc02:	47b0      	blx	r6
 800cc04:	2800      	cmp	r0, #0
 800cc06:	dc06      	bgt.n	800cc16 <__sflush_r+0xfe>
 800cc08:	89a3      	ldrh	r3, [r4, #12]
 800cc0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc0e:	81a3      	strh	r3, [r4, #12]
 800cc10:	f04f 30ff 	mov.w	r0, #4294967295
 800cc14:	e78e      	b.n	800cb34 <__sflush_r+0x1c>
 800cc16:	4407      	add	r7, r0
 800cc18:	eba8 0800 	sub.w	r8, r8, r0
 800cc1c:	e7e9      	b.n	800cbf2 <__sflush_r+0xda>
 800cc1e:	bf00      	nop
 800cc20:	20400001 	.word	0x20400001

0800cc24 <_fflush_r>:
 800cc24:	b538      	push	{r3, r4, r5, lr}
 800cc26:	690b      	ldr	r3, [r1, #16]
 800cc28:	4605      	mov	r5, r0
 800cc2a:	460c      	mov	r4, r1
 800cc2c:	b913      	cbnz	r3, 800cc34 <_fflush_r+0x10>
 800cc2e:	2500      	movs	r5, #0
 800cc30:	4628      	mov	r0, r5
 800cc32:	bd38      	pop	{r3, r4, r5, pc}
 800cc34:	b118      	cbz	r0, 800cc3e <_fflush_r+0x1a>
 800cc36:	6983      	ldr	r3, [r0, #24]
 800cc38:	b90b      	cbnz	r3, 800cc3e <_fflush_r+0x1a>
 800cc3a:	f000 f887 	bl	800cd4c <__sinit>
 800cc3e:	4b14      	ldr	r3, [pc, #80]	; (800cc90 <_fflush_r+0x6c>)
 800cc40:	429c      	cmp	r4, r3
 800cc42:	d11b      	bne.n	800cc7c <_fflush_r+0x58>
 800cc44:	686c      	ldr	r4, [r5, #4]
 800cc46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d0ef      	beq.n	800cc2e <_fflush_r+0xa>
 800cc4e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cc50:	07d0      	lsls	r0, r2, #31
 800cc52:	d404      	bmi.n	800cc5e <_fflush_r+0x3a>
 800cc54:	0599      	lsls	r1, r3, #22
 800cc56:	d402      	bmi.n	800cc5e <_fflush_r+0x3a>
 800cc58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cc5a:	f000 f915 	bl	800ce88 <__retarget_lock_acquire_recursive>
 800cc5e:	4628      	mov	r0, r5
 800cc60:	4621      	mov	r1, r4
 800cc62:	f7ff ff59 	bl	800cb18 <__sflush_r>
 800cc66:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cc68:	07da      	lsls	r2, r3, #31
 800cc6a:	4605      	mov	r5, r0
 800cc6c:	d4e0      	bmi.n	800cc30 <_fflush_r+0xc>
 800cc6e:	89a3      	ldrh	r3, [r4, #12]
 800cc70:	059b      	lsls	r3, r3, #22
 800cc72:	d4dd      	bmi.n	800cc30 <_fflush_r+0xc>
 800cc74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cc76:	f000 f908 	bl	800ce8a <__retarget_lock_release_recursive>
 800cc7a:	e7d9      	b.n	800cc30 <_fflush_r+0xc>
 800cc7c:	4b05      	ldr	r3, [pc, #20]	; (800cc94 <_fflush_r+0x70>)
 800cc7e:	429c      	cmp	r4, r3
 800cc80:	d101      	bne.n	800cc86 <_fflush_r+0x62>
 800cc82:	68ac      	ldr	r4, [r5, #8]
 800cc84:	e7df      	b.n	800cc46 <_fflush_r+0x22>
 800cc86:	4b04      	ldr	r3, [pc, #16]	; (800cc98 <_fflush_r+0x74>)
 800cc88:	429c      	cmp	r4, r3
 800cc8a:	bf08      	it	eq
 800cc8c:	68ec      	ldreq	r4, [r5, #12]
 800cc8e:	e7da      	b.n	800cc46 <_fflush_r+0x22>
 800cc90:	0800e5bc 	.word	0x0800e5bc
 800cc94:	0800e5dc 	.word	0x0800e5dc
 800cc98:	0800e59c 	.word	0x0800e59c

0800cc9c <std>:
 800cc9c:	2300      	movs	r3, #0
 800cc9e:	b510      	push	{r4, lr}
 800cca0:	4604      	mov	r4, r0
 800cca2:	e9c0 3300 	strd	r3, r3, [r0]
 800cca6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ccaa:	6083      	str	r3, [r0, #8]
 800ccac:	8181      	strh	r1, [r0, #12]
 800ccae:	6643      	str	r3, [r0, #100]	; 0x64
 800ccb0:	81c2      	strh	r2, [r0, #14]
 800ccb2:	6183      	str	r3, [r0, #24]
 800ccb4:	4619      	mov	r1, r3
 800ccb6:	2208      	movs	r2, #8
 800ccb8:	305c      	adds	r0, #92	; 0x5c
 800ccba:	f7fd fba5 	bl	800a408 <memset>
 800ccbe:	4b05      	ldr	r3, [pc, #20]	; (800ccd4 <std+0x38>)
 800ccc0:	6263      	str	r3, [r4, #36]	; 0x24
 800ccc2:	4b05      	ldr	r3, [pc, #20]	; (800ccd8 <std+0x3c>)
 800ccc4:	62a3      	str	r3, [r4, #40]	; 0x28
 800ccc6:	4b05      	ldr	r3, [pc, #20]	; (800ccdc <std+0x40>)
 800ccc8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ccca:	4b05      	ldr	r3, [pc, #20]	; (800cce0 <std+0x44>)
 800cccc:	6224      	str	r4, [r4, #32]
 800ccce:	6323      	str	r3, [r4, #48]	; 0x30
 800ccd0:	bd10      	pop	{r4, pc}
 800ccd2:	bf00      	nop
 800ccd4:	0800cfed 	.word	0x0800cfed
 800ccd8:	0800d00f 	.word	0x0800d00f
 800ccdc:	0800d047 	.word	0x0800d047
 800cce0:	0800d06b 	.word	0x0800d06b

0800cce4 <_cleanup_r>:
 800cce4:	4901      	ldr	r1, [pc, #4]	; (800ccec <_cleanup_r+0x8>)
 800cce6:	f000 b8af 	b.w	800ce48 <_fwalk_reent>
 800ccea:	bf00      	nop
 800ccec:	0800cc25 	.word	0x0800cc25

0800ccf0 <__sfmoreglue>:
 800ccf0:	b570      	push	{r4, r5, r6, lr}
 800ccf2:	1e4a      	subs	r2, r1, #1
 800ccf4:	2568      	movs	r5, #104	; 0x68
 800ccf6:	4355      	muls	r5, r2
 800ccf8:	460e      	mov	r6, r1
 800ccfa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ccfe:	f7ff fa87 	bl	800c210 <_malloc_r>
 800cd02:	4604      	mov	r4, r0
 800cd04:	b140      	cbz	r0, 800cd18 <__sfmoreglue+0x28>
 800cd06:	2100      	movs	r1, #0
 800cd08:	e9c0 1600 	strd	r1, r6, [r0]
 800cd0c:	300c      	adds	r0, #12
 800cd0e:	60a0      	str	r0, [r4, #8]
 800cd10:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cd14:	f7fd fb78 	bl	800a408 <memset>
 800cd18:	4620      	mov	r0, r4
 800cd1a:	bd70      	pop	{r4, r5, r6, pc}

0800cd1c <__sfp_lock_acquire>:
 800cd1c:	4801      	ldr	r0, [pc, #4]	; (800cd24 <__sfp_lock_acquire+0x8>)
 800cd1e:	f000 b8b3 	b.w	800ce88 <__retarget_lock_acquire_recursive>
 800cd22:	bf00      	nop
 800cd24:	20001628 	.word	0x20001628

0800cd28 <__sfp_lock_release>:
 800cd28:	4801      	ldr	r0, [pc, #4]	; (800cd30 <__sfp_lock_release+0x8>)
 800cd2a:	f000 b8ae 	b.w	800ce8a <__retarget_lock_release_recursive>
 800cd2e:	bf00      	nop
 800cd30:	20001628 	.word	0x20001628

0800cd34 <__sinit_lock_acquire>:
 800cd34:	4801      	ldr	r0, [pc, #4]	; (800cd3c <__sinit_lock_acquire+0x8>)
 800cd36:	f000 b8a7 	b.w	800ce88 <__retarget_lock_acquire_recursive>
 800cd3a:	bf00      	nop
 800cd3c:	20001623 	.word	0x20001623

0800cd40 <__sinit_lock_release>:
 800cd40:	4801      	ldr	r0, [pc, #4]	; (800cd48 <__sinit_lock_release+0x8>)
 800cd42:	f000 b8a2 	b.w	800ce8a <__retarget_lock_release_recursive>
 800cd46:	bf00      	nop
 800cd48:	20001623 	.word	0x20001623

0800cd4c <__sinit>:
 800cd4c:	b510      	push	{r4, lr}
 800cd4e:	4604      	mov	r4, r0
 800cd50:	f7ff fff0 	bl	800cd34 <__sinit_lock_acquire>
 800cd54:	69a3      	ldr	r3, [r4, #24]
 800cd56:	b11b      	cbz	r3, 800cd60 <__sinit+0x14>
 800cd58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd5c:	f7ff bff0 	b.w	800cd40 <__sinit_lock_release>
 800cd60:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800cd64:	6523      	str	r3, [r4, #80]	; 0x50
 800cd66:	4b13      	ldr	r3, [pc, #76]	; (800cdb4 <__sinit+0x68>)
 800cd68:	4a13      	ldr	r2, [pc, #76]	; (800cdb8 <__sinit+0x6c>)
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	62a2      	str	r2, [r4, #40]	; 0x28
 800cd6e:	42a3      	cmp	r3, r4
 800cd70:	bf04      	itt	eq
 800cd72:	2301      	moveq	r3, #1
 800cd74:	61a3      	streq	r3, [r4, #24]
 800cd76:	4620      	mov	r0, r4
 800cd78:	f000 f820 	bl	800cdbc <__sfp>
 800cd7c:	6060      	str	r0, [r4, #4]
 800cd7e:	4620      	mov	r0, r4
 800cd80:	f000 f81c 	bl	800cdbc <__sfp>
 800cd84:	60a0      	str	r0, [r4, #8]
 800cd86:	4620      	mov	r0, r4
 800cd88:	f000 f818 	bl	800cdbc <__sfp>
 800cd8c:	2200      	movs	r2, #0
 800cd8e:	60e0      	str	r0, [r4, #12]
 800cd90:	2104      	movs	r1, #4
 800cd92:	6860      	ldr	r0, [r4, #4]
 800cd94:	f7ff ff82 	bl	800cc9c <std>
 800cd98:	68a0      	ldr	r0, [r4, #8]
 800cd9a:	2201      	movs	r2, #1
 800cd9c:	2109      	movs	r1, #9
 800cd9e:	f7ff ff7d 	bl	800cc9c <std>
 800cda2:	68e0      	ldr	r0, [r4, #12]
 800cda4:	2202      	movs	r2, #2
 800cda6:	2112      	movs	r1, #18
 800cda8:	f7ff ff78 	bl	800cc9c <std>
 800cdac:	2301      	movs	r3, #1
 800cdae:	61a3      	str	r3, [r4, #24]
 800cdb0:	e7d2      	b.n	800cd58 <__sinit+0xc>
 800cdb2:	bf00      	nop
 800cdb4:	0800e218 	.word	0x0800e218
 800cdb8:	0800cce5 	.word	0x0800cce5

0800cdbc <__sfp>:
 800cdbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdbe:	4607      	mov	r7, r0
 800cdc0:	f7ff ffac 	bl	800cd1c <__sfp_lock_acquire>
 800cdc4:	4b1e      	ldr	r3, [pc, #120]	; (800ce40 <__sfp+0x84>)
 800cdc6:	681e      	ldr	r6, [r3, #0]
 800cdc8:	69b3      	ldr	r3, [r6, #24]
 800cdca:	b913      	cbnz	r3, 800cdd2 <__sfp+0x16>
 800cdcc:	4630      	mov	r0, r6
 800cdce:	f7ff ffbd 	bl	800cd4c <__sinit>
 800cdd2:	3648      	adds	r6, #72	; 0x48
 800cdd4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cdd8:	3b01      	subs	r3, #1
 800cdda:	d503      	bpl.n	800cde4 <__sfp+0x28>
 800cddc:	6833      	ldr	r3, [r6, #0]
 800cdde:	b30b      	cbz	r3, 800ce24 <__sfp+0x68>
 800cde0:	6836      	ldr	r6, [r6, #0]
 800cde2:	e7f7      	b.n	800cdd4 <__sfp+0x18>
 800cde4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cde8:	b9d5      	cbnz	r5, 800ce20 <__sfp+0x64>
 800cdea:	4b16      	ldr	r3, [pc, #88]	; (800ce44 <__sfp+0x88>)
 800cdec:	60e3      	str	r3, [r4, #12]
 800cdee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cdf2:	6665      	str	r5, [r4, #100]	; 0x64
 800cdf4:	f000 f847 	bl	800ce86 <__retarget_lock_init_recursive>
 800cdf8:	f7ff ff96 	bl	800cd28 <__sfp_lock_release>
 800cdfc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ce00:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ce04:	6025      	str	r5, [r4, #0]
 800ce06:	61a5      	str	r5, [r4, #24]
 800ce08:	2208      	movs	r2, #8
 800ce0a:	4629      	mov	r1, r5
 800ce0c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ce10:	f7fd fafa 	bl	800a408 <memset>
 800ce14:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ce18:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ce1c:	4620      	mov	r0, r4
 800ce1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce20:	3468      	adds	r4, #104	; 0x68
 800ce22:	e7d9      	b.n	800cdd8 <__sfp+0x1c>
 800ce24:	2104      	movs	r1, #4
 800ce26:	4638      	mov	r0, r7
 800ce28:	f7ff ff62 	bl	800ccf0 <__sfmoreglue>
 800ce2c:	4604      	mov	r4, r0
 800ce2e:	6030      	str	r0, [r6, #0]
 800ce30:	2800      	cmp	r0, #0
 800ce32:	d1d5      	bne.n	800cde0 <__sfp+0x24>
 800ce34:	f7ff ff78 	bl	800cd28 <__sfp_lock_release>
 800ce38:	230c      	movs	r3, #12
 800ce3a:	603b      	str	r3, [r7, #0]
 800ce3c:	e7ee      	b.n	800ce1c <__sfp+0x60>
 800ce3e:	bf00      	nop
 800ce40:	0800e218 	.word	0x0800e218
 800ce44:	ffff0001 	.word	0xffff0001

0800ce48 <_fwalk_reent>:
 800ce48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce4c:	4606      	mov	r6, r0
 800ce4e:	4688      	mov	r8, r1
 800ce50:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ce54:	2700      	movs	r7, #0
 800ce56:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ce5a:	f1b9 0901 	subs.w	r9, r9, #1
 800ce5e:	d505      	bpl.n	800ce6c <_fwalk_reent+0x24>
 800ce60:	6824      	ldr	r4, [r4, #0]
 800ce62:	2c00      	cmp	r4, #0
 800ce64:	d1f7      	bne.n	800ce56 <_fwalk_reent+0xe>
 800ce66:	4638      	mov	r0, r7
 800ce68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce6c:	89ab      	ldrh	r3, [r5, #12]
 800ce6e:	2b01      	cmp	r3, #1
 800ce70:	d907      	bls.n	800ce82 <_fwalk_reent+0x3a>
 800ce72:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ce76:	3301      	adds	r3, #1
 800ce78:	d003      	beq.n	800ce82 <_fwalk_reent+0x3a>
 800ce7a:	4629      	mov	r1, r5
 800ce7c:	4630      	mov	r0, r6
 800ce7e:	47c0      	blx	r8
 800ce80:	4307      	orrs	r7, r0
 800ce82:	3568      	adds	r5, #104	; 0x68
 800ce84:	e7e9      	b.n	800ce5a <_fwalk_reent+0x12>

0800ce86 <__retarget_lock_init_recursive>:
 800ce86:	4770      	bx	lr

0800ce88 <__retarget_lock_acquire_recursive>:
 800ce88:	4770      	bx	lr

0800ce8a <__retarget_lock_release_recursive>:
 800ce8a:	4770      	bx	lr

0800ce8c <__swhatbuf_r>:
 800ce8c:	b570      	push	{r4, r5, r6, lr}
 800ce8e:	460e      	mov	r6, r1
 800ce90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce94:	2900      	cmp	r1, #0
 800ce96:	b096      	sub	sp, #88	; 0x58
 800ce98:	4614      	mov	r4, r2
 800ce9a:	461d      	mov	r5, r3
 800ce9c:	da07      	bge.n	800ceae <__swhatbuf_r+0x22>
 800ce9e:	2300      	movs	r3, #0
 800cea0:	602b      	str	r3, [r5, #0]
 800cea2:	89b3      	ldrh	r3, [r6, #12]
 800cea4:	061a      	lsls	r2, r3, #24
 800cea6:	d410      	bmi.n	800ceca <__swhatbuf_r+0x3e>
 800cea8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ceac:	e00e      	b.n	800cecc <__swhatbuf_r+0x40>
 800ceae:	466a      	mov	r2, sp
 800ceb0:	f000 f902 	bl	800d0b8 <_fstat_r>
 800ceb4:	2800      	cmp	r0, #0
 800ceb6:	dbf2      	blt.n	800ce9e <__swhatbuf_r+0x12>
 800ceb8:	9a01      	ldr	r2, [sp, #4]
 800ceba:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cebe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cec2:	425a      	negs	r2, r3
 800cec4:	415a      	adcs	r2, r3
 800cec6:	602a      	str	r2, [r5, #0]
 800cec8:	e7ee      	b.n	800cea8 <__swhatbuf_r+0x1c>
 800ceca:	2340      	movs	r3, #64	; 0x40
 800cecc:	2000      	movs	r0, #0
 800cece:	6023      	str	r3, [r4, #0]
 800ced0:	b016      	add	sp, #88	; 0x58
 800ced2:	bd70      	pop	{r4, r5, r6, pc}

0800ced4 <__smakebuf_r>:
 800ced4:	898b      	ldrh	r3, [r1, #12]
 800ced6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ced8:	079d      	lsls	r5, r3, #30
 800ceda:	4606      	mov	r6, r0
 800cedc:	460c      	mov	r4, r1
 800cede:	d507      	bpl.n	800cef0 <__smakebuf_r+0x1c>
 800cee0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cee4:	6023      	str	r3, [r4, #0]
 800cee6:	6123      	str	r3, [r4, #16]
 800cee8:	2301      	movs	r3, #1
 800ceea:	6163      	str	r3, [r4, #20]
 800ceec:	b002      	add	sp, #8
 800ceee:	bd70      	pop	{r4, r5, r6, pc}
 800cef0:	ab01      	add	r3, sp, #4
 800cef2:	466a      	mov	r2, sp
 800cef4:	f7ff ffca 	bl	800ce8c <__swhatbuf_r>
 800cef8:	9900      	ldr	r1, [sp, #0]
 800cefa:	4605      	mov	r5, r0
 800cefc:	4630      	mov	r0, r6
 800cefe:	f7ff f987 	bl	800c210 <_malloc_r>
 800cf02:	b948      	cbnz	r0, 800cf18 <__smakebuf_r+0x44>
 800cf04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf08:	059a      	lsls	r2, r3, #22
 800cf0a:	d4ef      	bmi.n	800ceec <__smakebuf_r+0x18>
 800cf0c:	f023 0303 	bic.w	r3, r3, #3
 800cf10:	f043 0302 	orr.w	r3, r3, #2
 800cf14:	81a3      	strh	r3, [r4, #12]
 800cf16:	e7e3      	b.n	800cee0 <__smakebuf_r+0xc>
 800cf18:	4b0d      	ldr	r3, [pc, #52]	; (800cf50 <__smakebuf_r+0x7c>)
 800cf1a:	62b3      	str	r3, [r6, #40]	; 0x28
 800cf1c:	89a3      	ldrh	r3, [r4, #12]
 800cf1e:	6020      	str	r0, [r4, #0]
 800cf20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf24:	81a3      	strh	r3, [r4, #12]
 800cf26:	9b00      	ldr	r3, [sp, #0]
 800cf28:	6163      	str	r3, [r4, #20]
 800cf2a:	9b01      	ldr	r3, [sp, #4]
 800cf2c:	6120      	str	r0, [r4, #16]
 800cf2e:	b15b      	cbz	r3, 800cf48 <__smakebuf_r+0x74>
 800cf30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cf34:	4630      	mov	r0, r6
 800cf36:	f000 f8d1 	bl	800d0dc <_isatty_r>
 800cf3a:	b128      	cbz	r0, 800cf48 <__smakebuf_r+0x74>
 800cf3c:	89a3      	ldrh	r3, [r4, #12]
 800cf3e:	f023 0303 	bic.w	r3, r3, #3
 800cf42:	f043 0301 	orr.w	r3, r3, #1
 800cf46:	81a3      	strh	r3, [r4, #12]
 800cf48:	89a0      	ldrh	r0, [r4, #12]
 800cf4a:	4305      	orrs	r5, r0
 800cf4c:	81a5      	strh	r5, [r4, #12]
 800cf4e:	e7cd      	b.n	800ceec <__smakebuf_r+0x18>
 800cf50:	0800cce5 	.word	0x0800cce5

0800cf54 <_malloc_usable_size_r>:
 800cf54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cf58:	1f18      	subs	r0, r3, #4
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	bfbc      	itt	lt
 800cf5e:	580b      	ldrlt	r3, [r1, r0]
 800cf60:	18c0      	addlt	r0, r0, r3
 800cf62:	4770      	bx	lr

0800cf64 <_raise_r>:
 800cf64:	291f      	cmp	r1, #31
 800cf66:	b538      	push	{r3, r4, r5, lr}
 800cf68:	4604      	mov	r4, r0
 800cf6a:	460d      	mov	r5, r1
 800cf6c:	d904      	bls.n	800cf78 <_raise_r+0x14>
 800cf6e:	2316      	movs	r3, #22
 800cf70:	6003      	str	r3, [r0, #0]
 800cf72:	f04f 30ff 	mov.w	r0, #4294967295
 800cf76:	bd38      	pop	{r3, r4, r5, pc}
 800cf78:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cf7a:	b112      	cbz	r2, 800cf82 <_raise_r+0x1e>
 800cf7c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cf80:	b94b      	cbnz	r3, 800cf96 <_raise_r+0x32>
 800cf82:	4620      	mov	r0, r4
 800cf84:	f000 f830 	bl	800cfe8 <_getpid_r>
 800cf88:	462a      	mov	r2, r5
 800cf8a:	4601      	mov	r1, r0
 800cf8c:	4620      	mov	r0, r4
 800cf8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cf92:	f000 b817 	b.w	800cfc4 <_kill_r>
 800cf96:	2b01      	cmp	r3, #1
 800cf98:	d00a      	beq.n	800cfb0 <_raise_r+0x4c>
 800cf9a:	1c59      	adds	r1, r3, #1
 800cf9c:	d103      	bne.n	800cfa6 <_raise_r+0x42>
 800cf9e:	2316      	movs	r3, #22
 800cfa0:	6003      	str	r3, [r0, #0]
 800cfa2:	2001      	movs	r0, #1
 800cfa4:	e7e7      	b.n	800cf76 <_raise_r+0x12>
 800cfa6:	2400      	movs	r4, #0
 800cfa8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cfac:	4628      	mov	r0, r5
 800cfae:	4798      	blx	r3
 800cfb0:	2000      	movs	r0, #0
 800cfb2:	e7e0      	b.n	800cf76 <_raise_r+0x12>

0800cfb4 <raise>:
 800cfb4:	4b02      	ldr	r3, [pc, #8]	; (800cfc0 <raise+0xc>)
 800cfb6:	4601      	mov	r1, r0
 800cfb8:	6818      	ldr	r0, [r3, #0]
 800cfba:	f7ff bfd3 	b.w	800cf64 <_raise_r>
 800cfbe:	bf00      	nop
 800cfc0:	2000017c 	.word	0x2000017c

0800cfc4 <_kill_r>:
 800cfc4:	b538      	push	{r3, r4, r5, lr}
 800cfc6:	4d07      	ldr	r5, [pc, #28]	; (800cfe4 <_kill_r+0x20>)
 800cfc8:	2300      	movs	r3, #0
 800cfca:	4604      	mov	r4, r0
 800cfcc:	4608      	mov	r0, r1
 800cfce:	4611      	mov	r1, r2
 800cfd0:	602b      	str	r3, [r5, #0]
 800cfd2:	f7f4 fc1d 	bl	8001810 <_kill>
 800cfd6:	1c43      	adds	r3, r0, #1
 800cfd8:	d102      	bne.n	800cfe0 <_kill_r+0x1c>
 800cfda:	682b      	ldr	r3, [r5, #0]
 800cfdc:	b103      	cbz	r3, 800cfe0 <_kill_r+0x1c>
 800cfde:	6023      	str	r3, [r4, #0]
 800cfe0:	bd38      	pop	{r3, r4, r5, pc}
 800cfe2:	bf00      	nop
 800cfe4:	2000161c 	.word	0x2000161c

0800cfe8 <_getpid_r>:
 800cfe8:	f7f4 bc0a 	b.w	8001800 <_getpid>

0800cfec <__sread>:
 800cfec:	b510      	push	{r4, lr}
 800cfee:	460c      	mov	r4, r1
 800cff0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cff4:	f000 f894 	bl	800d120 <_read_r>
 800cff8:	2800      	cmp	r0, #0
 800cffa:	bfab      	itete	ge
 800cffc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cffe:	89a3      	ldrhlt	r3, [r4, #12]
 800d000:	181b      	addge	r3, r3, r0
 800d002:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d006:	bfac      	ite	ge
 800d008:	6563      	strge	r3, [r4, #84]	; 0x54
 800d00a:	81a3      	strhlt	r3, [r4, #12]
 800d00c:	bd10      	pop	{r4, pc}

0800d00e <__swrite>:
 800d00e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d012:	461f      	mov	r7, r3
 800d014:	898b      	ldrh	r3, [r1, #12]
 800d016:	05db      	lsls	r3, r3, #23
 800d018:	4605      	mov	r5, r0
 800d01a:	460c      	mov	r4, r1
 800d01c:	4616      	mov	r6, r2
 800d01e:	d505      	bpl.n	800d02c <__swrite+0x1e>
 800d020:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d024:	2302      	movs	r3, #2
 800d026:	2200      	movs	r2, #0
 800d028:	f000 f868 	bl	800d0fc <_lseek_r>
 800d02c:	89a3      	ldrh	r3, [r4, #12]
 800d02e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d032:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d036:	81a3      	strh	r3, [r4, #12]
 800d038:	4632      	mov	r2, r6
 800d03a:	463b      	mov	r3, r7
 800d03c:	4628      	mov	r0, r5
 800d03e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d042:	f000 b817 	b.w	800d074 <_write_r>

0800d046 <__sseek>:
 800d046:	b510      	push	{r4, lr}
 800d048:	460c      	mov	r4, r1
 800d04a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d04e:	f000 f855 	bl	800d0fc <_lseek_r>
 800d052:	1c43      	adds	r3, r0, #1
 800d054:	89a3      	ldrh	r3, [r4, #12]
 800d056:	bf15      	itete	ne
 800d058:	6560      	strne	r0, [r4, #84]	; 0x54
 800d05a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d05e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d062:	81a3      	strheq	r3, [r4, #12]
 800d064:	bf18      	it	ne
 800d066:	81a3      	strhne	r3, [r4, #12]
 800d068:	bd10      	pop	{r4, pc}

0800d06a <__sclose>:
 800d06a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d06e:	f000 b813 	b.w	800d098 <_close_r>
	...

0800d074 <_write_r>:
 800d074:	b538      	push	{r3, r4, r5, lr}
 800d076:	4d07      	ldr	r5, [pc, #28]	; (800d094 <_write_r+0x20>)
 800d078:	4604      	mov	r4, r0
 800d07a:	4608      	mov	r0, r1
 800d07c:	4611      	mov	r1, r2
 800d07e:	2200      	movs	r2, #0
 800d080:	602a      	str	r2, [r5, #0]
 800d082:	461a      	mov	r2, r3
 800d084:	f7f4 fbfb 	bl	800187e <_write>
 800d088:	1c43      	adds	r3, r0, #1
 800d08a:	d102      	bne.n	800d092 <_write_r+0x1e>
 800d08c:	682b      	ldr	r3, [r5, #0]
 800d08e:	b103      	cbz	r3, 800d092 <_write_r+0x1e>
 800d090:	6023      	str	r3, [r4, #0]
 800d092:	bd38      	pop	{r3, r4, r5, pc}
 800d094:	2000161c 	.word	0x2000161c

0800d098 <_close_r>:
 800d098:	b538      	push	{r3, r4, r5, lr}
 800d09a:	4d06      	ldr	r5, [pc, #24]	; (800d0b4 <_close_r+0x1c>)
 800d09c:	2300      	movs	r3, #0
 800d09e:	4604      	mov	r4, r0
 800d0a0:	4608      	mov	r0, r1
 800d0a2:	602b      	str	r3, [r5, #0]
 800d0a4:	f7f4 fc07 	bl	80018b6 <_close>
 800d0a8:	1c43      	adds	r3, r0, #1
 800d0aa:	d102      	bne.n	800d0b2 <_close_r+0x1a>
 800d0ac:	682b      	ldr	r3, [r5, #0]
 800d0ae:	b103      	cbz	r3, 800d0b2 <_close_r+0x1a>
 800d0b0:	6023      	str	r3, [r4, #0]
 800d0b2:	bd38      	pop	{r3, r4, r5, pc}
 800d0b4:	2000161c 	.word	0x2000161c

0800d0b8 <_fstat_r>:
 800d0b8:	b538      	push	{r3, r4, r5, lr}
 800d0ba:	4d07      	ldr	r5, [pc, #28]	; (800d0d8 <_fstat_r+0x20>)
 800d0bc:	2300      	movs	r3, #0
 800d0be:	4604      	mov	r4, r0
 800d0c0:	4608      	mov	r0, r1
 800d0c2:	4611      	mov	r1, r2
 800d0c4:	602b      	str	r3, [r5, #0]
 800d0c6:	f7f4 fc02 	bl	80018ce <_fstat>
 800d0ca:	1c43      	adds	r3, r0, #1
 800d0cc:	d102      	bne.n	800d0d4 <_fstat_r+0x1c>
 800d0ce:	682b      	ldr	r3, [r5, #0]
 800d0d0:	b103      	cbz	r3, 800d0d4 <_fstat_r+0x1c>
 800d0d2:	6023      	str	r3, [r4, #0]
 800d0d4:	bd38      	pop	{r3, r4, r5, pc}
 800d0d6:	bf00      	nop
 800d0d8:	2000161c 	.word	0x2000161c

0800d0dc <_isatty_r>:
 800d0dc:	b538      	push	{r3, r4, r5, lr}
 800d0de:	4d06      	ldr	r5, [pc, #24]	; (800d0f8 <_isatty_r+0x1c>)
 800d0e0:	2300      	movs	r3, #0
 800d0e2:	4604      	mov	r4, r0
 800d0e4:	4608      	mov	r0, r1
 800d0e6:	602b      	str	r3, [r5, #0]
 800d0e8:	f7f4 fc01 	bl	80018ee <_isatty>
 800d0ec:	1c43      	adds	r3, r0, #1
 800d0ee:	d102      	bne.n	800d0f6 <_isatty_r+0x1a>
 800d0f0:	682b      	ldr	r3, [r5, #0]
 800d0f2:	b103      	cbz	r3, 800d0f6 <_isatty_r+0x1a>
 800d0f4:	6023      	str	r3, [r4, #0]
 800d0f6:	bd38      	pop	{r3, r4, r5, pc}
 800d0f8:	2000161c 	.word	0x2000161c

0800d0fc <_lseek_r>:
 800d0fc:	b538      	push	{r3, r4, r5, lr}
 800d0fe:	4d07      	ldr	r5, [pc, #28]	; (800d11c <_lseek_r+0x20>)
 800d100:	4604      	mov	r4, r0
 800d102:	4608      	mov	r0, r1
 800d104:	4611      	mov	r1, r2
 800d106:	2200      	movs	r2, #0
 800d108:	602a      	str	r2, [r5, #0]
 800d10a:	461a      	mov	r2, r3
 800d10c:	f7f4 fbfa 	bl	8001904 <_lseek>
 800d110:	1c43      	adds	r3, r0, #1
 800d112:	d102      	bne.n	800d11a <_lseek_r+0x1e>
 800d114:	682b      	ldr	r3, [r5, #0]
 800d116:	b103      	cbz	r3, 800d11a <_lseek_r+0x1e>
 800d118:	6023      	str	r3, [r4, #0]
 800d11a:	bd38      	pop	{r3, r4, r5, pc}
 800d11c:	2000161c 	.word	0x2000161c

0800d120 <_read_r>:
 800d120:	b538      	push	{r3, r4, r5, lr}
 800d122:	4d07      	ldr	r5, [pc, #28]	; (800d140 <_read_r+0x20>)
 800d124:	4604      	mov	r4, r0
 800d126:	4608      	mov	r0, r1
 800d128:	4611      	mov	r1, r2
 800d12a:	2200      	movs	r2, #0
 800d12c:	602a      	str	r2, [r5, #0]
 800d12e:	461a      	mov	r2, r3
 800d130:	f7f4 fb88 	bl	8001844 <_read>
 800d134:	1c43      	adds	r3, r0, #1
 800d136:	d102      	bne.n	800d13e <_read_r+0x1e>
 800d138:	682b      	ldr	r3, [r5, #0]
 800d13a:	b103      	cbz	r3, 800d13e <_read_r+0x1e>
 800d13c:	6023      	str	r3, [r4, #0]
 800d13e:	bd38      	pop	{r3, r4, r5, pc}
 800d140:	2000161c 	.word	0x2000161c

0800d144 <pow>:
 800d144:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d148:	ec59 8b10 	vmov	r8, r9, d0
 800d14c:	ec57 6b11 	vmov	r6, r7, d1
 800d150:	f000 f8da 	bl	800d308 <__ieee754_pow>
 800d154:	4b4e      	ldr	r3, [pc, #312]	; (800d290 <pow+0x14c>)
 800d156:	f993 3000 	ldrsb.w	r3, [r3]
 800d15a:	3301      	adds	r3, #1
 800d15c:	ec55 4b10 	vmov	r4, r5, d0
 800d160:	d015      	beq.n	800d18e <pow+0x4a>
 800d162:	4632      	mov	r2, r6
 800d164:	463b      	mov	r3, r7
 800d166:	4630      	mov	r0, r6
 800d168:	4639      	mov	r1, r7
 800d16a:	f7f3 fcdf 	bl	8000b2c <__aeabi_dcmpun>
 800d16e:	b970      	cbnz	r0, 800d18e <pow+0x4a>
 800d170:	4642      	mov	r2, r8
 800d172:	464b      	mov	r3, r9
 800d174:	4640      	mov	r0, r8
 800d176:	4649      	mov	r1, r9
 800d178:	f7f3 fcd8 	bl	8000b2c <__aeabi_dcmpun>
 800d17c:	2200      	movs	r2, #0
 800d17e:	2300      	movs	r3, #0
 800d180:	b148      	cbz	r0, 800d196 <pow+0x52>
 800d182:	4630      	mov	r0, r6
 800d184:	4639      	mov	r1, r7
 800d186:	f7f3 fc9f 	bl	8000ac8 <__aeabi_dcmpeq>
 800d18a:	2800      	cmp	r0, #0
 800d18c:	d17d      	bne.n	800d28a <pow+0x146>
 800d18e:	ec45 4b10 	vmov	d0, r4, r5
 800d192:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d196:	4640      	mov	r0, r8
 800d198:	4649      	mov	r1, r9
 800d19a:	f7f3 fc95 	bl	8000ac8 <__aeabi_dcmpeq>
 800d19e:	b1e0      	cbz	r0, 800d1da <pow+0x96>
 800d1a0:	2200      	movs	r2, #0
 800d1a2:	2300      	movs	r3, #0
 800d1a4:	4630      	mov	r0, r6
 800d1a6:	4639      	mov	r1, r7
 800d1a8:	f7f3 fc8e 	bl	8000ac8 <__aeabi_dcmpeq>
 800d1ac:	2800      	cmp	r0, #0
 800d1ae:	d16c      	bne.n	800d28a <pow+0x146>
 800d1b0:	ec47 6b10 	vmov	d0, r6, r7
 800d1b4:	f000 fe87 	bl	800dec6 <finite>
 800d1b8:	2800      	cmp	r0, #0
 800d1ba:	d0e8      	beq.n	800d18e <pow+0x4a>
 800d1bc:	2200      	movs	r2, #0
 800d1be:	2300      	movs	r3, #0
 800d1c0:	4630      	mov	r0, r6
 800d1c2:	4639      	mov	r1, r7
 800d1c4:	f7f3 fc8a 	bl	8000adc <__aeabi_dcmplt>
 800d1c8:	2800      	cmp	r0, #0
 800d1ca:	d0e0      	beq.n	800d18e <pow+0x4a>
 800d1cc:	f7fd f8f2 	bl	800a3b4 <__errno>
 800d1d0:	2321      	movs	r3, #33	; 0x21
 800d1d2:	6003      	str	r3, [r0, #0]
 800d1d4:	2400      	movs	r4, #0
 800d1d6:	4d2f      	ldr	r5, [pc, #188]	; (800d294 <pow+0x150>)
 800d1d8:	e7d9      	b.n	800d18e <pow+0x4a>
 800d1da:	ec45 4b10 	vmov	d0, r4, r5
 800d1de:	f000 fe72 	bl	800dec6 <finite>
 800d1e2:	bbb8      	cbnz	r0, 800d254 <pow+0x110>
 800d1e4:	ec49 8b10 	vmov	d0, r8, r9
 800d1e8:	f000 fe6d 	bl	800dec6 <finite>
 800d1ec:	b390      	cbz	r0, 800d254 <pow+0x110>
 800d1ee:	ec47 6b10 	vmov	d0, r6, r7
 800d1f2:	f000 fe68 	bl	800dec6 <finite>
 800d1f6:	b368      	cbz	r0, 800d254 <pow+0x110>
 800d1f8:	4622      	mov	r2, r4
 800d1fa:	462b      	mov	r3, r5
 800d1fc:	4620      	mov	r0, r4
 800d1fe:	4629      	mov	r1, r5
 800d200:	f7f3 fc94 	bl	8000b2c <__aeabi_dcmpun>
 800d204:	b160      	cbz	r0, 800d220 <pow+0xdc>
 800d206:	f7fd f8d5 	bl	800a3b4 <__errno>
 800d20a:	2321      	movs	r3, #33	; 0x21
 800d20c:	6003      	str	r3, [r0, #0]
 800d20e:	2200      	movs	r2, #0
 800d210:	2300      	movs	r3, #0
 800d212:	4610      	mov	r0, r2
 800d214:	4619      	mov	r1, r3
 800d216:	f7f3 fb19 	bl	800084c <__aeabi_ddiv>
 800d21a:	4604      	mov	r4, r0
 800d21c:	460d      	mov	r5, r1
 800d21e:	e7b6      	b.n	800d18e <pow+0x4a>
 800d220:	f7fd f8c8 	bl	800a3b4 <__errno>
 800d224:	2322      	movs	r3, #34	; 0x22
 800d226:	6003      	str	r3, [r0, #0]
 800d228:	2200      	movs	r2, #0
 800d22a:	2300      	movs	r3, #0
 800d22c:	4640      	mov	r0, r8
 800d22e:	4649      	mov	r1, r9
 800d230:	f7f3 fc54 	bl	8000adc <__aeabi_dcmplt>
 800d234:	2400      	movs	r4, #0
 800d236:	b158      	cbz	r0, 800d250 <pow+0x10c>
 800d238:	ec47 6b10 	vmov	d0, r6, r7
 800d23c:	f000 fe58 	bl	800def0 <rint>
 800d240:	4632      	mov	r2, r6
 800d242:	ec51 0b10 	vmov	r0, r1, d0
 800d246:	463b      	mov	r3, r7
 800d248:	f7f3 fc3e 	bl	8000ac8 <__aeabi_dcmpeq>
 800d24c:	2800      	cmp	r0, #0
 800d24e:	d0c2      	beq.n	800d1d6 <pow+0x92>
 800d250:	4d11      	ldr	r5, [pc, #68]	; (800d298 <pow+0x154>)
 800d252:	e79c      	b.n	800d18e <pow+0x4a>
 800d254:	2200      	movs	r2, #0
 800d256:	2300      	movs	r3, #0
 800d258:	4620      	mov	r0, r4
 800d25a:	4629      	mov	r1, r5
 800d25c:	f7f3 fc34 	bl	8000ac8 <__aeabi_dcmpeq>
 800d260:	2800      	cmp	r0, #0
 800d262:	d094      	beq.n	800d18e <pow+0x4a>
 800d264:	ec49 8b10 	vmov	d0, r8, r9
 800d268:	f000 fe2d 	bl	800dec6 <finite>
 800d26c:	2800      	cmp	r0, #0
 800d26e:	d08e      	beq.n	800d18e <pow+0x4a>
 800d270:	ec47 6b10 	vmov	d0, r6, r7
 800d274:	f000 fe27 	bl	800dec6 <finite>
 800d278:	2800      	cmp	r0, #0
 800d27a:	d088      	beq.n	800d18e <pow+0x4a>
 800d27c:	f7fd f89a 	bl	800a3b4 <__errno>
 800d280:	2322      	movs	r3, #34	; 0x22
 800d282:	6003      	str	r3, [r0, #0]
 800d284:	2400      	movs	r4, #0
 800d286:	2500      	movs	r5, #0
 800d288:	e781      	b.n	800d18e <pow+0x4a>
 800d28a:	4d04      	ldr	r5, [pc, #16]	; (800d29c <pow+0x158>)
 800d28c:	2400      	movs	r4, #0
 800d28e:	e77e      	b.n	800d18e <pow+0x4a>
 800d290:	2000034c 	.word	0x2000034c
 800d294:	fff00000 	.word	0xfff00000
 800d298:	7ff00000 	.word	0x7ff00000
 800d29c:	3ff00000 	.word	0x3ff00000

0800d2a0 <sqrt>:
 800d2a0:	b538      	push	{r3, r4, r5, lr}
 800d2a2:	ed2d 8b02 	vpush	{d8}
 800d2a6:	ec55 4b10 	vmov	r4, r5, d0
 800d2aa:	f000 fd4f 	bl	800dd4c <__ieee754_sqrt>
 800d2ae:	4b15      	ldr	r3, [pc, #84]	; (800d304 <sqrt+0x64>)
 800d2b0:	eeb0 8a40 	vmov.f32	s16, s0
 800d2b4:	eef0 8a60 	vmov.f32	s17, s1
 800d2b8:	f993 3000 	ldrsb.w	r3, [r3]
 800d2bc:	3301      	adds	r3, #1
 800d2be:	d019      	beq.n	800d2f4 <sqrt+0x54>
 800d2c0:	4622      	mov	r2, r4
 800d2c2:	462b      	mov	r3, r5
 800d2c4:	4620      	mov	r0, r4
 800d2c6:	4629      	mov	r1, r5
 800d2c8:	f7f3 fc30 	bl	8000b2c <__aeabi_dcmpun>
 800d2cc:	b990      	cbnz	r0, 800d2f4 <sqrt+0x54>
 800d2ce:	2200      	movs	r2, #0
 800d2d0:	2300      	movs	r3, #0
 800d2d2:	4620      	mov	r0, r4
 800d2d4:	4629      	mov	r1, r5
 800d2d6:	f7f3 fc01 	bl	8000adc <__aeabi_dcmplt>
 800d2da:	b158      	cbz	r0, 800d2f4 <sqrt+0x54>
 800d2dc:	f7fd f86a 	bl	800a3b4 <__errno>
 800d2e0:	2321      	movs	r3, #33	; 0x21
 800d2e2:	6003      	str	r3, [r0, #0]
 800d2e4:	2200      	movs	r2, #0
 800d2e6:	2300      	movs	r3, #0
 800d2e8:	4610      	mov	r0, r2
 800d2ea:	4619      	mov	r1, r3
 800d2ec:	f7f3 faae 	bl	800084c <__aeabi_ddiv>
 800d2f0:	ec41 0b18 	vmov	d8, r0, r1
 800d2f4:	eeb0 0a48 	vmov.f32	s0, s16
 800d2f8:	eef0 0a68 	vmov.f32	s1, s17
 800d2fc:	ecbd 8b02 	vpop	{d8}
 800d300:	bd38      	pop	{r3, r4, r5, pc}
 800d302:	bf00      	nop
 800d304:	2000034c 	.word	0x2000034c

0800d308 <__ieee754_pow>:
 800d308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d30c:	ed2d 8b06 	vpush	{d8-d10}
 800d310:	b08d      	sub	sp, #52	; 0x34
 800d312:	ed8d 1b02 	vstr	d1, [sp, #8]
 800d316:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800d31a:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800d31e:	ea56 0100 	orrs.w	r1, r6, r0
 800d322:	ec53 2b10 	vmov	r2, r3, d0
 800d326:	f000 84d1 	beq.w	800dccc <__ieee754_pow+0x9c4>
 800d32a:	497f      	ldr	r1, [pc, #508]	; (800d528 <__ieee754_pow+0x220>)
 800d32c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800d330:	428c      	cmp	r4, r1
 800d332:	ee10 8a10 	vmov	r8, s0
 800d336:	4699      	mov	r9, r3
 800d338:	dc09      	bgt.n	800d34e <__ieee754_pow+0x46>
 800d33a:	d103      	bne.n	800d344 <__ieee754_pow+0x3c>
 800d33c:	b97a      	cbnz	r2, 800d35e <__ieee754_pow+0x56>
 800d33e:	42a6      	cmp	r6, r4
 800d340:	dd02      	ble.n	800d348 <__ieee754_pow+0x40>
 800d342:	e00c      	b.n	800d35e <__ieee754_pow+0x56>
 800d344:	428e      	cmp	r6, r1
 800d346:	dc02      	bgt.n	800d34e <__ieee754_pow+0x46>
 800d348:	428e      	cmp	r6, r1
 800d34a:	d110      	bne.n	800d36e <__ieee754_pow+0x66>
 800d34c:	b178      	cbz	r0, 800d36e <__ieee754_pow+0x66>
 800d34e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800d352:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d356:	ea54 0308 	orrs.w	r3, r4, r8
 800d35a:	f000 84b7 	beq.w	800dccc <__ieee754_pow+0x9c4>
 800d35e:	4873      	ldr	r0, [pc, #460]	; (800d52c <__ieee754_pow+0x224>)
 800d360:	b00d      	add	sp, #52	; 0x34
 800d362:	ecbd 8b06 	vpop	{d8-d10}
 800d366:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d36a:	f000 bdb9 	b.w	800dee0 <nan>
 800d36e:	f1b9 0f00 	cmp.w	r9, #0
 800d372:	da36      	bge.n	800d3e2 <__ieee754_pow+0xda>
 800d374:	496e      	ldr	r1, [pc, #440]	; (800d530 <__ieee754_pow+0x228>)
 800d376:	428e      	cmp	r6, r1
 800d378:	dc51      	bgt.n	800d41e <__ieee754_pow+0x116>
 800d37a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800d37e:	428e      	cmp	r6, r1
 800d380:	f340 84af 	ble.w	800dce2 <__ieee754_pow+0x9da>
 800d384:	1531      	asrs	r1, r6, #20
 800d386:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800d38a:	2914      	cmp	r1, #20
 800d38c:	dd0f      	ble.n	800d3ae <__ieee754_pow+0xa6>
 800d38e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800d392:	fa20 fc01 	lsr.w	ip, r0, r1
 800d396:	fa0c f101 	lsl.w	r1, ip, r1
 800d39a:	4281      	cmp	r1, r0
 800d39c:	f040 84a1 	bne.w	800dce2 <__ieee754_pow+0x9da>
 800d3a0:	f00c 0c01 	and.w	ip, ip, #1
 800d3a4:	f1cc 0102 	rsb	r1, ip, #2
 800d3a8:	9100      	str	r1, [sp, #0]
 800d3aa:	b180      	cbz	r0, 800d3ce <__ieee754_pow+0xc6>
 800d3ac:	e059      	b.n	800d462 <__ieee754_pow+0x15a>
 800d3ae:	2800      	cmp	r0, #0
 800d3b0:	d155      	bne.n	800d45e <__ieee754_pow+0x156>
 800d3b2:	f1c1 0114 	rsb	r1, r1, #20
 800d3b6:	fa46 fc01 	asr.w	ip, r6, r1
 800d3ba:	fa0c f101 	lsl.w	r1, ip, r1
 800d3be:	42b1      	cmp	r1, r6
 800d3c0:	f040 848c 	bne.w	800dcdc <__ieee754_pow+0x9d4>
 800d3c4:	f00c 0c01 	and.w	ip, ip, #1
 800d3c8:	f1cc 0102 	rsb	r1, ip, #2
 800d3cc:	9100      	str	r1, [sp, #0]
 800d3ce:	4959      	ldr	r1, [pc, #356]	; (800d534 <__ieee754_pow+0x22c>)
 800d3d0:	428e      	cmp	r6, r1
 800d3d2:	d12d      	bne.n	800d430 <__ieee754_pow+0x128>
 800d3d4:	2f00      	cmp	r7, #0
 800d3d6:	da79      	bge.n	800d4cc <__ieee754_pow+0x1c4>
 800d3d8:	4956      	ldr	r1, [pc, #344]	; (800d534 <__ieee754_pow+0x22c>)
 800d3da:	2000      	movs	r0, #0
 800d3dc:	f7f3 fa36 	bl	800084c <__aeabi_ddiv>
 800d3e0:	e016      	b.n	800d410 <__ieee754_pow+0x108>
 800d3e2:	2100      	movs	r1, #0
 800d3e4:	9100      	str	r1, [sp, #0]
 800d3e6:	2800      	cmp	r0, #0
 800d3e8:	d13b      	bne.n	800d462 <__ieee754_pow+0x15a>
 800d3ea:	494f      	ldr	r1, [pc, #316]	; (800d528 <__ieee754_pow+0x220>)
 800d3ec:	428e      	cmp	r6, r1
 800d3ee:	d1ee      	bne.n	800d3ce <__ieee754_pow+0xc6>
 800d3f0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800d3f4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800d3f8:	ea53 0308 	orrs.w	r3, r3, r8
 800d3fc:	f000 8466 	beq.w	800dccc <__ieee754_pow+0x9c4>
 800d400:	4b4d      	ldr	r3, [pc, #308]	; (800d538 <__ieee754_pow+0x230>)
 800d402:	429c      	cmp	r4, r3
 800d404:	dd0d      	ble.n	800d422 <__ieee754_pow+0x11a>
 800d406:	2f00      	cmp	r7, #0
 800d408:	f280 8464 	bge.w	800dcd4 <__ieee754_pow+0x9cc>
 800d40c:	2000      	movs	r0, #0
 800d40e:	2100      	movs	r1, #0
 800d410:	ec41 0b10 	vmov	d0, r0, r1
 800d414:	b00d      	add	sp, #52	; 0x34
 800d416:	ecbd 8b06 	vpop	{d8-d10}
 800d41a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d41e:	2102      	movs	r1, #2
 800d420:	e7e0      	b.n	800d3e4 <__ieee754_pow+0xdc>
 800d422:	2f00      	cmp	r7, #0
 800d424:	daf2      	bge.n	800d40c <__ieee754_pow+0x104>
 800d426:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800d42a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d42e:	e7ef      	b.n	800d410 <__ieee754_pow+0x108>
 800d430:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800d434:	d104      	bne.n	800d440 <__ieee754_pow+0x138>
 800d436:	4610      	mov	r0, r2
 800d438:	4619      	mov	r1, r3
 800d43a:	f7f3 f8dd 	bl	80005f8 <__aeabi_dmul>
 800d43e:	e7e7      	b.n	800d410 <__ieee754_pow+0x108>
 800d440:	493e      	ldr	r1, [pc, #248]	; (800d53c <__ieee754_pow+0x234>)
 800d442:	428f      	cmp	r7, r1
 800d444:	d10d      	bne.n	800d462 <__ieee754_pow+0x15a>
 800d446:	f1b9 0f00 	cmp.w	r9, #0
 800d44a:	db0a      	blt.n	800d462 <__ieee754_pow+0x15a>
 800d44c:	ec43 2b10 	vmov	d0, r2, r3
 800d450:	b00d      	add	sp, #52	; 0x34
 800d452:	ecbd 8b06 	vpop	{d8-d10}
 800d456:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d45a:	f000 bc77 	b.w	800dd4c <__ieee754_sqrt>
 800d45e:	2100      	movs	r1, #0
 800d460:	9100      	str	r1, [sp, #0]
 800d462:	ec43 2b10 	vmov	d0, r2, r3
 800d466:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d46a:	f000 fd23 	bl	800deb4 <fabs>
 800d46e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d472:	ec51 0b10 	vmov	r0, r1, d0
 800d476:	f1b8 0f00 	cmp.w	r8, #0
 800d47a:	d12a      	bne.n	800d4d2 <__ieee754_pow+0x1ca>
 800d47c:	b12c      	cbz	r4, 800d48a <__ieee754_pow+0x182>
 800d47e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800d534 <__ieee754_pow+0x22c>
 800d482:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800d486:	45e6      	cmp	lr, ip
 800d488:	d123      	bne.n	800d4d2 <__ieee754_pow+0x1ca>
 800d48a:	2f00      	cmp	r7, #0
 800d48c:	da05      	bge.n	800d49a <__ieee754_pow+0x192>
 800d48e:	4602      	mov	r2, r0
 800d490:	460b      	mov	r3, r1
 800d492:	2000      	movs	r0, #0
 800d494:	4927      	ldr	r1, [pc, #156]	; (800d534 <__ieee754_pow+0x22c>)
 800d496:	f7f3 f9d9 	bl	800084c <__aeabi_ddiv>
 800d49a:	f1b9 0f00 	cmp.w	r9, #0
 800d49e:	dab7      	bge.n	800d410 <__ieee754_pow+0x108>
 800d4a0:	9b00      	ldr	r3, [sp, #0]
 800d4a2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800d4a6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d4aa:	4323      	orrs	r3, r4
 800d4ac:	d108      	bne.n	800d4c0 <__ieee754_pow+0x1b8>
 800d4ae:	4602      	mov	r2, r0
 800d4b0:	460b      	mov	r3, r1
 800d4b2:	4610      	mov	r0, r2
 800d4b4:	4619      	mov	r1, r3
 800d4b6:	f7f2 fee7 	bl	8000288 <__aeabi_dsub>
 800d4ba:	4602      	mov	r2, r0
 800d4bc:	460b      	mov	r3, r1
 800d4be:	e78d      	b.n	800d3dc <__ieee754_pow+0xd4>
 800d4c0:	9b00      	ldr	r3, [sp, #0]
 800d4c2:	2b01      	cmp	r3, #1
 800d4c4:	d1a4      	bne.n	800d410 <__ieee754_pow+0x108>
 800d4c6:	4602      	mov	r2, r0
 800d4c8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d4cc:	4610      	mov	r0, r2
 800d4ce:	4619      	mov	r1, r3
 800d4d0:	e79e      	b.n	800d410 <__ieee754_pow+0x108>
 800d4d2:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800d4d6:	f10c 35ff 	add.w	r5, ip, #4294967295
 800d4da:	950a      	str	r5, [sp, #40]	; 0x28
 800d4dc:	9d00      	ldr	r5, [sp, #0]
 800d4de:	46ac      	mov	ip, r5
 800d4e0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800d4e2:	ea5c 0505 	orrs.w	r5, ip, r5
 800d4e6:	d0e4      	beq.n	800d4b2 <__ieee754_pow+0x1aa>
 800d4e8:	4b15      	ldr	r3, [pc, #84]	; (800d540 <__ieee754_pow+0x238>)
 800d4ea:	429e      	cmp	r6, r3
 800d4ec:	f340 80fc 	ble.w	800d6e8 <__ieee754_pow+0x3e0>
 800d4f0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800d4f4:	429e      	cmp	r6, r3
 800d4f6:	4b10      	ldr	r3, [pc, #64]	; (800d538 <__ieee754_pow+0x230>)
 800d4f8:	dd07      	ble.n	800d50a <__ieee754_pow+0x202>
 800d4fa:	429c      	cmp	r4, r3
 800d4fc:	dc0a      	bgt.n	800d514 <__ieee754_pow+0x20c>
 800d4fe:	2f00      	cmp	r7, #0
 800d500:	da84      	bge.n	800d40c <__ieee754_pow+0x104>
 800d502:	a307      	add	r3, pc, #28	; (adr r3, 800d520 <__ieee754_pow+0x218>)
 800d504:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d508:	e795      	b.n	800d436 <__ieee754_pow+0x12e>
 800d50a:	429c      	cmp	r4, r3
 800d50c:	dbf7      	blt.n	800d4fe <__ieee754_pow+0x1f6>
 800d50e:	4b09      	ldr	r3, [pc, #36]	; (800d534 <__ieee754_pow+0x22c>)
 800d510:	429c      	cmp	r4, r3
 800d512:	dd17      	ble.n	800d544 <__ieee754_pow+0x23c>
 800d514:	2f00      	cmp	r7, #0
 800d516:	dcf4      	bgt.n	800d502 <__ieee754_pow+0x1fa>
 800d518:	e778      	b.n	800d40c <__ieee754_pow+0x104>
 800d51a:	bf00      	nop
 800d51c:	f3af 8000 	nop.w
 800d520:	8800759c 	.word	0x8800759c
 800d524:	7e37e43c 	.word	0x7e37e43c
 800d528:	7ff00000 	.word	0x7ff00000
 800d52c:	0800e490 	.word	0x0800e490
 800d530:	433fffff 	.word	0x433fffff
 800d534:	3ff00000 	.word	0x3ff00000
 800d538:	3fefffff 	.word	0x3fefffff
 800d53c:	3fe00000 	.word	0x3fe00000
 800d540:	41e00000 	.word	0x41e00000
 800d544:	4b64      	ldr	r3, [pc, #400]	; (800d6d8 <__ieee754_pow+0x3d0>)
 800d546:	2200      	movs	r2, #0
 800d548:	f7f2 fe9e 	bl	8000288 <__aeabi_dsub>
 800d54c:	a356      	add	r3, pc, #344	; (adr r3, 800d6a8 <__ieee754_pow+0x3a0>)
 800d54e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d552:	4604      	mov	r4, r0
 800d554:	460d      	mov	r5, r1
 800d556:	f7f3 f84f 	bl	80005f8 <__aeabi_dmul>
 800d55a:	a355      	add	r3, pc, #340	; (adr r3, 800d6b0 <__ieee754_pow+0x3a8>)
 800d55c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d560:	4606      	mov	r6, r0
 800d562:	460f      	mov	r7, r1
 800d564:	4620      	mov	r0, r4
 800d566:	4629      	mov	r1, r5
 800d568:	f7f3 f846 	bl	80005f8 <__aeabi_dmul>
 800d56c:	4b5b      	ldr	r3, [pc, #364]	; (800d6dc <__ieee754_pow+0x3d4>)
 800d56e:	4682      	mov	sl, r0
 800d570:	468b      	mov	fp, r1
 800d572:	2200      	movs	r2, #0
 800d574:	4620      	mov	r0, r4
 800d576:	4629      	mov	r1, r5
 800d578:	f7f3 f83e 	bl	80005f8 <__aeabi_dmul>
 800d57c:	4602      	mov	r2, r0
 800d57e:	460b      	mov	r3, r1
 800d580:	a14d      	add	r1, pc, #308	; (adr r1, 800d6b8 <__ieee754_pow+0x3b0>)
 800d582:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d586:	f7f2 fe7f 	bl	8000288 <__aeabi_dsub>
 800d58a:	4622      	mov	r2, r4
 800d58c:	462b      	mov	r3, r5
 800d58e:	f7f3 f833 	bl	80005f8 <__aeabi_dmul>
 800d592:	4602      	mov	r2, r0
 800d594:	460b      	mov	r3, r1
 800d596:	2000      	movs	r0, #0
 800d598:	4951      	ldr	r1, [pc, #324]	; (800d6e0 <__ieee754_pow+0x3d8>)
 800d59a:	f7f2 fe75 	bl	8000288 <__aeabi_dsub>
 800d59e:	4622      	mov	r2, r4
 800d5a0:	4680      	mov	r8, r0
 800d5a2:	4689      	mov	r9, r1
 800d5a4:	462b      	mov	r3, r5
 800d5a6:	4620      	mov	r0, r4
 800d5a8:	4629      	mov	r1, r5
 800d5aa:	f7f3 f825 	bl	80005f8 <__aeabi_dmul>
 800d5ae:	4602      	mov	r2, r0
 800d5b0:	460b      	mov	r3, r1
 800d5b2:	4640      	mov	r0, r8
 800d5b4:	4649      	mov	r1, r9
 800d5b6:	f7f3 f81f 	bl	80005f8 <__aeabi_dmul>
 800d5ba:	a341      	add	r3, pc, #260	; (adr r3, 800d6c0 <__ieee754_pow+0x3b8>)
 800d5bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5c0:	f7f3 f81a 	bl	80005f8 <__aeabi_dmul>
 800d5c4:	4602      	mov	r2, r0
 800d5c6:	460b      	mov	r3, r1
 800d5c8:	4650      	mov	r0, sl
 800d5ca:	4659      	mov	r1, fp
 800d5cc:	f7f2 fe5c 	bl	8000288 <__aeabi_dsub>
 800d5d0:	4602      	mov	r2, r0
 800d5d2:	460b      	mov	r3, r1
 800d5d4:	4680      	mov	r8, r0
 800d5d6:	4689      	mov	r9, r1
 800d5d8:	4630      	mov	r0, r6
 800d5da:	4639      	mov	r1, r7
 800d5dc:	f7f2 fe56 	bl	800028c <__adddf3>
 800d5e0:	2400      	movs	r4, #0
 800d5e2:	4632      	mov	r2, r6
 800d5e4:	463b      	mov	r3, r7
 800d5e6:	4620      	mov	r0, r4
 800d5e8:	460d      	mov	r5, r1
 800d5ea:	f7f2 fe4d 	bl	8000288 <__aeabi_dsub>
 800d5ee:	4602      	mov	r2, r0
 800d5f0:	460b      	mov	r3, r1
 800d5f2:	4640      	mov	r0, r8
 800d5f4:	4649      	mov	r1, r9
 800d5f6:	f7f2 fe47 	bl	8000288 <__aeabi_dsub>
 800d5fa:	9b00      	ldr	r3, [sp, #0]
 800d5fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d5fe:	3b01      	subs	r3, #1
 800d600:	4313      	orrs	r3, r2
 800d602:	4682      	mov	sl, r0
 800d604:	468b      	mov	fp, r1
 800d606:	f040 81f1 	bne.w	800d9ec <__ieee754_pow+0x6e4>
 800d60a:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800d6c8 <__ieee754_pow+0x3c0>
 800d60e:	eeb0 8a47 	vmov.f32	s16, s14
 800d612:	eef0 8a67 	vmov.f32	s17, s15
 800d616:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d61a:	2600      	movs	r6, #0
 800d61c:	4632      	mov	r2, r6
 800d61e:	463b      	mov	r3, r7
 800d620:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d624:	f7f2 fe30 	bl	8000288 <__aeabi_dsub>
 800d628:	4622      	mov	r2, r4
 800d62a:	462b      	mov	r3, r5
 800d62c:	f7f2 ffe4 	bl	80005f8 <__aeabi_dmul>
 800d630:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d634:	4680      	mov	r8, r0
 800d636:	4689      	mov	r9, r1
 800d638:	4650      	mov	r0, sl
 800d63a:	4659      	mov	r1, fp
 800d63c:	f7f2 ffdc 	bl	80005f8 <__aeabi_dmul>
 800d640:	4602      	mov	r2, r0
 800d642:	460b      	mov	r3, r1
 800d644:	4640      	mov	r0, r8
 800d646:	4649      	mov	r1, r9
 800d648:	f7f2 fe20 	bl	800028c <__adddf3>
 800d64c:	4632      	mov	r2, r6
 800d64e:	463b      	mov	r3, r7
 800d650:	4680      	mov	r8, r0
 800d652:	4689      	mov	r9, r1
 800d654:	4620      	mov	r0, r4
 800d656:	4629      	mov	r1, r5
 800d658:	f7f2 ffce 	bl	80005f8 <__aeabi_dmul>
 800d65c:	460b      	mov	r3, r1
 800d65e:	4604      	mov	r4, r0
 800d660:	460d      	mov	r5, r1
 800d662:	4602      	mov	r2, r0
 800d664:	4649      	mov	r1, r9
 800d666:	4640      	mov	r0, r8
 800d668:	f7f2 fe10 	bl	800028c <__adddf3>
 800d66c:	4b1d      	ldr	r3, [pc, #116]	; (800d6e4 <__ieee754_pow+0x3dc>)
 800d66e:	4299      	cmp	r1, r3
 800d670:	ec45 4b19 	vmov	d9, r4, r5
 800d674:	4606      	mov	r6, r0
 800d676:	460f      	mov	r7, r1
 800d678:	468b      	mov	fp, r1
 800d67a:	f340 82fe 	ble.w	800dc7a <__ieee754_pow+0x972>
 800d67e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800d682:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800d686:	4303      	orrs	r3, r0
 800d688:	f000 81f0 	beq.w	800da6c <__ieee754_pow+0x764>
 800d68c:	a310      	add	r3, pc, #64	; (adr r3, 800d6d0 <__ieee754_pow+0x3c8>)
 800d68e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d692:	ec51 0b18 	vmov	r0, r1, d8
 800d696:	f7f2 ffaf 	bl	80005f8 <__aeabi_dmul>
 800d69a:	a30d      	add	r3, pc, #52	; (adr r3, 800d6d0 <__ieee754_pow+0x3c8>)
 800d69c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6a0:	e6cb      	b.n	800d43a <__ieee754_pow+0x132>
 800d6a2:	bf00      	nop
 800d6a4:	f3af 8000 	nop.w
 800d6a8:	60000000 	.word	0x60000000
 800d6ac:	3ff71547 	.word	0x3ff71547
 800d6b0:	f85ddf44 	.word	0xf85ddf44
 800d6b4:	3e54ae0b 	.word	0x3e54ae0b
 800d6b8:	55555555 	.word	0x55555555
 800d6bc:	3fd55555 	.word	0x3fd55555
 800d6c0:	652b82fe 	.word	0x652b82fe
 800d6c4:	3ff71547 	.word	0x3ff71547
 800d6c8:	00000000 	.word	0x00000000
 800d6cc:	bff00000 	.word	0xbff00000
 800d6d0:	8800759c 	.word	0x8800759c
 800d6d4:	7e37e43c 	.word	0x7e37e43c
 800d6d8:	3ff00000 	.word	0x3ff00000
 800d6dc:	3fd00000 	.word	0x3fd00000
 800d6e0:	3fe00000 	.word	0x3fe00000
 800d6e4:	408fffff 	.word	0x408fffff
 800d6e8:	4bd7      	ldr	r3, [pc, #860]	; (800da48 <__ieee754_pow+0x740>)
 800d6ea:	ea03 0309 	and.w	r3, r3, r9
 800d6ee:	2200      	movs	r2, #0
 800d6f0:	b92b      	cbnz	r3, 800d6fe <__ieee754_pow+0x3f6>
 800d6f2:	4bd6      	ldr	r3, [pc, #856]	; (800da4c <__ieee754_pow+0x744>)
 800d6f4:	f7f2 ff80 	bl	80005f8 <__aeabi_dmul>
 800d6f8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800d6fc:	460c      	mov	r4, r1
 800d6fe:	1523      	asrs	r3, r4, #20
 800d700:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d704:	4413      	add	r3, r2
 800d706:	9309      	str	r3, [sp, #36]	; 0x24
 800d708:	4bd1      	ldr	r3, [pc, #836]	; (800da50 <__ieee754_pow+0x748>)
 800d70a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800d70e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800d712:	429c      	cmp	r4, r3
 800d714:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800d718:	dd08      	ble.n	800d72c <__ieee754_pow+0x424>
 800d71a:	4bce      	ldr	r3, [pc, #824]	; (800da54 <__ieee754_pow+0x74c>)
 800d71c:	429c      	cmp	r4, r3
 800d71e:	f340 8163 	ble.w	800d9e8 <__ieee754_pow+0x6e0>
 800d722:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d724:	3301      	adds	r3, #1
 800d726:	9309      	str	r3, [sp, #36]	; 0x24
 800d728:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800d72c:	2400      	movs	r4, #0
 800d72e:	00e3      	lsls	r3, r4, #3
 800d730:	930b      	str	r3, [sp, #44]	; 0x2c
 800d732:	4bc9      	ldr	r3, [pc, #804]	; (800da58 <__ieee754_pow+0x750>)
 800d734:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d738:	ed93 7b00 	vldr	d7, [r3]
 800d73c:	4629      	mov	r1, r5
 800d73e:	ec53 2b17 	vmov	r2, r3, d7
 800d742:	eeb0 8a47 	vmov.f32	s16, s14
 800d746:	eef0 8a67 	vmov.f32	s17, s15
 800d74a:	4682      	mov	sl, r0
 800d74c:	f7f2 fd9c 	bl	8000288 <__aeabi_dsub>
 800d750:	4652      	mov	r2, sl
 800d752:	4606      	mov	r6, r0
 800d754:	460f      	mov	r7, r1
 800d756:	462b      	mov	r3, r5
 800d758:	ec51 0b18 	vmov	r0, r1, d8
 800d75c:	f7f2 fd96 	bl	800028c <__adddf3>
 800d760:	4602      	mov	r2, r0
 800d762:	460b      	mov	r3, r1
 800d764:	2000      	movs	r0, #0
 800d766:	49bd      	ldr	r1, [pc, #756]	; (800da5c <__ieee754_pow+0x754>)
 800d768:	f7f3 f870 	bl	800084c <__aeabi_ddiv>
 800d76c:	ec41 0b19 	vmov	d9, r0, r1
 800d770:	4602      	mov	r2, r0
 800d772:	460b      	mov	r3, r1
 800d774:	4630      	mov	r0, r6
 800d776:	4639      	mov	r1, r7
 800d778:	f7f2 ff3e 	bl	80005f8 <__aeabi_dmul>
 800d77c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d780:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d784:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d788:	2300      	movs	r3, #0
 800d78a:	9304      	str	r3, [sp, #16]
 800d78c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800d790:	46ab      	mov	fp, r5
 800d792:	106d      	asrs	r5, r5, #1
 800d794:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800d798:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800d79c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800d7a0:	2200      	movs	r2, #0
 800d7a2:	4640      	mov	r0, r8
 800d7a4:	4649      	mov	r1, r9
 800d7a6:	4614      	mov	r4, r2
 800d7a8:	461d      	mov	r5, r3
 800d7aa:	f7f2 ff25 	bl	80005f8 <__aeabi_dmul>
 800d7ae:	4602      	mov	r2, r0
 800d7b0:	460b      	mov	r3, r1
 800d7b2:	4630      	mov	r0, r6
 800d7b4:	4639      	mov	r1, r7
 800d7b6:	f7f2 fd67 	bl	8000288 <__aeabi_dsub>
 800d7ba:	ec53 2b18 	vmov	r2, r3, d8
 800d7be:	4606      	mov	r6, r0
 800d7c0:	460f      	mov	r7, r1
 800d7c2:	4620      	mov	r0, r4
 800d7c4:	4629      	mov	r1, r5
 800d7c6:	f7f2 fd5f 	bl	8000288 <__aeabi_dsub>
 800d7ca:	4602      	mov	r2, r0
 800d7cc:	460b      	mov	r3, r1
 800d7ce:	4650      	mov	r0, sl
 800d7d0:	4659      	mov	r1, fp
 800d7d2:	f7f2 fd59 	bl	8000288 <__aeabi_dsub>
 800d7d6:	4642      	mov	r2, r8
 800d7d8:	464b      	mov	r3, r9
 800d7da:	f7f2 ff0d 	bl	80005f8 <__aeabi_dmul>
 800d7de:	4602      	mov	r2, r0
 800d7e0:	460b      	mov	r3, r1
 800d7e2:	4630      	mov	r0, r6
 800d7e4:	4639      	mov	r1, r7
 800d7e6:	f7f2 fd4f 	bl	8000288 <__aeabi_dsub>
 800d7ea:	ec53 2b19 	vmov	r2, r3, d9
 800d7ee:	f7f2 ff03 	bl	80005f8 <__aeabi_dmul>
 800d7f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d7f6:	ec41 0b18 	vmov	d8, r0, r1
 800d7fa:	4610      	mov	r0, r2
 800d7fc:	4619      	mov	r1, r3
 800d7fe:	f7f2 fefb 	bl	80005f8 <__aeabi_dmul>
 800d802:	a37d      	add	r3, pc, #500	; (adr r3, 800d9f8 <__ieee754_pow+0x6f0>)
 800d804:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d808:	4604      	mov	r4, r0
 800d80a:	460d      	mov	r5, r1
 800d80c:	f7f2 fef4 	bl	80005f8 <__aeabi_dmul>
 800d810:	a37b      	add	r3, pc, #492	; (adr r3, 800da00 <__ieee754_pow+0x6f8>)
 800d812:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d816:	f7f2 fd39 	bl	800028c <__adddf3>
 800d81a:	4622      	mov	r2, r4
 800d81c:	462b      	mov	r3, r5
 800d81e:	f7f2 feeb 	bl	80005f8 <__aeabi_dmul>
 800d822:	a379      	add	r3, pc, #484	; (adr r3, 800da08 <__ieee754_pow+0x700>)
 800d824:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d828:	f7f2 fd30 	bl	800028c <__adddf3>
 800d82c:	4622      	mov	r2, r4
 800d82e:	462b      	mov	r3, r5
 800d830:	f7f2 fee2 	bl	80005f8 <__aeabi_dmul>
 800d834:	a376      	add	r3, pc, #472	; (adr r3, 800da10 <__ieee754_pow+0x708>)
 800d836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d83a:	f7f2 fd27 	bl	800028c <__adddf3>
 800d83e:	4622      	mov	r2, r4
 800d840:	462b      	mov	r3, r5
 800d842:	f7f2 fed9 	bl	80005f8 <__aeabi_dmul>
 800d846:	a374      	add	r3, pc, #464	; (adr r3, 800da18 <__ieee754_pow+0x710>)
 800d848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d84c:	f7f2 fd1e 	bl	800028c <__adddf3>
 800d850:	4622      	mov	r2, r4
 800d852:	462b      	mov	r3, r5
 800d854:	f7f2 fed0 	bl	80005f8 <__aeabi_dmul>
 800d858:	a371      	add	r3, pc, #452	; (adr r3, 800da20 <__ieee754_pow+0x718>)
 800d85a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d85e:	f7f2 fd15 	bl	800028c <__adddf3>
 800d862:	4622      	mov	r2, r4
 800d864:	4606      	mov	r6, r0
 800d866:	460f      	mov	r7, r1
 800d868:	462b      	mov	r3, r5
 800d86a:	4620      	mov	r0, r4
 800d86c:	4629      	mov	r1, r5
 800d86e:	f7f2 fec3 	bl	80005f8 <__aeabi_dmul>
 800d872:	4602      	mov	r2, r0
 800d874:	460b      	mov	r3, r1
 800d876:	4630      	mov	r0, r6
 800d878:	4639      	mov	r1, r7
 800d87a:	f7f2 febd 	bl	80005f8 <__aeabi_dmul>
 800d87e:	4642      	mov	r2, r8
 800d880:	4604      	mov	r4, r0
 800d882:	460d      	mov	r5, r1
 800d884:	464b      	mov	r3, r9
 800d886:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d88a:	f7f2 fcff 	bl	800028c <__adddf3>
 800d88e:	ec53 2b18 	vmov	r2, r3, d8
 800d892:	f7f2 feb1 	bl	80005f8 <__aeabi_dmul>
 800d896:	4622      	mov	r2, r4
 800d898:	462b      	mov	r3, r5
 800d89a:	f7f2 fcf7 	bl	800028c <__adddf3>
 800d89e:	4642      	mov	r2, r8
 800d8a0:	4682      	mov	sl, r0
 800d8a2:	468b      	mov	fp, r1
 800d8a4:	464b      	mov	r3, r9
 800d8a6:	4640      	mov	r0, r8
 800d8a8:	4649      	mov	r1, r9
 800d8aa:	f7f2 fea5 	bl	80005f8 <__aeabi_dmul>
 800d8ae:	4b6c      	ldr	r3, [pc, #432]	; (800da60 <__ieee754_pow+0x758>)
 800d8b0:	2200      	movs	r2, #0
 800d8b2:	4606      	mov	r6, r0
 800d8b4:	460f      	mov	r7, r1
 800d8b6:	f7f2 fce9 	bl	800028c <__adddf3>
 800d8ba:	4652      	mov	r2, sl
 800d8bc:	465b      	mov	r3, fp
 800d8be:	f7f2 fce5 	bl	800028c <__adddf3>
 800d8c2:	9c04      	ldr	r4, [sp, #16]
 800d8c4:	460d      	mov	r5, r1
 800d8c6:	4622      	mov	r2, r4
 800d8c8:	460b      	mov	r3, r1
 800d8ca:	4640      	mov	r0, r8
 800d8cc:	4649      	mov	r1, r9
 800d8ce:	f7f2 fe93 	bl	80005f8 <__aeabi_dmul>
 800d8d2:	4b63      	ldr	r3, [pc, #396]	; (800da60 <__ieee754_pow+0x758>)
 800d8d4:	4680      	mov	r8, r0
 800d8d6:	4689      	mov	r9, r1
 800d8d8:	2200      	movs	r2, #0
 800d8da:	4620      	mov	r0, r4
 800d8dc:	4629      	mov	r1, r5
 800d8de:	f7f2 fcd3 	bl	8000288 <__aeabi_dsub>
 800d8e2:	4632      	mov	r2, r6
 800d8e4:	463b      	mov	r3, r7
 800d8e6:	f7f2 fccf 	bl	8000288 <__aeabi_dsub>
 800d8ea:	4602      	mov	r2, r0
 800d8ec:	460b      	mov	r3, r1
 800d8ee:	4650      	mov	r0, sl
 800d8f0:	4659      	mov	r1, fp
 800d8f2:	f7f2 fcc9 	bl	8000288 <__aeabi_dsub>
 800d8f6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d8fa:	f7f2 fe7d 	bl	80005f8 <__aeabi_dmul>
 800d8fe:	4622      	mov	r2, r4
 800d900:	4606      	mov	r6, r0
 800d902:	460f      	mov	r7, r1
 800d904:	462b      	mov	r3, r5
 800d906:	ec51 0b18 	vmov	r0, r1, d8
 800d90a:	f7f2 fe75 	bl	80005f8 <__aeabi_dmul>
 800d90e:	4602      	mov	r2, r0
 800d910:	460b      	mov	r3, r1
 800d912:	4630      	mov	r0, r6
 800d914:	4639      	mov	r1, r7
 800d916:	f7f2 fcb9 	bl	800028c <__adddf3>
 800d91a:	4606      	mov	r6, r0
 800d91c:	460f      	mov	r7, r1
 800d91e:	4602      	mov	r2, r0
 800d920:	460b      	mov	r3, r1
 800d922:	4640      	mov	r0, r8
 800d924:	4649      	mov	r1, r9
 800d926:	f7f2 fcb1 	bl	800028c <__adddf3>
 800d92a:	9c04      	ldr	r4, [sp, #16]
 800d92c:	a33e      	add	r3, pc, #248	; (adr r3, 800da28 <__ieee754_pow+0x720>)
 800d92e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d932:	4620      	mov	r0, r4
 800d934:	460d      	mov	r5, r1
 800d936:	f7f2 fe5f 	bl	80005f8 <__aeabi_dmul>
 800d93a:	4642      	mov	r2, r8
 800d93c:	ec41 0b18 	vmov	d8, r0, r1
 800d940:	464b      	mov	r3, r9
 800d942:	4620      	mov	r0, r4
 800d944:	4629      	mov	r1, r5
 800d946:	f7f2 fc9f 	bl	8000288 <__aeabi_dsub>
 800d94a:	4602      	mov	r2, r0
 800d94c:	460b      	mov	r3, r1
 800d94e:	4630      	mov	r0, r6
 800d950:	4639      	mov	r1, r7
 800d952:	f7f2 fc99 	bl	8000288 <__aeabi_dsub>
 800d956:	a336      	add	r3, pc, #216	; (adr r3, 800da30 <__ieee754_pow+0x728>)
 800d958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d95c:	f7f2 fe4c 	bl	80005f8 <__aeabi_dmul>
 800d960:	a335      	add	r3, pc, #212	; (adr r3, 800da38 <__ieee754_pow+0x730>)
 800d962:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d966:	4606      	mov	r6, r0
 800d968:	460f      	mov	r7, r1
 800d96a:	4620      	mov	r0, r4
 800d96c:	4629      	mov	r1, r5
 800d96e:	f7f2 fe43 	bl	80005f8 <__aeabi_dmul>
 800d972:	4602      	mov	r2, r0
 800d974:	460b      	mov	r3, r1
 800d976:	4630      	mov	r0, r6
 800d978:	4639      	mov	r1, r7
 800d97a:	f7f2 fc87 	bl	800028c <__adddf3>
 800d97e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d980:	4b38      	ldr	r3, [pc, #224]	; (800da64 <__ieee754_pow+0x75c>)
 800d982:	4413      	add	r3, r2
 800d984:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d988:	f7f2 fc80 	bl	800028c <__adddf3>
 800d98c:	4682      	mov	sl, r0
 800d98e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d990:	468b      	mov	fp, r1
 800d992:	f7f2 fdc7 	bl	8000524 <__aeabi_i2d>
 800d996:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d998:	4b33      	ldr	r3, [pc, #204]	; (800da68 <__ieee754_pow+0x760>)
 800d99a:	4413      	add	r3, r2
 800d99c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d9a0:	4606      	mov	r6, r0
 800d9a2:	460f      	mov	r7, r1
 800d9a4:	4652      	mov	r2, sl
 800d9a6:	465b      	mov	r3, fp
 800d9a8:	ec51 0b18 	vmov	r0, r1, d8
 800d9ac:	f7f2 fc6e 	bl	800028c <__adddf3>
 800d9b0:	4642      	mov	r2, r8
 800d9b2:	464b      	mov	r3, r9
 800d9b4:	f7f2 fc6a 	bl	800028c <__adddf3>
 800d9b8:	4632      	mov	r2, r6
 800d9ba:	463b      	mov	r3, r7
 800d9bc:	f7f2 fc66 	bl	800028c <__adddf3>
 800d9c0:	9c04      	ldr	r4, [sp, #16]
 800d9c2:	4632      	mov	r2, r6
 800d9c4:	463b      	mov	r3, r7
 800d9c6:	4620      	mov	r0, r4
 800d9c8:	460d      	mov	r5, r1
 800d9ca:	f7f2 fc5d 	bl	8000288 <__aeabi_dsub>
 800d9ce:	4642      	mov	r2, r8
 800d9d0:	464b      	mov	r3, r9
 800d9d2:	f7f2 fc59 	bl	8000288 <__aeabi_dsub>
 800d9d6:	ec53 2b18 	vmov	r2, r3, d8
 800d9da:	f7f2 fc55 	bl	8000288 <__aeabi_dsub>
 800d9de:	4602      	mov	r2, r0
 800d9e0:	460b      	mov	r3, r1
 800d9e2:	4650      	mov	r0, sl
 800d9e4:	4659      	mov	r1, fp
 800d9e6:	e606      	b.n	800d5f6 <__ieee754_pow+0x2ee>
 800d9e8:	2401      	movs	r4, #1
 800d9ea:	e6a0      	b.n	800d72e <__ieee754_pow+0x426>
 800d9ec:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800da40 <__ieee754_pow+0x738>
 800d9f0:	e60d      	b.n	800d60e <__ieee754_pow+0x306>
 800d9f2:	bf00      	nop
 800d9f4:	f3af 8000 	nop.w
 800d9f8:	4a454eef 	.word	0x4a454eef
 800d9fc:	3fca7e28 	.word	0x3fca7e28
 800da00:	93c9db65 	.word	0x93c9db65
 800da04:	3fcd864a 	.word	0x3fcd864a
 800da08:	a91d4101 	.word	0xa91d4101
 800da0c:	3fd17460 	.word	0x3fd17460
 800da10:	518f264d 	.word	0x518f264d
 800da14:	3fd55555 	.word	0x3fd55555
 800da18:	db6fabff 	.word	0xdb6fabff
 800da1c:	3fdb6db6 	.word	0x3fdb6db6
 800da20:	33333303 	.word	0x33333303
 800da24:	3fe33333 	.word	0x3fe33333
 800da28:	e0000000 	.word	0xe0000000
 800da2c:	3feec709 	.word	0x3feec709
 800da30:	dc3a03fd 	.word	0xdc3a03fd
 800da34:	3feec709 	.word	0x3feec709
 800da38:	145b01f5 	.word	0x145b01f5
 800da3c:	be3e2fe0 	.word	0xbe3e2fe0
 800da40:	00000000 	.word	0x00000000
 800da44:	3ff00000 	.word	0x3ff00000
 800da48:	7ff00000 	.word	0x7ff00000
 800da4c:	43400000 	.word	0x43400000
 800da50:	0003988e 	.word	0x0003988e
 800da54:	000bb679 	.word	0x000bb679
 800da58:	0800e600 	.word	0x0800e600
 800da5c:	3ff00000 	.word	0x3ff00000
 800da60:	40080000 	.word	0x40080000
 800da64:	0800e620 	.word	0x0800e620
 800da68:	0800e610 	.word	0x0800e610
 800da6c:	a3b5      	add	r3, pc, #724	; (adr r3, 800dd44 <__ieee754_pow+0xa3c>)
 800da6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da72:	4640      	mov	r0, r8
 800da74:	4649      	mov	r1, r9
 800da76:	f7f2 fc09 	bl	800028c <__adddf3>
 800da7a:	4622      	mov	r2, r4
 800da7c:	ec41 0b1a 	vmov	d10, r0, r1
 800da80:	462b      	mov	r3, r5
 800da82:	4630      	mov	r0, r6
 800da84:	4639      	mov	r1, r7
 800da86:	f7f2 fbff 	bl	8000288 <__aeabi_dsub>
 800da8a:	4602      	mov	r2, r0
 800da8c:	460b      	mov	r3, r1
 800da8e:	ec51 0b1a 	vmov	r0, r1, d10
 800da92:	f7f3 f841 	bl	8000b18 <__aeabi_dcmpgt>
 800da96:	2800      	cmp	r0, #0
 800da98:	f47f adf8 	bne.w	800d68c <__ieee754_pow+0x384>
 800da9c:	4aa4      	ldr	r2, [pc, #656]	; (800dd30 <__ieee754_pow+0xa28>)
 800da9e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800daa2:	4293      	cmp	r3, r2
 800daa4:	f340 810b 	ble.w	800dcbe <__ieee754_pow+0x9b6>
 800daa8:	151b      	asrs	r3, r3, #20
 800daaa:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800daae:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800dab2:	fa4a f303 	asr.w	r3, sl, r3
 800dab6:	445b      	add	r3, fp
 800dab8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800dabc:	4e9d      	ldr	r6, [pc, #628]	; (800dd34 <__ieee754_pow+0xa2c>)
 800dabe:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800dac2:	4116      	asrs	r6, r2
 800dac4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800dac8:	2000      	movs	r0, #0
 800daca:	ea23 0106 	bic.w	r1, r3, r6
 800dace:	f1c2 0214 	rsb	r2, r2, #20
 800dad2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800dad6:	fa4a fa02 	asr.w	sl, sl, r2
 800dada:	f1bb 0f00 	cmp.w	fp, #0
 800dade:	4602      	mov	r2, r0
 800dae0:	460b      	mov	r3, r1
 800dae2:	4620      	mov	r0, r4
 800dae4:	4629      	mov	r1, r5
 800dae6:	bfb8      	it	lt
 800dae8:	f1ca 0a00 	rsblt	sl, sl, #0
 800daec:	f7f2 fbcc 	bl	8000288 <__aeabi_dsub>
 800daf0:	ec41 0b19 	vmov	d9, r0, r1
 800daf4:	4642      	mov	r2, r8
 800daf6:	464b      	mov	r3, r9
 800daf8:	ec51 0b19 	vmov	r0, r1, d9
 800dafc:	f7f2 fbc6 	bl	800028c <__adddf3>
 800db00:	2400      	movs	r4, #0
 800db02:	a379      	add	r3, pc, #484	; (adr r3, 800dce8 <__ieee754_pow+0x9e0>)
 800db04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db08:	4620      	mov	r0, r4
 800db0a:	460d      	mov	r5, r1
 800db0c:	f7f2 fd74 	bl	80005f8 <__aeabi_dmul>
 800db10:	ec53 2b19 	vmov	r2, r3, d9
 800db14:	4606      	mov	r6, r0
 800db16:	460f      	mov	r7, r1
 800db18:	4620      	mov	r0, r4
 800db1a:	4629      	mov	r1, r5
 800db1c:	f7f2 fbb4 	bl	8000288 <__aeabi_dsub>
 800db20:	4602      	mov	r2, r0
 800db22:	460b      	mov	r3, r1
 800db24:	4640      	mov	r0, r8
 800db26:	4649      	mov	r1, r9
 800db28:	f7f2 fbae 	bl	8000288 <__aeabi_dsub>
 800db2c:	a370      	add	r3, pc, #448	; (adr r3, 800dcf0 <__ieee754_pow+0x9e8>)
 800db2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db32:	f7f2 fd61 	bl	80005f8 <__aeabi_dmul>
 800db36:	a370      	add	r3, pc, #448	; (adr r3, 800dcf8 <__ieee754_pow+0x9f0>)
 800db38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db3c:	4680      	mov	r8, r0
 800db3e:	4689      	mov	r9, r1
 800db40:	4620      	mov	r0, r4
 800db42:	4629      	mov	r1, r5
 800db44:	f7f2 fd58 	bl	80005f8 <__aeabi_dmul>
 800db48:	4602      	mov	r2, r0
 800db4a:	460b      	mov	r3, r1
 800db4c:	4640      	mov	r0, r8
 800db4e:	4649      	mov	r1, r9
 800db50:	f7f2 fb9c 	bl	800028c <__adddf3>
 800db54:	4604      	mov	r4, r0
 800db56:	460d      	mov	r5, r1
 800db58:	4602      	mov	r2, r0
 800db5a:	460b      	mov	r3, r1
 800db5c:	4630      	mov	r0, r6
 800db5e:	4639      	mov	r1, r7
 800db60:	f7f2 fb94 	bl	800028c <__adddf3>
 800db64:	4632      	mov	r2, r6
 800db66:	463b      	mov	r3, r7
 800db68:	4680      	mov	r8, r0
 800db6a:	4689      	mov	r9, r1
 800db6c:	f7f2 fb8c 	bl	8000288 <__aeabi_dsub>
 800db70:	4602      	mov	r2, r0
 800db72:	460b      	mov	r3, r1
 800db74:	4620      	mov	r0, r4
 800db76:	4629      	mov	r1, r5
 800db78:	f7f2 fb86 	bl	8000288 <__aeabi_dsub>
 800db7c:	4642      	mov	r2, r8
 800db7e:	4606      	mov	r6, r0
 800db80:	460f      	mov	r7, r1
 800db82:	464b      	mov	r3, r9
 800db84:	4640      	mov	r0, r8
 800db86:	4649      	mov	r1, r9
 800db88:	f7f2 fd36 	bl	80005f8 <__aeabi_dmul>
 800db8c:	a35c      	add	r3, pc, #368	; (adr r3, 800dd00 <__ieee754_pow+0x9f8>)
 800db8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db92:	4604      	mov	r4, r0
 800db94:	460d      	mov	r5, r1
 800db96:	f7f2 fd2f 	bl	80005f8 <__aeabi_dmul>
 800db9a:	a35b      	add	r3, pc, #364	; (adr r3, 800dd08 <__ieee754_pow+0xa00>)
 800db9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dba0:	f7f2 fb72 	bl	8000288 <__aeabi_dsub>
 800dba4:	4622      	mov	r2, r4
 800dba6:	462b      	mov	r3, r5
 800dba8:	f7f2 fd26 	bl	80005f8 <__aeabi_dmul>
 800dbac:	a358      	add	r3, pc, #352	; (adr r3, 800dd10 <__ieee754_pow+0xa08>)
 800dbae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbb2:	f7f2 fb6b 	bl	800028c <__adddf3>
 800dbb6:	4622      	mov	r2, r4
 800dbb8:	462b      	mov	r3, r5
 800dbba:	f7f2 fd1d 	bl	80005f8 <__aeabi_dmul>
 800dbbe:	a356      	add	r3, pc, #344	; (adr r3, 800dd18 <__ieee754_pow+0xa10>)
 800dbc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbc4:	f7f2 fb60 	bl	8000288 <__aeabi_dsub>
 800dbc8:	4622      	mov	r2, r4
 800dbca:	462b      	mov	r3, r5
 800dbcc:	f7f2 fd14 	bl	80005f8 <__aeabi_dmul>
 800dbd0:	a353      	add	r3, pc, #332	; (adr r3, 800dd20 <__ieee754_pow+0xa18>)
 800dbd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbd6:	f7f2 fb59 	bl	800028c <__adddf3>
 800dbda:	4622      	mov	r2, r4
 800dbdc:	462b      	mov	r3, r5
 800dbde:	f7f2 fd0b 	bl	80005f8 <__aeabi_dmul>
 800dbe2:	4602      	mov	r2, r0
 800dbe4:	460b      	mov	r3, r1
 800dbe6:	4640      	mov	r0, r8
 800dbe8:	4649      	mov	r1, r9
 800dbea:	f7f2 fb4d 	bl	8000288 <__aeabi_dsub>
 800dbee:	4604      	mov	r4, r0
 800dbf0:	460d      	mov	r5, r1
 800dbf2:	4602      	mov	r2, r0
 800dbf4:	460b      	mov	r3, r1
 800dbf6:	4640      	mov	r0, r8
 800dbf8:	4649      	mov	r1, r9
 800dbfa:	f7f2 fcfd 	bl	80005f8 <__aeabi_dmul>
 800dbfe:	2200      	movs	r2, #0
 800dc00:	ec41 0b19 	vmov	d9, r0, r1
 800dc04:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800dc08:	4620      	mov	r0, r4
 800dc0a:	4629      	mov	r1, r5
 800dc0c:	f7f2 fb3c 	bl	8000288 <__aeabi_dsub>
 800dc10:	4602      	mov	r2, r0
 800dc12:	460b      	mov	r3, r1
 800dc14:	ec51 0b19 	vmov	r0, r1, d9
 800dc18:	f7f2 fe18 	bl	800084c <__aeabi_ddiv>
 800dc1c:	4632      	mov	r2, r6
 800dc1e:	4604      	mov	r4, r0
 800dc20:	460d      	mov	r5, r1
 800dc22:	463b      	mov	r3, r7
 800dc24:	4640      	mov	r0, r8
 800dc26:	4649      	mov	r1, r9
 800dc28:	f7f2 fce6 	bl	80005f8 <__aeabi_dmul>
 800dc2c:	4632      	mov	r2, r6
 800dc2e:	463b      	mov	r3, r7
 800dc30:	f7f2 fb2c 	bl	800028c <__adddf3>
 800dc34:	4602      	mov	r2, r0
 800dc36:	460b      	mov	r3, r1
 800dc38:	4620      	mov	r0, r4
 800dc3a:	4629      	mov	r1, r5
 800dc3c:	f7f2 fb24 	bl	8000288 <__aeabi_dsub>
 800dc40:	4642      	mov	r2, r8
 800dc42:	464b      	mov	r3, r9
 800dc44:	f7f2 fb20 	bl	8000288 <__aeabi_dsub>
 800dc48:	460b      	mov	r3, r1
 800dc4a:	4602      	mov	r2, r0
 800dc4c:	493a      	ldr	r1, [pc, #232]	; (800dd38 <__ieee754_pow+0xa30>)
 800dc4e:	2000      	movs	r0, #0
 800dc50:	f7f2 fb1a 	bl	8000288 <__aeabi_dsub>
 800dc54:	e9cd 0100 	strd	r0, r1, [sp]
 800dc58:	9b01      	ldr	r3, [sp, #4]
 800dc5a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800dc5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dc62:	da2f      	bge.n	800dcc4 <__ieee754_pow+0x9bc>
 800dc64:	4650      	mov	r0, sl
 800dc66:	ed9d 0b00 	vldr	d0, [sp]
 800dc6a:	f000 f9cd 	bl	800e008 <scalbn>
 800dc6e:	ec51 0b10 	vmov	r0, r1, d0
 800dc72:	ec53 2b18 	vmov	r2, r3, d8
 800dc76:	f7ff bbe0 	b.w	800d43a <__ieee754_pow+0x132>
 800dc7a:	4b30      	ldr	r3, [pc, #192]	; (800dd3c <__ieee754_pow+0xa34>)
 800dc7c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800dc80:	429e      	cmp	r6, r3
 800dc82:	f77f af0b 	ble.w	800da9c <__ieee754_pow+0x794>
 800dc86:	4b2e      	ldr	r3, [pc, #184]	; (800dd40 <__ieee754_pow+0xa38>)
 800dc88:	440b      	add	r3, r1
 800dc8a:	4303      	orrs	r3, r0
 800dc8c:	d00b      	beq.n	800dca6 <__ieee754_pow+0x99e>
 800dc8e:	a326      	add	r3, pc, #152	; (adr r3, 800dd28 <__ieee754_pow+0xa20>)
 800dc90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc94:	ec51 0b18 	vmov	r0, r1, d8
 800dc98:	f7f2 fcae 	bl	80005f8 <__aeabi_dmul>
 800dc9c:	a322      	add	r3, pc, #136	; (adr r3, 800dd28 <__ieee754_pow+0xa20>)
 800dc9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dca2:	f7ff bbca 	b.w	800d43a <__ieee754_pow+0x132>
 800dca6:	4622      	mov	r2, r4
 800dca8:	462b      	mov	r3, r5
 800dcaa:	f7f2 faed 	bl	8000288 <__aeabi_dsub>
 800dcae:	4642      	mov	r2, r8
 800dcb0:	464b      	mov	r3, r9
 800dcb2:	f7f2 ff27 	bl	8000b04 <__aeabi_dcmpge>
 800dcb6:	2800      	cmp	r0, #0
 800dcb8:	f43f aef0 	beq.w	800da9c <__ieee754_pow+0x794>
 800dcbc:	e7e7      	b.n	800dc8e <__ieee754_pow+0x986>
 800dcbe:	f04f 0a00 	mov.w	sl, #0
 800dcc2:	e717      	b.n	800daf4 <__ieee754_pow+0x7ec>
 800dcc4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dcc8:	4619      	mov	r1, r3
 800dcca:	e7d2      	b.n	800dc72 <__ieee754_pow+0x96a>
 800dccc:	491a      	ldr	r1, [pc, #104]	; (800dd38 <__ieee754_pow+0xa30>)
 800dcce:	2000      	movs	r0, #0
 800dcd0:	f7ff bb9e 	b.w	800d410 <__ieee754_pow+0x108>
 800dcd4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dcd8:	f7ff bb9a 	b.w	800d410 <__ieee754_pow+0x108>
 800dcdc:	9000      	str	r0, [sp, #0]
 800dcde:	f7ff bb76 	b.w	800d3ce <__ieee754_pow+0xc6>
 800dce2:	2100      	movs	r1, #0
 800dce4:	f7ff bb60 	b.w	800d3a8 <__ieee754_pow+0xa0>
 800dce8:	00000000 	.word	0x00000000
 800dcec:	3fe62e43 	.word	0x3fe62e43
 800dcf0:	fefa39ef 	.word	0xfefa39ef
 800dcf4:	3fe62e42 	.word	0x3fe62e42
 800dcf8:	0ca86c39 	.word	0x0ca86c39
 800dcfc:	be205c61 	.word	0xbe205c61
 800dd00:	72bea4d0 	.word	0x72bea4d0
 800dd04:	3e663769 	.word	0x3e663769
 800dd08:	c5d26bf1 	.word	0xc5d26bf1
 800dd0c:	3ebbbd41 	.word	0x3ebbbd41
 800dd10:	af25de2c 	.word	0xaf25de2c
 800dd14:	3f11566a 	.word	0x3f11566a
 800dd18:	16bebd93 	.word	0x16bebd93
 800dd1c:	3f66c16c 	.word	0x3f66c16c
 800dd20:	5555553e 	.word	0x5555553e
 800dd24:	3fc55555 	.word	0x3fc55555
 800dd28:	c2f8f359 	.word	0xc2f8f359
 800dd2c:	01a56e1f 	.word	0x01a56e1f
 800dd30:	3fe00000 	.word	0x3fe00000
 800dd34:	000fffff 	.word	0x000fffff
 800dd38:	3ff00000 	.word	0x3ff00000
 800dd3c:	4090cbff 	.word	0x4090cbff
 800dd40:	3f6f3400 	.word	0x3f6f3400
 800dd44:	652b82fe 	.word	0x652b82fe
 800dd48:	3c971547 	.word	0x3c971547

0800dd4c <__ieee754_sqrt>:
 800dd4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd50:	ec55 4b10 	vmov	r4, r5, d0
 800dd54:	4e56      	ldr	r6, [pc, #344]	; (800deb0 <__ieee754_sqrt+0x164>)
 800dd56:	43ae      	bics	r6, r5
 800dd58:	ee10 0a10 	vmov	r0, s0
 800dd5c:	ee10 3a10 	vmov	r3, s0
 800dd60:	4629      	mov	r1, r5
 800dd62:	462a      	mov	r2, r5
 800dd64:	d110      	bne.n	800dd88 <__ieee754_sqrt+0x3c>
 800dd66:	ee10 2a10 	vmov	r2, s0
 800dd6a:	462b      	mov	r3, r5
 800dd6c:	f7f2 fc44 	bl	80005f8 <__aeabi_dmul>
 800dd70:	4602      	mov	r2, r0
 800dd72:	460b      	mov	r3, r1
 800dd74:	4620      	mov	r0, r4
 800dd76:	4629      	mov	r1, r5
 800dd78:	f7f2 fa88 	bl	800028c <__adddf3>
 800dd7c:	4604      	mov	r4, r0
 800dd7e:	460d      	mov	r5, r1
 800dd80:	ec45 4b10 	vmov	d0, r4, r5
 800dd84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd88:	2d00      	cmp	r5, #0
 800dd8a:	dc10      	bgt.n	800ddae <__ieee754_sqrt+0x62>
 800dd8c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800dd90:	4330      	orrs	r0, r6
 800dd92:	d0f5      	beq.n	800dd80 <__ieee754_sqrt+0x34>
 800dd94:	b15d      	cbz	r5, 800ddae <__ieee754_sqrt+0x62>
 800dd96:	ee10 2a10 	vmov	r2, s0
 800dd9a:	462b      	mov	r3, r5
 800dd9c:	ee10 0a10 	vmov	r0, s0
 800dda0:	f7f2 fa72 	bl	8000288 <__aeabi_dsub>
 800dda4:	4602      	mov	r2, r0
 800dda6:	460b      	mov	r3, r1
 800dda8:	f7f2 fd50 	bl	800084c <__aeabi_ddiv>
 800ddac:	e7e6      	b.n	800dd7c <__ieee754_sqrt+0x30>
 800ddae:	1509      	asrs	r1, r1, #20
 800ddb0:	d076      	beq.n	800dea0 <__ieee754_sqrt+0x154>
 800ddb2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800ddb6:	07ce      	lsls	r6, r1, #31
 800ddb8:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800ddbc:	bf5e      	ittt	pl
 800ddbe:	0fda      	lsrpl	r2, r3, #31
 800ddc0:	005b      	lslpl	r3, r3, #1
 800ddc2:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800ddc6:	0fda      	lsrs	r2, r3, #31
 800ddc8:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800ddcc:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800ddd0:	2000      	movs	r0, #0
 800ddd2:	106d      	asrs	r5, r5, #1
 800ddd4:	005b      	lsls	r3, r3, #1
 800ddd6:	f04f 0e16 	mov.w	lr, #22
 800ddda:	4684      	mov	ip, r0
 800dddc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800dde0:	eb0c 0401 	add.w	r4, ip, r1
 800dde4:	4294      	cmp	r4, r2
 800dde6:	bfde      	ittt	le
 800dde8:	1b12      	suble	r2, r2, r4
 800ddea:	eb04 0c01 	addle.w	ip, r4, r1
 800ddee:	1840      	addle	r0, r0, r1
 800ddf0:	0052      	lsls	r2, r2, #1
 800ddf2:	f1be 0e01 	subs.w	lr, lr, #1
 800ddf6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800ddfa:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800ddfe:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800de02:	d1ed      	bne.n	800dde0 <__ieee754_sqrt+0x94>
 800de04:	4671      	mov	r1, lr
 800de06:	2720      	movs	r7, #32
 800de08:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800de0c:	4562      	cmp	r2, ip
 800de0e:	eb04 060e 	add.w	r6, r4, lr
 800de12:	dc02      	bgt.n	800de1a <__ieee754_sqrt+0xce>
 800de14:	d113      	bne.n	800de3e <__ieee754_sqrt+0xf2>
 800de16:	429e      	cmp	r6, r3
 800de18:	d811      	bhi.n	800de3e <__ieee754_sqrt+0xf2>
 800de1a:	2e00      	cmp	r6, #0
 800de1c:	eb06 0e04 	add.w	lr, r6, r4
 800de20:	da43      	bge.n	800deaa <__ieee754_sqrt+0x15e>
 800de22:	f1be 0f00 	cmp.w	lr, #0
 800de26:	db40      	blt.n	800deaa <__ieee754_sqrt+0x15e>
 800de28:	f10c 0801 	add.w	r8, ip, #1
 800de2c:	eba2 020c 	sub.w	r2, r2, ip
 800de30:	429e      	cmp	r6, r3
 800de32:	bf88      	it	hi
 800de34:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800de38:	1b9b      	subs	r3, r3, r6
 800de3a:	4421      	add	r1, r4
 800de3c:	46c4      	mov	ip, r8
 800de3e:	0052      	lsls	r2, r2, #1
 800de40:	3f01      	subs	r7, #1
 800de42:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800de46:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800de4a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800de4e:	d1dd      	bne.n	800de0c <__ieee754_sqrt+0xc0>
 800de50:	4313      	orrs	r3, r2
 800de52:	d006      	beq.n	800de62 <__ieee754_sqrt+0x116>
 800de54:	1c4c      	adds	r4, r1, #1
 800de56:	bf13      	iteet	ne
 800de58:	3101      	addne	r1, #1
 800de5a:	3001      	addeq	r0, #1
 800de5c:	4639      	moveq	r1, r7
 800de5e:	f021 0101 	bicne.w	r1, r1, #1
 800de62:	1043      	asrs	r3, r0, #1
 800de64:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800de68:	0849      	lsrs	r1, r1, #1
 800de6a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800de6e:	07c2      	lsls	r2, r0, #31
 800de70:	bf48      	it	mi
 800de72:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800de76:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800de7a:	460c      	mov	r4, r1
 800de7c:	463d      	mov	r5, r7
 800de7e:	e77f      	b.n	800dd80 <__ieee754_sqrt+0x34>
 800de80:	0ada      	lsrs	r2, r3, #11
 800de82:	3815      	subs	r0, #21
 800de84:	055b      	lsls	r3, r3, #21
 800de86:	2a00      	cmp	r2, #0
 800de88:	d0fa      	beq.n	800de80 <__ieee754_sqrt+0x134>
 800de8a:	02d7      	lsls	r7, r2, #11
 800de8c:	d50a      	bpl.n	800dea4 <__ieee754_sqrt+0x158>
 800de8e:	f1c1 0420 	rsb	r4, r1, #32
 800de92:	fa23 f404 	lsr.w	r4, r3, r4
 800de96:	1e4d      	subs	r5, r1, #1
 800de98:	408b      	lsls	r3, r1
 800de9a:	4322      	orrs	r2, r4
 800de9c:	1b41      	subs	r1, r0, r5
 800de9e:	e788      	b.n	800ddb2 <__ieee754_sqrt+0x66>
 800dea0:	4608      	mov	r0, r1
 800dea2:	e7f0      	b.n	800de86 <__ieee754_sqrt+0x13a>
 800dea4:	0052      	lsls	r2, r2, #1
 800dea6:	3101      	adds	r1, #1
 800dea8:	e7ef      	b.n	800de8a <__ieee754_sqrt+0x13e>
 800deaa:	46e0      	mov	r8, ip
 800deac:	e7be      	b.n	800de2c <__ieee754_sqrt+0xe0>
 800deae:	bf00      	nop
 800deb0:	7ff00000 	.word	0x7ff00000

0800deb4 <fabs>:
 800deb4:	ec51 0b10 	vmov	r0, r1, d0
 800deb8:	ee10 2a10 	vmov	r2, s0
 800debc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800dec0:	ec43 2b10 	vmov	d0, r2, r3
 800dec4:	4770      	bx	lr

0800dec6 <finite>:
 800dec6:	b082      	sub	sp, #8
 800dec8:	ed8d 0b00 	vstr	d0, [sp]
 800decc:	9801      	ldr	r0, [sp, #4]
 800dece:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800ded2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800ded6:	0fc0      	lsrs	r0, r0, #31
 800ded8:	b002      	add	sp, #8
 800deda:	4770      	bx	lr
 800dedc:	0000      	movs	r0, r0
	...

0800dee0 <nan>:
 800dee0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800dee8 <nan+0x8>
 800dee4:	4770      	bx	lr
 800dee6:	bf00      	nop
 800dee8:	00000000 	.word	0x00000000
 800deec:	7ff80000 	.word	0x7ff80000

0800def0 <rint>:
 800def0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800def2:	ec51 0b10 	vmov	r0, r1, d0
 800def6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800defa:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800defe:	2e13      	cmp	r6, #19
 800df00:	ee10 4a10 	vmov	r4, s0
 800df04:	460b      	mov	r3, r1
 800df06:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800df0a:	dc58      	bgt.n	800dfbe <rint+0xce>
 800df0c:	2e00      	cmp	r6, #0
 800df0e:	da2b      	bge.n	800df68 <rint+0x78>
 800df10:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800df14:	4302      	orrs	r2, r0
 800df16:	d023      	beq.n	800df60 <rint+0x70>
 800df18:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800df1c:	4302      	orrs	r2, r0
 800df1e:	4254      	negs	r4, r2
 800df20:	4314      	orrs	r4, r2
 800df22:	0c4b      	lsrs	r3, r1, #17
 800df24:	0b24      	lsrs	r4, r4, #12
 800df26:	045b      	lsls	r3, r3, #17
 800df28:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800df2c:	ea44 0103 	orr.w	r1, r4, r3
 800df30:	4b32      	ldr	r3, [pc, #200]	; (800dffc <rint+0x10c>)
 800df32:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800df36:	e9d3 6700 	ldrd	r6, r7, [r3]
 800df3a:	4602      	mov	r2, r0
 800df3c:	460b      	mov	r3, r1
 800df3e:	4630      	mov	r0, r6
 800df40:	4639      	mov	r1, r7
 800df42:	f7f2 f9a3 	bl	800028c <__adddf3>
 800df46:	e9cd 0100 	strd	r0, r1, [sp]
 800df4a:	463b      	mov	r3, r7
 800df4c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800df50:	4632      	mov	r2, r6
 800df52:	f7f2 f999 	bl	8000288 <__aeabi_dsub>
 800df56:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800df5a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800df5e:	4639      	mov	r1, r7
 800df60:	ec41 0b10 	vmov	d0, r0, r1
 800df64:	b003      	add	sp, #12
 800df66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df68:	4a25      	ldr	r2, [pc, #148]	; (800e000 <rint+0x110>)
 800df6a:	4132      	asrs	r2, r6
 800df6c:	ea01 0702 	and.w	r7, r1, r2
 800df70:	4307      	orrs	r7, r0
 800df72:	d0f5      	beq.n	800df60 <rint+0x70>
 800df74:	0851      	lsrs	r1, r2, #1
 800df76:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800df7a:	4314      	orrs	r4, r2
 800df7c:	d00c      	beq.n	800df98 <rint+0xa8>
 800df7e:	ea23 0201 	bic.w	r2, r3, r1
 800df82:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800df86:	2e13      	cmp	r6, #19
 800df88:	fa43 f606 	asr.w	r6, r3, r6
 800df8c:	bf0c      	ite	eq
 800df8e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800df92:	2400      	movne	r4, #0
 800df94:	ea42 0306 	orr.w	r3, r2, r6
 800df98:	4918      	ldr	r1, [pc, #96]	; (800dffc <rint+0x10c>)
 800df9a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800df9e:	4622      	mov	r2, r4
 800dfa0:	e9d5 4500 	ldrd	r4, r5, [r5]
 800dfa4:	4620      	mov	r0, r4
 800dfa6:	4629      	mov	r1, r5
 800dfa8:	f7f2 f970 	bl	800028c <__adddf3>
 800dfac:	e9cd 0100 	strd	r0, r1, [sp]
 800dfb0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dfb4:	4622      	mov	r2, r4
 800dfb6:	462b      	mov	r3, r5
 800dfb8:	f7f2 f966 	bl	8000288 <__aeabi_dsub>
 800dfbc:	e7d0      	b.n	800df60 <rint+0x70>
 800dfbe:	2e33      	cmp	r6, #51	; 0x33
 800dfc0:	dd07      	ble.n	800dfd2 <rint+0xe2>
 800dfc2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800dfc6:	d1cb      	bne.n	800df60 <rint+0x70>
 800dfc8:	ee10 2a10 	vmov	r2, s0
 800dfcc:	f7f2 f95e 	bl	800028c <__adddf3>
 800dfd0:	e7c6      	b.n	800df60 <rint+0x70>
 800dfd2:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800dfd6:	f04f 36ff 	mov.w	r6, #4294967295
 800dfda:	40d6      	lsrs	r6, r2
 800dfdc:	4230      	tst	r0, r6
 800dfde:	d0bf      	beq.n	800df60 <rint+0x70>
 800dfe0:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800dfe4:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800dfe8:	bf1f      	itttt	ne
 800dfea:	ea24 0101 	bicne.w	r1, r4, r1
 800dfee:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800dff2:	fa44 f202 	asrne.w	r2, r4, r2
 800dff6:	ea41 0402 	orrne.w	r4, r1, r2
 800dffa:	e7cd      	b.n	800df98 <rint+0xa8>
 800dffc:	0800e630 	.word	0x0800e630
 800e000:	000fffff 	.word	0x000fffff
 800e004:	00000000 	.word	0x00000000

0800e008 <scalbn>:
 800e008:	b570      	push	{r4, r5, r6, lr}
 800e00a:	ec55 4b10 	vmov	r4, r5, d0
 800e00e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800e012:	4606      	mov	r6, r0
 800e014:	462b      	mov	r3, r5
 800e016:	b99a      	cbnz	r2, 800e040 <scalbn+0x38>
 800e018:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e01c:	4323      	orrs	r3, r4
 800e01e:	d036      	beq.n	800e08e <scalbn+0x86>
 800e020:	4b39      	ldr	r3, [pc, #228]	; (800e108 <scalbn+0x100>)
 800e022:	4629      	mov	r1, r5
 800e024:	ee10 0a10 	vmov	r0, s0
 800e028:	2200      	movs	r2, #0
 800e02a:	f7f2 fae5 	bl	80005f8 <__aeabi_dmul>
 800e02e:	4b37      	ldr	r3, [pc, #220]	; (800e10c <scalbn+0x104>)
 800e030:	429e      	cmp	r6, r3
 800e032:	4604      	mov	r4, r0
 800e034:	460d      	mov	r5, r1
 800e036:	da10      	bge.n	800e05a <scalbn+0x52>
 800e038:	a32b      	add	r3, pc, #172	; (adr r3, 800e0e8 <scalbn+0xe0>)
 800e03a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e03e:	e03a      	b.n	800e0b6 <scalbn+0xae>
 800e040:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800e044:	428a      	cmp	r2, r1
 800e046:	d10c      	bne.n	800e062 <scalbn+0x5a>
 800e048:	ee10 2a10 	vmov	r2, s0
 800e04c:	4620      	mov	r0, r4
 800e04e:	4629      	mov	r1, r5
 800e050:	f7f2 f91c 	bl	800028c <__adddf3>
 800e054:	4604      	mov	r4, r0
 800e056:	460d      	mov	r5, r1
 800e058:	e019      	b.n	800e08e <scalbn+0x86>
 800e05a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e05e:	460b      	mov	r3, r1
 800e060:	3a36      	subs	r2, #54	; 0x36
 800e062:	4432      	add	r2, r6
 800e064:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800e068:	428a      	cmp	r2, r1
 800e06a:	dd08      	ble.n	800e07e <scalbn+0x76>
 800e06c:	2d00      	cmp	r5, #0
 800e06e:	a120      	add	r1, pc, #128	; (adr r1, 800e0f0 <scalbn+0xe8>)
 800e070:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e074:	da1c      	bge.n	800e0b0 <scalbn+0xa8>
 800e076:	a120      	add	r1, pc, #128	; (adr r1, 800e0f8 <scalbn+0xf0>)
 800e078:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e07c:	e018      	b.n	800e0b0 <scalbn+0xa8>
 800e07e:	2a00      	cmp	r2, #0
 800e080:	dd08      	ble.n	800e094 <scalbn+0x8c>
 800e082:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e086:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e08a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e08e:	ec45 4b10 	vmov	d0, r4, r5
 800e092:	bd70      	pop	{r4, r5, r6, pc}
 800e094:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800e098:	da19      	bge.n	800e0ce <scalbn+0xc6>
 800e09a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800e09e:	429e      	cmp	r6, r3
 800e0a0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800e0a4:	dd0a      	ble.n	800e0bc <scalbn+0xb4>
 800e0a6:	a112      	add	r1, pc, #72	; (adr r1, 800e0f0 <scalbn+0xe8>)
 800e0a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d1e2      	bne.n	800e076 <scalbn+0x6e>
 800e0b0:	a30f      	add	r3, pc, #60	; (adr r3, 800e0f0 <scalbn+0xe8>)
 800e0b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0b6:	f7f2 fa9f 	bl	80005f8 <__aeabi_dmul>
 800e0ba:	e7cb      	b.n	800e054 <scalbn+0x4c>
 800e0bc:	a10a      	add	r1, pc, #40	; (adr r1, 800e0e8 <scalbn+0xe0>)
 800e0be:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d0b8      	beq.n	800e038 <scalbn+0x30>
 800e0c6:	a10e      	add	r1, pc, #56	; (adr r1, 800e100 <scalbn+0xf8>)
 800e0c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e0cc:	e7b4      	b.n	800e038 <scalbn+0x30>
 800e0ce:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e0d2:	3236      	adds	r2, #54	; 0x36
 800e0d4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e0d8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800e0dc:	4620      	mov	r0, r4
 800e0de:	4b0c      	ldr	r3, [pc, #48]	; (800e110 <scalbn+0x108>)
 800e0e0:	2200      	movs	r2, #0
 800e0e2:	e7e8      	b.n	800e0b6 <scalbn+0xae>
 800e0e4:	f3af 8000 	nop.w
 800e0e8:	c2f8f359 	.word	0xc2f8f359
 800e0ec:	01a56e1f 	.word	0x01a56e1f
 800e0f0:	8800759c 	.word	0x8800759c
 800e0f4:	7e37e43c 	.word	0x7e37e43c
 800e0f8:	8800759c 	.word	0x8800759c
 800e0fc:	fe37e43c 	.word	0xfe37e43c
 800e100:	c2f8f359 	.word	0xc2f8f359
 800e104:	81a56e1f 	.word	0x81a56e1f
 800e108:	43500000 	.word	0x43500000
 800e10c:	ffff3cb0 	.word	0xffff3cb0
 800e110:	3c900000 	.word	0x3c900000

0800e114 <_init>:
 800e114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e116:	bf00      	nop
 800e118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e11a:	bc08      	pop	{r3}
 800e11c:	469e      	mov	lr, r3
 800e11e:	4770      	bx	lr

0800e120 <_fini>:
 800e120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e122:	bf00      	nop
 800e124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e126:	bc08      	pop	{r3}
 800e128:	469e      	mov	lr, r3
 800e12a:	4770      	bx	lr
