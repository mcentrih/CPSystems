
projektnaNRS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e074  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000518  0800e208  0800e208  0001e208  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e720  0800e720  00020350  2**0
                  CONTENTS
  4 .ARM          00000000  0800e720  0800e720  00020350  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e720  0800e720  00020350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e720  0800e720  0001e720  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e724  0800e724  0001e724  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000350  20000000  0800e728  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020350  2**0
                  CONTENTS
 10 .bss          000012dc  20000350  20000350  00020350  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000162c  2000162c  00020350  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020350  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001eaec  00000000  00000000  00020380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003fc0  00000000  00000000  0003ee6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001570  00000000  00000000  00042e30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000013b8  00000000  00000000  000443a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002246f  00000000  00000000  00045758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ba80  00000000  00000000  00067bc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bc23e  00000000  00000000  00083647  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0013f885  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006d78  00000000  00000000  0013f8d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000350 	.word	0x20000350
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e1ec 	.word	0x0800e1ec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000354 	.word	0x20000354
 80001cc:	0800e1ec 	.word	0x0800e1ec

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <i2c1_pisiRegister>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint8_t i2c1_pisiRegister(uint8_t naprava, uint8_t reg, uint8_t podatek)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b086      	sub	sp, #24
 8000c4c:	af04      	add	r7, sp, #16
 8000c4e:	4603      	mov	r3, r0
 8000c50:	71fb      	strb	r3, [r7, #7]
 8000c52:	460b      	mov	r3, r1
 8000c54:	71bb      	strb	r3, [r7, #6]
 8000c56:	4613      	mov	r3, r2
 8000c58:	717b      	strb	r3, [r7, #5]
  naprava <<= 1;
 8000c5a:	79fb      	ldrb	r3, [r7, #7]
 8000c5c:	005b      	lsls	r3, r3, #1
 8000c5e:	71fb      	strb	r3, [r7, #7]
  return HAL_I2C_Mem_Write(&hi2c1, naprava, reg, I2C_MEMADD_SIZE_8BIT, &podatek, 1, 10);
 8000c60:	79fb      	ldrb	r3, [r7, #7]
 8000c62:	b299      	uxth	r1, r3
 8000c64:	79bb      	ldrb	r3, [r7, #6]
 8000c66:	b29a      	uxth	r2, r3
 8000c68:	230a      	movs	r3, #10
 8000c6a:	9302      	str	r3, [sp, #8]
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	9301      	str	r3, [sp, #4]
 8000c70:	1d7b      	adds	r3, r7, #5
 8000c72:	9300      	str	r3, [sp, #0]
 8000c74:	2301      	movs	r3, #1
 8000c76:	4804      	ldr	r0, [pc, #16]	; (8000c88 <i2c1_pisiRegister+0x40>)
 8000c78:	f001 fb06 	bl	8002288 <HAL_I2C_Mem_Write>
 8000c7c:	4603      	mov	r3, r0
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	2000059c 	.word	0x2000059c

08000c8c <i2c1_beriRegistre>:

void i2c1_beriRegistre(uint8_t naprava, uint8_t reg, uint8_t* podatek, uint8_t dolzina)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b086      	sub	sp, #24
 8000c90:	af04      	add	r7, sp, #16
 8000c92:	603a      	str	r2, [r7, #0]
 8000c94:	461a      	mov	r2, r3
 8000c96:	4603      	mov	r3, r0
 8000c98:	71fb      	strb	r3, [r7, #7]
 8000c9a:	460b      	mov	r3, r1
 8000c9c:	71bb      	strb	r3, [r7, #6]
 8000c9e:	4613      	mov	r3, r2
 8000ca0:	717b      	strb	r3, [r7, #5]
  if ((dolzina>1)&&(naprava==0x19))  // ce je naprava 0x19 moramo postaviti ta bit, ce zelimo brati vec zlogov
 8000ca2:	797b      	ldrb	r3, [r7, #5]
 8000ca4:	2b01      	cmp	r3, #1
 8000ca6:	d906      	bls.n	8000cb6 <i2c1_beriRegistre+0x2a>
 8000ca8:	79fb      	ldrb	r3, [r7, #7]
 8000caa:	2b19      	cmp	r3, #25
 8000cac:	d103      	bne.n	8000cb6 <i2c1_beriRegistre+0x2a>
    reg |= 0x80;
 8000cae:	79bb      	ldrb	r3, [r7, #6]
 8000cb0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000cb4:	71bb      	strb	r3, [r7, #6]
  naprava <<= 1;
 8000cb6:	79fb      	ldrb	r3, [r7, #7]
 8000cb8:	005b      	lsls	r3, r3, #1
 8000cba:	71fb      	strb	r3, [r7, #7]
  HAL_I2C_Mem_Read(&hi2c1, naprava, reg, I2C_MEMADD_SIZE_8BIT, podatek, dolzina, dolzina);
 8000cbc:	79fb      	ldrb	r3, [r7, #7]
 8000cbe:	b299      	uxth	r1, r3
 8000cc0:	79bb      	ldrb	r3, [r7, #6]
 8000cc2:	b298      	uxth	r0, r3
 8000cc4:	797b      	ldrb	r3, [r7, #5]
 8000cc6:	b29b      	uxth	r3, r3
 8000cc8:	797a      	ldrb	r2, [r7, #5]
 8000cca:	9202      	str	r2, [sp, #8]
 8000ccc:	9301      	str	r3, [sp, #4]
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	9300      	str	r3, [sp, #0]
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	4602      	mov	r2, r0
 8000cd6:	4803      	ldr	r0, [pc, #12]	; (8000ce4 <i2c1_beriRegistre+0x58>)
 8000cd8:	f001 fbea 	bl	80024b0 <HAL_I2C_Mem_Read>
}
 8000cdc:	bf00      	nop
 8000cde:	3708      	adds	r7, #8
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	2000059c 	.word	0x2000059c

08000ce8 <initLSM303DLHC>:

void initLSM303DLHC()
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  HAL_Delay(10);
 8000cec:	200a      	movs	r0, #10
 8000cee:	f000 ff5b 	bl	8001ba8 <HAL_Delay>
  // Za potrebe testa, moramo testni napravi sporociti kateri senzor imamo
  #define OLD_SENSOR 0x73 // Odkomentiramo za LSM303DLHC / stari senzor
  //#define NEW_SENSOR 0x6E // Odkomentiramo za LSM303AGR / novi senzor

  #if defined(OLD_SENSOR) && !defined(NEW_SENSOR)
  i2c1_pisiRegister(0x1e, 0x4F, OLD_SENSOR); // Povemo testni napravi, da imamo stari senzor
 8000cf2:	2273      	movs	r2, #115	; 0x73
 8000cf4:	214f      	movs	r1, #79	; 0x4f
 8000cf6:	201e      	movs	r0, #30
 8000cf8:	f7ff ffa6 	bl	8000c48 <i2c1_pisiRegister>
  #elif !defined(OLD_SENSOR) && defined(NEW_SENSOR)
  i2c1_pisiRegister(0x1e, 0x4F, NEW_SENSOR); // Povemo testni napravi, da imamo novi senzor
  #else
  for(;;); // V primeru napake, pocakamo tukaj
  #endif
  HAL_Delay(100);
 8000cfc:	2064      	movs	r0, #100	; 0x64
 8000cfe:	f000 ff53 	bl	8001ba8 <HAL_Delay>

  // inicializiraj pospeskometer
  i2c1_pisiRegister(0x19, 0x20, 0x27);  // zbudi pospeskometer in omogoci osi
 8000d02:	2227      	movs	r2, #39	; 0x27
 8000d04:	2120      	movs	r1, #32
 8000d06:	2019      	movs	r0, #25
 8000d08:	f7ff ff9e 	bl	8000c48 <i2c1_pisiRegister>
  i2c1_pisiRegister(0x19, 0x23, 0x88);  // nastavi posodobitev samo ko se prebere vrednost ter visoko locljivost
 8000d0c:	2288      	movs	r2, #136	; 0x88
 8000d0e:	2123      	movs	r1, #35	; 0x23
 8000d10:	2019      	movs	r0, #25
 8000d12:	f7ff ff99 	bl	8000c48 <i2c1_pisiRegister>
  i2c1_pisiRegister(0x19, 0x20, 0x47);	//odzivnost
 8000d16:	2247      	movs	r2, #71	; 0x47
 8000d18:	2120      	movs	r1, #32
 8000d1a:	2019      	movs	r0, #25
 8000d1c:	f7ff ff94 	bl	8000c48 <i2c1_pisiRegister>
  i2c1_pisiRegister(0x19, 0x23, 0x10);	//obcutljivost
 8000d20:	2210      	movs	r2, #16
 8000d22:	2123      	movs	r1, #35	; 0x23
 8000d24:	2019      	movs	r0, #25
 8000d26:	f7ff ff8f 	bl	8000c48 <i2c1_pisiRegister>
}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}
	...

08000d30 <getAxis.10267>:
  MX_SPI1_Init();
  MX_TIM3_Init();
  MX_USB_DEVICE_Init();
  /* USER CODE BEGIN 2 */

  float getAxis(float X, float Y, float Z) {
 8000d30:	b480      	push	{r7}
 8000d32:	b085      	sub	sp, #20
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	ed87 0a03 	vstr	s0, [r7, #12]
 8000d3a:	edc7 0a02 	vstr	s1, [r7, #8]
 8000d3e:	ed87 1a01 	vstr	s2, [r7, #4]
 8000d42:	f8c7 c000 	str.w	ip, [r7]
      X = abs(X);
 8000d46:	edd7 7a03 	vldr	s15, [r7, #12]
 8000d4a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d4e:	ee17 3a90 	vmov	r3, s15
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	bfb8      	it	lt
 8000d56:	425b      	neglt	r3, r3
 8000d58:	ee07 3a90 	vmov	s15, r3
 8000d5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d60:	edc7 7a03 	vstr	s15, [r7, #12]
      Y = abs(Y);
 8000d64:	edd7 7a02 	vldr	s15, [r7, #8]
 8000d68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d6c:	ee17 3a90 	vmov	r3, s15
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	bfb8      	it	lt
 8000d74:	425b      	neglt	r3, r3
 8000d76:	ee07 3a90 	vmov	s15, r3
 8000d7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d7e:	edc7 7a02 	vstr	s15, [r7, #8]
      Z = abs(Z);
 8000d82:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d8a:	ee17 3a90 	vmov	r3, s15
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	bfb8      	it	lt
 8000d92:	425b      	neglt	r3, r3
 8000d94:	ee07 3a90 	vmov	s15, r3
 8000d98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d9c:	edc7 7a01 	vstr	s15, [r7, #4]
      if (X > Y) {
 8000da0:	ed97 7a03 	vldr	s14, [r7, #12]
 8000da4:	edd7 7a02 	vldr	s15, [r7, #8]
 8000da8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000dac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000db0:	dd0b      	ble.n	8000dca <getAxis.10267+0x9a>
          if (X > Z){
 8000db2:	ed97 7a03 	vldr	s14, [r7, #12]
 8000db6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000dba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000dbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dc2:	dd11      	ble.n	8000de8 <getAxis.10267+0xb8>
        	  return 0;
 8000dc4:	f04f 0300 	mov.w	r3, #0
 8000dc8:	e00f      	b.n	8000dea <getAxis.10267+0xba>
          }
      }
      else if (Y > Z){
 8000dca:	ed97 7a02 	vldr	s14, [r7, #8]
 8000dce:	edd7 7a01 	vldr	s15, [r7, #4]
 8000dd2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000dd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dda:	dd02      	ble.n	8000de2 <getAxis.10267+0xb2>
    	  return 1;
 8000ddc:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000de0:	e003      	b.n	8000dea <getAxis.10267+0xba>
      }
      else{
    	  return 2;
 8000de2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000de6:	e000      	b.n	8000dea <getAxis.10267+0xba>
      }

      return -1;
 8000de8:	4b04      	ldr	r3, [pc, #16]	; (8000dfc <getAxis.10267+0xcc>)
 8000dea:	ee07 3a90 	vmov	s15, r3
  }
 8000dee:	eeb0 0a67 	vmov.f32	s0, s15
 8000df2:	3714      	adds	r7, #20
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr
 8000dfc:	bf800000 	.word	0xbf800000

08000e00 <main>:
{
 8000e00:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000e04:	b0e2      	sub	sp, #392	; 0x188
 8000e06:	af06      	add	r7, sp, #24
int main(void)
 8000e08:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8000e0c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  HAL_Init();
 8000e10:	f000 fe64 	bl	8001adc <HAL_Init>
  SystemClock_Config();
 8000e14:	f000 fab2 	bl	800137c <SystemClock_Config>
  MX_GPIO_Init();
 8000e18:	f000 fbdc 	bl	80015d4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000e1c:	f000 fb0e 	bl	800143c <MX_I2C1_Init>
  MX_SPI1_Init();
 8000e20:	f000 fb4a 	bl	80014b8 <MX_SPI1_Init>
  MX_TIM3_Init();
 8000e24:	f000 fb86 	bl	8001534 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 8000e28:	f008 fe66 	bl	8009af8 <MX_USB_DEVICE_Init>

  // zazenemo casovnik ter cakamo do preliva vrednosti
  HAL_TIM_Base_Start(&htim3);
 8000e2c:	48da      	ldr	r0, [pc, #872]	; (8001198 <main+0x398>)
 8000e2e:	f004 ffa7 	bl	8005d80 <HAL_TIM_Base_Start>

  // pocistimo zastavico za preliv vrednosti
  __HAL_TIM_CLEAR_FLAG(&htim3, TIM_FLAG_UPDATE);
 8000e32:	4bd9      	ldr	r3, [pc, #868]	; (8001198 <main+0x398>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f06f 0201 	mvn.w	r2, #1
 8000e3a:	611a      	str	r2, [r3, #16]

  __HAL_I2C_ENABLE(&hi2c1);
 8000e3c:	4bd7      	ldr	r3, [pc, #860]	; (800119c <main+0x39c>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	4bd6      	ldr	r3, [pc, #856]	; (800119c <main+0x39c>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f042 0201 	orr.w	r2, r2, #1
 8000e4a:	601a      	str	r2, [r3, #0]

  initLSM303DLHC(); //zazeni init posp.
 8000e4c:	f7ff ff4c 	bl	8000ce8 <initLSM303DLHC>

  int16_t meritev[6];
  meritev[0] = 0xaaab;// glava za zaznamek zacetek paketa
 8000e50:	f64a 23ab 	movw	r3, #43691	; 0xaaab
 8000e54:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c

  int8_t cordZLow;
  int8_t cordZHigh;
  float cordZ;

  int bumpsX = 0;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
  int bumpsY = 0;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  int bumpsZ = 0;
 8000e64:	2300      	movs	r3, #0
 8000e66:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  int bumps = 0;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
  int counter = 0;
 8000e70:	2300      	movs	r3, #0
 8000e72:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  int paket = -1;
 8000e76:	f04f 33ff 	mov.w	r3, #4294967295
 8000e7a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  float currentAccel = 0.0;
 8000e7e:	f04f 0300 	mov.w	r3, #0
 8000e82:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
  float lastAccel = 0.0;
 8000e86:	f04f 0300 	mov.w	r3, #0
 8000e8a:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  int secondCounter = 0;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  int axis = 0;
 8000e94:	2300      	movs	r3, #0
 8000e96:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  int once = 0;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
  int once2 = 0;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
  int once3 = 0;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(10);
 8000eac:	200a      	movs	r0, #10
 8000eae:	f000 fe7b 	bl	8001ba8 <HAL_Delay>
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)){
 8000eb2:	2101      	movs	r1, #1
 8000eb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eb8:	f001 f926 	bl	8002108 <HAL_GPIO_ReadPin>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d048      	beq.n	8000f54 <main+0x154>
		  counter++;
 8000ec2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8000ec6:	3301      	adds	r3, #1
 8000ec8:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
		 if(counter > 4){
 8000ecc:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8000ed0:	2b04      	cmp	r3, #4
 8000ed2:	dd3f      	ble.n	8000f54 <main+0x154>
			 counter = 0;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
			 once = 0;
 8000eda:	2300      	movs	r3, #0
 8000edc:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
			 once2 = 0;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
			 once3 = 0;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
			 bumps = 0;
 8000eec:	2300      	movs	r3, #0
 8000eee:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
			 bumpsX = 0;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
			 bumpsY = 0;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
			 bumpsZ = 0;
 8000efe:	2300      	movs	r3, #0
 8000f00:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
			 paket = -1;
 8000f04:	f04f 33ff 	mov.w	r3, #4294967295
 8000f08:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
			    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f12:	48a3      	ldr	r0, [pc, #652]	; (80011a0 <main+0x3a0>)
 8000f14:	f001 f910 	bl	8002138 <HAL_GPIO_WritePin>
			    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 8000f18:	2200      	movs	r2, #0
 8000f1a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f1e:	48a0      	ldr	r0, [pc, #640]	; (80011a0 <main+0x3a0>)
 8000f20:	f001 f90a 	bl	8002138 <HAL_GPIO_WritePin>
			    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_RESET);
 8000f24:	2200      	movs	r2, #0
 8000f26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f2a:	489d      	ldr	r0, [pc, #628]	; (80011a0 <main+0x3a0>)
 8000f2c:	f001 f904 	bl	8002138 <HAL_GPIO_WritePin>
			    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 8000f30:	2200      	movs	r2, #0
 8000f32:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f36:	489a      	ldr	r0, [pc, #616]	; (80011a0 <main+0x3a0>)
 8000f38:	f001 f8fe 	bl	8002138 <HAL_GPIO_WritePin>
			    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f42:	4897      	ldr	r0, [pc, #604]	; (80011a0 <main+0x3a0>)
 8000f44:	f001 f8f8 	bl	8002138 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 8000f48:	2200      	movs	r2, #0
 8000f4a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f4e:	4894      	ldr	r0, [pc, #592]	; (80011a0 <main+0x3a0>)
 8000f50:	f001 f8f2 	bl	8002138 <HAL_GPIO_WritePin>
		__HAL_TIM_CLEAR_FLAG(&htim3, TIM_FLAG_UPDATE);
		//stanje LED lucke
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_10);
		*/

		if(counter == 1){	//ZBIRANJE PODATKOV
 8000f54:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	f040 8162 	bne.w	8001222 <main+0x422>

		    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 8000f5e:	2201      	movs	r2, #1
 8000f60:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f64:	488e      	ldr	r0, [pc, #568]	; (80011a0 <main+0x3a0>)
 8000f66:	f001 f8e7 	bl	8002138 <HAL_GPIO_WritePin>

			//PAKET
			paket = paket + 1;
 8000f6a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8000f6e:	3301      	adds	r3, #1
 8000f70:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
			meritev[1] = paket;
 8000f74:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8000f78:	b21b      	sxth	r3, r3
 8000f7a:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

			//X-os
			i2c1_beriRegistre(0x19, 0x29, (uint8_t *)&cordXHigh, 1);
 8000f7e:	f507 7285 	add.w	r2, r7, #266	; 0x10a
 8000f82:	2301      	movs	r3, #1
 8000f84:	2129      	movs	r1, #41	; 0x29
 8000f86:	2019      	movs	r0, #25
 8000f88:	f7ff fe80 	bl	8000c8c <i2c1_beriRegistre>
			i2c1_beriRegistre(0x19, 0x28, (uint8_t *)&cordXLow, 1);
 8000f8c:	f207 120b 	addw	r2, r7, #267	; 0x10b
 8000f90:	2301      	movs	r3, #1
 8000f92:	2128      	movs	r1, #40	; 0x28
 8000f94:	2019      	movs	r0, #25
 8000f96:	f7ff fe79 	bl	8000c8c <i2c1_beriRegistre>
			meritev[1] = (cordXHigh << 8) | (cordXLow & 0xff);
 8000f9a:	f997 310a 	ldrsb.w	r3, [r7, #266]	; 0x10a
 8000f9e:	021b      	lsls	r3, r3, #8
 8000fa0:	b21a      	sxth	r2, r3
 8000fa2:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8000fa6:	b21b      	sxth	r3, r3
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	b21b      	sxth	r3, r3
 8000fac:	4313      	orrs	r3, r2
 8000fae:	b21b      	sxth	r3, r3
 8000fb0:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
			cordX = (meritev[1] >> 3) / 1000.0f;
 8000fb4:	f9b7 310e 	ldrsh.w	r3, [r7, #270]	; 0x10e
 8000fb8:	10db      	asrs	r3, r3, #3
 8000fba:	b21b      	sxth	r3, r3
 8000fbc:	ee07 3a90 	vmov	s15, r3
 8000fc0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fc4:	eddf 6a77 	vldr	s13, [pc, #476]	; 80011a4 <main+0x3a4>
 8000fc8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fcc:	edc7 7a4a 	vstr	s15, [r7, #296]	; 0x128

			//Y-os
			i2c1_beriRegistre(0x19, 0x2B, (uint8_t *)&cordYHigh, 1);
 8000fd0:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	212b      	movs	r1, #43	; 0x2b
 8000fd8:	2019      	movs	r0, #25
 8000fda:	f7ff fe57 	bl	8000c8c <i2c1_beriRegistre>
			i2c1_beriRegistre(0x19, 0x2A, (uint8_t *)&cordYLow, 1);
 8000fde:	f207 1209 	addw	r2, r7, #265	; 0x109
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	212a      	movs	r1, #42	; 0x2a
 8000fe6:	2019      	movs	r0, #25
 8000fe8:	f7ff fe50 	bl	8000c8c <i2c1_beriRegistre>
			meritev[2] = (cordYHigh << 8) | (cordYLow & 0xff);
 8000fec:	f997 3108 	ldrsb.w	r3, [r7, #264]	; 0x108
 8000ff0:	021b      	lsls	r3, r3, #8
 8000ff2:	b21a      	sxth	r2, r3
 8000ff4:	f997 3109 	ldrsb.w	r3, [r7, #265]	; 0x109
 8000ff8:	b21b      	sxth	r3, r3
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	b21b      	sxth	r3, r3
 8000ffe:	4313      	orrs	r3, r2
 8001000:	b21b      	sxth	r3, r3
 8001002:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
			cordY = (meritev[2] >> 3) / 1000.0f;
 8001006:	f9b7 3110 	ldrsh.w	r3, [r7, #272]	; 0x110
 800100a:	10db      	asrs	r3, r3, #3
 800100c:	b21b      	sxth	r3, r3
 800100e:	ee07 3a90 	vmov	s15, r3
 8001012:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001016:	eddf 6a63 	vldr	s13, [pc, #396]	; 80011a4 <main+0x3a4>
 800101a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800101e:	edc7 7a49 	vstr	s15, [r7, #292]	; 0x124

			//Z-os
			i2c1_beriRegistre(0x19, 0x2D, (uint8_t *)&cordZHigh, 1);
 8001022:	f507 7283 	add.w	r2, r7, #262	; 0x106
 8001026:	2301      	movs	r3, #1
 8001028:	212d      	movs	r1, #45	; 0x2d
 800102a:	2019      	movs	r0, #25
 800102c:	f7ff fe2e 	bl	8000c8c <i2c1_beriRegistre>
			i2c1_beriRegistre(0x19, 0x2C, (uint8_t *)&cordZLow, 1);
 8001030:	f207 1207 	addw	r2, r7, #263	; 0x107
 8001034:	2301      	movs	r3, #1
 8001036:	212c      	movs	r1, #44	; 0x2c
 8001038:	2019      	movs	r0, #25
 800103a:	f7ff fe27 	bl	8000c8c <i2c1_beriRegistre>
			meritev[3] = (cordZHigh << 8) | (cordZLow & 0xff);
 800103e:	f997 3106 	ldrsb.w	r3, [r7, #262]	; 0x106
 8001042:	021b      	lsls	r3, r3, #8
 8001044:	b21a      	sxth	r2, r3
 8001046:	f997 3107 	ldrsb.w	r3, [r7, #263]	; 0x107
 800104a:	b21b      	sxth	r3, r3
 800104c:	b2db      	uxtb	r3, r3
 800104e:	b21b      	sxth	r3, r3
 8001050:	4313      	orrs	r3, r2
 8001052:	b21b      	sxth	r3, r3
 8001054:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
			cordZ = (meritev[3] >> 3) / 1000.0f;
 8001058:	f9b7 3112 	ldrsh.w	r3, [r7, #274]	; 0x112
 800105c:	10db      	asrs	r3, r3, #3
 800105e:	b21b      	sxth	r3, r3
 8001060:	ee07 3a90 	vmov	s15, r3
 8001064:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001068:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80011a4 <main+0x3a4>
 800106c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001070:	edc7 7a48 	vstr	s15, [r7, #288]	; 0x120

			lastAccel = currentAccel;
 8001074:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001078:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
			currentAccel = sqrt(pow(cordX, 2) + pow(cordY, 2) + pow(cordZ, 2));
 800107c:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 8001080:	f7ff fa62 	bl	8000548 <__aeabi_f2d>
 8001084:	4602      	mov	r2, r0
 8001086:	460b      	mov	r3, r1
 8001088:	ed9f 1b41 	vldr	d1, [pc, #260]	; 8001190 <main+0x390>
 800108c:	ec43 2b10 	vmov	d0, r2, r3
 8001090:	f00c f8c4 	bl	800d21c <pow>
 8001094:	ec55 4b10 	vmov	r4, r5, d0
 8001098:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800109c:	f7ff fa54 	bl	8000548 <__aeabi_f2d>
 80010a0:	4602      	mov	r2, r0
 80010a2:	460b      	mov	r3, r1
 80010a4:	ed9f 1b3a 	vldr	d1, [pc, #232]	; 8001190 <main+0x390>
 80010a8:	ec43 2b10 	vmov	d0, r2, r3
 80010ac:	f00c f8b6 	bl	800d21c <pow>
 80010b0:	ec53 2b10 	vmov	r2, r3, d0
 80010b4:	4620      	mov	r0, r4
 80010b6:	4629      	mov	r1, r5
 80010b8:	f7ff f8e8 	bl	800028c <__adddf3>
 80010bc:	4602      	mov	r2, r0
 80010be:	460b      	mov	r3, r1
 80010c0:	4614      	mov	r4, r2
 80010c2:	461d      	mov	r5, r3
 80010c4:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 80010c8:	f7ff fa3e 	bl	8000548 <__aeabi_f2d>
 80010cc:	4602      	mov	r2, r0
 80010ce:	460b      	mov	r3, r1
 80010d0:	ed9f 1b2f 	vldr	d1, [pc, #188]	; 8001190 <main+0x390>
 80010d4:	ec43 2b10 	vmov	d0, r2, r3
 80010d8:	f00c f8a0 	bl	800d21c <pow>
 80010dc:	ec53 2b10 	vmov	r2, r3, d0
 80010e0:	4620      	mov	r0, r4
 80010e2:	4629      	mov	r1, r5
 80010e4:	f7ff f8d2 	bl	800028c <__adddf3>
 80010e8:	4602      	mov	r2, r0
 80010ea:	460b      	mov	r3, r1
 80010ec:	ec43 2b17 	vmov	d7, r2, r3
 80010f0:	eeb0 0a47 	vmov.f32	s0, s14
 80010f4:	eef0 0a67 	vmov.f32	s1, s15
 80010f8:	f00c f93e 	bl	800d378 <sqrt>
 80010fc:	ec53 2b10 	vmov	r2, r3, d0
 8001100:	4610      	mov	r0, r2
 8001102:	4619      	mov	r1, r3
 8001104:	f7ff fd50 	bl	8000ba8 <__aeabi_d2f>
 8001108:	4603      	mov	r3, r0
 800110a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
			axis = getAxis(cordX, cordY, cordZ);
 800110e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001112:	469c      	mov	ip, r3
 8001114:	ed97 1a48 	vldr	s2, [r7, #288]	; 0x120
 8001118:	edd7 0a49 	vldr	s1, [r7, #292]	; 0x124
 800111c:	ed97 0a4a 	vldr	s0, [r7, #296]	; 0x128
 8001120:	f7ff fe06 	bl	8000d30 <getAxis.10267>
 8001124:	eef0 7a40 	vmov.f32	s15, s0
 8001128:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800112c:	ee17 3a90 	vmov	r3, s15
 8001130:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138

			if (axis == 0) {
 8001134:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001138:	2b00      	cmp	r3, #0
 800113a:	d112      	bne.n	8001162 <main+0x362>
				if ((lastAccel - currentAccel) > 0.50) {
 800113c:	ed97 7a50 	vldr	s14, [r7, #320]	; 0x140
 8001140:	edd7 7a56 	vldr	s15, [r7, #344]	; 0x158
 8001144:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001148:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800114c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001154:	dd3e      	ble.n	80011d4 <main+0x3d4>
					bumpsX++;
 8001156:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800115a:	3301      	adds	r3, #1
 800115c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8001160:	e038      	b.n	80011d4 <main+0x3d4>
				}
			}
			else if (axis == 1) {
 8001162:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001166:	2b01      	cmp	r3, #1
 8001168:	d11e      	bne.n	80011a8 <main+0x3a8>
				if ((lastAccel - currentAccel) > 0.50) {
 800116a:	ed97 7a50 	vldr	s14, [r7, #320]	; 0x140
 800116e:	edd7 7a56 	vldr	s15, [r7, #344]	; 0x158
 8001172:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001176:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800117a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800117e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001182:	dd27      	ble.n	80011d4 <main+0x3d4>
					bumpsY++;
 8001184:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001188:	3301      	adds	r3, #1
 800118a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 800118e:	e021      	b.n	80011d4 <main+0x3d4>
 8001190:	00000000 	.word	0x00000000
 8001194:	40000000 	.word	0x40000000
 8001198:	200005e8 	.word	0x200005e8
 800119c:	2000059c 	.word	0x2000059c
 80011a0:	48001000 	.word	0x48001000
 80011a4:	447a0000 	.word	0x447a0000
				}
			}
			else if (axis == 2) {
 80011a8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80011ac:	2b02      	cmp	r3, #2
 80011ae:	d111      	bne.n	80011d4 <main+0x3d4>
				if ((lastAccel - currentAccel) > 0.50) {
 80011b0:	ed97 7a50 	vldr	s14, [r7, #320]	; 0x140
 80011b4:	edd7 7a56 	vldr	s15, [r7, #344]	; 0x158
 80011b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011bc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80011c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011c8:	dd04      	ble.n	80011d4 <main+0x3d4>
					bumpsZ++;
 80011ca:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80011ce:	3301      	adds	r3, #1
 80011d0:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
				}
			}

			int len = sprintf(buff, "{Pospeskometer[%i]-> \"X\":[%.3f],  \"Y\":[%.3f], \"Z\":[%.3f]}\n\r", paket, cordX, cordY, cordZ);
 80011d4:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 80011d8:	f7ff f9b6 	bl	8000548 <__aeabi_f2d>
 80011dc:	4604      	mov	r4, r0
 80011de:	460d      	mov	r5, r1
 80011e0:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 80011e4:	f7ff f9b0 	bl	8000548 <__aeabi_f2d>
 80011e8:	4680      	mov	r8, r0
 80011ea:	4689      	mov	r9, r1
 80011ec:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 80011f0:	f7ff f9aa 	bl	8000548 <__aeabi_f2d>
 80011f4:	4602      	mov	r2, r0
 80011f6:	460b      	mov	r3, r1
 80011f8:	1d38      	adds	r0, r7, #4
 80011fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80011fe:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001202:	e9cd 4500 	strd	r4, r5, [sp]
 8001206:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 800120a:	4957      	ldr	r1, [pc, #348]	; (8001368 <main+0x568>)
 800120c:	f009 fdda 	bl	800adc4 <siprintf>
 8001210:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
			CDC_Transmit_FS((uint8_t*)&buff, len);
 8001214:	1d3b      	adds	r3, r7, #4
 8001216:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800121a:	4618      	mov	r0, r3
 800121c:	f008 fd2a 	bl	8009c74 <CDC_Transmit_FS>
 8001220:	e097      	b.n	8001352 <main+0x552>

		}

		else if(counter == 2){
 8001222:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001226:	2b02      	cmp	r3, #2
 8001228:	d123      	bne.n	8001272 <main+0x472>
			if(once2 < 1){
 800122a:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800122e:	2b00      	cmp	r3, #0
 8001230:	f300 808f 	bgt.w	8001352 <main+0x552>
			    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_SET);
 8001234:	2201      	movs	r2, #1
 8001236:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800123a:	484c      	ldr	r0, [pc, #304]	; (800136c <main+0x56c>)
 800123c:	f000 ff7c 	bl	8002138 <HAL_GPIO_WritePin>
				int len = sprintf(buff, "{\"Bumps X\":[%i],  \"Bumps Y\":[%i], \"Bumps Z\":[%i]}\n\r}", bumpsX, bumpsY, bumpsZ);
 8001240:	1d38      	adds	r0, r7, #4
 8001242:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001246:	9300      	str	r3, [sp, #0]
 8001248:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800124c:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8001250:	4947      	ldr	r1, [pc, #284]	; (8001370 <main+0x570>)
 8001252:	f009 fdb7 	bl	800adc4 <siprintf>
 8001256:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
				CDC_Transmit_FS((uint8_t*)&buff, len);
 800125a:	1d3b      	adds	r3, r7, #4
 800125c:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 8001260:	4618      	mov	r0, r3
 8001262:	f008 fd07 	bl	8009c74 <CDC_Transmit_FS>
				once2++;
 8001266:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800126a:	3301      	adds	r3, #1
 800126c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001270:	e06f      	b.n	8001352 <main+0x552>
			}
		}

		else if(counter == 3){
 8001272:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001276:	2b03      	cmp	r3, #3
 8001278:	d11c      	bne.n	80012b4 <main+0x4b4>
		    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 800127a:	2201      	movs	r2, #1
 800127c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001280:	483a      	ldr	r0, [pc, #232]	; (800136c <main+0x56c>)
 8001282:	f000 ff59 	bl	8002138 <HAL_GPIO_WritePin>

			if(once < 1){
 8001286:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800128a:	2b00      	cmp	r3, #0
 800128c:	dc61      	bgt.n	8001352 <main+0x552>
				int len = sprintf(buff, "{STOP}\n\r");
 800128e:	1d3b      	adds	r3, r7, #4
 8001290:	4938      	ldr	r1, [pc, #224]	; (8001374 <main+0x574>)
 8001292:	4618      	mov	r0, r3
 8001294:	f009 fd96 	bl	800adc4 <siprintf>
 8001298:	f8c7 0130 	str.w	r0, [r7, #304]	; 0x130
				CDC_Transmit_FS((uint8_t*)&buff, len);
 800129c:	1d3b      	adds	r3, r7, #4
 800129e:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 80012a2:	4618      	mov	r0, r3
 80012a4:	f008 fce6 	bl	8009c74 <CDC_Transmit_FS>
				once++;
 80012a8:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80012ac:	3301      	adds	r3, #1
 80012ae:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80012b2:	e04e      	b.n	8001352 <main+0x552>
			}

		}

		else if(counter == 4){
 80012b4:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80012b8:	2b04      	cmp	r3, #4
 80012ba:	d14a      	bne.n	8001352 <main+0x552>


			if(once3 < 1){
 80012bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	dc46      	bgt.n	8001352 <main+0x552>
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_SET);
 80012c4:	2201      	movs	r2, #1
 80012c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012ca:	4828      	ldr	r0, [pc, #160]	; (800136c <main+0x56c>)
 80012cc:	f000 ff34 	bl	8002138 <HAL_GPIO_WritePin>
				HAL_Delay(5000);
 80012d0:	f241 3088 	movw	r0, #5000	; 0x1388
 80012d4:	f000 fc68 	bl	8001ba8 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 80012d8:	2200      	movs	r2, #0
 80012da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012de:	4823      	ldr	r0, [pc, #140]	; (800136c <main+0x56c>)
 80012e0:	f000 ff2a 	bl	8002138 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);
 80012e4:	2201      	movs	r2, #1
 80012e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012ea:	4820      	ldr	r0, [pc, #128]	; (800136c <main+0x56c>)
 80012ec:	f000 ff24 	bl	8002138 <HAL_GPIO_WritePin>

				bumps = bumpsX + bumpsY + bumpsZ;
 80012f0:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 80012f4:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80012f8:	4413      	add	r3, r2
 80012fa:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 80012fe:	4413      	add	r3, r2
 8001300:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
				for(int i = 0; i < 256; i++){
 8001304:	2300      	movs	r3, #0
 8001306:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800130a:	e00a      	b.n	8001322 <main+0x522>
					buff[i] = 0;
 800130c:	1d3a      	adds	r2, r7, #4
 800130e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8001312:	4413      	add	r3, r2
 8001314:	2200      	movs	r2, #0
 8001316:	701a      	strb	r2, [r3, #0]
				for(int i = 0; i < 256; i++){
 8001318:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800131c:	3301      	adds	r3, #1
 800131e:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8001322:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8001326:	2bff      	cmp	r3, #255	; 0xff
 8001328:	ddf0      	ble.n	800130c <main+0x50c>
				}
				int len = sprintf(buff, "%i\n\r",bumps);
 800132a:	1d3b      	adds	r3, r7, #4
 800132c:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001330:	4911      	ldr	r1, [pc, #68]	; (8001378 <main+0x578>)
 8001332:	4618      	mov	r0, r3
 8001334:	f009 fd46 	bl	800adc4 <siprintf>
 8001338:	f8c7 0134 	str.w	r0, [r7, #308]	; 0x134

				CDC_Transmit_FS((uint8_t*)&buff, len);
 800133c:	1d3b      	adds	r3, r7, #4
 800133e:	f8d7 1134 	ldr.w	r1, [r7, #308]	; 0x134
 8001342:	4618      	mov	r0, r3
 8001344:	f008 fc96 	bl	8009c74 <CDC_Transmit_FS>
				once3++;
 8001348:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800134c:	3301      	adds	r3, #1
 800134e:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
			}

		}

		while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)){};
 8001352:	bf00      	nop
 8001354:	2101      	movs	r1, #1
 8001356:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800135a:	f000 fed5 	bl	8002108 <HAL_GPIO_ReadPin>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d1f7      	bne.n	8001354 <main+0x554>
	  HAL_Delay(10);
 8001364:	e5a2      	b.n	8000eac <main+0xac>
 8001366:	bf00      	nop
 8001368:	0800e208 	.word	0x0800e208
 800136c:	48001000 	.word	0x48001000
 8001370:	0800e244 	.word	0x0800e244
 8001374:	0800e27c 	.word	0x0800e27c
 8001378:	0800e288 	.word	0x0800e288

0800137c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b09e      	sub	sp, #120	; 0x78
 8001380:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001382:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001386:	2228      	movs	r2, #40	; 0x28
 8001388:	2100      	movs	r1, #0
 800138a:	4618      	mov	r0, r3
 800138c:	f009 f8a8 	bl	800a4e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001390:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	605a      	str	r2, [r3, #4]
 800139a:	609a      	str	r2, [r3, #8]
 800139c:	60da      	str	r2, [r3, #12]
 800139e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013a0:	463b      	mov	r3, r7
 80013a2:	223c      	movs	r2, #60	; 0x3c
 80013a4:	2100      	movs	r1, #0
 80013a6:	4618      	mov	r0, r3
 80013a8:	f009 f89a 	bl	800a4e0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80013ac:	2303      	movs	r3, #3
 80013ae:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80013b0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80013b4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80013b6:	2300      	movs	r3, #0
 80013b8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013ba:	2301      	movs	r3, #1
 80013bc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013be:	2310      	movs	r3, #16
 80013c0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013c2:	2302      	movs	r3, #2
 80013c4:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013ca:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80013cc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80013d0:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013d2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80013d6:	4618      	mov	r0, r3
 80013d8:	f003 f932 	bl	8004640 <HAL_RCC_OscConfig>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80013e2:	f000 f975 	bl	80016d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013e6:	230f      	movs	r3, #15
 80013e8:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013ea:	2302      	movs	r3, #2
 80013ec:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013ee:	2300      	movs	r3, #0
 80013f0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013f8:	2300      	movs	r3, #0
 80013fa:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013fc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001400:	2102      	movs	r1, #2
 8001402:	4618      	mov	r0, r3
 8001404:	f004 f824 	bl	8005450 <HAL_RCC_ClockConfig>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800140e:	f000 f95f 	bl	80016d0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 8001412:	4b09      	ldr	r3, [pc, #36]	; (8001438 <SystemClock_Config+0xbc>)
 8001414:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001416:	2300      	movs	r3, #0
 8001418:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800141a:	2300      	movs	r3, #0
 800141c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800141e:	463b      	mov	r3, r7
 8001420:	4618      	mov	r0, r3
 8001422:	f004 f9fb 	bl	800581c <HAL_RCCEx_PeriphCLKConfig>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800142c:	f000 f950 	bl	80016d0 <Error_Handler>
  }
}
 8001430:	bf00      	nop
 8001432:	3778      	adds	r7, #120	; 0x78
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	00020020 	.word	0x00020020

0800143c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001440:	4b1b      	ldr	r3, [pc, #108]	; (80014b0 <MX_I2C1_Init+0x74>)
 8001442:	4a1c      	ldr	r2, [pc, #112]	; (80014b4 <MX_I2C1_Init+0x78>)
 8001444:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 8001446:	4b1a      	ldr	r3, [pc, #104]	; (80014b0 <MX_I2C1_Init+0x74>)
 8001448:	f240 220b 	movw	r2, #523	; 0x20b
 800144c:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800144e:	4b18      	ldr	r3, [pc, #96]	; (80014b0 <MX_I2C1_Init+0x74>)
 8001450:	2200      	movs	r2, #0
 8001452:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001454:	4b16      	ldr	r3, [pc, #88]	; (80014b0 <MX_I2C1_Init+0x74>)
 8001456:	2201      	movs	r2, #1
 8001458:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800145a:	4b15      	ldr	r3, [pc, #84]	; (80014b0 <MX_I2C1_Init+0x74>)
 800145c:	2200      	movs	r2, #0
 800145e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001460:	4b13      	ldr	r3, [pc, #76]	; (80014b0 <MX_I2C1_Init+0x74>)
 8001462:	2200      	movs	r2, #0
 8001464:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001466:	4b12      	ldr	r3, [pc, #72]	; (80014b0 <MX_I2C1_Init+0x74>)
 8001468:	2200      	movs	r2, #0
 800146a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800146c:	4b10      	ldr	r3, [pc, #64]	; (80014b0 <MX_I2C1_Init+0x74>)
 800146e:	2200      	movs	r2, #0
 8001470:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001472:	4b0f      	ldr	r3, [pc, #60]	; (80014b0 <MX_I2C1_Init+0x74>)
 8001474:	2200      	movs	r2, #0
 8001476:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001478:	480d      	ldr	r0, [pc, #52]	; (80014b0 <MX_I2C1_Init+0x74>)
 800147a:	f000 fe75 	bl	8002168 <HAL_I2C_Init>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001484:	f000 f924 	bl	80016d0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001488:	2100      	movs	r1, #0
 800148a:	4809      	ldr	r0, [pc, #36]	; (80014b0 <MX_I2C1_Init+0x74>)
 800148c:	f001 fb56 	bl	8002b3c <HAL_I2CEx_ConfigAnalogFilter>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001496:	f000 f91b 	bl	80016d0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800149a:	2100      	movs	r1, #0
 800149c:	4804      	ldr	r0, [pc, #16]	; (80014b0 <MX_I2C1_Init+0x74>)
 800149e:	f001 fb98 	bl	8002bd2 <HAL_I2CEx_ConfigDigitalFilter>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80014a8:	f000 f912 	bl	80016d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014ac:	bf00      	nop
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	2000059c 	.word	0x2000059c
 80014b4:	40005400 	.word	0x40005400

080014b8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80014bc:	4b1b      	ldr	r3, [pc, #108]	; (800152c <MX_SPI1_Init+0x74>)
 80014be:	4a1c      	ldr	r2, [pc, #112]	; (8001530 <MX_SPI1_Init+0x78>)
 80014c0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80014c2:	4b1a      	ldr	r3, [pc, #104]	; (800152c <MX_SPI1_Init+0x74>)
 80014c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80014c8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80014ca:	4b18      	ldr	r3, [pc, #96]	; (800152c <MX_SPI1_Init+0x74>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80014d0:	4b16      	ldr	r3, [pc, #88]	; (800152c <MX_SPI1_Init+0x74>)
 80014d2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80014d6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014d8:	4b14      	ldr	r3, [pc, #80]	; (800152c <MX_SPI1_Init+0x74>)
 80014da:	2200      	movs	r2, #0
 80014dc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014de:	4b13      	ldr	r3, [pc, #76]	; (800152c <MX_SPI1_Init+0x74>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80014e4:	4b11      	ldr	r3, [pc, #68]	; (800152c <MX_SPI1_Init+0x74>)
 80014e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014ea:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80014ec:	4b0f      	ldr	r3, [pc, #60]	; (800152c <MX_SPI1_Init+0x74>)
 80014ee:	2208      	movs	r2, #8
 80014f0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014f2:	4b0e      	ldr	r3, [pc, #56]	; (800152c <MX_SPI1_Init+0x74>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80014f8:	4b0c      	ldr	r3, [pc, #48]	; (800152c <MX_SPI1_Init+0x74>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014fe:	4b0b      	ldr	r3, [pc, #44]	; (800152c <MX_SPI1_Init+0x74>)
 8001500:	2200      	movs	r2, #0
 8001502:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001504:	4b09      	ldr	r3, [pc, #36]	; (800152c <MX_SPI1_Init+0x74>)
 8001506:	2207      	movs	r2, #7
 8001508:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800150a:	4b08      	ldr	r3, [pc, #32]	; (800152c <MX_SPI1_Init+0x74>)
 800150c:	2200      	movs	r2, #0
 800150e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001510:	4b06      	ldr	r3, [pc, #24]	; (800152c <MX_SPI1_Init+0x74>)
 8001512:	2208      	movs	r2, #8
 8001514:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001516:	4805      	ldr	r0, [pc, #20]	; (800152c <MX_SPI1_Init+0x74>)
 8001518:	f004 fb30 	bl	8005b7c <HAL_SPI_Init>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001522:	f000 f8d5 	bl	80016d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	20000634 	.word	0x20000634
 8001530:	40013000 	.word	0x40013000

08001534 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b088      	sub	sp, #32
 8001538:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800153a:	f107 0310 	add.w	r3, r7, #16
 800153e:	2200      	movs	r2, #0
 8001540:	601a      	str	r2, [r3, #0]
 8001542:	605a      	str	r2, [r3, #4]
 8001544:	609a      	str	r2, [r3, #8]
 8001546:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001548:	1d3b      	adds	r3, r7, #4
 800154a:	2200      	movs	r2, #0
 800154c:	601a      	str	r2, [r3, #0]
 800154e:	605a      	str	r2, [r3, #4]
 8001550:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001552:	4b1e      	ldr	r3, [pc, #120]	; (80015cc <MX_TIM3_Init+0x98>)
 8001554:	4a1e      	ldr	r2, [pc, #120]	; (80015d0 <MX_TIM3_Init+0x9c>)
 8001556:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 59999;
 8001558:	4b1c      	ldr	r3, [pc, #112]	; (80015cc <MX_TIM3_Init+0x98>)
 800155a:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800155e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001560:	4b1a      	ldr	r3, [pc, #104]	; (80015cc <MX_TIM3_Init+0x98>)
 8001562:	2200      	movs	r2, #0
 8001564:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001566:	4b19      	ldr	r3, [pc, #100]	; (80015cc <MX_TIM3_Init+0x98>)
 8001568:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800156c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800156e:	4b17      	ldr	r3, [pc, #92]	; (80015cc <MX_TIM3_Init+0x98>)
 8001570:	2200      	movs	r2, #0
 8001572:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001574:	4b15      	ldr	r3, [pc, #84]	; (80015cc <MX_TIM3_Init+0x98>)
 8001576:	2200      	movs	r2, #0
 8001578:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800157a:	4814      	ldr	r0, [pc, #80]	; (80015cc <MX_TIM3_Init+0x98>)
 800157c:	f004 fba9 	bl	8005cd2 <HAL_TIM_Base_Init>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8001586:	f000 f8a3 	bl	80016d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800158a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800158e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001590:	f107 0310 	add.w	r3, r7, #16
 8001594:	4619      	mov	r1, r3
 8001596:	480d      	ldr	r0, [pc, #52]	; (80015cc <MX_TIM3_Init+0x98>)
 8001598:	f004 fc54 	bl	8005e44 <HAL_TIM_ConfigClockSource>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 80015a2:	f000 f895 	bl	80016d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015a6:	2300      	movs	r3, #0
 80015a8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015aa:	2300      	movs	r3, #0
 80015ac:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015ae:	1d3b      	adds	r3, r7, #4
 80015b0:	4619      	mov	r1, r3
 80015b2:	4806      	ldr	r0, [pc, #24]	; (80015cc <MX_TIM3_Init+0x98>)
 80015b4:	f004 fe3a 	bl	800622c <HAL_TIMEx_MasterConfigSynchronization>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 80015be:	f000 f887 	bl	80016d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80015c2:	bf00      	nop
 80015c4:	3720      	adds	r7, #32
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	200005e8 	.word	0x200005e8
 80015d0:	40000400 	.word	0x40000400

080015d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b08a      	sub	sp, #40	; 0x28
 80015d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015da:	f107 0314 	add.w	r3, r7, #20
 80015de:	2200      	movs	r2, #0
 80015e0:	601a      	str	r2, [r3, #0]
 80015e2:	605a      	str	r2, [r3, #4]
 80015e4:	609a      	str	r2, [r3, #8]
 80015e6:	60da      	str	r2, [r3, #12]
 80015e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015ea:	4b37      	ldr	r3, [pc, #220]	; (80016c8 <MX_GPIO_Init+0xf4>)
 80015ec:	695b      	ldr	r3, [r3, #20]
 80015ee:	4a36      	ldr	r2, [pc, #216]	; (80016c8 <MX_GPIO_Init+0xf4>)
 80015f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015f4:	6153      	str	r3, [r2, #20]
 80015f6:	4b34      	ldr	r3, [pc, #208]	; (80016c8 <MX_GPIO_Init+0xf4>)
 80015f8:	695b      	ldr	r3, [r3, #20]
 80015fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015fe:	613b      	str	r3, [r7, #16]
 8001600:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001602:	4b31      	ldr	r3, [pc, #196]	; (80016c8 <MX_GPIO_Init+0xf4>)
 8001604:	695b      	ldr	r3, [r3, #20]
 8001606:	4a30      	ldr	r2, [pc, #192]	; (80016c8 <MX_GPIO_Init+0xf4>)
 8001608:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800160c:	6153      	str	r3, [r2, #20]
 800160e:	4b2e      	ldr	r3, [pc, #184]	; (80016c8 <MX_GPIO_Init+0xf4>)
 8001610:	695b      	ldr	r3, [r3, #20]
 8001612:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001616:	60fb      	str	r3, [r7, #12]
 8001618:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800161a:	4b2b      	ldr	r3, [pc, #172]	; (80016c8 <MX_GPIO_Init+0xf4>)
 800161c:	695b      	ldr	r3, [r3, #20]
 800161e:	4a2a      	ldr	r2, [pc, #168]	; (80016c8 <MX_GPIO_Init+0xf4>)
 8001620:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001624:	6153      	str	r3, [r2, #20]
 8001626:	4b28      	ldr	r3, [pc, #160]	; (80016c8 <MX_GPIO_Init+0xf4>)
 8001628:	695b      	ldr	r3, [r3, #20]
 800162a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800162e:	60bb      	str	r3, [r7, #8]
 8001630:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001632:	4b25      	ldr	r3, [pc, #148]	; (80016c8 <MX_GPIO_Init+0xf4>)
 8001634:	695b      	ldr	r3, [r3, #20]
 8001636:	4a24      	ldr	r2, [pc, #144]	; (80016c8 <MX_GPIO_Init+0xf4>)
 8001638:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800163c:	6153      	str	r3, [r2, #20]
 800163e:	4b22      	ldr	r3, [pc, #136]	; (80016c8 <MX_GPIO_Init+0xf4>)
 8001640:	695b      	ldr	r3, [r3, #20]
 8001642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001646:	607b      	str	r3, [r7, #4]
 8001648:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800164a:	4b1f      	ldr	r3, [pc, #124]	; (80016c8 <MX_GPIO_Init+0xf4>)
 800164c:	695b      	ldr	r3, [r3, #20]
 800164e:	4a1e      	ldr	r2, [pc, #120]	; (80016c8 <MX_GPIO_Init+0xf4>)
 8001650:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001654:	6153      	str	r3, [r2, #20]
 8001656:	4b1c      	ldr	r3, [pc, #112]	; (80016c8 <MX_GPIO_Init+0xf4>)
 8001658:	695b      	ldr	r3, [r3, #20]
 800165a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800165e:	603b      	str	r3, [r7, #0]
 8001660:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8001662:	2200      	movs	r2, #0
 8001664:	f64f 7108 	movw	r1, #65288	; 0xff08
 8001668:	4818      	ldr	r0, [pc, #96]	; (80016cc <MX_GPIO_Init+0xf8>)
 800166a:	f000 fd65 	bl	8002138 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 800166e:	2337      	movs	r3, #55	; 0x37
 8001670:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001672:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001676:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001678:	2300      	movs	r3, #0
 800167a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800167c:	f107 0314 	add.w	r3, r7, #20
 8001680:	4619      	mov	r1, r3
 8001682:	4812      	ldr	r0, [pc, #72]	; (80016cc <MX_GPIO_Init+0xf8>)
 8001684:	f000 fbc6 	bl	8001e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8001688:	f64f 7308 	movw	r3, #65288	; 0xff08
 800168c:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800168e:	2301      	movs	r3, #1
 8001690:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001692:	2300      	movs	r3, #0
 8001694:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001696:	2300      	movs	r3, #0
 8001698:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800169a:	f107 0314 	add.w	r3, r7, #20
 800169e:	4619      	mov	r1, r3
 80016a0:	480a      	ldr	r0, [pc, #40]	; (80016cc <MX_GPIO_Init+0xf8>)
 80016a2:	f000 fbb7 	bl	8001e14 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80016a6:	2301      	movs	r3, #1
 80016a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016aa:	2300      	movs	r3, #0
 80016ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ae:	2300      	movs	r3, #0
 80016b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80016b2:	f107 0314 	add.w	r3, r7, #20
 80016b6:	4619      	mov	r1, r3
 80016b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016bc:	f000 fbaa 	bl	8001e14 <HAL_GPIO_Init>

}
 80016c0:	bf00      	nop
 80016c2:	3728      	adds	r7, #40	; 0x28
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	40021000 	.word	0x40021000
 80016cc:	48001000 	.word	0x48001000

080016d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016d4:	b672      	cpsid	i
}
 80016d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016d8:	e7fe      	b.n	80016d8 <Error_Handler+0x8>
	...

080016dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016e2:	4b0f      	ldr	r3, [pc, #60]	; (8001720 <HAL_MspInit+0x44>)
 80016e4:	699b      	ldr	r3, [r3, #24]
 80016e6:	4a0e      	ldr	r2, [pc, #56]	; (8001720 <HAL_MspInit+0x44>)
 80016e8:	f043 0301 	orr.w	r3, r3, #1
 80016ec:	6193      	str	r3, [r2, #24]
 80016ee:	4b0c      	ldr	r3, [pc, #48]	; (8001720 <HAL_MspInit+0x44>)
 80016f0:	699b      	ldr	r3, [r3, #24]
 80016f2:	f003 0301 	and.w	r3, r3, #1
 80016f6:	607b      	str	r3, [r7, #4]
 80016f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016fa:	4b09      	ldr	r3, [pc, #36]	; (8001720 <HAL_MspInit+0x44>)
 80016fc:	69db      	ldr	r3, [r3, #28]
 80016fe:	4a08      	ldr	r2, [pc, #32]	; (8001720 <HAL_MspInit+0x44>)
 8001700:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001704:	61d3      	str	r3, [r2, #28]
 8001706:	4b06      	ldr	r3, [pc, #24]	; (8001720 <HAL_MspInit+0x44>)
 8001708:	69db      	ldr	r3, [r3, #28]
 800170a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800170e:	603b      	str	r3, [r7, #0]
 8001710:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001712:	2007      	movs	r0, #7
 8001714:	f000 fb3c 	bl	8001d90 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001718:	bf00      	nop
 800171a:	3708      	adds	r7, #8
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	40021000 	.word	0x40021000

08001724 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b08a      	sub	sp, #40	; 0x28
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800172c:	f107 0314 	add.w	r3, r7, #20
 8001730:	2200      	movs	r2, #0
 8001732:	601a      	str	r2, [r3, #0]
 8001734:	605a      	str	r2, [r3, #4]
 8001736:	609a      	str	r2, [r3, #8]
 8001738:	60da      	str	r2, [r3, #12]
 800173a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a17      	ldr	r2, [pc, #92]	; (80017a0 <HAL_I2C_MspInit+0x7c>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d127      	bne.n	8001796 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001746:	4b17      	ldr	r3, [pc, #92]	; (80017a4 <HAL_I2C_MspInit+0x80>)
 8001748:	695b      	ldr	r3, [r3, #20]
 800174a:	4a16      	ldr	r2, [pc, #88]	; (80017a4 <HAL_I2C_MspInit+0x80>)
 800174c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001750:	6153      	str	r3, [r2, #20]
 8001752:	4b14      	ldr	r3, [pc, #80]	; (80017a4 <HAL_I2C_MspInit+0x80>)
 8001754:	695b      	ldr	r3, [r3, #20]
 8001756:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800175a:	613b      	str	r3, [r7, #16]
 800175c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800175e:	23c0      	movs	r3, #192	; 0xc0
 8001760:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001762:	2312      	movs	r3, #18
 8001764:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001766:	2301      	movs	r3, #1
 8001768:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800176a:	2303      	movs	r3, #3
 800176c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800176e:	2304      	movs	r3, #4
 8001770:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001772:	f107 0314 	add.w	r3, r7, #20
 8001776:	4619      	mov	r1, r3
 8001778:	480b      	ldr	r0, [pc, #44]	; (80017a8 <HAL_I2C_MspInit+0x84>)
 800177a:	f000 fb4b 	bl	8001e14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800177e:	4b09      	ldr	r3, [pc, #36]	; (80017a4 <HAL_I2C_MspInit+0x80>)
 8001780:	69db      	ldr	r3, [r3, #28]
 8001782:	4a08      	ldr	r2, [pc, #32]	; (80017a4 <HAL_I2C_MspInit+0x80>)
 8001784:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001788:	61d3      	str	r3, [r2, #28]
 800178a:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <HAL_I2C_MspInit+0x80>)
 800178c:	69db      	ldr	r3, [r3, #28]
 800178e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001792:	60fb      	str	r3, [r7, #12]
 8001794:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001796:	bf00      	nop
 8001798:	3728      	adds	r7, #40	; 0x28
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	40005400 	.word	0x40005400
 80017a4:	40021000 	.word	0x40021000
 80017a8:	48000400 	.word	0x48000400

080017ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b08a      	sub	sp, #40	; 0x28
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b4:	f107 0314 	add.w	r3, r7, #20
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	605a      	str	r2, [r3, #4]
 80017be:	609a      	str	r2, [r3, #8]
 80017c0:	60da      	str	r2, [r3, #12]
 80017c2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a17      	ldr	r2, [pc, #92]	; (8001828 <HAL_SPI_MspInit+0x7c>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d128      	bne.n	8001820 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80017ce:	4b17      	ldr	r3, [pc, #92]	; (800182c <HAL_SPI_MspInit+0x80>)
 80017d0:	699b      	ldr	r3, [r3, #24]
 80017d2:	4a16      	ldr	r2, [pc, #88]	; (800182c <HAL_SPI_MspInit+0x80>)
 80017d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017d8:	6193      	str	r3, [r2, #24]
 80017da:	4b14      	ldr	r3, [pc, #80]	; (800182c <HAL_SPI_MspInit+0x80>)
 80017dc:	699b      	ldr	r3, [r3, #24]
 80017de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017e2:	613b      	str	r3, [r7, #16]
 80017e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e6:	4b11      	ldr	r3, [pc, #68]	; (800182c <HAL_SPI_MspInit+0x80>)
 80017e8:	695b      	ldr	r3, [r3, #20]
 80017ea:	4a10      	ldr	r2, [pc, #64]	; (800182c <HAL_SPI_MspInit+0x80>)
 80017ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017f0:	6153      	str	r3, [r2, #20]
 80017f2:	4b0e      	ldr	r3, [pc, #56]	; (800182c <HAL_SPI_MspInit+0x80>)
 80017f4:	695b      	ldr	r3, [r3, #20]
 80017f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017fa:	60fb      	str	r3, [r7, #12]
 80017fc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 80017fe:	23e0      	movs	r3, #224	; 0xe0
 8001800:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001802:	2302      	movs	r3, #2
 8001804:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001806:	2300      	movs	r3, #0
 8001808:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800180a:	2303      	movs	r3, #3
 800180c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800180e:	2305      	movs	r3, #5
 8001810:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001812:	f107 0314 	add.w	r3, r7, #20
 8001816:	4619      	mov	r1, r3
 8001818:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800181c:	f000 fafa 	bl	8001e14 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001820:	bf00      	nop
 8001822:	3728      	adds	r7, #40	; 0x28
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	40013000 	.word	0x40013000
 800182c:	40021000 	.word	0x40021000

08001830 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001830:	b480      	push	{r7}
 8001832:	b085      	sub	sp, #20
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a0a      	ldr	r2, [pc, #40]	; (8001868 <HAL_TIM_Base_MspInit+0x38>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d10b      	bne.n	800185a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001842:	4b0a      	ldr	r3, [pc, #40]	; (800186c <HAL_TIM_Base_MspInit+0x3c>)
 8001844:	69db      	ldr	r3, [r3, #28]
 8001846:	4a09      	ldr	r2, [pc, #36]	; (800186c <HAL_TIM_Base_MspInit+0x3c>)
 8001848:	f043 0302 	orr.w	r3, r3, #2
 800184c:	61d3      	str	r3, [r2, #28]
 800184e:	4b07      	ldr	r3, [pc, #28]	; (800186c <HAL_TIM_Base_MspInit+0x3c>)
 8001850:	69db      	ldr	r3, [r3, #28]
 8001852:	f003 0302 	and.w	r3, r3, #2
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800185a:	bf00      	nop
 800185c:	3714      	adds	r7, #20
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	40000400 	.word	0x40000400
 800186c:	40021000 	.word	0x40021000

08001870 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001874:	e7fe      	b.n	8001874 <NMI_Handler+0x4>

08001876 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001876:	b480      	push	{r7}
 8001878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800187a:	e7fe      	b.n	800187a <HardFault_Handler+0x4>

0800187c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001880:	e7fe      	b.n	8001880 <MemManage_Handler+0x4>

08001882 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001882:	b480      	push	{r7}
 8001884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001886:	e7fe      	b.n	8001886 <BusFault_Handler+0x4>

08001888 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800188c:	e7fe      	b.n	800188c <UsageFault_Handler+0x4>

0800188e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800188e:	b480      	push	{r7}
 8001890:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001892:	bf00      	nop
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018a0:	bf00      	nop
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr

080018aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018aa:	b480      	push	{r7}
 80018ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018ae:	bf00      	nop
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018bc:	f000 f954 	bl	8001b68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018c0:	bf00      	nop
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80018c8:	4802      	ldr	r0, [pc, #8]	; (80018d4 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 80018ca:	f001 fad2 	bl	8002e72 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 80018ce:	bf00      	nop
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	20001330 	.word	0x20001330

080018d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
	return 1;
 80018dc:	2301      	movs	r3, #1
}
 80018de:	4618      	mov	r0, r3
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <_kill>:

int _kill(int pid, int sig)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80018f2:	f008 fdcb 	bl	800a48c <__errno>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2216      	movs	r2, #22
 80018fa:	601a      	str	r2, [r3, #0]
	return -1;
 80018fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001900:	4618      	mov	r0, r3
 8001902:	3708      	adds	r7, #8
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}

08001908 <_exit>:

void _exit (int status)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001910:	f04f 31ff 	mov.w	r1, #4294967295
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f7ff ffe7 	bl	80018e8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800191a:	e7fe      	b.n	800191a <_exit+0x12>

0800191c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b086      	sub	sp, #24
 8001920:	af00      	add	r7, sp, #0
 8001922:	60f8      	str	r0, [r7, #12]
 8001924:	60b9      	str	r1, [r7, #8]
 8001926:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001928:	2300      	movs	r3, #0
 800192a:	617b      	str	r3, [r7, #20]
 800192c:	e00a      	b.n	8001944 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800192e:	f3af 8000 	nop.w
 8001932:	4601      	mov	r1, r0
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	1c5a      	adds	r2, r3, #1
 8001938:	60ba      	str	r2, [r7, #8]
 800193a:	b2ca      	uxtb	r2, r1
 800193c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	3301      	adds	r3, #1
 8001942:	617b      	str	r3, [r7, #20]
 8001944:	697a      	ldr	r2, [r7, #20]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	429a      	cmp	r2, r3
 800194a:	dbf0      	blt.n	800192e <_read+0x12>
	}

return len;
 800194c:	687b      	ldr	r3, [r7, #4]
}
 800194e:	4618      	mov	r0, r3
 8001950:	3718      	adds	r7, #24
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001956:	b580      	push	{r7, lr}
 8001958:	b086      	sub	sp, #24
 800195a:	af00      	add	r7, sp, #0
 800195c:	60f8      	str	r0, [r7, #12]
 800195e:	60b9      	str	r1, [r7, #8]
 8001960:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001962:	2300      	movs	r3, #0
 8001964:	617b      	str	r3, [r7, #20]
 8001966:	e009      	b.n	800197c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	1c5a      	adds	r2, r3, #1
 800196c:	60ba      	str	r2, [r7, #8]
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	4618      	mov	r0, r3
 8001972:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	3301      	adds	r3, #1
 800197a:	617b      	str	r3, [r7, #20]
 800197c:	697a      	ldr	r2, [r7, #20]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	429a      	cmp	r2, r3
 8001982:	dbf1      	blt.n	8001968 <_write+0x12>
	}
	return len;
 8001984:	687b      	ldr	r3, [r7, #4]
}
 8001986:	4618      	mov	r0, r3
 8001988:	3718      	adds	r7, #24
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <_close>:

int _close(int file)
{
 800198e:	b480      	push	{r7}
 8001990:	b083      	sub	sp, #12
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
	return -1;
 8001996:	f04f 33ff 	mov.w	r3, #4294967295
}
 800199a:	4618      	mov	r0, r3
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr

080019a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019a6:	b480      	push	{r7}
 80019a8:	b083      	sub	sp, #12
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
 80019ae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019b6:	605a      	str	r2, [r3, #4]
	return 0;
 80019b8:	2300      	movs	r3, #0
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	370c      	adds	r7, #12
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr

080019c6 <_isatty>:

int _isatty(int file)
{
 80019c6:	b480      	push	{r7}
 80019c8:	b083      	sub	sp, #12
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
	return 1;
 80019ce:	2301      	movs	r3, #1
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	370c      	adds	r7, #12
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr

080019dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019dc:	b480      	push	{r7}
 80019de:	b085      	sub	sp, #20
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	60f8      	str	r0, [r7, #12]
 80019e4:	60b9      	str	r1, [r7, #8]
 80019e6:	607a      	str	r2, [r7, #4]
	return 0;
 80019e8:	2300      	movs	r3, #0
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3714      	adds	r7, #20
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
	...

080019f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b086      	sub	sp, #24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a00:	4a14      	ldr	r2, [pc, #80]	; (8001a54 <_sbrk+0x5c>)
 8001a02:	4b15      	ldr	r3, [pc, #84]	; (8001a58 <_sbrk+0x60>)
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a0c:	4b13      	ldr	r3, [pc, #76]	; (8001a5c <_sbrk+0x64>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d102      	bne.n	8001a1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a14:	4b11      	ldr	r3, [pc, #68]	; (8001a5c <_sbrk+0x64>)
 8001a16:	4a12      	ldr	r2, [pc, #72]	; (8001a60 <_sbrk+0x68>)
 8001a18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a1a:	4b10      	ldr	r3, [pc, #64]	; (8001a5c <_sbrk+0x64>)
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4413      	add	r3, r2
 8001a22:	693a      	ldr	r2, [r7, #16]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d207      	bcs.n	8001a38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a28:	f008 fd30 	bl	800a48c <__errno>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	220c      	movs	r2, #12
 8001a30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a32:	f04f 33ff 	mov.w	r3, #4294967295
 8001a36:	e009      	b.n	8001a4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a38:	4b08      	ldr	r3, [pc, #32]	; (8001a5c <_sbrk+0x64>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a3e:	4b07      	ldr	r3, [pc, #28]	; (8001a5c <_sbrk+0x64>)
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4413      	add	r3, r2
 8001a46:	4a05      	ldr	r2, [pc, #20]	; (8001a5c <_sbrk+0x64>)
 8001a48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3718      	adds	r7, #24
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	2000a000 	.word	0x2000a000
 8001a58:	00000400 	.word	0x00000400
 8001a5c:	2000036c 	.word	0x2000036c
 8001a60:	20001630 	.word	0x20001630

08001a64 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a68:	4b06      	ldr	r3, [pc, #24]	; (8001a84 <SystemInit+0x20>)
 8001a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a6e:	4a05      	ldr	r2, [pc, #20]	; (8001a84 <SystemInit+0x20>)
 8001a70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a78:	bf00      	nop
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	e000ed00 	.word	0xe000ed00

08001a88 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001a88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ac0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a8c:	480d      	ldr	r0, [pc, #52]	; (8001ac4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a8e:	490e      	ldr	r1, [pc, #56]	; (8001ac8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a90:	4a0e      	ldr	r2, [pc, #56]	; (8001acc <LoopForever+0xe>)
  movs r3, #0
 8001a92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a94:	e002      	b.n	8001a9c <LoopCopyDataInit>

08001a96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a9a:	3304      	adds	r3, #4

08001a9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001aa0:	d3f9      	bcc.n	8001a96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aa2:	4a0b      	ldr	r2, [pc, #44]	; (8001ad0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001aa4:	4c0b      	ldr	r4, [pc, #44]	; (8001ad4 <LoopForever+0x16>)
  movs r3, #0
 8001aa6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001aa8:	e001      	b.n	8001aae <LoopFillZerobss>

08001aaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001aac:	3204      	adds	r2, #4

08001aae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ab0:	d3fb      	bcc.n	8001aaa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001ab2:	f7ff ffd7 	bl	8001a64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ab6:	f008 fcef 	bl	800a498 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001aba:	f7ff f9a1 	bl	8000e00 <main>

08001abe <LoopForever>:

LoopForever:
    b LoopForever
 8001abe:	e7fe      	b.n	8001abe <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001ac0:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001ac4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ac8:	20000350 	.word	0x20000350
  ldr r2, =_sidata
 8001acc:	0800e728 	.word	0x0800e728
  ldr r2, =_sbss
 8001ad0:	20000350 	.word	0x20000350
  ldr r4, =_ebss
 8001ad4:	2000162c 	.word	0x2000162c

08001ad8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ad8:	e7fe      	b.n	8001ad8 <ADC1_2_IRQHandler>
	...

08001adc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ae0:	4b08      	ldr	r3, [pc, #32]	; (8001b04 <HAL_Init+0x28>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a07      	ldr	r2, [pc, #28]	; (8001b04 <HAL_Init+0x28>)
 8001ae6:	f043 0310 	orr.w	r3, r3, #16
 8001aea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001aec:	2003      	movs	r0, #3
 8001aee:	f000 f94f 	bl	8001d90 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001af2:	2000      	movs	r0, #0
 8001af4:	f000 f808 	bl	8001b08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001af8:	f7ff fdf0 	bl	80016dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001afc:	2300      	movs	r3, #0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	40022000 	.word	0x40022000

08001b08 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b10:	4b12      	ldr	r3, [pc, #72]	; (8001b5c <HAL_InitTick+0x54>)
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	4b12      	ldr	r3, [pc, #72]	; (8001b60 <HAL_InitTick+0x58>)
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	4619      	mov	r1, r3
 8001b1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b26:	4618      	mov	r0, r3
 8001b28:	f000 f967 	bl	8001dfa <HAL_SYSTICK_Config>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e00e      	b.n	8001b54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2b0f      	cmp	r3, #15
 8001b3a:	d80a      	bhi.n	8001b52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	6879      	ldr	r1, [r7, #4]
 8001b40:	f04f 30ff 	mov.w	r0, #4294967295
 8001b44:	f000 f92f 	bl	8001da6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b48:	4a06      	ldr	r2, [pc, #24]	; (8001b64 <HAL_InitTick+0x5c>)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	e000      	b.n	8001b54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3708      	adds	r7, #8
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	20000000 	.word	0x20000000
 8001b60:	20000008 	.word	0x20000008
 8001b64:	20000004 	.word	0x20000004

08001b68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b6c:	4b06      	ldr	r3, [pc, #24]	; (8001b88 <HAL_IncTick+0x20>)
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	461a      	mov	r2, r3
 8001b72:	4b06      	ldr	r3, [pc, #24]	; (8001b8c <HAL_IncTick+0x24>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4413      	add	r3, r2
 8001b78:	4a04      	ldr	r2, [pc, #16]	; (8001b8c <HAL_IncTick+0x24>)
 8001b7a:	6013      	str	r3, [r2, #0]
}
 8001b7c:	bf00      	nop
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	20000008 	.word	0x20000008
 8001b8c:	20000698 	.word	0x20000698

08001b90 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  return uwTick;  
 8001b94:	4b03      	ldr	r3, [pc, #12]	; (8001ba4 <HAL_GetTick+0x14>)
 8001b96:	681b      	ldr	r3, [r3, #0]
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	20000698 	.word	0x20000698

08001ba8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bb0:	f7ff ffee 	bl	8001b90 <HAL_GetTick>
 8001bb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bc0:	d005      	beq.n	8001bce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bc2:	4b0a      	ldr	r3, [pc, #40]	; (8001bec <HAL_Delay+0x44>)
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	4413      	add	r3, r2
 8001bcc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001bce:	bf00      	nop
 8001bd0:	f7ff ffde 	bl	8001b90 <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	68fa      	ldr	r2, [r7, #12]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d8f7      	bhi.n	8001bd0 <HAL_Delay+0x28>
  {
  }
}
 8001be0:	bf00      	nop
 8001be2:	bf00      	nop
 8001be4:	3710      	adds	r7, #16
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	20000008 	.word	0x20000008

08001bf0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b085      	sub	sp, #20
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f003 0307 	and.w	r3, r3, #7
 8001bfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c00:	4b0c      	ldr	r3, [pc, #48]	; (8001c34 <__NVIC_SetPriorityGrouping+0x44>)
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c06:	68ba      	ldr	r2, [r7, #8]
 8001c08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c22:	4a04      	ldr	r2, [pc, #16]	; (8001c34 <__NVIC_SetPriorityGrouping+0x44>)
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	60d3      	str	r3, [r2, #12]
}
 8001c28:	bf00      	nop
 8001c2a:	3714      	adds	r7, #20
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr
 8001c34:	e000ed00 	.word	0xe000ed00

08001c38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c3c:	4b04      	ldr	r3, [pc, #16]	; (8001c50 <__NVIC_GetPriorityGrouping+0x18>)
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	0a1b      	lsrs	r3, r3, #8
 8001c42:	f003 0307 	and.w	r3, r3, #7
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr
 8001c50:	e000ed00 	.word	0xe000ed00

08001c54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	db0b      	blt.n	8001c7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c66:	79fb      	ldrb	r3, [r7, #7]
 8001c68:	f003 021f 	and.w	r2, r3, #31
 8001c6c:	4907      	ldr	r1, [pc, #28]	; (8001c8c <__NVIC_EnableIRQ+0x38>)
 8001c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c72:	095b      	lsrs	r3, r3, #5
 8001c74:	2001      	movs	r0, #1
 8001c76:	fa00 f202 	lsl.w	r2, r0, r2
 8001c7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c7e:	bf00      	nop
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	e000e100 	.word	0xe000e100

08001c90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	4603      	mov	r3, r0
 8001c98:	6039      	str	r1, [r7, #0]
 8001c9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	db0a      	blt.n	8001cba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	b2da      	uxtb	r2, r3
 8001ca8:	490c      	ldr	r1, [pc, #48]	; (8001cdc <__NVIC_SetPriority+0x4c>)
 8001caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cae:	0112      	lsls	r2, r2, #4
 8001cb0:	b2d2      	uxtb	r2, r2
 8001cb2:	440b      	add	r3, r1
 8001cb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cb8:	e00a      	b.n	8001cd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	b2da      	uxtb	r2, r3
 8001cbe:	4908      	ldr	r1, [pc, #32]	; (8001ce0 <__NVIC_SetPriority+0x50>)
 8001cc0:	79fb      	ldrb	r3, [r7, #7]
 8001cc2:	f003 030f 	and.w	r3, r3, #15
 8001cc6:	3b04      	subs	r3, #4
 8001cc8:	0112      	lsls	r2, r2, #4
 8001cca:	b2d2      	uxtb	r2, r2
 8001ccc:	440b      	add	r3, r1
 8001cce:	761a      	strb	r2, [r3, #24]
}
 8001cd0:	bf00      	nop
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr
 8001cdc:	e000e100 	.word	0xe000e100
 8001ce0:	e000ed00 	.word	0xe000ed00

08001ce4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b089      	sub	sp, #36	; 0x24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	60b9      	str	r1, [r7, #8]
 8001cee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	f003 0307 	and.w	r3, r3, #7
 8001cf6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	f1c3 0307 	rsb	r3, r3, #7
 8001cfe:	2b04      	cmp	r3, #4
 8001d00:	bf28      	it	cs
 8001d02:	2304      	movcs	r3, #4
 8001d04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	3304      	adds	r3, #4
 8001d0a:	2b06      	cmp	r3, #6
 8001d0c:	d902      	bls.n	8001d14 <NVIC_EncodePriority+0x30>
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	3b03      	subs	r3, #3
 8001d12:	e000      	b.n	8001d16 <NVIC_EncodePriority+0x32>
 8001d14:	2300      	movs	r3, #0
 8001d16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d18:	f04f 32ff 	mov.w	r2, #4294967295
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d22:	43da      	mvns	r2, r3
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	401a      	ands	r2, r3
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	fa01 f303 	lsl.w	r3, r1, r3
 8001d36:	43d9      	mvns	r1, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d3c:	4313      	orrs	r3, r2
         );
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3724      	adds	r7, #36	; 0x24
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
	...

08001d4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	3b01      	subs	r3, #1
 8001d58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d5c:	d301      	bcc.n	8001d62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e00f      	b.n	8001d82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d62:	4a0a      	ldr	r2, [pc, #40]	; (8001d8c <SysTick_Config+0x40>)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	3b01      	subs	r3, #1
 8001d68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d6a:	210f      	movs	r1, #15
 8001d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d70:	f7ff ff8e 	bl	8001c90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d74:	4b05      	ldr	r3, [pc, #20]	; (8001d8c <SysTick_Config+0x40>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d7a:	4b04      	ldr	r3, [pc, #16]	; (8001d8c <SysTick_Config+0x40>)
 8001d7c:	2207      	movs	r2, #7
 8001d7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	e000e010 	.word	0xe000e010

08001d90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f7ff ff29 	bl	8001bf0 <__NVIC_SetPriorityGrouping>
}
 8001d9e:	bf00      	nop
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}

08001da6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001da6:	b580      	push	{r7, lr}
 8001da8:	b086      	sub	sp, #24
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	4603      	mov	r3, r0
 8001dae:	60b9      	str	r1, [r7, #8]
 8001db0:	607a      	str	r2, [r7, #4]
 8001db2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001db4:	2300      	movs	r3, #0
 8001db6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001db8:	f7ff ff3e 	bl	8001c38 <__NVIC_GetPriorityGrouping>
 8001dbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	68b9      	ldr	r1, [r7, #8]
 8001dc2:	6978      	ldr	r0, [r7, #20]
 8001dc4:	f7ff ff8e 	bl	8001ce4 <NVIC_EncodePriority>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dce:	4611      	mov	r1, r2
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f7ff ff5d 	bl	8001c90 <__NVIC_SetPriority>
}
 8001dd6:	bf00      	nop
 8001dd8:	3718      	adds	r7, #24
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dde:	b580      	push	{r7, lr}
 8001de0:	b082      	sub	sp, #8
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	4603      	mov	r3, r0
 8001de6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001de8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7ff ff31 	bl	8001c54 <__NVIC_EnableIRQ>
}
 8001df2:	bf00      	nop
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}

08001dfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dfa:	b580      	push	{r7, lr}
 8001dfc:	b082      	sub	sp, #8
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f7ff ffa2 	bl	8001d4c <SysTick_Config>
 8001e08:	4603      	mov	r3, r0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
	...

08001e14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b087      	sub	sp, #28
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e22:	e154      	b.n	80020ce <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	2101      	movs	r1, #1
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e30:	4013      	ands	r3, r2
 8001e32:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	f000 8146 	beq.w	80020c8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f003 0303 	and.w	r3, r3, #3
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d005      	beq.n	8001e54 <HAL_GPIO_Init+0x40>
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f003 0303 	and.w	r3, r3, #3
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d130      	bne.n	8001eb6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	005b      	lsls	r3, r3, #1
 8001e5e:	2203      	movs	r2, #3
 8001e60:	fa02 f303 	lsl.w	r3, r2, r3
 8001e64:	43db      	mvns	r3, r3
 8001e66:	693a      	ldr	r2, [r7, #16]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	68da      	ldr	r2, [r3, #12]
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	693a      	ldr	r2, [r7, #16]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	693a      	ldr	r2, [r7, #16]
 8001e82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e92:	43db      	mvns	r3, r3
 8001e94:	693a      	ldr	r2, [r7, #16]
 8001e96:	4013      	ands	r3, r2
 8001e98:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	091b      	lsrs	r3, r3, #4
 8001ea0:	f003 0201 	and.w	r2, r3, #1
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eaa:	693a      	ldr	r2, [r7, #16]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	693a      	ldr	r2, [r7, #16]
 8001eb4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f003 0303 	and.w	r3, r3, #3
 8001ebe:	2b03      	cmp	r3, #3
 8001ec0:	d017      	beq.n	8001ef2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	68db      	ldr	r3, [r3, #12]
 8001ec6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	005b      	lsls	r3, r3, #1
 8001ecc:	2203      	movs	r2, #3
 8001ece:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed2:	43db      	mvns	r3, r3
 8001ed4:	693a      	ldr	r2, [r7, #16]
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	689a      	ldr	r2, [r3, #8]
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	005b      	lsls	r3, r3, #1
 8001ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee6:	693a      	ldr	r2, [r7, #16]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	693a      	ldr	r2, [r7, #16]
 8001ef0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f003 0303 	and.w	r3, r3, #3
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d123      	bne.n	8001f46 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	08da      	lsrs	r2, r3, #3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	3208      	adds	r2, #8
 8001f06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f0a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	f003 0307 	and.w	r3, r3, #7
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	220f      	movs	r2, #15
 8001f16:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1a:	43db      	mvns	r3, r3
 8001f1c:	693a      	ldr	r2, [r7, #16]
 8001f1e:	4013      	ands	r3, r2
 8001f20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	691a      	ldr	r2, [r3, #16]
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	f003 0307 	and.w	r3, r3, #7
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f32:	693a      	ldr	r2, [r7, #16]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	08da      	lsrs	r2, r3, #3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	3208      	adds	r2, #8
 8001f40:	6939      	ldr	r1, [r7, #16]
 8001f42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	005b      	lsls	r3, r3, #1
 8001f50:	2203      	movs	r2, #3
 8001f52:	fa02 f303 	lsl.w	r3, r2, r3
 8001f56:	43db      	mvns	r3, r3
 8001f58:	693a      	ldr	r2, [r7, #16]
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f003 0203 	and.w	r2, r3, #3
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6e:	693a      	ldr	r2, [r7, #16]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	693a      	ldr	r2, [r7, #16]
 8001f78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	f000 80a0 	beq.w	80020c8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f88:	4b58      	ldr	r3, [pc, #352]	; (80020ec <HAL_GPIO_Init+0x2d8>)
 8001f8a:	699b      	ldr	r3, [r3, #24]
 8001f8c:	4a57      	ldr	r2, [pc, #348]	; (80020ec <HAL_GPIO_Init+0x2d8>)
 8001f8e:	f043 0301 	orr.w	r3, r3, #1
 8001f92:	6193      	str	r3, [r2, #24]
 8001f94:	4b55      	ldr	r3, [pc, #340]	; (80020ec <HAL_GPIO_Init+0x2d8>)
 8001f96:	699b      	ldr	r3, [r3, #24]
 8001f98:	f003 0301 	and.w	r3, r3, #1
 8001f9c:	60bb      	str	r3, [r7, #8]
 8001f9e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001fa0:	4a53      	ldr	r2, [pc, #332]	; (80020f0 <HAL_GPIO_Init+0x2dc>)
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	089b      	lsrs	r3, r3, #2
 8001fa6:	3302      	adds	r3, #2
 8001fa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	f003 0303 	and.w	r3, r3, #3
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	220f      	movs	r2, #15
 8001fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbc:	43db      	mvns	r3, r3
 8001fbe:	693a      	ldr	r2, [r7, #16]
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001fca:	d019      	beq.n	8002000 <HAL_GPIO_Init+0x1ec>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	4a49      	ldr	r2, [pc, #292]	; (80020f4 <HAL_GPIO_Init+0x2e0>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d013      	beq.n	8001ffc <HAL_GPIO_Init+0x1e8>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	4a48      	ldr	r2, [pc, #288]	; (80020f8 <HAL_GPIO_Init+0x2e4>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d00d      	beq.n	8001ff8 <HAL_GPIO_Init+0x1e4>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	4a47      	ldr	r2, [pc, #284]	; (80020fc <HAL_GPIO_Init+0x2e8>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d007      	beq.n	8001ff4 <HAL_GPIO_Init+0x1e0>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	4a46      	ldr	r2, [pc, #280]	; (8002100 <HAL_GPIO_Init+0x2ec>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d101      	bne.n	8001ff0 <HAL_GPIO_Init+0x1dc>
 8001fec:	2304      	movs	r3, #4
 8001fee:	e008      	b.n	8002002 <HAL_GPIO_Init+0x1ee>
 8001ff0:	2305      	movs	r3, #5
 8001ff2:	e006      	b.n	8002002 <HAL_GPIO_Init+0x1ee>
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e004      	b.n	8002002 <HAL_GPIO_Init+0x1ee>
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	e002      	b.n	8002002 <HAL_GPIO_Init+0x1ee>
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e000      	b.n	8002002 <HAL_GPIO_Init+0x1ee>
 8002000:	2300      	movs	r3, #0
 8002002:	697a      	ldr	r2, [r7, #20]
 8002004:	f002 0203 	and.w	r2, r2, #3
 8002008:	0092      	lsls	r2, r2, #2
 800200a:	4093      	lsls	r3, r2
 800200c:	693a      	ldr	r2, [r7, #16]
 800200e:	4313      	orrs	r3, r2
 8002010:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002012:	4937      	ldr	r1, [pc, #220]	; (80020f0 <HAL_GPIO_Init+0x2dc>)
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	089b      	lsrs	r3, r3, #2
 8002018:	3302      	adds	r3, #2
 800201a:	693a      	ldr	r2, [r7, #16]
 800201c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002020:	4b38      	ldr	r3, [pc, #224]	; (8002104 <HAL_GPIO_Init+0x2f0>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	43db      	mvns	r3, r3
 800202a:	693a      	ldr	r2, [r7, #16]
 800202c:	4013      	ands	r3, r2
 800202e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002038:	2b00      	cmp	r3, #0
 800203a:	d003      	beq.n	8002044 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800203c:	693a      	ldr	r2, [r7, #16]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	4313      	orrs	r3, r2
 8002042:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002044:	4a2f      	ldr	r2, [pc, #188]	; (8002104 <HAL_GPIO_Init+0x2f0>)
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800204a:	4b2e      	ldr	r3, [pc, #184]	; (8002104 <HAL_GPIO_Init+0x2f0>)
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	43db      	mvns	r3, r3
 8002054:	693a      	ldr	r2, [r7, #16]
 8002056:	4013      	ands	r3, r2
 8002058:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d003      	beq.n	800206e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002066:	693a      	ldr	r2, [r7, #16]
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	4313      	orrs	r3, r2
 800206c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800206e:	4a25      	ldr	r2, [pc, #148]	; (8002104 <HAL_GPIO_Init+0x2f0>)
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002074:	4b23      	ldr	r3, [pc, #140]	; (8002104 <HAL_GPIO_Init+0x2f0>)
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	43db      	mvns	r3, r3
 800207e:	693a      	ldr	r2, [r7, #16]
 8002080:	4013      	ands	r3, r2
 8002082:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d003      	beq.n	8002098 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002090:	693a      	ldr	r2, [r7, #16]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	4313      	orrs	r3, r2
 8002096:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002098:	4a1a      	ldr	r2, [pc, #104]	; (8002104 <HAL_GPIO_Init+0x2f0>)
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800209e:	4b19      	ldr	r3, [pc, #100]	; (8002104 <HAL_GPIO_Init+0x2f0>)
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	43db      	mvns	r3, r3
 80020a8:	693a      	ldr	r2, [r7, #16]
 80020aa:	4013      	ands	r3, r2
 80020ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d003      	beq.n	80020c2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80020ba:	693a      	ldr	r2, [r7, #16]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	4313      	orrs	r3, r2
 80020c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80020c2:	4a10      	ldr	r2, [pc, #64]	; (8002104 <HAL_GPIO_Init+0x2f0>)
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	3301      	adds	r3, #1
 80020cc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	fa22 f303 	lsr.w	r3, r2, r3
 80020d8:	2b00      	cmp	r3, #0
 80020da:	f47f aea3 	bne.w	8001e24 <HAL_GPIO_Init+0x10>
  }
}
 80020de:	bf00      	nop
 80020e0:	bf00      	nop
 80020e2:	371c      	adds	r7, #28
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr
 80020ec:	40021000 	.word	0x40021000
 80020f0:	40010000 	.word	0x40010000
 80020f4:	48000400 	.word	0x48000400
 80020f8:	48000800 	.word	0x48000800
 80020fc:	48000c00 	.word	0x48000c00
 8002100:	48001000 	.word	0x48001000
 8002104:	40010400 	.word	0x40010400

08002108 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002108:	b480      	push	{r7}
 800210a:	b085      	sub	sp, #20
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	460b      	mov	r3, r1
 8002112:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	691a      	ldr	r2, [r3, #16]
 8002118:	887b      	ldrh	r3, [r7, #2]
 800211a:	4013      	ands	r3, r2
 800211c:	2b00      	cmp	r3, #0
 800211e:	d002      	beq.n	8002126 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002120:	2301      	movs	r3, #1
 8002122:	73fb      	strb	r3, [r7, #15]
 8002124:	e001      	b.n	800212a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002126:	2300      	movs	r3, #0
 8002128:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800212a:	7bfb      	ldrb	r3, [r7, #15]
}
 800212c:	4618      	mov	r0, r3
 800212e:	3714      	adds	r7, #20
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	460b      	mov	r3, r1
 8002142:	807b      	strh	r3, [r7, #2]
 8002144:	4613      	mov	r3, r2
 8002146:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002148:	787b      	ldrb	r3, [r7, #1]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d003      	beq.n	8002156 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800214e:	887a      	ldrh	r2, [r7, #2]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002154:	e002      	b.n	800215c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002156:	887a      	ldrh	r2, [r7, #2]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800215c:	bf00      	nop
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d101      	bne.n	800217a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e081      	b.n	800227e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002180:	b2db      	uxtb	r3, r3
 8002182:	2b00      	cmp	r3, #0
 8002184:	d106      	bne.n	8002194 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2200      	movs	r2, #0
 800218a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f7ff fac8 	bl	8001724 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2224      	movs	r2, #36	; 0x24
 8002198:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f022 0201 	bic.w	r2, r2, #1
 80021aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	685a      	ldr	r2, [r3, #4]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021b8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	689a      	ldr	r2, [r3, #8]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021c8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	68db      	ldr	r3, [r3, #12]
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d107      	bne.n	80021e2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	689a      	ldr	r2, [r3, #8]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021de:	609a      	str	r2, [r3, #8]
 80021e0:	e006      	b.n	80021f0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	689a      	ldr	r2, [r3, #8]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80021ee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d104      	bne.n	8002202 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002200:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	6812      	ldr	r2, [r2, #0]
 800220c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002210:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002214:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	68da      	ldr	r2, [r3, #12]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002224:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	691a      	ldr	r2, [r3, #16]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	695b      	ldr	r3, [r3, #20]
 800222e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	699b      	ldr	r3, [r3, #24]
 8002236:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	430a      	orrs	r2, r1
 800223e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	69d9      	ldr	r1, [r3, #28]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6a1a      	ldr	r2, [r3, #32]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	430a      	orrs	r2, r1
 800224e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f042 0201 	orr.w	r2, r2, #1
 800225e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2220      	movs	r2, #32
 800226a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2200      	movs	r2, #0
 8002278:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	3708      	adds	r7, #8
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
	...

08002288 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b088      	sub	sp, #32
 800228c:	af02      	add	r7, sp, #8
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	4608      	mov	r0, r1
 8002292:	4611      	mov	r1, r2
 8002294:	461a      	mov	r2, r3
 8002296:	4603      	mov	r3, r0
 8002298:	817b      	strh	r3, [r7, #10]
 800229a:	460b      	mov	r3, r1
 800229c:	813b      	strh	r3, [r7, #8]
 800229e:	4613      	mov	r3, r2
 80022a0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	2b20      	cmp	r3, #32
 80022ac:	f040 80f9 	bne.w	80024a2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80022b0:	6a3b      	ldr	r3, [r7, #32]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d002      	beq.n	80022bc <HAL_I2C_Mem_Write+0x34>
 80022b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d105      	bne.n	80022c8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022c2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e0ed      	b.n	80024a4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d101      	bne.n	80022d6 <HAL_I2C_Mem_Write+0x4e>
 80022d2:	2302      	movs	r3, #2
 80022d4:	e0e6      	b.n	80024a4 <HAL_I2C_Mem_Write+0x21c>
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2201      	movs	r2, #1
 80022da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80022de:	f7ff fc57 	bl	8001b90 <HAL_GetTick>
 80022e2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	9300      	str	r3, [sp, #0]
 80022e8:	2319      	movs	r3, #25
 80022ea:	2201      	movs	r2, #1
 80022ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80022f0:	68f8      	ldr	r0, [r7, #12]
 80022f2:	f000 fac3 	bl	800287c <I2C_WaitOnFlagUntilTimeout>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d001      	beq.n	8002300 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e0d1      	b.n	80024a4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2221      	movs	r2, #33	; 0x21
 8002304:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2240      	movs	r2, #64	; 0x40
 800230c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2200      	movs	r2, #0
 8002314:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	6a3a      	ldr	r2, [r7, #32]
 800231a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002320:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2200      	movs	r2, #0
 8002326:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002328:	88f8      	ldrh	r0, [r7, #6]
 800232a:	893a      	ldrh	r2, [r7, #8]
 800232c:	8979      	ldrh	r1, [r7, #10]
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	9301      	str	r3, [sp, #4]
 8002332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002334:	9300      	str	r3, [sp, #0]
 8002336:	4603      	mov	r3, r0
 8002338:	68f8      	ldr	r0, [r7, #12]
 800233a:	f000 f9d3 	bl	80026e4 <I2C_RequestMemoryWrite>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d005      	beq.n	8002350 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2200      	movs	r2, #0
 8002348:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e0a9      	b.n	80024a4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002354:	b29b      	uxth	r3, r3
 8002356:	2bff      	cmp	r3, #255	; 0xff
 8002358:	d90e      	bls.n	8002378 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	22ff      	movs	r2, #255	; 0xff
 800235e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002364:	b2da      	uxtb	r2, r3
 8002366:	8979      	ldrh	r1, [r7, #10]
 8002368:	2300      	movs	r3, #0
 800236a:	9300      	str	r3, [sp, #0]
 800236c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002370:	68f8      	ldr	r0, [r7, #12]
 8002372:	f000 fbb5 	bl	8002ae0 <I2C_TransferConfig>
 8002376:	e00f      	b.n	8002398 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800237c:	b29a      	uxth	r2, r3
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002386:	b2da      	uxtb	r2, r3
 8002388:	8979      	ldrh	r1, [r7, #10]
 800238a:	2300      	movs	r3, #0
 800238c:	9300      	str	r3, [sp, #0]
 800238e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002392:	68f8      	ldr	r0, [r7, #12]
 8002394:	f000 fba4 	bl	8002ae0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002398:	697a      	ldr	r2, [r7, #20]
 800239a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800239c:	68f8      	ldr	r0, [r7, #12]
 800239e:	f000 faad 	bl	80028fc <I2C_WaitOnTXISFlagUntilTimeout>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d001      	beq.n	80023ac <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e07b      	b.n	80024a4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b0:	781a      	ldrb	r2, [r3, #0]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023bc:	1c5a      	adds	r2, r3, #1
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023c6:	b29b      	uxth	r3, r3
 80023c8:	3b01      	subs	r3, #1
 80023ca:	b29a      	uxth	r2, r3
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023d4:	3b01      	subs	r3, #1
 80023d6:	b29a      	uxth	r2, r3
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d034      	beq.n	8002450 <HAL_I2C_Mem_Write+0x1c8>
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d130      	bne.n	8002450 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	9300      	str	r3, [sp, #0]
 80023f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023f4:	2200      	movs	r2, #0
 80023f6:	2180      	movs	r1, #128	; 0x80
 80023f8:	68f8      	ldr	r0, [r7, #12]
 80023fa:	f000 fa3f 	bl	800287c <I2C_WaitOnFlagUntilTimeout>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d001      	beq.n	8002408 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e04d      	b.n	80024a4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800240c:	b29b      	uxth	r3, r3
 800240e:	2bff      	cmp	r3, #255	; 0xff
 8002410:	d90e      	bls.n	8002430 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	22ff      	movs	r2, #255	; 0xff
 8002416:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800241c:	b2da      	uxtb	r2, r3
 800241e:	8979      	ldrh	r1, [r7, #10]
 8002420:	2300      	movs	r3, #0
 8002422:	9300      	str	r3, [sp, #0]
 8002424:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002428:	68f8      	ldr	r0, [r7, #12]
 800242a:	f000 fb59 	bl	8002ae0 <I2C_TransferConfig>
 800242e:	e00f      	b.n	8002450 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002434:	b29a      	uxth	r2, r3
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800243e:	b2da      	uxtb	r2, r3
 8002440:	8979      	ldrh	r1, [r7, #10]
 8002442:	2300      	movs	r3, #0
 8002444:	9300      	str	r3, [sp, #0]
 8002446:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800244a:	68f8      	ldr	r0, [r7, #12]
 800244c:	f000 fb48 	bl	8002ae0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002454:	b29b      	uxth	r3, r3
 8002456:	2b00      	cmp	r3, #0
 8002458:	d19e      	bne.n	8002398 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800245a:	697a      	ldr	r2, [r7, #20]
 800245c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800245e:	68f8      	ldr	r0, [r7, #12]
 8002460:	f000 fa8c 	bl	800297c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e01a      	b.n	80024a4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	2220      	movs	r2, #32
 8002474:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	6859      	ldr	r1, [r3, #4]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	4b0a      	ldr	r3, [pc, #40]	; (80024ac <HAL_I2C_Mem_Write+0x224>)
 8002482:	400b      	ands	r3, r1
 8002484:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2220      	movs	r2, #32
 800248a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2200      	movs	r2, #0
 8002492:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2200      	movs	r2, #0
 800249a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800249e:	2300      	movs	r3, #0
 80024a0:	e000      	b.n	80024a4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80024a2:	2302      	movs	r3, #2
  }
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3718      	adds	r7, #24
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	fe00e800 	.word	0xfe00e800

080024b0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b088      	sub	sp, #32
 80024b4:	af02      	add	r7, sp, #8
 80024b6:	60f8      	str	r0, [r7, #12]
 80024b8:	4608      	mov	r0, r1
 80024ba:	4611      	mov	r1, r2
 80024bc:	461a      	mov	r2, r3
 80024be:	4603      	mov	r3, r0
 80024c0:	817b      	strh	r3, [r7, #10]
 80024c2:	460b      	mov	r3, r1
 80024c4:	813b      	strh	r3, [r7, #8]
 80024c6:	4613      	mov	r3, r2
 80024c8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	2b20      	cmp	r3, #32
 80024d4:	f040 80fd 	bne.w	80026d2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80024d8:	6a3b      	ldr	r3, [r7, #32]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d002      	beq.n	80024e4 <HAL_I2C_Mem_Read+0x34>
 80024de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d105      	bne.n	80024f0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024ea:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e0f1      	b.n	80026d4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d101      	bne.n	80024fe <HAL_I2C_Mem_Read+0x4e>
 80024fa:	2302      	movs	r3, #2
 80024fc:	e0ea      	b.n	80026d4 <HAL_I2C_Mem_Read+0x224>
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2201      	movs	r2, #1
 8002502:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002506:	f7ff fb43 	bl	8001b90 <HAL_GetTick>
 800250a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	9300      	str	r3, [sp, #0]
 8002510:	2319      	movs	r3, #25
 8002512:	2201      	movs	r2, #1
 8002514:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002518:	68f8      	ldr	r0, [r7, #12]
 800251a:	f000 f9af 	bl	800287c <I2C_WaitOnFlagUntilTimeout>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d001      	beq.n	8002528 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e0d5      	b.n	80026d4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2222      	movs	r2, #34	; 0x22
 800252c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2240      	movs	r2, #64	; 0x40
 8002534:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2200      	movs	r2, #0
 800253c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	6a3a      	ldr	r2, [r7, #32]
 8002542:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002548:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2200      	movs	r2, #0
 800254e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002550:	88f8      	ldrh	r0, [r7, #6]
 8002552:	893a      	ldrh	r2, [r7, #8]
 8002554:	8979      	ldrh	r1, [r7, #10]
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	9301      	str	r3, [sp, #4]
 800255a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800255c:	9300      	str	r3, [sp, #0]
 800255e:	4603      	mov	r3, r0
 8002560:	68f8      	ldr	r0, [r7, #12]
 8002562:	f000 f913 	bl	800278c <I2C_RequestMemoryRead>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d005      	beq.n	8002578 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2200      	movs	r2, #0
 8002570:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e0ad      	b.n	80026d4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800257c:	b29b      	uxth	r3, r3
 800257e:	2bff      	cmp	r3, #255	; 0xff
 8002580:	d90e      	bls.n	80025a0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	22ff      	movs	r2, #255	; 0xff
 8002586:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800258c:	b2da      	uxtb	r2, r3
 800258e:	8979      	ldrh	r1, [r7, #10]
 8002590:	4b52      	ldr	r3, [pc, #328]	; (80026dc <HAL_I2C_Mem_Read+0x22c>)
 8002592:	9300      	str	r3, [sp, #0]
 8002594:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002598:	68f8      	ldr	r0, [r7, #12]
 800259a:	f000 faa1 	bl	8002ae0 <I2C_TransferConfig>
 800259e:	e00f      	b.n	80025c0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025a4:	b29a      	uxth	r2, r3
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ae:	b2da      	uxtb	r2, r3
 80025b0:	8979      	ldrh	r1, [r7, #10]
 80025b2:	4b4a      	ldr	r3, [pc, #296]	; (80026dc <HAL_I2C_Mem_Read+0x22c>)
 80025b4:	9300      	str	r3, [sp, #0]
 80025b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025ba:	68f8      	ldr	r0, [r7, #12]
 80025bc:	f000 fa90 	bl	8002ae0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	9300      	str	r3, [sp, #0]
 80025c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025c6:	2200      	movs	r2, #0
 80025c8:	2104      	movs	r1, #4
 80025ca:	68f8      	ldr	r0, [r7, #12]
 80025cc:	f000 f956 	bl	800287c <I2C_WaitOnFlagUntilTimeout>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d001      	beq.n	80025da <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e07c      	b.n	80026d4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e4:	b2d2      	uxtb	r2, r2
 80025e6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ec:	1c5a      	adds	r2, r3, #1
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025f6:	3b01      	subs	r3, #1
 80025f8:	b29a      	uxth	r2, r3
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002602:	b29b      	uxth	r3, r3
 8002604:	3b01      	subs	r3, #1
 8002606:	b29a      	uxth	r2, r3
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002610:	b29b      	uxth	r3, r3
 8002612:	2b00      	cmp	r3, #0
 8002614:	d034      	beq.n	8002680 <HAL_I2C_Mem_Read+0x1d0>
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800261a:	2b00      	cmp	r3, #0
 800261c:	d130      	bne.n	8002680 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	9300      	str	r3, [sp, #0]
 8002622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002624:	2200      	movs	r2, #0
 8002626:	2180      	movs	r1, #128	; 0x80
 8002628:	68f8      	ldr	r0, [r7, #12]
 800262a:	f000 f927 	bl	800287c <I2C_WaitOnFlagUntilTimeout>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d001      	beq.n	8002638 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e04d      	b.n	80026d4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800263c:	b29b      	uxth	r3, r3
 800263e:	2bff      	cmp	r3, #255	; 0xff
 8002640:	d90e      	bls.n	8002660 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	22ff      	movs	r2, #255	; 0xff
 8002646:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800264c:	b2da      	uxtb	r2, r3
 800264e:	8979      	ldrh	r1, [r7, #10]
 8002650:	2300      	movs	r3, #0
 8002652:	9300      	str	r3, [sp, #0]
 8002654:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002658:	68f8      	ldr	r0, [r7, #12]
 800265a:	f000 fa41 	bl	8002ae0 <I2C_TransferConfig>
 800265e:	e00f      	b.n	8002680 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002664:	b29a      	uxth	r2, r3
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800266e:	b2da      	uxtb	r2, r3
 8002670:	8979      	ldrh	r1, [r7, #10]
 8002672:	2300      	movs	r3, #0
 8002674:	9300      	str	r3, [sp, #0]
 8002676:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800267a:	68f8      	ldr	r0, [r7, #12]
 800267c:	f000 fa30 	bl	8002ae0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002684:	b29b      	uxth	r3, r3
 8002686:	2b00      	cmp	r3, #0
 8002688:	d19a      	bne.n	80025c0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800268a:	697a      	ldr	r2, [r7, #20]
 800268c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800268e:	68f8      	ldr	r0, [r7, #12]
 8002690:	f000 f974 	bl	800297c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d001      	beq.n	800269e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e01a      	b.n	80026d4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	2220      	movs	r2, #32
 80026a4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	6859      	ldr	r1, [r3, #4]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	4b0b      	ldr	r3, [pc, #44]	; (80026e0 <HAL_I2C_Mem_Read+0x230>)
 80026b2:	400b      	ands	r3, r1
 80026b4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2220      	movs	r2, #32
 80026ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2200      	movs	r2, #0
 80026c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80026ce:	2300      	movs	r3, #0
 80026d0:	e000      	b.n	80026d4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80026d2:	2302      	movs	r3, #2
  }
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3718      	adds	r7, #24
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	80002400 	.word	0x80002400
 80026e0:	fe00e800 	.word	0xfe00e800

080026e4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b086      	sub	sp, #24
 80026e8:	af02      	add	r7, sp, #8
 80026ea:	60f8      	str	r0, [r7, #12]
 80026ec:	4608      	mov	r0, r1
 80026ee:	4611      	mov	r1, r2
 80026f0:	461a      	mov	r2, r3
 80026f2:	4603      	mov	r3, r0
 80026f4:	817b      	strh	r3, [r7, #10]
 80026f6:	460b      	mov	r3, r1
 80026f8:	813b      	strh	r3, [r7, #8]
 80026fa:	4613      	mov	r3, r2
 80026fc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80026fe:	88fb      	ldrh	r3, [r7, #6]
 8002700:	b2da      	uxtb	r2, r3
 8002702:	8979      	ldrh	r1, [r7, #10]
 8002704:	4b20      	ldr	r3, [pc, #128]	; (8002788 <I2C_RequestMemoryWrite+0xa4>)
 8002706:	9300      	str	r3, [sp, #0]
 8002708:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800270c:	68f8      	ldr	r0, [r7, #12]
 800270e:	f000 f9e7 	bl	8002ae0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002712:	69fa      	ldr	r2, [r7, #28]
 8002714:	69b9      	ldr	r1, [r7, #24]
 8002716:	68f8      	ldr	r0, [r7, #12]
 8002718:	f000 f8f0 	bl	80028fc <I2C_WaitOnTXISFlagUntilTimeout>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d001      	beq.n	8002726 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e02c      	b.n	8002780 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002726:	88fb      	ldrh	r3, [r7, #6]
 8002728:	2b01      	cmp	r3, #1
 800272a:	d105      	bne.n	8002738 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800272c:	893b      	ldrh	r3, [r7, #8]
 800272e:	b2da      	uxtb	r2, r3
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	629a      	str	r2, [r3, #40]	; 0x28
 8002736:	e015      	b.n	8002764 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002738:	893b      	ldrh	r3, [r7, #8]
 800273a:	0a1b      	lsrs	r3, r3, #8
 800273c:	b29b      	uxth	r3, r3
 800273e:	b2da      	uxtb	r2, r3
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002746:	69fa      	ldr	r2, [r7, #28]
 8002748:	69b9      	ldr	r1, [r7, #24]
 800274a:	68f8      	ldr	r0, [r7, #12]
 800274c:	f000 f8d6 	bl	80028fc <I2C_WaitOnTXISFlagUntilTimeout>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e012      	b.n	8002780 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800275a:	893b      	ldrh	r3, [r7, #8]
 800275c:	b2da      	uxtb	r2, r3
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	9300      	str	r3, [sp, #0]
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	2200      	movs	r2, #0
 800276c:	2180      	movs	r1, #128	; 0x80
 800276e:	68f8      	ldr	r0, [r7, #12]
 8002770:	f000 f884 	bl	800287c <I2C_WaitOnFlagUntilTimeout>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d001      	beq.n	800277e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e000      	b.n	8002780 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800277e:	2300      	movs	r3, #0
}
 8002780:	4618      	mov	r0, r3
 8002782:	3710      	adds	r7, #16
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	80002000 	.word	0x80002000

0800278c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b086      	sub	sp, #24
 8002790:	af02      	add	r7, sp, #8
 8002792:	60f8      	str	r0, [r7, #12]
 8002794:	4608      	mov	r0, r1
 8002796:	4611      	mov	r1, r2
 8002798:	461a      	mov	r2, r3
 800279a:	4603      	mov	r3, r0
 800279c:	817b      	strh	r3, [r7, #10]
 800279e:	460b      	mov	r3, r1
 80027a0:	813b      	strh	r3, [r7, #8]
 80027a2:	4613      	mov	r3, r2
 80027a4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80027a6:	88fb      	ldrh	r3, [r7, #6]
 80027a8:	b2da      	uxtb	r2, r3
 80027aa:	8979      	ldrh	r1, [r7, #10]
 80027ac:	4b20      	ldr	r3, [pc, #128]	; (8002830 <I2C_RequestMemoryRead+0xa4>)
 80027ae:	9300      	str	r3, [sp, #0]
 80027b0:	2300      	movs	r3, #0
 80027b2:	68f8      	ldr	r0, [r7, #12]
 80027b4:	f000 f994 	bl	8002ae0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027b8:	69fa      	ldr	r2, [r7, #28]
 80027ba:	69b9      	ldr	r1, [r7, #24]
 80027bc:	68f8      	ldr	r0, [r7, #12]
 80027be:	f000 f89d 	bl	80028fc <I2C_WaitOnTXISFlagUntilTimeout>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d001      	beq.n	80027cc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e02c      	b.n	8002826 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80027cc:	88fb      	ldrh	r3, [r7, #6]
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d105      	bne.n	80027de <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80027d2:	893b      	ldrh	r3, [r7, #8]
 80027d4:	b2da      	uxtb	r2, r3
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	629a      	str	r2, [r3, #40]	; 0x28
 80027dc:	e015      	b.n	800280a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80027de:	893b      	ldrh	r3, [r7, #8]
 80027e0:	0a1b      	lsrs	r3, r3, #8
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	b2da      	uxtb	r2, r3
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027ec:	69fa      	ldr	r2, [r7, #28]
 80027ee:	69b9      	ldr	r1, [r7, #24]
 80027f0:	68f8      	ldr	r0, [r7, #12]
 80027f2:	f000 f883 	bl	80028fc <I2C_WaitOnTXISFlagUntilTimeout>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d001      	beq.n	8002800 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e012      	b.n	8002826 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002800:	893b      	ldrh	r3, [r7, #8]
 8002802:	b2da      	uxtb	r2, r3
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	9300      	str	r3, [sp, #0]
 800280e:	69bb      	ldr	r3, [r7, #24]
 8002810:	2200      	movs	r2, #0
 8002812:	2140      	movs	r1, #64	; 0x40
 8002814:	68f8      	ldr	r0, [r7, #12]
 8002816:	f000 f831 	bl	800287c <I2C_WaitOnFlagUntilTimeout>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d001      	beq.n	8002824 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e000      	b.n	8002826 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002824:	2300      	movs	r3, #0
}
 8002826:	4618      	mov	r0, r3
 8002828:	3710      	adds	r7, #16
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	80002000 	.word	0x80002000

08002834 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	699b      	ldr	r3, [r3, #24]
 8002842:	f003 0302 	and.w	r3, r3, #2
 8002846:	2b02      	cmp	r3, #2
 8002848:	d103      	bne.n	8002852 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	2200      	movs	r2, #0
 8002850:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	699b      	ldr	r3, [r3, #24]
 8002858:	f003 0301 	and.w	r3, r3, #1
 800285c:	2b01      	cmp	r3, #1
 800285e:	d007      	beq.n	8002870 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	699a      	ldr	r2, [r3, #24]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f042 0201 	orr.w	r2, r2, #1
 800286e:	619a      	str	r2, [r3, #24]
  }
}
 8002870:	bf00      	nop
 8002872:	370c      	adds	r7, #12
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr

0800287c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	60f8      	str	r0, [r7, #12]
 8002884:	60b9      	str	r1, [r7, #8]
 8002886:	603b      	str	r3, [r7, #0]
 8002888:	4613      	mov	r3, r2
 800288a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800288c:	e022      	b.n	80028d4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002894:	d01e      	beq.n	80028d4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002896:	f7ff f97b 	bl	8001b90 <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	683a      	ldr	r2, [r7, #0]
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d302      	bcc.n	80028ac <I2C_WaitOnFlagUntilTimeout+0x30>
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d113      	bne.n	80028d4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b0:	f043 0220 	orr.w	r2, r3, #32
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2220      	movs	r2, #32
 80028bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2200      	movs	r2, #0
 80028c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e00f      	b.n	80028f4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	699a      	ldr	r2, [r3, #24]
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	4013      	ands	r3, r2
 80028de:	68ba      	ldr	r2, [r7, #8]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	bf0c      	ite	eq
 80028e4:	2301      	moveq	r3, #1
 80028e6:	2300      	movne	r3, #0
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	461a      	mov	r2, r3
 80028ec:	79fb      	ldrb	r3, [r7, #7]
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d0cd      	beq.n	800288e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80028f2:	2300      	movs	r3, #0
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3710      	adds	r7, #16
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}

080028fc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	60b9      	str	r1, [r7, #8]
 8002906:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002908:	e02c      	b.n	8002964 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	68b9      	ldr	r1, [r7, #8]
 800290e:	68f8      	ldr	r0, [r7, #12]
 8002910:	f000 f870 	bl	80029f4 <I2C_IsAcknowledgeFailed>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d001      	beq.n	800291e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e02a      	b.n	8002974 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002924:	d01e      	beq.n	8002964 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002926:	f7ff f933 	bl	8001b90 <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	68ba      	ldr	r2, [r7, #8]
 8002932:	429a      	cmp	r2, r3
 8002934:	d302      	bcc.n	800293c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d113      	bne.n	8002964 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002940:	f043 0220 	orr.w	r2, r3, #32
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2220      	movs	r2, #32
 800294c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2200      	movs	r2, #0
 8002954:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2200      	movs	r2, #0
 800295c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e007      	b.n	8002974 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	699b      	ldr	r3, [r3, #24]
 800296a:	f003 0302 	and.w	r3, r3, #2
 800296e:	2b02      	cmp	r3, #2
 8002970:	d1cb      	bne.n	800290a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002972:	2300      	movs	r3, #0
}
 8002974:	4618      	mov	r0, r3
 8002976:	3710      	adds	r7, #16
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}

0800297c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	60b9      	str	r1, [r7, #8]
 8002986:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002988:	e028      	b.n	80029dc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	68b9      	ldr	r1, [r7, #8]
 800298e:	68f8      	ldr	r0, [r7, #12]
 8002990:	f000 f830 	bl	80029f4 <I2C_IsAcknowledgeFailed>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d001      	beq.n	800299e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e026      	b.n	80029ec <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800299e:	f7ff f8f7 	bl	8001b90 <HAL_GetTick>
 80029a2:	4602      	mov	r2, r0
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	68ba      	ldr	r2, [r7, #8]
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d302      	bcc.n	80029b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d113      	bne.n	80029dc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b8:	f043 0220 	orr.w	r2, r3, #32
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2220      	movs	r2, #32
 80029c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2200      	movs	r2, #0
 80029cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2200      	movs	r2, #0
 80029d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e007      	b.n	80029ec <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	699b      	ldr	r3, [r3, #24]
 80029e2:	f003 0320 	and.w	r3, r3, #32
 80029e6:	2b20      	cmp	r3, #32
 80029e8:	d1cf      	bne.n	800298a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80029ea:	2300      	movs	r3, #0
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3710      	adds	r7, #16
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	60f8      	str	r0, [r7, #12]
 80029fc:	60b9      	str	r1, [r7, #8]
 80029fe:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	699b      	ldr	r3, [r3, #24]
 8002a06:	f003 0310 	and.w	r3, r3, #16
 8002a0a:	2b10      	cmp	r3, #16
 8002a0c:	d161      	bne.n	8002ad2 <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a18:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a1c:	d02b      	beq.n	8002a76 <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	685a      	ldr	r2, [r3, #4]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a2c:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a2e:	e022      	b.n	8002a76 <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a36:	d01e      	beq.n	8002a76 <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a38:	f7ff f8aa 	bl	8001b90 <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	68ba      	ldr	r2, [r7, #8]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d302      	bcc.n	8002a4e <I2C_IsAcknowledgeFailed+0x5a>
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d113      	bne.n	8002a76 <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a52:	f043 0220 	orr.w	r2, r3, #32
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2220      	movs	r2, #32
 8002a5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2200      	movs	r2, #0
 8002a66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e02e      	b.n	8002ad4 <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	699b      	ldr	r3, [r3, #24]
 8002a7c:	f003 0320 	and.w	r3, r3, #32
 8002a80:	2b20      	cmp	r3, #32
 8002a82:	d1d5      	bne.n	8002a30 <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	2210      	movs	r2, #16
 8002a8a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2220      	movs	r2, #32
 8002a92:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002a94:	68f8      	ldr	r0, [r7, #12]
 8002a96:	f7ff fecd 	bl	8002834 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	6859      	ldr	r1, [r3, #4]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	4b0d      	ldr	r3, [pc, #52]	; (8002adc <I2C_IsAcknowledgeFailed+0xe8>)
 8002aa6:	400b      	ands	r3, r1
 8002aa8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aae:	f043 0204 	orr.w	r2, r3, #4
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2220      	movs	r2, #32
 8002aba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e000      	b.n	8002ad4 <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 8002ad2:	2300      	movs	r3, #0
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3710      	adds	r7, #16
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	fe00e800 	.word	0xfe00e800

08002ae0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b085      	sub	sp, #20
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	60f8      	str	r0, [r7, #12]
 8002ae8:	607b      	str	r3, [r7, #4]
 8002aea:	460b      	mov	r3, r1
 8002aec:	817b      	strh	r3, [r7, #10]
 8002aee:	4613      	mov	r3, r2
 8002af0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	685a      	ldr	r2, [r3, #4]
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	0d5b      	lsrs	r3, r3, #21
 8002afc:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002b00:	4b0d      	ldr	r3, [pc, #52]	; (8002b38 <I2C_TransferConfig+0x58>)
 8002b02:	430b      	orrs	r3, r1
 8002b04:	43db      	mvns	r3, r3
 8002b06:	ea02 0103 	and.w	r1, r2, r3
 8002b0a:	897b      	ldrh	r3, [r7, #10]
 8002b0c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002b10:	7a7b      	ldrb	r3, [r7, #9]
 8002b12:	041b      	lsls	r3, r3, #16
 8002b14:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002b18:	431a      	orrs	r2, r3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	431a      	orrs	r2, r3
 8002b1e:	69bb      	ldr	r3, [r7, #24]
 8002b20:	431a      	orrs	r2, r3
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	430a      	orrs	r2, r1
 8002b28:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8002b2a:	bf00      	nop
 8002b2c:	3714      	adds	r7, #20
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop
 8002b38:	03ff63ff 	.word	0x03ff63ff

08002b3c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	2b20      	cmp	r3, #32
 8002b50:	d138      	bne.n	8002bc4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d101      	bne.n	8002b60 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002b5c:	2302      	movs	r3, #2
 8002b5e:	e032      	b.n	8002bc6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2224      	movs	r2, #36	; 0x24
 8002b6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f022 0201 	bic.w	r2, r2, #1
 8002b7e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002b8e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	6819      	ldr	r1, [r3, #0]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	683a      	ldr	r2, [r7, #0]
 8002b9c:	430a      	orrs	r2, r1
 8002b9e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f042 0201 	orr.w	r2, r2, #1
 8002bae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2220      	movs	r2, #32
 8002bb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	e000      	b.n	8002bc6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002bc4:	2302      	movs	r3, #2
  }
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	370c      	adds	r7, #12
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr

08002bd2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002bd2:	b480      	push	{r7}
 8002bd4:	b085      	sub	sp, #20
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	6078      	str	r0, [r7, #4]
 8002bda:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	2b20      	cmp	r3, #32
 8002be6:	d139      	bne.n	8002c5c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d101      	bne.n	8002bf6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002bf2:	2302      	movs	r3, #2
 8002bf4:	e033      	b.n	8002c5e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2224      	movs	r2, #36	; 0x24
 8002c02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f022 0201 	bic.w	r2, r2, #1
 8002c14:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002c24:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	021b      	lsls	r3, r3, #8
 8002c2a:	68fa      	ldr	r2, [r7, #12]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	68fa      	ldr	r2, [r7, #12]
 8002c36:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f042 0201 	orr.w	r2, r2, #1
 8002c46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2220      	movs	r2, #32
 8002c4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	e000      	b.n	8002c5e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002c5c:	2302      	movs	r3, #2
  }
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3714      	adds	r7, #20
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr

08002c6a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002c6a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c6c:	b08b      	sub	sp, #44	; 0x2c
 8002c6e:	af06      	add	r7, sp, #24
 8002c70:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d101      	bne.n	8002c7c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e0d0      	b.n	8002e1e <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d106      	bne.n	8002c96 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f007 f925 	bl	8009ee0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2203      	movs	r2, #3
 8002c9a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f003 fb59 	bl	800635a <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ca8:	2300      	movs	r3, #0
 8002caa:	73fb      	strb	r3, [r7, #15]
 8002cac:	e04c      	b.n	8002d48 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002cae:	7bfb      	ldrb	r3, [r7, #15]
 8002cb0:	6879      	ldr	r1, [r7, #4]
 8002cb2:	1c5a      	adds	r2, r3, #1
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	4413      	add	r3, r2
 8002cba:	00db      	lsls	r3, r3, #3
 8002cbc:	440b      	add	r3, r1
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002cc4:	7bfb      	ldrb	r3, [r7, #15]
 8002cc6:	6879      	ldr	r1, [r7, #4]
 8002cc8:	1c5a      	adds	r2, r3, #1
 8002cca:	4613      	mov	r3, r2
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	4413      	add	r3, r2
 8002cd0:	00db      	lsls	r3, r3, #3
 8002cd2:	440b      	add	r3, r1
 8002cd4:	7bfa      	ldrb	r2, [r7, #15]
 8002cd6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002cd8:	7bfa      	ldrb	r2, [r7, #15]
 8002cda:	7bfb      	ldrb	r3, [r7, #15]
 8002cdc:	b298      	uxth	r0, r3
 8002cde:	6879      	ldr	r1, [r7, #4]
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	4413      	add	r3, r2
 8002ce6:	00db      	lsls	r3, r3, #3
 8002ce8:	440b      	add	r3, r1
 8002cea:	3336      	adds	r3, #54	; 0x36
 8002cec:	4602      	mov	r2, r0
 8002cee:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002cf0:	7bfb      	ldrb	r3, [r7, #15]
 8002cf2:	6879      	ldr	r1, [r7, #4]
 8002cf4:	1c5a      	adds	r2, r3, #1
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	4413      	add	r3, r2
 8002cfc:	00db      	lsls	r3, r3, #3
 8002cfe:	440b      	add	r3, r1
 8002d00:	3303      	adds	r3, #3
 8002d02:	2200      	movs	r2, #0
 8002d04:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002d06:	7bfa      	ldrb	r2, [r7, #15]
 8002d08:	6879      	ldr	r1, [r7, #4]
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	4413      	add	r3, r2
 8002d10:	00db      	lsls	r3, r3, #3
 8002d12:	440b      	add	r3, r1
 8002d14:	3338      	adds	r3, #56	; 0x38
 8002d16:	2200      	movs	r2, #0
 8002d18:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002d1a:	7bfa      	ldrb	r2, [r7, #15]
 8002d1c:	6879      	ldr	r1, [r7, #4]
 8002d1e:	4613      	mov	r3, r2
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	4413      	add	r3, r2
 8002d24:	00db      	lsls	r3, r3, #3
 8002d26:	440b      	add	r3, r1
 8002d28:	333c      	adds	r3, #60	; 0x3c
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002d2e:	7bfa      	ldrb	r2, [r7, #15]
 8002d30:	6879      	ldr	r1, [r7, #4]
 8002d32:	4613      	mov	r3, r2
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	4413      	add	r3, r2
 8002d38:	00db      	lsls	r3, r3, #3
 8002d3a:	440b      	add	r3, r1
 8002d3c:	3340      	adds	r3, #64	; 0x40
 8002d3e:	2200      	movs	r2, #0
 8002d40:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d42:	7bfb      	ldrb	r3, [r7, #15]
 8002d44:	3301      	adds	r3, #1
 8002d46:	73fb      	strb	r3, [r7, #15]
 8002d48:	7bfa      	ldrb	r2, [r7, #15]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d3ad      	bcc.n	8002cae <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d52:	2300      	movs	r3, #0
 8002d54:	73fb      	strb	r3, [r7, #15]
 8002d56:	e044      	b.n	8002de2 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002d58:	7bfa      	ldrb	r2, [r7, #15]
 8002d5a:	6879      	ldr	r1, [r7, #4]
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	4413      	add	r3, r2
 8002d62:	00db      	lsls	r3, r3, #3
 8002d64:	440b      	add	r3, r1
 8002d66:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002d6e:	7bfa      	ldrb	r2, [r7, #15]
 8002d70:	6879      	ldr	r1, [r7, #4]
 8002d72:	4613      	mov	r3, r2
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	4413      	add	r3, r2
 8002d78:	00db      	lsls	r3, r3, #3
 8002d7a:	440b      	add	r3, r1
 8002d7c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002d80:	7bfa      	ldrb	r2, [r7, #15]
 8002d82:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002d84:	7bfa      	ldrb	r2, [r7, #15]
 8002d86:	6879      	ldr	r1, [r7, #4]
 8002d88:	4613      	mov	r3, r2
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	4413      	add	r3, r2
 8002d8e:	00db      	lsls	r3, r3, #3
 8002d90:	440b      	add	r3, r1
 8002d92:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002d96:	2200      	movs	r2, #0
 8002d98:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002d9a:	7bfa      	ldrb	r2, [r7, #15]
 8002d9c:	6879      	ldr	r1, [r7, #4]
 8002d9e:	4613      	mov	r3, r2
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	4413      	add	r3, r2
 8002da4:	00db      	lsls	r3, r3, #3
 8002da6:	440b      	add	r3, r1
 8002da8:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002dac:	2200      	movs	r2, #0
 8002dae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002db0:	7bfa      	ldrb	r2, [r7, #15]
 8002db2:	6879      	ldr	r1, [r7, #4]
 8002db4:	4613      	mov	r3, r2
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	4413      	add	r3, r2
 8002dba:	00db      	lsls	r3, r3, #3
 8002dbc:	440b      	add	r3, r1
 8002dbe:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002dc6:	7bfa      	ldrb	r2, [r7, #15]
 8002dc8:	6879      	ldr	r1, [r7, #4]
 8002dca:	4613      	mov	r3, r2
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	4413      	add	r3, r2
 8002dd0:	00db      	lsls	r3, r3, #3
 8002dd2:	440b      	add	r3, r1
 8002dd4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002dd8:	2200      	movs	r2, #0
 8002dda:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ddc:	7bfb      	ldrb	r3, [r7, #15]
 8002dde:	3301      	adds	r3, #1
 8002de0:	73fb      	strb	r3, [r7, #15]
 8002de2:	7bfa      	ldrb	r2, [r7, #15]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d3b5      	bcc.n	8002d58 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	603b      	str	r3, [r7, #0]
 8002df2:	687e      	ldr	r6, [r7, #4]
 8002df4:	466d      	mov	r5, sp
 8002df6:	f106 0410 	add.w	r4, r6, #16
 8002dfa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002dfc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002dfe:	6823      	ldr	r3, [r4, #0]
 8002e00:	602b      	str	r3, [r5, #0]
 8002e02:	1d33      	adds	r3, r6, #4
 8002e04:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e06:	6838      	ldr	r0, [r7, #0]
 8002e08:	f003 fac2 	bl	8006390 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3714      	adds	r7, #20
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002e26 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002e26:	b580      	push	{r7, lr}
 8002e28:	b082      	sub	sp, #8
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d101      	bne.n	8002e3c <HAL_PCD_Start+0x16>
 8002e38:	2302      	movs	r3, #2
 8002e3a:	e016      	b.n	8002e6a <HAL_PCD_Start+0x44>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f003 fa6f 	bl	800632c <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002e4e:	2101      	movs	r1, #1
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	f007 fae3 	bl	800a41c <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f005 fa20 	bl	80082a0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3708      	adds	r7, #8
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}

08002e72 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002e72:	b580      	push	{r7, lr}
 8002e74:	b082      	sub	sp, #8
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f005 fa19 	bl	80082b6 <USB_ReadInterrupts>
 8002e84:	4603      	mov	r3, r0
 8002e86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e8e:	d102      	bne.n	8002e96 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f000 faf6 	bl	8003482 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f005 fa0b 	bl	80082b6 <USB_ReadInterrupts>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ea6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002eaa:	d112      	bne.n	8002ed2 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002eb4:	b29a      	uxth	r2, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ebe:	b292      	uxth	r2, r2
 8002ec0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f007 f8ac 	bl	800a022 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002eca:	2100      	movs	r1, #0
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f000 f8c7 	bl	8003060 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f005 f9ed 	bl	80082b6 <USB_ReadInterrupts>
 8002edc:	4603      	mov	r3, r0
 8002ede:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ee2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ee6:	d10b      	bne.n	8002f00 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ef0:	b29a      	uxth	r2, r3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002efa:	b292      	uxth	r2, r2
 8002efc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4618      	mov	r0, r3
 8002f06:	f005 f9d6 	bl	80082b6 <USB_ReadInterrupts>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f14:	d10b      	bne.n	8002f2e <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f1e:	b29a      	uxth	r2, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f28:	b292      	uxth	r2, r2
 8002f2a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4618      	mov	r0, r3
 8002f34:	f005 f9bf 	bl	80082b6 <USB_ReadInterrupts>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f42:	d126      	bne.n	8002f92 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002f4c:	b29a      	uxth	r2, r3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f022 0204 	bic.w	r2, r2, #4
 8002f56:	b292      	uxth	r2, r2
 8002f58:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002f64:	b29a      	uxth	r2, r3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f022 0208 	bic.w	r2, r2, #8
 8002f6e:	b292      	uxth	r2, r2
 8002f70:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f007 f88d 	bl	800a094 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f82:	b29a      	uxth	r2, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002f8c:	b292      	uxth	r2, r2
 8002f8e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4618      	mov	r0, r3
 8002f98:	f005 f98d 	bl	80082b6 <USB_ReadInterrupts>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fa2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fa6:	d126      	bne.n	8002ff6 <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002fb0:	b29a      	uxth	r2, r3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f042 0208 	orr.w	r2, r2, #8
 8002fba:	b292      	uxth	r2, r2
 8002fbc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002fc8:	b29a      	uxth	r2, r3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fd2:	b292      	uxth	r2, r2
 8002fd4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002fe0:	b29a      	uxth	r2, r3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f042 0204 	orr.w	r2, r2, #4
 8002fea:	b292      	uxth	r2, r2
 8002fec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f007 f835 	bl	800a060 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f005 f95b 	bl	80082b6 <USB_ReadInterrupts>
 8003000:	4603      	mov	r3, r0
 8003002:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003006:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800300a:	d10e      	bne.n	800302a <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003014:	b29a      	uxth	r2, r3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800301e:	b292      	uxth	r2, r2
 8003020:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f006 ffee 	bl	800a006 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4618      	mov	r0, r3
 8003030:	f005 f941 	bl	80082b6 <USB_ReadInterrupts>
 8003034:	4603      	mov	r3, r0
 8003036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800303a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800303e:	d10b      	bne.n	8003058 <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003048:	b29a      	uxth	r2, r3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003052:	b292      	uxth	r2, r2
 8003054:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8003058:	bf00      	nop
 800305a:	3708      	adds	r7, #8
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	460b      	mov	r3, r1
 800306a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003072:	2b01      	cmp	r3, #1
 8003074:	d101      	bne.n	800307a <HAL_PCD_SetAddress+0x1a>
 8003076:	2302      	movs	r3, #2
 8003078:	e013      	b.n	80030a2 <HAL_PCD_SetAddress+0x42>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2201      	movs	r2, #1
 800307e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	78fa      	ldrb	r2, [r7, #3]
 8003086:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	78fa      	ldrb	r2, [r7, #3]
 8003090:	4611      	mov	r1, r2
 8003092:	4618      	mov	r0, r3
 8003094:	f005 f8f0 	bl	8008278 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3708      	adds	r7, #8
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}

080030aa <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80030aa:	b580      	push	{r7, lr}
 80030ac:	b084      	sub	sp, #16
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	6078      	str	r0, [r7, #4]
 80030b2:	4608      	mov	r0, r1
 80030b4:	4611      	mov	r1, r2
 80030b6:	461a      	mov	r2, r3
 80030b8:	4603      	mov	r3, r0
 80030ba:	70fb      	strb	r3, [r7, #3]
 80030bc:	460b      	mov	r3, r1
 80030be:	803b      	strh	r3, [r7, #0]
 80030c0:	4613      	mov	r3, r2
 80030c2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80030c4:	2300      	movs	r3, #0
 80030c6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80030c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	da0e      	bge.n	80030ee <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030d0:	78fb      	ldrb	r3, [r7, #3]
 80030d2:	f003 0307 	and.w	r3, r3, #7
 80030d6:	1c5a      	adds	r2, r3, #1
 80030d8:	4613      	mov	r3, r2
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	4413      	add	r3, r2
 80030de:	00db      	lsls	r3, r3, #3
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	4413      	add	r3, r2
 80030e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2201      	movs	r2, #1
 80030ea:	705a      	strb	r2, [r3, #1]
 80030ec:	e00e      	b.n	800310c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030ee:	78fb      	ldrb	r3, [r7, #3]
 80030f0:	f003 0207 	and.w	r2, r3, #7
 80030f4:	4613      	mov	r3, r2
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	4413      	add	r3, r2
 80030fa:	00db      	lsls	r3, r3, #3
 80030fc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	4413      	add	r3, r2
 8003104:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2200      	movs	r2, #0
 800310a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800310c:	78fb      	ldrb	r3, [r7, #3]
 800310e:	f003 0307 	and.w	r3, r3, #7
 8003112:	b2da      	uxtb	r2, r3
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003118:	883a      	ldrh	r2, [r7, #0]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	78ba      	ldrb	r2, [r7, #2]
 8003122:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	785b      	ldrb	r3, [r3, #1]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d004      	beq.n	8003136 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	781b      	ldrb	r3, [r3, #0]
 8003130:	b29a      	uxth	r2, r3
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003136:	78bb      	ldrb	r3, [r7, #2]
 8003138:	2b02      	cmp	r3, #2
 800313a:	d102      	bne.n	8003142 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2200      	movs	r2, #0
 8003140:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003148:	2b01      	cmp	r3, #1
 800314a:	d101      	bne.n	8003150 <HAL_PCD_EP_Open+0xa6>
 800314c:	2302      	movs	r3, #2
 800314e:	e00e      	b.n	800316e <HAL_PCD_EP_Open+0xc4>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	68f9      	ldr	r1, [r7, #12]
 800315e:	4618      	mov	r0, r3
 8003160:	f003 f938 	bl	80063d4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800316c:	7afb      	ldrb	r3, [r7, #11]
}
 800316e:	4618      	mov	r0, r3
 8003170:	3710      	adds	r7, #16
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}

08003176 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003176:	b580      	push	{r7, lr}
 8003178:	b084      	sub	sp, #16
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
 800317e:	460b      	mov	r3, r1
 8003180:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003182:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003186:	2b00      	cmp	r3, #0
 8003188:	da0e      	bge.n	80031a8 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800318a:	78fb      	ldrb	r3, [r7, #3]
 800318c:	f003 0307 	and.w	r3, r3, #7
 8003190:	1c5a      	adds	r2, r3, #1
 8003192:	4613      	mov	r3, r2
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	4413      	add	r3, r2
 8003198:	00db      	lsls	r3, r3, #3
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	4413      	add	r3, r2
 800319e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2201      	movs	r2, #1
 80031a4:	705a      	strb	r2, [r3, #1]
 80031a6:	e00e      	b.n	80031c6 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031a8:	78fb      	ldrb	r3, [r7, #3]
 80031aa:	f003 0207 	and.w	r2, r3, #7
 80031ae:	4613      	mov	r3, r2
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	4413      	add	r3, r2
 80031b4:	00db      	lsls	r3, r3, #3
 80031b6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	4413      	add	r3, r2
 80031be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2200      	movs	r2, #0
 80031c4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80031c6:	78fb      	ldrb	r3, [r7, #3]
 80031c8:	f003 0307 	and.w	r3, r3, #7
 80031cc:	b2da      	uxtb	r2, r3
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d101      	bne.n	80031e0 <HAL_PCD_EP_Close+0x6a>
 80031dc:	2302      	movs	r3, #2
 80031de:	e00e      	b.n	80031fe <HAL_PCD_EP_Close+0x88>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	68f9      	ldr	r1, [r7, #12]
 80031ee:	4618      	mov	r0, r3
 80031f0:	f003 fc84 	bl	8006afc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80031fc:	2300      	movs	r3, #0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3710      	adds	r7, #16
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}

08003206 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003206:	b580      	push	{r7, lr}
 8003208:	b086      	sub	sp, #24
 800320a:	af00      	add	r7, sp, #0
 800320c:	60f8      	str	r0, [r7, #12]
 800320e:	607a      	str	r2, [r7, #4]
 8003210:	603b      	str	r3, [r7, #0]
 8003212:	460b      	mov	r3, r1
 8003214:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003216:	7afb      	ldrb	r3, [r7, #11]
 8003218:	f003 0207 	and.w	r2, r3, #7
 800321c:	4613      	mov	r3, r2
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	4413      	add	r3, r2
 8003222:	00db      	lsls	r3, r3, #3
 8003224:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003228:	68fa      	ldr	r2, [r7, #12]
 800322a:	4413      	add	r3, r2
 800322c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	683a      	ldr	r2, [r7, #0]
 8003238:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	2200      	movs	r2, #0
 800323e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	2200      	movs	r2, #0
 8003244:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003246:	7afb      	ldrb	r3, [r7, #11]
 8003248:	f003 0307 	and.w	r3, r3, #7
 800324c:	b2da      	uxtb	r2, r3
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003252:	7afb      	ldrb	r3, [r7, #11]
 8003254:	f003 0307 	and.w	r3, r3, #7
 8003258:	2b00      	cmp	r3, #0
 800325a:	d106      	bne.n	800326a <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	6979      	ldr	r1, [r7, #20]
 8003262:	4618      	mov	r0, r3
 8003264:	f003 fe37 	bl	8006ed6 <USB_EPStartXfer>
 8003268:	e005      	b.n	8003276 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	6979      	ldr	r1, [r7, #20]
 8003270:	4618      	mov	r0, r3
 8003272:	f003 fe30 	bl	8006ed6 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003276:	2300      	movs	r3, #0
}
 8003278:	4618      	mov	r0, r3
 800327a:	3718      	adds	r7, #24
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}

08003280 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	460b      	mov	r3, r1
 800328a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800328c:	78fb      	ldrb	r3, [r7, #3]
 800328e:	f003 0207 	and.w	r2, r3, #7
 8003292:	6879      	ldr	r1, [r7, #4]
 8003294:	4613      	mov	r3, r2
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	4413      	add	r3, r2
 800329a:	00db      	lsls	r3, r3, #3
 800329c:	440b      	add	r3, r1
 800329e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80032a2:	681b      	ldr	r3, [r3, #0]
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	370c      	adds	r7, #12
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr

080032b0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b086      	sub	sp, #24
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	607a      	str	r2, [r7, #4]
 80032ba:	603b      	str	r3, [r7, #0]
 80032bc:	460b      	mov	r3, r1
 80032be:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032c0:	7afb      	ldrb	r3, [r7, #11]
 80032c2:	f003 0307 	and.w	r3, r3, #7
 80032c6:	1c5a      	adds	r2, r3, #1
 80032c8:	4613      	mov	r3, r2
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	4413      	add	r3, r2
 80032ce:	00db      	lsls	r3, r3, #3
 80032d0:	68fa      	ldr	r2, [r7, #12]
 80032d2:	4413      	add	r3, r2
 80032d4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	683a      	ldr	r2, [r7, #0]
 80032e0:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	2201      	movs	r2, #1
 80032e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	683a      	ldr	r2, [r7, #0]
 80032ee:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	2200      	movs	r2, #0
 80032f4:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	2201      	movs	r2, #1
 80032fa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032fc:	7afb      	ldrb	r3, [r7, #11]
 80032fe:	f003 0307 	and.w	r3, r3, #7
 8003302:	b2da      	uxtb	r2, r3
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003308:	7afb      	ldrb	r3, [r7, #11]
 800330a:	f003 0307 	and.w	r3, r3, #7
 800330e:	2b00      	cmp	r3, #0
 8003310:	d106      	bne.n	8003320 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	6979      	ldr	r1, [r7, #20]
 8003318:	4618      	mov	r0, r3
 800331a:	f003 fddc 	bl	8006ed6 <USB_EPStartXfer>
 800331e:	e005      	b.n	800332c <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	6979      	ldr	r1, [r7, #20]
 8003326:	4618      	mov	r0, r3
 8003328:	f003 fdd5 	bl	8006ed6 <USB_EPStartXfer>
  }

  return HAL_OK;
 800332c:	2300      	movs	r3, #0
}
 800332e:	4618      	mov	r0, r3
 8003330:	3718      	adds	r7, #24
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}

08003336 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003336:	b580      	push	{r7, lr}
 8003338:	b084      	sub	sp, #16
 800333a:	af00      	add	r7, sp, #0
 800333c:	6078      	str	r0, [r7, #4]
 800333e:	460b      	mov	r3, r1
 8003340:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003342:	78fb      	ldrb	r3, [r7, #3]
 8003344:	f003 0207 	and.w	r2, r3, #7
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	429a      	cmp	r2, r3
 800334e:	d901      	bls.n	8003354 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e03e      	b.n	80033d2 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003354:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003358:	2b00      	cmp	r3, #0
 800335a:	da0e      	bge.n	800337a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800335c:	78fb      	ldrb	r3, [r7, #3]
 800335e:	f003 0307 	and.w	r3, r3, #7
 8003362:	1c5a      	adds	r2, r3, #1
 8003364:	4613      	mov	r3, r2
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	4413      	add	r3, r2
 800336a:	00db      	lsls	r3, r3, #3
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	4413      	add	r3, r2
 8003370:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2201      	movs	r2, #1
 8003376:	705a      	strb	r2, [r3, #1]
 8003378:	e00c      	b.n	8003394 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800337a:	78fa      	ldrb	r2, [r7, #3]
 800337c:	4613      	mov	r3, r2
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	4413      	add	r3, r2
 8003382:	00db      	lsls	r3, r3, #3
 8003384:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003388:	687a      	ldr	r2, [r7, #4]
 800338a:	4413      	add	r3, r2
 800338c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2200      	movs	r2, #0
 8003392:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2201      	movs	r2, #1
 8003398:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800339a:	78fb      	ldrb	r3, [r7, #3]
 800339c:	f003 0307 	and.w	r3, r3, #7
 80033a0:	b2da      	uxtb	r2, r3
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d101      	bne.n	80033b4 <HAL_PCD_EP_SetStall+0x7e>
 80033b0:	2302      	movs	r3, #2
 80033b2:	e00e      	b.n	80033d2 <HAL_PCD_EP_SetStall+0x9c>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	68f9      	ldr	r1, [r7, #12]
 80033c2:	4618      	mov	r0, r3
 80033c4:	f004 fe59 	bl	800807a <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80033d0:	2300      	movs	r3, #0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3710      	adds	r7, #16
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}

080033da <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033da:	b580      	push	{r7, lr}
 80033dc:	b084      	sub	sp, #16
 80033de:	af00      	add	r7, sp, #0
 80033e0:	6078      	str	r0, [r7, #4]
 80033e2:	460b      	mov	r3, r1
 80033e4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80033e6:	78fb      	ldrb	r3, [r7, #3]
 80033e8:	f003 020f 	and.w	r2, r3, #15
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d901      	bls.n	80033f8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e040      	b.n	800347a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80033f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	da0e      	bge.n	800341e <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003400:	78fb      	ldrb	r3, [r7, #3]
 8003402:	f003 0307 	and.w	r3, r3, #7
 8003406:	1c5a      	adds	r2, r3, #1
 8003408:	4613      	mov	r3, r2
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	4413      	add	r3, r2
 800340e:	00db      	lsls	r3, r3, #3
 8003410:	687a      	ldr	r2, [r7, #4]
 8003412:	4413      	add	r3, r2
 8003414:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2201      	movs	r2, #1
 800341a:	705a      	strb	r2, [r3, #1]
 800341c:	e00e      	b.n	800343c <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800341e:	78fb      	ldrb	r3, [r7, #3]
 8003420:	f003 0207 	and.w	r2, r3, #7
 8003424:	4613      	mov	r3, r2
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	4413      	add	r3, r2
 800342a:	00db      	lsls	r3, r3, #3
 800342c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003430:	687a      	ldr	r2, [r7, #4]
 8003432:	4413      	add	r3, r2
 8003434:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2200      	movs	r2, #0
 800343a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2200      	movs	r2, #0
 8003440:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003442:	78fb      	ldrb	r3, [r7, #3]
 8003444:	f003 0307 	and.w	r3, r3, #7
 8003448:	b2da      	uxtb	r2, r3
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003454:	2b01      	cmp	r3, #1
 8003456:	d101      	bne.n	800345c <HAL_PCD_EP_ClrStall+0x82>
 8003458:	2302      	movs	r3, #2
 800345a:	e00e      	b.n	800347a <HAL_PCD_EP_ClrStall+0xa0>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	68f9      	ldr	r1, [r7, #12]
 800346a:	4618      	mov	r0, r3
 800346c:	f004 fe56 	bl	800811c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2200      	movs	r2, #0
 8003474:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003478:	2300      	movs	r3, #0
}
 800347a:	4618      	mov	r0, r3
 800347c:	3710      	adds	r7, #16
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}

08003482 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003482:	b580      	push	{r7, lr}
 8003484:	b096      	sub	sp, #88	; 0x58
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800348a:	e3a9      	b.n	8003be0 <PCD_EP_ISR_Handler+0x75e>
  {
    wIstr = hpcd->Instance->ISTR;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003494:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003498:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800349c:	b2db      	uxtb	r3, r3
 800349e:	f003 030f 	and.w	r3, r3, #15
 80034a2:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 80034a6:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	f040 8164 	bne.w	8003778 <PCD_EP_ISR_Handler+0x2f6>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80034b0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80034b4:	f003 0310 	and.w	r3, r3, #16
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d152      	bne.n	8003562 <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	881b      	ldrh	r3, [r3, #0]
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80034c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034cc:	81fb      	strh	r3, [r7, #14]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	89fb      	ldrh	r3, [r7, #14]
 80034d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034dc:	b29b      	uxth	r3, r3
 80034de:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	3328      	adds	r3, #40	; 0x28
 80034e4:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	461a      	mov	r2, r3
 80034f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034f4:	781b      	ldrb	r3, [r3, #0]
 80034f6:	00db      	lsls	r3, r3, #3
 80034f8:	4413      	add	r3, r2
 80034fa:	3302      	adds	r3, #2
 80034fc:	005b      	lsls	r3, r3, #1
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	6812      	ldr	r2, [r2, #0]
 8003502:	4413      	add	r3, r2
 8003504:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003508:	881b      	ldrh	r3, [r3, #0]
 800350a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800350e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003510:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003512:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003514:	695a      	ldr	r2, [r3, #20]
 8003516:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003518:	69db      	ldr	r3, [r3, #28]
 800351a:	441a      	add	r2, r3
 800351c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800351e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003520:	2100      	movs	r1, #0
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f006 fd55 	bl	8009fd2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800352e:	b2db      	uxtb	r3, r3
 8003530:	2b00      	cmp	r3, #0
 8003532:	f000 8355 	beq.w	8003be0 <PCD_EP_ISR_Handler+0x75e>
 8003536:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	2b00      	cmp	r3, #0
 800353c:	f040 8350 	bne.w	8003be0 <PCD_EP_ISR_Handler+0x75e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003546:	b2db      	uxtb	r3, r3
 8003548:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800354c:	b2da      	uxtb	r2, r3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	b292      	uxth	r2, r2
 8003554:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003560:	e33e      	b.n	8003be0 <PCD_EP_ISR_Handler+0x75e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003568:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	881b      	ldrh	r3, [r3, #0]
 8003570:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003574:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003578:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800357c:	2b00      	cmp	r3, #0
 800357e:	d034      	beq.n	80035ea <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003588:	b29b      	uxth	r3, r3
 800358a:	461a      	mov	r2, r3
 800358c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800358e:	781b      	ldrb	r3, [r3, #0]
 8003590:	00db      	lsls	r3, r3, #3
 8003592:	4413      	add	r3, r2
 8003594:	3306      	adds	r3, #6
 8003596:	005b      	lsls	r3, r3, #1
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	6812      	ldr	r2, [r2, #0]
 800359c:	4413      	add	r3, r2
 800359e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80035a2:	881b      	ldrh	r3, [r3, #0]
 80035a4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80035a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035aa:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6818      	ldr	r0, [r3, #0]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80035b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035b8:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80035ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035bc:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80035be:	b29b      	uxth	r3, r3
 80035c0:	f004 fecf 	bl	8008362 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	881b      	ldrh	r3, [r3, #0]
 80035ca:	b29a      	uxth	r2, r3
 80035cc:	f640 738f 	movw	r3, #3983	; 0xf8f
 80035d0:	4013      	ands	r3, r2
 80035d2:	823b      	strh	r3, [r7, #16]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	8a3a      	ldrh	r2, [r7, #16]
 80035da:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80035de:	b292      	uxth	r2, r2
 80035e0:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f006 fcc8 	bl	8009f78 <HAL_PCD_SetupStageCallback>
 80035e8:	e2fa      	b.n	8003be0 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80035ea:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	f280 82f6 	bge.w	8003be0 <PCD_EP_ISR_Handler+0x75e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	881b      	ldrh	r3, [r3, #0]
 80035fa:	b29a      	uxth	r2, r3
 80035fc:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003600:	4013      	ands	r3, r2
 8003602:	83fb      	strh	r3, [r7, #30]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	8bfa      	ldrh	r2, [r7, #30]
 800360a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800360e:	b292      	uxth	r2, r2
 8003610:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800361a:	b29b      	uxth	r3, r3
 800361c:	461a      	mov	r2, r3
 800361e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003620:	781b      	ldrb	r3, [r3, #0]
 8003622:	00db      	lsls	r3, r3, #3
 8003624:	4413      	add	r3, r2
 8003626:	3306      	adds	r3, #6
 8003628:	005b      	lsls	r3, r3, #1
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	6812      	ldr	r2, [r2, #0]
 800362e:	4413      	add	r3, r2
 8003630:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003634:	881b      	ldrh	r3, [r3, #0]
 8003636:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800363a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800363c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800363e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003640:	69db      	ldr	r3, [r3, #28]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d019      	beq.n	800367a <PCD_EP_ISR_Handler+0x1f8>
 8003646:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003648:	695b      	ldr	r3, [r3, #20]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d015      	beq.n	800367a <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6818      	ldr	r0, [r3, #0]
 8003652:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003654:	6959      	ldr	r1, [r3, #20]
 8003656:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003658:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800365a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800365c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800365e:	b29b      	uxth	r3, r3
 8003660:	f004 fe7f 	bl	8008362 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003664:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003666:	695a      	ldr	r2, [r3, #20]
 8003668:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800366a:	69db      	ldr	r3, [r3, #28]
 800366c:	441a      	add	r2, r3
 800366e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003670:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003672:	2100      	movs	r1, #0
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f006 fc91 	bl	8009f9c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	881b      	ldrh	r3, [r3, #0]
 8003680:	b29b      	uxth	r3, r3
 8003682:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003686:	2b00      	cmp	r3, #0
 8003688:	f040 82aa 	bne.w	8003be0 <PCD_EP_ISR_Handler+0x75e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	61bb      	str	r3, [r7, #24]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800369a:	b29b      	uxth	r3, r3
 800369c:	461a      	mov	r2, r3
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	4413      	add	r3, r2
 80036a2:	61bb      	str	r3, [r7, #24]
 80036a4:	69bb      	ldr	r3, [r7, #24]
 80036a6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80036aa:	617b      	str	r3, [r7, #20]
 80036ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036ae:	691b      	ldr	r3, [r3, #16]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d112      	bne.n	80036da <PCD_EP_ISR_Handler+0x258>
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	881b      	ldrh	r3, [r3, #0]
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80036be:	b29a      	uxth	r2, r3
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	801a      	strh	r2, [r3, #0]
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	881b      	ldrh	r3, [r3, #0]
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036d2:	b29a      	uxth	r2, r3
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	801a      	strh	r2, [r3, #0]
 80036d8:	e02f      	b.n	800373a <PCD_EP_ISR_Handler+0x2b8>
 80036da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	2b3e      	cmp	r3, #62	; 0x3e
 80036e0:	d813      	bhi.n	800370a <PCD_EP_ISR_Handler+0x288>
 80036e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036e4:	691b      	ldr	r3, [r3, #16]
 80036e6:	085b      	lsrs	r3, r3, #1
 80036e8:	647b      	str	r3, [r7, #68]	; 0x44
 80036ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036ec:	691b      	ldr	r3, [r3, #16]
 80036ee:	f003 0301 	and.w	r3, r3, #1
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d002      	beq.n	80036fc <PCD_EP_ISR_Handler+0x27a>
 80036f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036f8:	3301      	adds	r3, #1
 80036fa:	647b      	str	r3, [r7, #68]	; 0x44
 80036fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036fe:	b29b      	uxth	r3, r3
 8003700:	029b      	lsls	r3, r3, #10
 8003702:	b29a      	uxth	r2, r3
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	801a      	strh	r2, [r3, #0]
 8003708:	e017      	b.n	800373a <PCD_EP_ISR_Handler+0x2b8>
 800370a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800370c:	691b      	ldr	r3, [r3, #16]
 800370e:	095b      	lsrs	r3, r3, #5
 8003710:	647b      	str	r3, [r7, #68]	; 0x44
 8003712:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	f003 031f 	and.w	r3, r3, #31
 800371a:	2b00      	cmp	r3, #0
 800371c:	d102      	bne.n	8003724 <PCD_EP_ISR_Handler+0x2a2>
 800371e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003720:	3b01      	subs	r3, #1
 8003722:	647b      	str	r3, [r7, #68]	; 0x44
 8003724:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003726:	b29b      	uxth	r3, r3
 8003728:	029b      	lsls	r3, r3, #10
 800372a:	b29b      	uxth	r3, r3
 800372c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003730:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003734:	b29a      	uxth	r2, r3
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	881b      	ldrh	r3, [r3, #0]
 8003740:	b29b      	uxth	r3, r3
 8003742:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800374a:	827b      	strh	r3, [r7, #18]
 800374c:	8a7b      	ldrh	r3, [r7, #18]
 800374e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003752:	827b      	strh	r3, [r7, #18]
 8003754:	8a7b      	ldrh	r3, [r7, #18]
 8003756:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800375a:	827b      	strh	r3, [r7, #18]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	8a7b      	ldrh	r3, [r7, #18]
 8003762:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003766:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800376a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800376e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003772:	b29b      	uxth	r3, r3
 8003774:	8013      	strh	r3, [r2, #0]
 8003776:	e233      	b.n	8003be0 <PCD_EP_ISR_Handler+0x75e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	461a      	mov	r2, r3
 800377e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	4413      	add	r3, r2
 8003786:	881b      	ldrh	r3, [r3, #0]
 8003788:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800378c:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8003790:	2b00      	cmp	r3, #0
 8003792:	f280 80fc 	bge.w	800398e <PCD_EP_ISR_Handler+0x50c>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	461a      	mov	r2, r3
 800379c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	4413      	add	r3, r2
 80037a4:	881b      	ldrh	r3, [r3, #0]
 80037a6:	b29a      	uxth	r2, r3
 80037a8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80037ac:	4013      	ands	r3, r2
 80037ae:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	461a      	mov	r2, r3
 80037b8:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	4413      	add	r3, r2
 80037c0:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80037c4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80037c8:	b292      	uxth	r2, r2
 80037ca:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80037cc:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 80037d0:	4613      	mov	r3, r2
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	4413      	add	r3, r2
 80037d6:	00db      	lsls	r3, r3, #3
 80037d8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	4413      	add	r3, r2
 80037e0:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80037e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037e4:	7b1b      	ldrb	r3, [r3, #12]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d125      	bne.n	8003836 <PCD_EP_ISR_Handler+0x3b4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	461a      	mov	r2, r3
 80037f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	00db      	lsls	r3, r3, #3
 80037fc:	4413      	add	r3, r2
 80037fe:	3306      	adds	r3, #6
 8003800:	005b      	lsls	r3, r3, #1
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	6812      	ldr	r2, [r2, #0]
 8003806:	4413      	add	r3, r2
 8003808:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800380c:	881b      	ldrh	r3, [r3, #0]
 800380e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003812:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 8003816:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800381a:	2b00      	cmp	r3, #0
 800381c:	f000 8092 	beq.w	8003944 <PCD_EP_ISR_Handler+0x4c2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6818      	ldr	r0, [r3, #0]
 8003824:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003826:	6959      	ldr	r1, [r3, #20]
 8003828:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800382a:	88da      	ldrh	r2, [r3, #6]
 800382c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003830:	f004 fd97 	bl	8008362 <USB_ReadPMA>
 8003834:	e086      	b.n	8003944 <PCD_EP_ISR_Handler+0x4c2>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003836:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003838:	78db      	ldrb	r3, [r3, #3]
 800383a:	2b02      	cmp	r3, #2
 800383c:	d10a      	bne.n	8003854 <PCD_EP_ISR_Handler+0x3d2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800383e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003842:	461a      	mov	r2, r3
 8003844:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f000 f9d8 	bl	8003bfc <HAL_PCD_EP_DB_Receive>
 800384c:	4603      	mov	r3, r0
 800384e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003852:	e077      	b.n	8003944 <PCD_EP_ISR_Handler+0x4c2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	461a      	mov	r2, r3
 800385a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	4413      	add	r3, r2
 8003862:	881b      	ldrh	r3, [r3, #0]
 8003864:	b29b      	uxth	r3, r3
 8003866:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800386a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800386e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	461a      	mov	r2, r3
 8003878:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	441a      	add	r2, r3
 8003880:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003884:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003888:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800388c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003890:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003894:	b29b      	uxth	r3, r3
 8003896:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	461a      	mov	r2, r3
 800389e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	4413      	add	r3, r2
 80038a6:	881b      	ldrh	r3, [r3, #0]
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d024      	beq.n	80038fc <PCD_EP_ISR_Handler+0x47a>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	461a      	mov	r2, r3
 80038be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038c0:	781b      	ldrb	r3, [r3, #0]
 80038c2:	00db      	lsls	r3, r3, #3
 80038c4:	4413      	add	r3, r2
 80038c6:	3302      	adds	r3, #2
 80038c8:	005b      	lsls	r3, r3, #1
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	6812      	ldr	r2, [r2, #0]
 80038ce:	4413      	add	r3, r2
 80038d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80038d4:	881b      	ldrh	r3, [r3, #0]
 80038d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038da:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 80038de:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d02e      	beq.n	8003944 <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6818      	ldr	r0, [r3, #0]
 80038ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038ec:	6959      	ldr	r1, [r3, #20]
 80038ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038f0:	891a      	ldrh	r2, [r3, #8]
 80038f2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80038f6:	f004 fd34 	bl	8008362 <USB_ReadPMA>
 80038fa:	e023      	b.n	8003944 <PCD_EP_ISR_Handler+0x4c2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003904:	b29b      	uxth	r3, r3
 8003906:	461a      	mov	r2, r3
 8003908:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800390a:	781b      	ldrb	r3, [r3, #0]
 800390c:	00db      	lsls	r3, r3, #3
 800390e:	4413      	add	r3, r2
 8003910:	3306      	adds	r3, #6
 8003912:	005b      	lsls	r3, r3, #1
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	6812      	ldr	r2, [r2, #0]
 8003918:	4413      	add	r3, r2
 800391a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800391e:	881b      	ldrh	r3, [r3, #0]
 8003920:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003924:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8003928:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800392c:	2b00      	cmp	r3, #0
 800392e:	d009      	beq.n	8003944 <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6818      	ldr	r0, [r3, #0]
 8003934:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003936:	6959      	ldr	r1, [r3, #20]
 8003938:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800393a:	895a      	ldrh	r2, [r3, #10]
 800393c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003940:	f004 fd0f 	bl	8008362 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003944:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003946:	69da      	ldr	r2, [r3, #28]
 8003948:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800394c:	441a      	add	r2, r3
 800394e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003950:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003952:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003954:	695a      	ldr	r2, [r3, #20]
 8003956:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800395a:	441a      	add	r2, r3
 800395c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800395e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003960:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003962:	699b      	ldr	r3, [r3, #24]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d005      	beq.n	8003974 <PCD_EP_ISR_Handler+0x4f2>
 8003968:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800396c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800396e:	691b      	ldr	r3, [r3, #16]
 8003970:	429a      	cmp	r2, r3
 8003972:	d206      	bcs.n	8003982 <PCD_EP_ISR_Handler+0x500>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003974:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003976:	781b      	ldrb	r3, [r3, #0]
 8003978:	4619      	mov	r1, r3
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f006 fb0e 	bl	8009f9c <HAL_PCD_DataOutStageCallback>
 8003980:	e005      	b.n	800398e <PCD_EP_ISR_Handler+0x50c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003988:	4618      	mov	r0, r3
 800398a:	f003 faa4 	bl	8006ed6 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800398e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003992:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003996:	2b00      	cmp	r3, #0
 8003998:	f000 8122 	beq.w	8003be0 <PCD_EP_ISR_Handler+0x75e>
      {
        ep = &hpcd->IN_ep[epindex];
 800399c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80039a0:	1c5a      	adds	r2, r3, #1
 80039a2:	4613      	mov	r3, r2
 80039a4:	009b      	lsls	r3, r3, #2
 80039a6:	4413      	add	r3, r2
 80039a8:	00db      	lsls	r3, r3, #3
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	4413      	add	r3, r2
 80039ae:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	461a      	mov	r2, r3
 80039b6:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	4413      	add	r3, r2
 80039be:	881b      	ldrh	r3, [r3, #0]
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80039c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039ca:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	461a      	mov	r2, r3
 80039d4:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	441a      	add	r2, r3
 80039dc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80039e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 80039ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039ee:	78db      	ldrb	r3, [r3, #3]
 80039f0:	2b02      	cmp	r3, #2
 80039f2:	f000 809d 	beq.w	8003b30 <PCD_EP_ISR_Handler+0x6ae>
        {
          ep->xfer_len = 0U;
 80039f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039f8:	2200      	movs	r2, #0
 80039fa:	619a      	str	r2, [r3, #24]

          if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80039fc:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003a00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d046      	beq.n	8003a96 <PCD_EP_ISR_Handler+0x614>
          {
            PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003a08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a0a:	785b      	ldrb	r3, [r3, #1]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d126      	bne.n	8003a5e <PCD_EP_ISR_Handler+0x5dc>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	627b      	str	r3, [r7, #36]	; 0x24
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	461a      	mov	r2, r3
 8003a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a24:	4413      	add	r3, r2
 8003a26:	627b      	str	r3, [r7, #36]	; 0x24
 8003a28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a2a:	781b      	ldrb	r3, [r3, #0]
 8003a2c:	011a      	lsls	r2, r3, #4
 8003a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a30:	4413      	add	r3, r2
 8003a32:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003a36:	623b      	str	r3, [r7, #32]
 8003a38:	6a3b      	ldr	r3, [r7, #32]
 8003a3a:	881b      	ldrh	r3, [r3, #0]
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003a42:	b29a      	uxth	r2, r3
 8003a44:	6a3b      	ldr	r3, [r7, #32]
 8003a46:	801a      	strh	r2, [r3, #0]
 8003a48:	6a3b      	ldr	r3, [r7, #32]
 8003a4a:	881b      	ldrh	r3, [r3, #0]
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a56:	b29a      	uxth	r2, r3
 8003a58:	6a3b      	ldr	r3, [r7, #32]
 8003a5a:	801a      	strh	r2, [r3, #0]
 8003a5c:	e061      	b.n	8003b22 <PCD_EP_ISR_Handler+0x6a0>
 8003a5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a60:	785b      	ldrb	r3, [r3, #1]
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d15d      	bne.n	8003b22 <PCD_EP_ISR_Handler+0x6a0>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	461a      	mov	r2, r3
 8003a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a7a:	4413      	add	r3, r2
 8003a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a80:	781b      	ldrb	r3, [r3, #0]
 8003a82:	011a      	lsls	r2, r3, #4
 8003a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a86:	4413      	add	r3, r2
 8003a88:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003a8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a90:	2200      	movs	r2, #0
 8003a92:	801a      	strh	r2, [r3, #0]
 8003a94:	e045      	b.n	8003b22 <PCD_EP_ISR_Handler+0x6a0>
          }
          else
          {
            PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a9e:	785b      	ldrb	r3, [r3, #1]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d126      	bne.n	8003af2 <PCD_EP_ISR_Handler+0x670>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	637b      	str	r3, [r7, #52]	; 0x34
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ab8:	4413      	add	r3, r2
 8003aba:	637b      	str	r3, [r7, #52]	; 0x34
 8003abc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003abe:	781b      	ldrb	r3, [r3, #0]
 8003ac0:	011a      	lsls	r2, r3, #4
 8003ac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ac4:	4413      	add	r3, r2
 8003ac6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003aca:	633b      	str	r3, [r7, #48]	; 0x30
 8003acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ace:	881b      	ldrh	r3, [r3, #0]
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003ad6:	b29a      	uxth	r2, r3
 8003ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ada:	801a      	strh	r2, [r3, #0]
 8003adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ade:	881b      	ldrh	r3, [r3, #0]
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ae6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003aea:	b29a      	uxth	r2, r3
 8003aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aee:	801a      	strh	r2, [r3, #0]
 8003af0:	e017      	b.n	8003b22 <PCD_EP_ISR_Handler+0x6a0>
 8003af2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003af4:	785b      	ldrb	r3, [r3, #1]
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d113      	bne.n	8003b22 <PCD_EP_ISR_Handler+0x6a0>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	461a      	mov	r2, r3
 8003b06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b08:	4413      	add	r3, r2
 8003b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	011a      	lsls	r2, r3, #4
 8003b12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b14:	4413      	add	r3, r2
 8003b16:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003b1a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b1e:	2200      	movs	r2, #0
 8003b20:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003b22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b24:	781b      	ldrb	r3, [r3, #0]
 8003b26:	4619      	mov	r1, r3
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f006 fa52 	bl	8009fd2 <HAL_PCD_DataInStageCallback>
 8003b2e:	e057      	b.n	8003be0 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        /* Manage Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U))
 8003b30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b32:	78db      	ldrb	r3, [r3, #3]
 8003b34:	2b02      	cmp	r3, #2
 8003b36:	d14c      	bne.n	8003bd2 <PCD_EP_ISR_Handler+0x750>
 8003b38:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003b3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d146      	bne.n	8003bd2 <PCD_EP_ISR_Handler+0x750>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	461a      	mov	r2, r3
 8003b50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b52:	781b      	ldrb	r3, [r3, #0]
 8003b54:	00db      	lsls	r3, r3, #3
 8003b56:	4413      	add	r3, r2
 8003b58:	3302      	adds	r3, #2
 8003b5a:	005b      	lsls	r3, r3, #1
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	6812      	ldr	r2, [r2, #0]
 8003b60:	4413      	add	r3, r2
 8003b62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b66:	881b      	ldrh	r3, [r3, #0]
 8003b68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b6c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

          if (ep->xfer_len > TxByteNbre)
 8003b70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b72:	699a      	ldr	r2, [r3, #24]
 8003b74:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d907      	bls.n	8003b8c <PCD_EP_ISR_Handler+0x70a>
          {
            ep->xfer_len -= TxByteNbre;
 8003b7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b7e:	699a      	ldr	r2, [r3, #24]
 8003b80:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003b84:	1ad2      	subs	r2, r2, r3
 8003b86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b88:	619a      	str	r2, [r3, #24]
 8003b8a:	e002      	b.n	8003b92 <PCD_EP_ISR_Handler+0x710>
          }
          else
          {
            ep->xfer_len = 0U;
 8003b8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b8e:	2200      	movs	r2, #0
 8003b90:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8003b92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b94:	699b      	ldr	r3, [r3, #24]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d106      	bne.n	8003ba8 <PCD_EP_ISR_Handler+0x726>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003b9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b9c:	781b      	ldrb	r3, [r3, #0]
 8003b9e:	4619      	mov	r1, r3
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f006 fa16 	bl	8009fd2 <HAL_PCD_DataInStageCallback>
 8003ba6:	e01b      	b.n	8003be0 <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8003ba8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003baa:	695a      	ldr	r2, [r3, #20]
 8003bac:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003bb0:	441a      	add	r2, r3
 8003bb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bb4:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8003bb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bb8:	69da      	ldr	r2, [r3, #28]
 8003bba:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003bbe:	441a      	add	r2, r3
 8003bc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bc2:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f003 f983 	bl	8006ed6 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8003bd0:	e006      	b.n	8003be0 <PCD_EP_ISR_Handler+0x75e>
          }
        }
        /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003bd2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f000 f91b 	bl	8003e16 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	b21b      	sxth	r3, r3
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	f6ff ac4d 	blt.w	800348c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003bf2:	2300      	movs	r3, #0
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3758      	adds	r7, #88	; 0x58
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}

08003bfc <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b088      	sub	sp, #32
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	60f8      	str	r0, [r7, #12]
 8003c04:	60b9      	str	r1, [r7, #8]
 8003c06:	4613      	mov	r3, r2
 8003c08:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003c0a:	88fb      	ldrh	r3, [r7, #6]
 8003c0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d07e      	beq.n	8003d12 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	461a      	mov	r2, r3
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	00db      	lsls	r3, r3, #3
 8003c26:	4413      	add	r3, r2
 8003c28:	3302      	adds	r3, #2
 8003c2a:	005b      	lsls	r3, r3, #1
 8003c2c:	68fa      	ldr	r2, [r7, #12]
 8003c2e:	6812      	ldr	r2, [r2, #0]
 8003c30:	4413      	add	r3, r2
 8003c32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c36:	881b      	ldrh	r3, [r3, #0]
 8003c38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c3c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	699a      	ldr	r2, [r3, #24]
 8003c42:	8b7b      	ldrh	r3, [r7, #26]
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d306      	bcc.n	8003c56 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	699a      	ldr	r2, [r3, #24]
 8003c4c:	8b7b      	ldrh	r3, [r7, #26]
 8003c4e:	1ad2      	subs	r2, r2, r3
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	619a      	str	r2, [r3, #24]
 8003c54:	e002      	b.n	8003c5c <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	699b      	ldr	r3, [r3, #24]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d123      	bne.n	8003cac <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	461a      	mov	r2, r3
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	781b      	ldrb	r3, [r3, #0]
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	4413      	add	r3, r2
 8003c72:	881b      	ldrh	r3, [r3, #0]
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c7e:	833b      	strh	r3, [r7, #24]
 8003c80:	8b3b      	ldrh	r3, [r7, #24]
 8003c82:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003c86:	833b      	strh	r3, [r7, #24]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	781b      	ldrb	r3, [r3, #0]
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	441a      	add	r2, r3
 8003c96:	8b3b      	ldrh	r3, [r7, #24]
 8003c98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ca0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ca4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003cac:	88fb      	ldrh	r3, [r7, #6]
 8003cae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d01f      	beq.n	8003cf6 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	461a      	mov	r2, r3
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	781b      	ldrb	r3, [r3, #0]
 8003cc0:	009b      	lsls	r3, r3, #2
 8003cc2:	4413      	add	r3, r2
 8003cc4:	881b      	ldrh	r3, [r3, #0]
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ccc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cd0:	82fb      	strh	r3, [r7, #22]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	781b      	ldrb	r3, [r3, #0]
 8003cdc:	009b      	lsls	r3, r3, #2
 8003cde:	441a      	add	r2, r3
 8003ce0:	8afb      	ldrh	r3, [r7, #22]
 8003ce2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ce6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003cf6:	8b7b      	ldrh	r3, [r7, #26]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	f000 8087 	beq.w	8003e0c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6818      	ldr	r0, [r3, #0]
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	6959      	ldr	r1, [r3, #20]
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	891a      	ldrh	r2, [r3, #8]
 8003d0a:	8b7b      	ldrh	r3, [r7, #26]
 8003d0c:	f004 fb29 	bl	8008362 <USB_ReadPMA>
 8003d10:	e07c      	b.n	8003e0c <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	781b      	ldrb	r3, [r3, #0]
 8003d22:	00db      	lsls	r3, r3, #3
 8003d24:	4413      	add	r3, r2
 8003d26:	3306      	adds	r3, #6
 8003d28:	005b      	lsls	r3, r3, #1
 8003d2a:	68fa      	ldr	r2, [r7, #12]
 8003d2c:	6812      	ldr	r2, [r2, #0]
 8003d2e:	4413      	add	r3, r2
 8003d30:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d34:	881b      	ldrh	r3, [r3, #0]
 8003d36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d3a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	699a      	ldr	r2, [r3, #24]
 8003d40:	8b7b      	ldrh	r3, [r7, #26]
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d306      	bcc.n	8003d54 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	699a      	ldr	r2, [r3, #24]
 8003d4a:	8b7b      	ldrh	r3, [r7, #26]
 8003d4c:	1ad2      	subs	r2, r2, r3
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	619a      	str	r2, [r3, #24]
 8003d52:	e002      	b.n	8003d5a <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	2200      	movs	r2, #0
 8003d58:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	699b      	ldr	r3, [r3, #24]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d123      	bne.n	8003daa <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	461a      	mov	r2, r3
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	781b      	ldrb	r3, [r3, #0]
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	4413      	add	r3, r2
 8003d70:	881b      	ldrh	r3, [r3, #0]
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d7c:	83fb      	strh	r3, [r7, #30]
 8003d7e:	8bfb      	ldrh	r3, [r7, #30]
 8003d80:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003d84:	83fb      	strh	r3, [r7, #30]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	781b      	ldrb	r3, [r3, #0]
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	441a      	add	r2, r3
 8003d94:	8bfb      	ldrh	r3, [r7, #30]
 8003d96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003da2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003daa:	88fb      	ldrh	r3, [r7, #6]
 8003dac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d11f      	bne.n	8003df4 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	461a      	mov	r2, r3
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	781b      	ldrb	r3, [r3, #0]
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	4413      	add	r3, r2
 8003dc2:	881b      	ldrh	r3, [r3, #0]
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003dca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dce:	83bb      	strh	r3, [r7, #28]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	781b      	ldrb	r3, [r3, #0]
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	441a      	add	r2, r3
 8003dde:	8bbb      	ldrh	r3, [r7, #28]
 8003de0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003de4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003de8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003df4:	8b7b      	ldrh	r3, [r7, #26]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d008      	beq.n	8003e0c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	6818      	ldr	r0, [r3, #0]
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	6959      	ldr	r1, [r3, #20]
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	895a      	ldrh	r2, [r3, #10]
 8003e06:	8b7b      	ldrh	r3, [r7, #26]
 8003e08:	f004 faab 	bl	8008362 <USB_ReadPMA>
    }
  }

  return count;
 8003e0c:	8b7b      	ldrh	r3, [r7, #26]
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3720      	adds	r7, #32
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}

08003e16 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003e16:	b580      	push	{r7, lr}
 8003e18:	b0a2      	sub	sp, #136	; 0x88
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	60f8      	str	r0, [r7, #12]
 8003e1e:	60b9      	str	r1, [r7, #8]
 8003e20:	4613      	mov	r3, r2
 8003e22:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003e24:	88fb      	ldrh	r3, [r7, #6]
 8003e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	f000 81c7 	beq.w	80041be <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	00db      	lsls	r3, r3, #3
 8003e42:	4413      	add	r3, r2
 8003e44:	3302      	adds	r3, #2
 8003e46:	005b      	lsls	r3, r3, #1
 8003e48:	68fa      	ldr	r2, [r7, #12]
 8003e4a:	6812      	ldr	r2, [r2, #0]
 8003e4c:	4413      	add	r3, r2
 8003e4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e52:	881b      	ldrh	r3, [r3, #0]
 8003e54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e58:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	699a      	ldr	r2, [r3, #24]
 8003e60:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d907      	bls.n	8003e78 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	699a      	ldr	r2, [r3, #24]
 8003e6c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003e70:	1ad2      	subs	r2, r2, r3
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	619a      	str	r2, [r3, #24]
 8003e76:	e002      	b.n	8003e7e <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	699b      	ldr	r3, [r3, #24]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	f040 80b9 	bne.w	8003ffa <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	785b      	ldrb	r3, [r3, #1]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d126      	bne.n	8003ede <HAL_PCD_EP_DB_Transmit+0xc8>
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e9e:	b29b      	uxth	r3, r3
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ea4:	4413      	add	r3, r2
 8003ea6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	781b      	ldrb	r3, [r3, #0]
 8003eac:	011a      	lsls	r2, r3, #4
 8003eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eb0:	4413      	add	r3, r2
 8003eb2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003eb6:	627b      	str	r3, [r7, #36]	; 0x24
 8003eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eba:	881b      	ldrh	r3, [r3, #0]
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003ec2:	b29a      	uxth	r2, r3
 8003ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec6:	801a      	strh	r2, [r3, #0]
 8003ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eca:	881b      	ldrh	r3, [r3, #0]
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ed2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ed6:	b29a      	uxth	r2, r3
 8003ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eda:	801a      	strh	r2, [r3, #0]
 8003edc:	e01a      	b.n	8003f14 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	785b      	ldrb	r3, [r3, #1]
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d116      	bne.n	8003f14 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	633b      	str	r3, [r7, #48]	; 0x30
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003efa:	4413      	add	r3, r2
 8003efc:	633b      	str	r3, [r7, #48]	; 0x30
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	781b      	ldrb	r3, [r3, #0]
 8003f02:	011a      	lsls	r2, r3, #4
 8003f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f06:	4413      	add	r3, r2
 8003f08:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f10:	2200      	movs	r2, #0
 8003f12:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	623b      	str	r3, [r7, #32]
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	785b      	ldrb	r3, [r3, #1]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d126      	bne.n	8003f70 <HAL_PCD_EP_DB_Transmit+0x15a>
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	61bb      	str	r3, [r7, #24]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	461a      	mov	r2, r3
 8003f34:	69bb      	ldr	r3, [r7, #24]
 8003f36:	4413      	add	r3, r2
 8003f38:	61bb      	str	r3, [r7, #24]
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	781b      	ldrb	r3, [r3, #0]
 8003f3e:	011a      	lsls	r2, r3, #4
 8003f40:	69bb      	ldr	r3, [r7, #24]
 8003f42:	4413      	add	r3, r2
 8003f44:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003f48:	617b      	str	r3, [r7, #20]
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	881b      	ldrh	r3, [r3, #0]
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003f54:	b29a      	uxth	r2, r3
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	801a      	strh	r2, [r3, #0]
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	881b      	ldrh	r3, [r3, #0]
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f68:	b29a      	uxth	r2, r3
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	801a      	strh	r2, [r3, #0]
 8003f6e:	e017      	b.n	8003fa0 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	785b      	ldrb	r3, [r3, #1]
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d113      	bne.n	8003fa0 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	461a      	mov	r2, r3
 8003f84:	6a3b      	ldr	r3, [r7, #32]
 8003f86:	4413      	add	r3, r2
 8003f88:	623b      	str	r3, [r7, #32]
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	781b      	ldrb	r3, [r3, #0]
 8003f8e:	011a      	lsls	r2, r3, #4
 8003f90:	6a3b      	ldr	r3, [r7, #32]
 8003f92:	4413      	add	r3, r2
 8003f94:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003f98:	61fb      	str	r3, [r7, #28]
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	781b      	ldrb	r3, [r3, #0]
 8003fa4:	4619      	mov	r1, r3
 8003fa6:	68f8      	ldr	r0, [r7, #12]
 8003fa8:	f006 f813 	bl	8009fd2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003fac:	88fb      	ldrh	r3, [r7, #6]
 8003fae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	f000 82d4 	beq.w	8004560 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	781b      	ldrb	r3, [r3, #0]
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	4413      	add	r3, r2
 8003fc6:	881b      	ldrh	r3, [r3, #0]
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fd2:	827b      	strh	r3, [r7, #18]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	461a      	mov	r2, r3
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	781b      	ldrb	r3, [r3, #0]
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	441a      	add	r2, r3
 8003fe2:	8a7b      	ldrh	r3, [r7, #18]
 8003fe4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fe8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ff0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	8013      	strh	r3, [r2, #0]
 8003ff8:	e2b2      	b.n	8004560 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003ffa:	88fb      	ldrh	r3, [r7, #6]
 8003ffc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004000:	2b00      	cmp	r3, #0
 8004002:	d021      	beq.n	8004048 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	461a      	mov	r2, r3
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	781b      	ldrb	r3, [r3, #0]
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	4413      	add	r3, r2
 8004012:	881b      	ldrh	r3, [r3, #0]
 8004014:	b29b      	uxth	r3, r3
 8004016:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800401a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800401e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	461a      	mov	r2, r3
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	781b      	ldrb	r3, [r3, #0]
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	441a      	add	r2, r3
 8004030:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004034:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004038:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800403c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004040:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004044:	b29b      	uxth	r3, r3
 8004046:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800404e:	2b01      	cmp	r3, #1
 8004050:	f040 8286 	bne.w	8004560 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	695a      	ldr	r2, [r3, #20]
 8004058:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800405c:	441a      	add	r2, r3
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	69da      	ldr	r2, [r3, #28]
 8004066:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800406a:	441a      	add	r2, r3
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	6a1a      	ldr	r2, [r3, #32]
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	691b      	ldr	r3, [r3, #16]
 8004078:	429a      	cmp	r2, r3
 800407a:	d309      	bcc.n	8004090 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	691b      	ldr	r3, [r3, #16]
 8004080:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	6a1a      	ldr	r2, [r3, #32]
 8004086:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004088:	1ad2      	subs	r2, r2, r3
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	621a      	str	r2, [r3, #32]
 800408e:	e015      	b.n	80040bc <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	6a1b      	ldr	r3, [r3, #32]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d107      	bne.n	80040a8 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8004098:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800409c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80040a6:	e009      	b.n	80040bc <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	2200      	movs	r2, #0
 80040ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	6a1b      	ldr	r3, [r3, #32]
 80040b4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	2200      	movs	r2, #0
 80040ba:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	785b      	ldrb	r3, [r3, #1]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d155      	bne.n	8004170 <HAL_PCD_EP_DB_Transmit+0x35a>
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	461a      	mov	r2, r3
 80040d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040d8:	4413      	add	r3, r2
 80040da:	63bb      	str	r3, [r7, #56]	; 0x38
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	781b      	ldrb	r3, [r3, #0]
 80040e0:	011a      	lsls	r2, r3, #4
 80040e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040e4:	4413      	add	r3, r2
 80040e6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80040ea:	637b      	str	r3, [r7, #52]	; 0x34
 80040ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d112      	bne.n	8004118 <HAL_PCD_EP_DB_Transmit+0x302>
 80040f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040f4:	881b      	ldrh	r3, [r3, #0]
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80040fc:	b29a      	uxth	r2, r3
 80040fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004100:	801a      	strh	r2, [r3, #0]
 8004102:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004104:	881b      	ldrh	r3, [r3, #0]
 8004106:	b29b      	uxth	r3, r3
 8004108:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800410c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004110:	b29a      	uxth	r2, r3
 8004112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004114:	801a      	strh	r2, [r3, #0]
 8004116:	e047      	b.n	80041a8 <HAL_PCD_EP_DB_Transmit+0x392>
 8004118:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800411a:	2b3e      	cmp	r3, #62	; 0x3e
 800411c:	d811      	bhi.n	8004142 <HAL_PCD_EP_DB_Transmit+0x32c>
 800411e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004120:	085b      	lsrs	r3, r3, #1
 8004122:	64bb      	str	r3, [r7, #72]	; 0x48
 8004124:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004126:	f003 0301 	and.w	r3, r3, #1
 800412a:	2b00      	cmp	r3, #0
 800412c:	d002      	beq.n	8004134 <HAL_PCD_EP_DB_Transmit+0x31e>
 800412e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004130:	3301      	adds	r3, #1
 8004132:	64bb      	str	r3, [r7, #72]	; 0x48
 8004134:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004136:	b29b      	uxth	r3, r3
 8004138:	029b      	lsls	r3, r3, #10
 800413a:	b29a      	uxth	r2, r3
 800413c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800413e:	801a      	strh	r2, [r3, #0]
 8004140:	e032      	b.n	80041a8 <HAL_PCD_EP_DB_Transmit+0x392>
 8004142:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004144:	095b      	lsrs	r3, r3, #5
 8004146:	64bb      	str	r3, [r7, #72]	; 0x48
 8004148:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800414a:	f003 031f 	and.w	r3, r3, #31
 800414e:	2b00      	cmp	r3, #0
 8004150:	d102      	bne.n	8004158 <HAL_PCD_EP_DB_Transmit+0x342>
 8004152:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004154:	3b01      	subs	r3, #1
 8004156:	64bb      	str	r3, [r7, #72]	; 0x48
 8004158:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800415a:	b29b      	uxth	r3, r3
 800415c:	029b      	lsls	r3, r3, #10
 800415e:	b29b      	uxth	r3, r3
 8004160:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004164:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004168:	b29a      	uxth	r2, r3
 800416a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800416c:	801a      	strh	r2, [r3, #0]
 800416e:	e01b      	b.n	80041a8 <HAL_PCD_EP_DB_Transmit+0x392>
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	785b      	ldrb	r3, [r3, #1]
 8004174:	2b01      	cmp	r3, #1
 8004176:	d117      	bne.n	80041a8 <HAL_PCD_EP_DB_Transmit+0x392>
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	643b      	str	r3, [r7, #64]	; 0x40
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004186:	b29b      	uxth	r3, r3
 8004188:	461a      	mov	r2, r3
 800418a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800418c:	4413      	add	r3, r2
 800418e:	643b      	str	r3, [r7, #64]	; 0x40
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	011a      	lsls	r2, r3, #4
 8004196:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004198:	4413      	add	r3, r2
 800419a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800419e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041a2:	b29a      	uxth	r2, r3
 80041a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041a6:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6818      	ldr	r0, [r3, #0]
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	6959      	ldr	r1, [r3, #20]
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	891a      	ldrh	r2, [r3, #8]
 80041b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	f004 f88d 	bl	80082d6 <USB_WritePMA>
 80041bc:	e1d0      	b.n	8004560 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	461a      	mov	r2, r3
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	00db      	lsls	r3, r3, #3
 80041d0:	4413      	add	r3, r2
 80041d2:	3306      	adds	r3, #6
 80041d4:	005b      	lsls	r3, r3, #1
 80041d6:	68fa      	ldr	r2, [r7, #12]
 80041d8:	6812      	ldr	r2, [r2, #0]
 80041da:	4413      	add	r3, r2
 80041dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80041e0:	881b      	ldrh	r3, [r3, #0]
 80041e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041e6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	699a      	ldr	r2, [r3, #24]
 80041ee:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d307      	bcc.n	8004206 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	699a      	ldr	r2, [r3, #24]
 80041fa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80041fe:	1ad2      	subs	r2, r2, r3
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	619a      	str	r2, [r3, #24]
 8004204:	e002      	b.n	800420c <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	2200      	movs	r2, #0
 800420a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	699b      	ldr	r3, [r3, #24]
 8004210:	2b00      	cmp	r3, #0
 8004212:	f040 80c4 	bne.w	800439e <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	785b      	ldrb	r3, [r3, #1]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d126      	bne.n	800426c <HAL_PCD_EP_DB_Transmit+0x456>
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800422c:	b29b      	uxth	r3, r3
 800422e:	461a      	mov	r2, r3
 8004230:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004232:	4413      	add	r3, r2
 8004234:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	781b      	ldrb	r3, [r3, #0]
 800423a:	011a      	lsls	r2, r3, #4
 800423c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800423e:	4413      	add	r3, r2
 8004240:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004244:	66bb      	str	r3, [r7, #104]	; 0x68
 8004246:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004248:	881b      	ldrh	r3, [r3, #0]
 800424a:	b29b      	uxth	r3, r3
 800424c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004250:	b29a      	uxth	r2, r3
 8004252:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004254:	801a      	strh	r2, [r3, #0]
 8004256:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004258:	881b      	ldrh	r3, [r3, #0]
 800425a:	b29b      	uxth	r3, r3
 800425c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004260:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004264:	b29a      	uxth	r2, r3
 8004266:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004268:	801a      	strh	r2, [r3, #0]
 800426a:	e01a      	b.n	80042a2 <HAL_PCD_EP_DB_Transmit+0x48c>
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	785b      	ldrb	r3, [r3, #1]
 8004270:	2b01      	cmp	r3, #1
 8004272:	d116      	bne.n	80042a2 <HAL_PCD_EP_DB_Transmit+0x48c>
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	677b      	str	r3, [r7, #116]	; 0x74
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004282:	b29b      	uxth	r3, r3
 8004284:	461a      	mov	r2, r3
 8004286:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004288:	4413      	add	r3, r2
 800428a:	677b      	str	r3, [r7, #116]	; 0x74
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	011a      	lsls	r2, r3, #4
 8004292:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004294:	4413      	add	r3, r2
 8004296:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800429a:	673b      	str	r3, [r7, #112]	; 0x70
 800429c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800429e:	2200      	movs	r2, #0
 80042a0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	67bb      	str	r3, [r7, #120]	; 0x78
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	785b      	ldrb	r3, [r3, #1]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d12f      	bne.n	8004310 <HAL_PCD_EP_DB_Transmit+0x4fa>
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	461a      	mov	r2, r3
 80042c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80042c8:	4413      	add	r3, r2
 80042ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	781b      	ldrb	r3, [r3, #0]
 80042d2:	011a      	lsls	r2, r3, #4
 80042d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80042d8:	4413      	add	r3, r2
 80042da:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80042de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80042e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80042e6:	881b      	ldrh	r3, [r3, #0]
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80042ee:	b29a      	uxth	r2, r3
 80042f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80042f4:	801a      	strh	r2, [r3, #0]
 80042f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80042fa:	881b      	ldrh	r3, [r3, #0]
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004302:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004306:	b29a      	uxth	r2, r3
 8004308:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800430c:	801a      	strh	r2, [r3, #0]
 800430e:	e017      	b.n	8004340 <HAL_PCD_EP_DB_Transmit+0x52a>
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	785b      	ldrb	r3, [r3, #1]
 8004314:	2b01      	cmp	r3, #1
 8004316:	d113      	bne.n	8004340 <HAL_PCD_EP_DB_Transmit+0x52a>
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004320:	b29b      	uxth	r3, r3
 8004322:	461a      	mov	r2, r3
 8004324:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004326:	4413      	add	r3, r2
 8004328:	67bb      	str	r3, [r7, #120]	; 0x78
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	781b      	ldrb	r3, [r3, #0]
 800432e:	011a      	lsls	r2, r3, #4
 8004330:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004332:	4413      	add	r3, r2
 8004334:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004338:	67fb      	str	r3, [r7, #124]	; 0x7c
 800433a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800433c:	2200      	movs	r2, #0
 800433e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	781b      	ldrb	r3, [r3, #0]
 8004344:	4619      	mov	r1, r3
 8004346:	68f8      	ldr	r0, [r7, #12]
 8004348:	f005 fe43 	bl	8009fd2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800434c:	88fb      	ldrh	r3, [r7, #6]
 800434e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004352:	2b00      	cmp	r3, #0
 8004354:	f040 8104 	bne.w	8004560 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	461a      	mov	r2, r3
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	781b      	ldrb	r3, [r3, #0]
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	4413      	add	r3, r2
 8004366:	881b      	ldrh	r3, [r3, #0]
 8004368:	b29b      	uxth	r3, r3
 800436a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800436e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004372:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	461a      	mov	r2, r3
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	009b      	lsls	r3, r3, #2
 8004382:	441a      	add	r2, r3
 8004384:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004388:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800438c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004390:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004394:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004398:	b29b      	uxth	r3, r3
 800439a:	8013      	strh	r3, [r2, #0]
 800439c:	e0e0      	b.n	8004560 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800439e:	88fb      	ldrh	r3, [r7, #6]
 80043a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d121      	bne.n	80043ec <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	461a      	mov	r2, r3
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	781b      	ldrb	r3, [r3, #0]
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	4413      	add	r3, r2
 80043b6:	881b      	ldrh	r3, [r3, #0]
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043c2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	461a      	mov	r2, r3
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	441a      	add	r2, r3
 80043d4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80043d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80043e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	f040 80b4 	bne.w	8004560 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	695a      	ldr	r2, [r3, #20]
 80043fc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004400:	441a      	add	r2, r3
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	69da      	ldr	r2, [r3, #28]
 800440a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800440e:	441a      	add	r2, r3
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	6a1a      	ldr	r2, [r3, #32]
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	691b      	ldr	r3, [r3, #16]
 800441c:	429a      	cmp	r2, r3
 800441e:	d309      	bcc.n	8004434 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	691b      	ldr	r3, [r3, #16]
 8004424:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	6a1a      	ldr	r2, [r3, #32]
 800442a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800442c:	1ad2      	subs	r2, r2, r3
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	621a      	str	r2, [r3, #32]
 8004432:	e015      	b.n	8004460 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	6a1b      	ldr	r3, [r3, #32]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d107      	bne.n	800444c <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 800443c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004440:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	2200      	movs	r2, #0
 8004446:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800444a:	e009      	b.n	8004460 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	6a1b      	ldr	r3, [r3, #32]
 8004450:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	2200      	movs	r2, #0
 8004456:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	2200      	movs	r2, #0
 800445c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	667b      	str	r3, [r7, #100]	; 0x64
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	785b      	ldrb	r3, [r3, #1]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d155      	bne.n	800451a <HAL_PCD_EP_DB_Transmit+0x704>
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800447c:	b29b      	uxth	r3, r3
 800447e:	461a      	mov	r2, r3
 8004480:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004482:	4413      	add	r3, r2
 8004484:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	781b      	ldrb	r3, [r3, #0]
 800448a:	011a      	lsls	r2, r3, #4
 800448c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800448e:	4413      	add	r3, r2
 8004490:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004494:	65bb      	str	r3, [r7, #88]	; 0x58
 8004496:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004498:	2b00      	cmp	r3, #0
 800449a:	d112      	bne.n	80044c2 <HAL_PCD_EP_DB_Transmit+0x6ac>
 800449c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800449e:	881b      	ldrh	r3, [r3, #0]
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80044a6:	b29a      	uxth	r2, r3
 80044a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044aa:	801a      	strh	r2, [r3, #0]
 80044ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044ae:	881b      	ldrh	r3, [r3, #0]
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044ba:	b29a      	uxth	r2, r3
 80044bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044be:	801a      	strh	r2, [r3, #0]
 80044c0:	e044      	b.n	800454c <HAL_PCD_EP_DB_Transmit+0x736>
 80044c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044c4:	2b3e      	cmp	r3, #62	; 0x3e
 80044c6:	d811      	bhi.n	80044ec <HAL_PCD_EP_DB_Transmit+0x6d6>
 80044c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044ca:	085b      	lsrs	r3, r3, #1
 80044cc:	657b      	str	r3, [r7, #84]	; 0x54
 80044ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044d0:	f003 0301 	and.w	r3, r3, #1
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d002      	beq.n	80044de <HAL_PCD_EP_DB_Transmit+0x6c8>
 80044d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044da:	3301      	adds	r3, #1
 80044dc:	657b      	str	r3, [r7, #84]	; 0x54
 80044de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	029b      	lsls	r3, r3, #10
 80044e4:	b29a      	uxth	r2, r3
 80044e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044e8:	801a      	strh	r2, [r3, #0]
 80044ea:	e02f      	b.n	800454c <HAL_PCD_EP_DB_Transmit+0x736>
 80044ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044ee:	095b      	lsrs	r3, r3, #5
 80044f0:	657b      	str	r3, [r7, #84]	; 0x54
 80044f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044f4:	f003 031f 	and.w	r3, r3, #31
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d102      	bne.n	8004502 <HAL_PCD_EP_DB_Transmit+0x6ec>
 80044fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044fe:	3b01      	subs	r3, #1
 8004500:	657b      	str	r3, [r7, #84]	; 0x54
 8004502:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004504:	b29b      	uxth	r3, r3
 8004506:	029b      	lsls	r3, r3, #10
 8004508:	b29b      	uxth	r3, r3
 800450a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800450e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004512:	b29a      	uxth	r2, r3
 8004514:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004516:	801a      	strh	r2, [r3, #0]
 8004518:	e018      	b.n	800454c <HAL_PCD_EP_DB_Transmit+0x736>
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	785b      	ldrb	r3, [r3, #1]
 800451e:	2b01      	cmp	r3, #1
 8004520:	d114      	bne.n	800454c <HAL_PCD_EP_DB_Transmit+0x736>
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800452a:	b29b      	uxth	r3, r3
 800452c:	461a      	mov	r2, r3
 800452e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004530:	4413      	add	r3, r2
 8004532:	667b      	str	r3, [r7, #100]	; 0x64
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	781b      	ldrb	r3, [r3, #0]
 8004538:	011a      	lsls	r2, r3, #4
 800453a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800453c:	4413      	add	r3, r2
 800453e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004542:	663b      	str	r3, [r7, #96]	; 0x60
 8004544:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004546:	b29a      	uxth	r2, r3
 8004548:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800454a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	6818      	ldr	r0, [r3, #0]
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	6959      	ldr	r1, [r3, #20]
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	895a      	ldrh	r2, [r3, #10]
 8004558:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800455a:	b29b      	uxth	r3, r3
 800455c:	f003 febb 	bl	80082d6 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	461a      	mov	r2, r3
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	781b      	ldrb	r3, [r3, #0]
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	4413      	add	r3, r2
 800456e:	881b      	ldrh	r3, [r3, #0]
 8004570:	b29b      	uxth	r3, r3
 8004572:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004576:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800457a:	823b      	strh	r3, [r7, #16]
 800457c:	8a3b      	ldrh	r3, [r7, #16]
 800457e:	f083 0310 	eor.w	r3, r3, #16
 8004582:	823b      	strh	r3, [r7, #16]
 8004584:	8a3b      	ldrh	r3, [r7, #16]
 8004586:	f083 0320 	eor.w	r3, r3, #32
 800458a:	823b      	strh	r3, [r7, #16]
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	461a      	mov	r2, r3
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	781b      	ldrb	r3, [r3, #0]
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	441a      	add	r2, r3
 800459a:	8a3b      	ldrh	r3, [r7, #16]
 800459c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80045b0:	2300      	movs	r3, #0
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3788      	adds	r7, #136	; 0x88
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}

080045ba <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80045ba:	b480      	push	{r7}
 80045bc:	b087      	sub	sp, #28
 80045be:	af00      	add	r7, sp, #0
 80045c0:	60f8      	str	r0, [r7, #12]
 80045c2:	607b      	str	r3, [r7, #4]
 80045c4:	460b      	mov	r3, r1
 80045c6:	817b      	strh	r3, [r7, #10]
 80045c8:	4613      	mov	r3, r2
 80045ca:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80045cc:	897b      	ldrh	r3, [r7, #10]
 80045ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d00b      	beq.n	80045f0 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045d8:	897b      	ldrh	r3, [r7, #10]
 80045da:	f003 0307 	and.w	r3, r3, #7
 80045de:	1c5a      	adds	r2, r3, #1
 80045e0:	4613      	mov	r3, r2
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	4413      	add	r3, r2
 80045e6:	00db      	lsls	r3, r3, #3
 80045e8:	68fa      	ldr	r2, [r7, #12]
 80045ea:	4413      	add	r3, r2
 80045ec:	617b      	str	r3, [r7, #20]
 80045ee:	e009      	b.n	8004604 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80045f0:	897a      	ldrh	r2, [r7, #10]
 80045f2:	4613      	mov	r3, r2
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	4413      	add	r3, r2
 80045f8:	00db      	lsls	r3, r3, #3
 80045fa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80045fe:	68fa      	ldr	r2, [r7, #12]
 8004600:	4413      	add	r3, r2
 8004602:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004604:	893b      	ldrh	r3, [r7, #8]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d107      	bne.n	800461a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	2200      	movs	r2, #0
 800460e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	b29a      	uxth	r2, r3
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	80da      	strh	r2, [r3, #6]
 8004618:	e00b      	b.n	8004632 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	2201      	movs	r2, #1
 800461e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	b29a      	uxth	r2, r3
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	0c1b      	lsrs	r3, r3, #16
 800462c:	b29a      	uxth	r2, r3
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8004632:	2300      	movs	r3, #0
}
 8004634:	4618      	mov	r0, r3
 8004636:	371c      	adds	r7, #28
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr

08004640 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8004646:	af00      	add	r7, sp, #0
 8004648:	1d3b      	adds	r3, r7, #4
 800464a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800464c:	1d3b      	adds	r3, r7, #4
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d102      	bne.n	800465a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	f000 bef4 	b.w	8005442 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800465a:	1d3b      	adds	r3, r7, #4
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 0301 	and.w	r3, r3, #1
 8004664:	2b00      	cmp	r3, #0
 8004666:	f000 816a 	beq.w	800493e <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800466a:	4bb3      	ldr	r3, [pc, #716]	; (8004938 <HAL_RCC_OscConfig+0x2f8>)
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	f003 030c 	and.w	r3, r3, #12
 8004672:	2b04      	cmp	r3, #4
 8004674:	d00c      	beq.n	8004690 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004676:	4bb0      	ldr	r3, [pc, #704]	; (8004938 <HAL_RCC_OscConfig+0x2f8>)
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	f003 030c 	and.w	r3, r3, #12
 800467e:	2b08      	cmp	r3, #8
 8004680:	d159      	bne.n	8004736 <HAL_RCC_OscConfig+0xf6>
 8004682:	4bad      	ldr	r3, [pc, #692]	; (8004938 <HAL_RCC_OscConfig+0x2f8>)
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800468a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800468e:	d152      	bne.n	8004736 <HAL_RCC_OscConfig+0xf6>
 8004690:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004694:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004698:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800469c:	fa93 f3a3 	rbit	r3, r3
 80046a0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80046a4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046a8:	fab3 f383 	clz	r3, r3
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	095b      	lsrs	r3, r3, #5
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	f043 0301 	orr.w	r3, r3, #1
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d102      	bne.n	80046c2 <HAL_RCC_OscConfig+0x82>
 80046bc:	4b9e      	ldr	r3, [pc, #632]	; (8004938 <HAL_RCC_OscConfig+0x2f8>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	e015      	b.n	80046ee <HAL_RCC_OscConfig+0xae>
 80046c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80046c6:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046ca:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80046ce:	fa93 f3a3 	rbit	r3, r3
 80046d2:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80046d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80046da:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80046de:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80046e2:	fa93 f3a3 	rbit	r3, r3
 80046e6:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80046ea:	4b93      	ldr	r3, [pc, #588]	; (8004938 <HAL_RCC_OscConfig+0x2f8>)
 80046ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80046f2:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80046f6:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80046fa:	fa92 f2a2 	rbit	r2, r2
 80046fe:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8004702:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8004706:	fab2 f282 	clz	r2, r2
 800470a:	b2d2      	uxtb	r2, r2
 800470c:	f042 0220 	orr.w	r2, r2, #32
 8004710:	b2d2      	uxtb	r2, r2
 8004712:	f002 021f 	and.w	r2, r2, #31
 8004716:	2101      	movs	r1, #1
 8004718:	fa01 f202 	lsl.w	r2, r1, r2
 800471c:	4013      	ands	r3, r2
 800471e:	2b00      	cmp	r3, #0
 8004720:	f000 810c 	beq.w	800493c <HAL_RCC_OscConfig+0x2fc>
 8004724:	1d3b      	adds	r3, r7, #4
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	2b00      	cmp	r3, #0
 800472c:	f040 8106 	bne.w	800493c <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	f000 be86 	b.w	8005442 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004736:	1d3b      	adds	r3, r7, #4
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004740:	d106      	bne.n	8004750 <HAL_RCC_OscConfig+0x110>
 8004742:	4b7d      	ldr	r3, [pc, #500]	; (8004938 <HAL_RCC_OscConfig+0x2f8>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a7c      	ldr	r2, [pc, #496]	; (8004938 <HAL_RCC_OscConfig+0x2f8>)
 8004748:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800474c:	6013      	str	r3, [r2, #0]
 800474e:	e030      	b.n	80047b2 <HAL_RCC_OscConfig+0x172>
 8004750:	1d3b      	adds	r3, r7, #4
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d10c      	bne.n	8004774 <HAL_RCC_OscConfig+0x134>
 800475a:	4b77      	ldr	r3, [pc, #476]	; (8004938 <HAL_RCC_OscConfig+0x2f8>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a76      	ldr	r2, [pc, #472]	; (8004938 <HAL_RCC_OscConfig+0x2f8>)
 8004760:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004764:	6013      	str	r3, [r2, #0]
 8004766:	4b74      	ldr	r3, [pc, #464]	; (8004938 <HAL_RCC_OscConfig+0x2f8>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a73      	ldr	r2, [pc, #460]	; (8004938 <HAL_RCC_OscConfig+0x2f8>)
 800476c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004770:	6013      	str	r3, [r2, #0]
 8004772:	e01e      	b.n	80047b2 <HAL_RCC_OscConfig+0x172>
 8004774:	1d3b      	adds	r3, r7, #4
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800477e:	d10c      	bne.n	800479a <HAL_RCC_OscConfig+0x15a>
 8004780:	4b6d      	ldr	r3, [pc, #436]	; (8004938 <HAL_RCC_OscConfig+0x2f8>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a6c      	ldr	r2, [pc, #432]	; (8004938 <HAL_RCC_OscConfig+0x2f8>)
 8004786:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800478a:	6013      	str	r3, [r2, #0]
 800478c:	4b6a      	ldr	r3, [pc, #424]	; (8004938 <HAL_RCC_OscConfig+0x2f8>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a69      	ldr	r2, [pc, #420]	; (8004938 <HAL_RCC_OscConfig+0x2f8>)
 8004792:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004796:	6013      	str	r3, [r2, #0]
 8004798:	e00b      	b.n	80047b2 <HAL_RCC_OscConfig+0x172>
 800479a:	4b67      	ldr	r3, [pc, #412]	; (8004938 <HAL_RCC_OscConfig+0x2f8>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a66      	ldr	r2, [pc, #408]	; (8004938 <HAL_RCC_OscConfig+0x2f8>)
 80047a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047a4:	6013      	str	r3, [r2, #0]
 80047a6:	4b64      	ldr	r3, [pc, #400]	; (8004938 <HAL_RCC_OscConfig+0x2f8>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a63      	ldr	r2, [pc, #396]	; (8004938 <HAL_RCC_OscConfig+0x2f8>)
 80047ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047b0:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80047b2:	4b61      	ldr	r3, [pc, #388]	; (8004938 <HAL_RCC_OscConfig+0x2f8>)
 80047b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b6:	f023 020f 	bic.w	r2, r3, #15
 80047ba:	1d3b      	adds	r3, r7, #4
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	495d      	ldr	r1, [pc, #372]	; (8004938 <HAL_RCC_OscConfig+0x2f8>)
 80047c2:	4313      	orrs	r3, r2
 80047c4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80047c6:	1d3b      	adds	r3, r7, #4
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d059      	beq.n	8004884 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047d0:	f7fd f9de 	bl	8001b90 <HAL_GetTick>
 80047d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047d8:	e00a      	b.n	80047f0 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047da:	f7fd f9d9 	bl	8001b90 <HAL_GetTick>
 80047de:	4602      	mov	r2, r0
 80047e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	2b64      	cmp	r3, #100	; 0x64
 80047e8:	d902      	bls.n	80047f0 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	f000 be29 	b.w	8005442 <HAL_RCC_OscConfig+0xe02>
 80047f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80047f4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047f8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80047fc:	fa93 f3a3 	rbit	r3, r3
 8004800:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8004804:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004808:	fab3 f383 	clz	r3, r3
 800480c:	b2db      	uxtb	r3, r3
 800480e:	095b      	lsrs	r3, r3, #5
 8004810:	b2db      	uxtb	r3, r3
 8004812:	f043 0301 	orr.w	r3, r3, #1
 8004816:	b2db      	uxtb	r3, r3
 8004818:	2b01      	cmp	r3, #1
 800481a:	d102      	bne.n	8004822 <HAL_RCC_OscConfig+0x1e2>
 800481c:	4b46      	ldr	r3, [pc, #280]	; (8004938 <HAL_RCC_OscConfig+0x2f8>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	e015      	b.n	800484e <HAL_RCC_OscConfig+0x20e>
 8004822:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004826:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800482a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800482e:	fa93 f3a3 	rbit	r3, r3
 8004832:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8004836:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800483a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800483e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8004842:	fa93 f3a3 	rbit	r3, r3
 8004846:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800484a:	4b3b      	ldr	r3, [pc, #236]	; (8004938 <HAL_RCC_OscConfig+0x2f8>)
 800484c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004852:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8004856:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800485a:	fa92 f2a2 	rbit	r2, r2
 800485e:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8004862:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8004866:	fab2 f282 	clz	r2, r2
 800486a:	b2d2      	uxtb	r2, r2
 800486c:	f042 0220 	orr.w	r2, r2, #32
 8004870:	b2d2      	uxtb	r2, r2
 8004872:	f002 021f 	and.w	r2, r2, #31
 8004876:	2101      	movs	r1, #1
 8004878:	fa01 f202 	lsl.w	r2, r1, r2
 800487c:	4013      	ands	r3, r2
 800487e:	2b00      	cmp	r3, #0
 8004880:	d0ab      	beq.n	80047da <HAL_RCC_OscConfig+0x19a>
 8004882:	e05c      	b.n	800493e <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004884:	f7fd f984 	bl	8001b90 <HAL_GetTick>
 8004888:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800488c:	e00a      	b.n	80048a4 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800488e:	f7fd f97f 	bl	8001b90 <HAL_GetTick>
 8004892:	4602      	mov	r2, r0
 8004894:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	2b64      	cmp	r3, #100	; 0x64
 800489c:	d902      	bls.n	80048a4 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 800489e:	2303      	movs	r3, #3
 80048a0:	f000 bdcf 	b.w	8005442 <HAL_RCC_OscConfig+0xe02>
 80048a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80048a8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ac:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80048b0:	fa93 f3a3 	rbit	r3, r3
 80048b4:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80048b8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048bc:	fab3 f383 	clz	r3, r3
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	095b      	lsrs	r3, r3, #5
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	f043 0301 	orr.w	r3, r3, #1
 80048ca:	b2db      	uxtb	r3, r3
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d102      	bne.n	80048d6 <HAL_RCC_OscConfig+0x296>
 80048d0:	4b19      	ldr	r3, [pc, #100]	; (8004938 <HAL_RCC_OscConfig+0x2f8>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	e015      	b.n	8004902 <HAL_RCC_OscConfig+0x2c2>
 80048d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80048da:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048de:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80048e2:	fa93 f3a3 	rbit	r3, r3
 80048e6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80048ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80048ee:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80048f2:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80048f6:	fa93 f3a3 	rbit	r3, r3
 80048fa:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80048fe:	4b0e      	ldr	r3, [pc, #56]	; (8004938 <HAL_RCC_OscConfig+0x2f8>)
 8004900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004902:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004906:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800490a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800490e:	fa92 f2a2 	rbit	r2, r2
 8004912:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8004916:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800491a:	fab2 f282 	clz	r2, r2
 800491e:	b2d2      	uxtb	r2, r2
 8004920:	f042 0220 	orr.w	r2, r2, #32
 8004924:	b2d2      	uxtb	r2, r2
 8004926:	f002 021f 	and.w	r2, r2, #31
 800492a:	2101      	movs	r1, #1
 800492c:	fa01 f202 	lsl.w	r2, r1, r2
 8004930:	4013      	ands	r3, r2
 8004932:	2b00      	cmp	r3, #0
 8004934:	d1ab      	bne.n	800488e <HAL_RCC_OscConfig+0x24e>
 8004936:	e002      	b.n	800493e <HAL_RCC_OscConfig+0x2fe>
 8004938:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800493c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800493e:	1d3b      	adds	r3, r7, #4
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 0302 	and.w	r3, r3, #2
 8004948:	2b00      	cmp	r3, #0
 800494a:	f000 816f 	beq.w	8004c2c <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800494e:	4bd0      	ldr	r3, [pc, #832]	; (8004c90 <HAL_RCC_OscConfig+0x650>)
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	f003 030c 	and.w	r3, r3, #12
 8004956:	2b00      	cmp	r3, #0
 8004958:	d00b      	beq.n	8004972 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800495a:	4bcd      	ldr	r3, [pc, #820]	; (8004c90 <HAL_RCC_OscConfig+0x650>)
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	f003 030c 	and.w	r3, r3, #12
 8004962:	2b08      	cmp	r3, #8
 8004964:	d16c      	bne.n	8004a40 <HAL_RCC_OscConfig+0x400>
 8004966:	4bca      	ldr	r3, [pc, #808]	; (8004c90 <HAL_RCC_OscConfig+0x650>)
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800496e:	2b00      	cmp	r3, #0
 8004970:	d166      	bne.n	8004a40 <HAL_RCC_OscConfig+0x400>
 8004972:	2302      	movs	r3, #2
 8004974:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004978:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800497c:	fa93 f3a3 	rbit	r3, r3
 8004980:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8004984:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004988:	fab3 f383 	clz	r3, r3
 800498c:	b2db      	uxtb	r3, r3
 800498e:	095b      	lsrs	r3, r3, #5
 8004990:	b2db      	uxtb	r3, r3
 8004992:	f043 0301 	orr.w	r3, r3, #1
 8004996:	b2db      	uxtb	r3, r3
 8004998:	2b01      	cmp	r3, #1
 800499a:	d102      	bne.n	80049a2 <HAL_RCC_OscConfig+0x362>
 800499c:	4bbc      	ldr	r3, [pc, #752]	; (8004c90 <HAL_RCC_OscConfig+0x650>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	e013      	b.n	80049ca <HAL_RCC_OscConfig+0x38a>
 80049a2:	2302      	movs	r3, #2
 80049a4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049a8:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80049ac:	fa93 f3a3 	rbit	r3, r3
 80049b0:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80049b4:	2302      	movs	r3, #2
 80049b6:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80049ba:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80049be:	fa93 f3a3 	rbit	r3, r3
 80049c2:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80049c6:	4bb2      	ldr	r3, [pc, #712]	; (8004c90 <HAL_RCC_OscConfig+0x650>)
 80049c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ca:	2202      	movs	r2, #2
 80049cc:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80049d0:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80049d4:	fa92 f2a2 	rbit	r2, r2
 80049d8:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80049dc:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80049e0:	fab2 f282 	clz	r2, r2
 80049e4:	b2d2      	uxtb	r2, r2
 80049e6:	f042 0220 	orr.w	r2, r2, #32
 80049ea:	b2d2      	uxtb	r2, r2
 80049ec:	f002 021f 	and.w	r2, r2, #31
 80049f0:	2101      	movs	r1, #1
 80049f2:	fa01 f202 	lsl.w	r2, r1, r2
 80049f6:	4013      	ands	r3, r2
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d007      	beq.n	8004a0c <HAL_RCC_OscConfig+0x3cc>
 80049fc:	1d3b      	adds	r3, r7, #4
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	691b      	ldr	r3, [r3, #16]
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d002      	beq.n	8004a0c <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	f000 bd1b 	b.w	8005442 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a0c:	4ba0      	ldr	r3, [pc, #640]	; (8004c90 <HAL_RCC_OscConfig+0x650>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a14:	1d3b      	adds	r3, r7, #4
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	695b      	ldr	r3, [r3, #20]
 8004a1a:	21f8      	movs	r1, #248	; 0xf8
 8004a1c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a20:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004a24:	fa91 f1a1 	rbit	r1, r1
 8004a28:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8004a2c:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8004a30:	fab1 f181 	clz	r1, r1
 8004a34:	b2c9      	uxtb	r1, r1
 8004a36:	408b      	lsls	r3, r1
 8004a38:	4995      	ldr	r1, [pc, #596]	; (8004c90 <HAL_RCC_OscConfig+0x650>)
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a3e:	e0f5      	b.n	8004c2c <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004a40:	1d3b      	adds	r3, r7, #4
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	691b      	ldr	r3, [r3, #16]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	f000 8085 	beq.w	8004b56 <HAL_RCC_OscConfig+0x516>
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a52:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004a56:	fa93 f3a3 	rbit	r3, r3
 8004a5a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8004a5e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a62:	fab3 f383 	clz	r3, r3
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004a6c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	461a      	mov	r2, r3
 8004a74:	2301      	movs	r3, #1
 8004a76:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a78:	f7fd f88a 	bl	8001b90 <HAL_GetTick>
 8004a7c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a80:	e00a      	b.n	8004a98 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a82:	f7fd f885 	bl	8001b90 <HAL_GetTick>
 8004a86:	4602      	mov	r2, r0
 8004a88:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004a8c:	1ad3      	subs	r3, r2, r3
 8004a8e:	2b02      	cmp	r3, #2
 8004a90:	d902      	bls.n	8004a98 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8004a92:	2303      	movs	r3, #3
 8004a94:	f000 bcd5 	b.w	8005442 <HAL_RCC_OscConfig+0xe02>
 8004a98:	2302      	movs	r3, #2
 8004a9a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a9e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004aa2:	fa93 f3a3 	rbit	r3, r3
 8004aa6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8004aaa:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004aae:	fab3 f383 	clz	r3, r3
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	095b      	lsrs	r3, r3, #5
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	f043 0301 	orr.w	r3, r3, #1
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d102      	bne.n	8004ac8 <HAL_RCC_OscConfig+0x488>
 8004ac2:	4b73      	ldr	r3, [pc, #460]	; (8004c90 <HAL_RCC_OscConfig+0x650>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	e013      	b.n	8004af0 <HAL_RCC_OscConfig+0x4b0>
 8004ac8:	2302      	movs	r3, #2
 8004aca:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ace:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004ad2:	fa93 f3a3 	rbit	r3, r3
 8004ad6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004ada:	2302      	movs	r3, #2
 8004adc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004ae0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004ae4:	fa93 f3a3 	rbit	r3, r3
 8004ae8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004aec:	4b68      	ldr	r3, [pc, #416]	; (8004c90 <HAL_RCC_OscConfig+0x650>)
 8004aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af0:	2202      	movs	r2, #2
 8004af2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8004af6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004afa:	fa92 f2a2 	rbit	r2, r2
 8004afe:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8004b02:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8004b06:	fab2 f282 	clz	r2, r2
 8004b0a:	b2d2      	uxtb	r2, r2
 8004b0c:	f042 0220 	orr.w	r2, r2, #32
 8004b10:	b2d2      	uxtb	r2, r2
 8004b12:	f002 021f 	and.w	r2, r2, #31
 8004b16:	2101      	movs	r1, #1
 8004b18:	fa01 f202 	lsl.w	r2, r1, r2
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d0af      	beq.n	8004a82 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b22:	4b5b      	ldr	r3, [pc, #364]	; (8004c90 <HAL_RCC_OscConfig+0x650>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b2a:	1d3b      	adds	r3, r7, #4
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	695b      	ldr	r3, [r3, #20]
 8004b30:	21f8      	movs	r1, #248	; 0xf8
 8004b32:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b36:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004b3a:	fa91 f1a1 	rbit	r1, r1
 8004b3e:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8004b42:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8004b46:	fab1 f181 	clz	r1, r1
 8004b4a:	b2c9      	uxtb	r1, r1
 8004b4c:	408b      	lsls	r3, r1
 8004b4e:	4950      	ldr	r1, [pc, #320]	; (8004c90 <HAL_RCC_OscConfig+0x650>)
 8004b50:	4313      	orrs	r3, r2
 8004b52:	600b      	str	r3, [r1, #0]
 8004b54:	e06a      	b.n	8004c2c <HAL_RCC_OscConfig+0x5ec>
 8004b56:	2301      	movs	r3, #1
 8004b58:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b5c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004b60:	fa93 f3a3 	rbit	r3, r3
 8004b64:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8004b68:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b6c:	fab3 f383 	clz	r3, r3
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004b76:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	461a      	mov	r2, r3
 8004b7e:	2300      	movs	r3, #0
 8004b80:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b82:	f7fd f805 	bl	8001b90 <HAL_GetTick>
 8004b86:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b8a:	e00a      	b.n	8004ba2 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b8c:	f7fd f800 	bl	8001b90 <HAL_GetTick>
 8004b90:	4602      	mov	r2, r0
 8004b92:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004b96:	1ad3      	subs	r3, r2, r3
 8004b98:	2b02      	cmp	r3, #2
 8004b9a:	d902      	bls.n	8004ba2 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8004b9c:	2303      	movs	r3, #3
 8004b9e:	f000 bc50 	b.w	8005442 <HAL_RCC_OscConfig+0xe02>
 8004ba2:	2302      	movs	r3, #2
 8004ba4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ba8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004bac:	fa93 f3a3 	rbit	r3, r3
 8004bb0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8004bb4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bb8:	fab3 f383 	clz	r3, r3
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	095b      	lsrs	r3, r3, #5
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	f043 0301 	orr.w	r3, r3, #1
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d102      	bne.n	8004bd2 <HAL_RCC_OscConfig+0x592>
 8004bcc:	4b30      	ldr	r3, [pc, #192]	; (8004c90 <HAL_RCC_OscConfig+0x650>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	e013      	b.n	8004bfa <HAL_RCC_OscConfig+0x5ba>
 8004bd2:	2302      	movs	r3, #2
 8004bd4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bd8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004bdc:	fa93 f3a3 	rbit	r3, r3
 8004be0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004be4:	2302      	movs	r3, #2
 8004be6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004bea:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004bee:	fa93 f3a3 	rbit	r3, r3
 8004bf2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004bf6:	4b26      	ldr	r3, [pc, #152]	; (8004c90 <HAL_RCC_OscConfig+0x650>)
 8004bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfa:	2202      	movs	r2, #2
 8004bfc:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8004c00:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004c04:	fa92 f2a2 	rbit	r2, r2
 8004c08:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8004c0c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004c10:	fab2 f282 	clz	r2, r2
 8004c14:	b2d2      	uxtb	r2, r2
 8004c16:	f042 0220 	orr.w	r2, r2, #32
 8004c1a:	b2d2      	uxtb	r2, r2
 8004c1c:	f002 021f 	and.w	r2, r2, #31
 8004c20:	2101      	movs	r1, #1
 8004c22:	fa01 f202 	lsl.w	r2, r1, r2
 8004c26:	4013      	ands	r3, r2
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d1af      	bne.n	8004b8c <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c2c:	1d3b      	adds	r3, r7, #4
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 0308 	and.w	r3, r3, #8
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	f000 80da 	beq.w	8004df0 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c3c:	1d3b      	adds	r3, r7, #4
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	699b      	ldr	r3, [r3, #24]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d069      	beq.n	8004d1a <HAL_RCC_OscConfig+0x6da>
 8004c46:	2301      	movs	r3, #1
 8004c48:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c4c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004c50:	fa93 f3a3 	rbit	r3, r3
 8004c54:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8004c58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c5c:	fab3 f383 	clz	r3, r3
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	461a      	mov	r2, r3
 8004c64:	4b0b      	ldr	r3, [pc, #44]	; (8004c94 <HAL_RCC_OscConfig+0x654>)
 8004c66:	4413      	add	r3, r2
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	461a      	mov	r2, r3
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c70:	f7fc ff8e 	bl	8001b90 <HAL_GetTick>
 8004c74:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c78:	e00e      	b.n	8004c98 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c7a:	f7fc ff89 	bl	8001b90 <HAL_GetTick>
 8004c7e:	4602      	mov	r2, r0
 8004c80:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	2b02      	cmp	r3, #2
 8004c88:	d906      	bls.n	8004c98 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	e3d9      	b.n	8005442 <HAL_RCC_OscConfig+0xe02>
 8004c8e:	bf00      	nop
 8004c90:	40021000 	.word	0x40021000
 8004c94:	10908120 	.word	0x10908120
 8004c98:	2302      	movs	r3, #2
 8004c9a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c9e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004ca2:	fa93 f3a3 	rbit	r3, r3
 8004ca6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004caa:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8004cae:	2202      	movs	r2, #2
 8004cb0:	601a      	str	r2, [r3, #0]
 8004cb2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	fa93 f2a3 	rbit	r2, r3
 8004cbc:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8004cc0:	601a      	str	r2, [r3, #0]
 8004cc2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8004cc6:	2202      	movs	r2, #2
 8004cc8:	601a      	str	r2, [r3, #0]
 8004cca:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	fa93 f2a3 	rbit	r2, r3
 8004cd4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8004cd8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cda:	4ba5      	ldr	r3, [pc, #660]	; (8004f70 <HAL_RCC_OscConfig+0x930>)
 8004cdc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004cde:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8004ce2:	2102      	movs	r1, #2
 8004ce4:	6019      	str	r1, [r3, #0]
 8004ce6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	fa93 f1a3 	rbit	r1, r3
 8004cf0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004cf4:	6019      	str	r1, [r3, #0]
  return result;
 8004cf6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	fab3 f383 	clz	r3, r3
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004d06:	b2db      	uxtb	r3, r3
 8004d08:	f003 031f 	and.w	r3, r3, #31
 8004d0c:	2101      	movs	r1, #1
 8004d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8004d12:	4013      	ands	r3, r2
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d0b0      	beq.n	8004c7a <HAL_RCC_OscConfig+0x63a>
 8004d18:	e06a      	b.n	8004df0 <HAL_RCC_OscConfig+0x7b0>
 8004d1a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8004d1e:	2201      	movs	r2, #1
 8004d20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d22:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	fa93 f2a3 	rbit	r2, r3
 8004d2c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004d30:	601a      	str	r2, [r3, #0]
  return result;
 8004d32:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004d36:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d38:	fab3 f383 	clz	r3, r3
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	461a      	mov	r2, r3
 8004d40:	4b8c      	ldr	r3, [pc, #560]	; (8004f74 <HAL_RCC_OscConfig+0x934>)
 8004d42:	4413      	add	r3, r2
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	461a      	mov	r2, r3
 8004d48:	2300      	movs	r3, #0
 8004d4a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d4c:	f7fc ff20 	bl	8001b90 <HAL_GetTick>
 8004d50:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d54:	e009      	b.n	8004d6a <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d56:	f7fc ff1b 	bl	8001b90 <HAL_GetTick>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004d60:	1ad3      	subs	r3, r2, r3
 8004d62:	2b02      	cmp	r3, #2
 8004d64:	d901      	bls.n	8004d6a <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8004d66:	2303      	movs	r3, #3
 8004d68:	e36b      	b.n	8005442 <HAL_RCC_OscConfig+0xe02>
 8004d6a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8004d6e:	2202      	movs	r2, #2
 8004d70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d72:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	fa93 f2a3 	rbit	r2, r3
 8004d7c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004d80:	601a      	str	r2, [r3, #0]
 8004d82:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8004d86:	2202      	movs	r2, #2
 8004d88:	601a      	str	r2, [r3, #0]
 8004d8a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	fa93 f2a3 	rbit	r2, r3
 8004d94:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004d98:	601a      	str	r2, [r3, #0]
 8004d9a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8004d9e:	2202      	movs	r2, #2
 8004da0:	601a      	str	r2, [r3, #0]
 8004da2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	fa93 f2a3 	rbit	r2, r3
 8004dac:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004db0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004db2:	4b6f      	ldr	r3, [pc, #444]	; (8004f70 <HAL_RCC_OscConfig+0x930>)
 8004db4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004db6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004dba:	2102      	movs	r1, #2
 8004dbc:	6019      	str	r1, [r3, #0]
 8004dbe:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	fa93 f1a3 	rbit	r1, r3
 8004dc8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004dcc:	6019      	str	r1, [r3, #0]
  return result;
 8004dce:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	fab3 f383 	clz	r3, r3
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004dde:	b2db      	uxtb	r3, r3
 8004de0:	f003 031f 	and.w	r3, r3, #31
 8004de4:	2101      	movs	r1, #1
 8004de6:	fa01 f303 	lsl.w	r3, r1, r3
 8004dea:	4013      	ands	r3, r2
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d1b2      	bne.n	8004d56 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004df0:	1d3b      	adds	r3, r7, #4
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 0304 	and.w	r3, r3, #4
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	f000 8158 	beq.w	80050b0 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e00:	2300      	movs	r3, #0
 8004e02:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e06:	4b5a      	ldr	r3, [pc, #360]	; (8004f70 <HAL_RCC_OscConfig+0x930>)
 8004e08:	69db      	ldr	r3, [r3, #28]
 8004e0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d112      	bne.n	8004e38 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e12:	4b57      	ldr	r3, [pc, #348]	; (8004f70 <HAL_RCC_OscConfig+0x930>)
 8004e14:	69db      	ldr	r3, [r3, #28]
 8004e16:	4a56      	ldr	r2, [pc, #344]	; (8004f70 <HAL_RCC_OscConfig+0x930>)
 8004e18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e1c:	61d3      	str	r3, [r2, #28]
 8004e1e:	4b54      	ldr	r3, [pc, #336]	; (8004f70 <HAL_RCC_OscConfig+0x930>)
 8004e20:	69db      	ldr	r3, [r3, #28]
 8004e22:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004e26:	f107 0308 	add.w	r3, r7, #8
 8004e2a:	601a      	str	r2, [r3, #0]
 8004e2c:	f107 0308 	add.w	r3, r7, #8
 8004e30:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004e32:	2301      	movs	r3, #1
 8004e34:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e38:	4b4f      	ldr	r3, [pc, #316]	; (8004f78 <HAL_RCC_OscConfig+0x938>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d11a      	bne.n	8004e7a <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e44:	4b4c      	ldr	r3, [pc, #304]	; (8004f78 <HAL_RCC_OscConfig+0x938>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a4b      	ldr	r2, [pc, #300]	; (8004f78 <HAL_RCC_OscConfig+0x938>)
 8004e4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e4e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e50:	f7fc fe9e 	bl	8001b90 <HAL_GetTick>
 8004e54:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e58:	e009      	b.n	8004e6e <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e5a:	f7fc fe99 	bl	8001b90 <HAL_GetTick>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004e64:	1ad3      	subs	r3, r2, r3
 8004e66:	2b64      	cmp	r3, #100	; 0x64
 8004e68:	d901      	bls.n	8004e6e <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	e2e9      	b.n	8005442 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e6e:	4b42      	ldr	r3, [pc, #264]	; (8004f78 <HAL_RCC_OscConfig+0x938>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d0ef      	beq.n	8004e5a <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e7a:	1d3b      	adds	r3, r7, #4
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d106      	bne.n	8004e92 <HAL_RCC_OscConfig+0x852>
 8004e84:	4b3a      	ldr	r3, [pc, #232]	; (8004f70 <HAL_RCC_OscConfig+0x930>)
 8004e86:	6a1b      	ldr	r3, [r3, #32]
 8004e88:	4a39      	ldr	r2, [pc, #228]	; (8004f70 <HAL_RCC_OscConfig+0x930>)
 8004e8a:	f043 0301 	orr.w	r3, r3, #1
 8004e8e:	6213      	str	r3, [r2, #32]
 8004e90:	e02f      	b.n	8004ef2 <HAL_RCC_OscConfig+0x8b2>
 8004e92:	1d3b      	adds	r3, r7, #4
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d10c      	bne.n	8004eb6 <HAL_RCC_OscConfig+0x876>
 8004e9c:	4b34      	ldr	r3, [pc, #208]	; (8004f70 <HAL_RCC_OscConfig+0x930>)
 8004e9e:	6a1b      	ldr	r3, [r3, #32]
 8004ea0:	4a33      	ldr	r2, [pc, #204]	; (8004f70 <HAL_RCC_OscConfig+0x930>)
 8004ea2:	f023 0301 	bic.w	r3, r3, #1
 8004ea6:	6213      	str	r3, [r2, #32]
 8004ea8:	4b31      	ldr	r3, [pc, #196]	; (8004f70 <HAL_RCC_OscConfig+0x930>)
 8004eaa:	6a1b      	ldr	r3, [r3, #32]
 8004eac:	4a30      	ldr	r2, [pc, #192]	; (8004f70 <HAL_RCC_OscConfig+0x930>)
 8004eae:	f023 0304 	bic.w	r3, r3, #4
 8004eb2:	6213      	str	r3, [r2, #32]
 8004eb4:	e01d      	b.n	8004ef2 <HAL_RCC_OscConfig+0x8b2>
 8004eb6:	1d3b      	adds	r3, r7, #4
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	2b05      	cmp	r3, #5
 8004ebe:	d10c      	bne.n	8004eda <HAL_RCC_OscConfig+0x89a>
 8004ec0:	4b2b      	ldr	r3, [pc, #172]	; (8004f70 <HAL_RCC_OscConfig+0x930>)
 8004ec2:	6a1b      	ldr	r3, [r3, #32]
 8004ec4:	4a2a      	ldr	r2, [pc, #168]	; (8004f70 <HAL_RCC_OscConfig+0x930>)
 8004ec6:	f043 0304 	orr.w	r3, r3, #4
 8004eca:	6213      	str	r3, [r2, #32]
 8004ecc:	4b28      	ldr	r3, [pc, #160]	; (8004f70 <HAL_RCC_OscConfig+0x930>)
 8004ece:	6a1b      	ldr	r3, [r3, #32]
 8004ed0:	4a27      	ldr	r2, [pc, #156]	; (8004f70 <HAL_RCC_OscConfig+0x930>)
 8004ed2:	f043 0301 	orr.w	r3, r3, #1
 8004ed6:	6213      	str	r3, [r2, #32]
 8004ed8:	e00b      	b.n	8004ef2 <HAL_RCC_OscConfig+0x8b2>
 8004eda:	4b25      	ldr	r3, [pc, #148]	; (8004f70 <HAL_RCC_OscConfig+0x930>)
 8004edc:	6a1b      	ldr	r3, [r3, #32]
 8004ede:	4a24      	ldr	r2, [pc, #144]	; (8004f70 <HAL_RCC_OscConfig+0x930>)
 8004ee0:	f023 0301 	bic.w	r3, r3, #1
 8004ee4:	6213      	str	r3, [r2, #32]
 8004ee6:	4b22      	ldr	r3, [pc, #136]	; (8004f70 <HAL_RCC_OscConfig+0x930>)
 8004ee8:	6a1b      	ldr	r3, [r3, #32]
 8004eea:	4a21      	ldr	r2, [pc, #132]	; (8004f70 <HAL_RCC_OscConfig+0x930>)
 8004eec:	f023 0304 	bic.w	r3, r3, #4
 8004ef0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ef2:	1d3b      	adds	r3, r7, #4
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d06b      	beq.n	8004fd4 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004efc:	f7fc fe48 	bl	8001b90 <HAL_GetTick>
 8004f00:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f04:	e00b      	b.n	8004f1e <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f06:	f7fc fe43 	bl	8001b90 <HAL_GetTick>
 8004f0a:	4602      	mov	r2, r0
 8004f0c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004f10:	1ad3      	subs	r3, r2, r3
 8004f12:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d901      	bls.n	8004f1e <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8004f1a:	2303      	movs	r3, #3
 8004f1c:	e291      	b.n	8005442 <HAL_RCC_OscConfig+0xe02>
 8004f1e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8004f22:	2202      	movs	r2, #2
 8004f24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f26:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	fa93 f2a3 	rbit	r2, r3
 8004f30:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004f34:	601a      	str	r2, [r3, #0]
 8004f36:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004f3a:	2202      	movs	r2, #2
 8004f3c:	601a      	str	r2, [r3, #0]
 8004f3e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	fa93 f2a3 	rbit	r2, r3
 8004f48:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004f4c:	601a      	str	r2, [r3, #0]
  return result;
 8004f4e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004f52:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f54:	fab3 f383 	clz	r3, r3
 8004f58:	b2db      	uxtb	r3, r3
 8004f5a:	095b      	lsrs	r3, r3, #5
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	f043 0302 	orr.w	r3, r3, #2
 8004f62:	b2db      	uxtb	r3, r3
 8004f64:	2b02      	cmp	r3, #2
 8004f66:	d109      	bne.n	8004f7c <HAL_RCC_OscConfig+0x93c>
 8004f68:	4b01      	ldr	r3, [pc, #4]	; (8004f70 <HAL_RCC_OscConfig+0x930>)
 8004f6a:	6a1b      	ldr	r3, [r3, #32]
 8004f6c:	e014      	b.n	8004f98 <HAL_RCC_OscConfig+0x958>
 8004f6e:	bf00      	nop
 8004f70:	40021000 	.word	0x40021000
 8004f74:	10908120 	.word	0x10908120
 8004f78:	40007000 	.word	0x40007000
 8004f7c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004f80:	2202      	movs	r2, #2
 8004f82:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f84:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	fa93 f2a3 	rbit	r2, r3
 8004f8e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004f92:	601a      	str	r2, [r3, #0]
 8004f94:	4bbb      	ldr	r3, [pc, #748]	; (8005284 <HAL_RCC_OscConfig+0xc44>)
 8004f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f98:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8004f9c:	2102      	movs	r1, #2
 8004f9e:	6011      	str	r1, [r2, #0]
 8004fa0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8004fa4:	6812      	ldr	r2, [r2, #0]
 8004fa6:	fa92 f1a2 	rbit	r1, r2
 8004faa:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8004fae:	6011      	str	r1, [r2, #0]
  return result;
 8004fb0:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8004fb4:	6812      	ldr	r2, [r2, #0]
 8004fb6:	fab2 f282 	clz	r2, r2
 8004fba:	b2d2      	uxtb	r2, r2
 8004fbc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004fc0:	b2d2      	uxtb	r2, r2
 8004fc2:	f002 021f 	and.w	r2, r2, #31
 8004fc6:	2101      	movs	r1, #1
 8004fc8:	fa01 f202 	lsl.w	r2, r1, r2
 8004fcc:	4013      	ands	r3, r2
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d099      	beq.n	8004f06 <HAL_RCC_OscConfig+0x8c6>
 8004fd2:	e063      	b.n	800509c <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fd4:	f7fc fddc 	bl	8001b90 <HAL_GetTick>
 8004fd8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fdc:	e00b      	b.n	8004ff6 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fde:	f7fc fdd7 	bl	8001b90 <HAL_GetTick>
 8004fe2:	4602      	mov	r2, r0
 8004fe4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004fe8:	1ad3      	subs	r3, r2, r3
 8004fea:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d901      	bls.n	8004ff6 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8004ff2:	2303      	movs	r3, #3
 8004ff4:	e225      	b.n	8005442 <HAL_RCC_OscConfig+0xe02>
 8004ff6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004ffa:	2202      	movs	r2, #2
 8004ffc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ffe:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	fa93 f2a3 	rbit	r2, r3
 8005008:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800500c:	601a      	str	r2, [r3, #0]
 800500e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005012:	2202      	movs	r2, #2
 8005014:	601a      	str	r2, [r3, #0]
 8005016:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	fa93 f2a3 	rbit	r2, r3
 8005020:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8005024:	601a      	str	r2, [r3, #0]
  return result;
 8005026:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800502a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800502c:	fab3 f383 	clz	r3, r3
 8005030:	b2db      	uxtb	r3, r3
 8005032:	095b      	lsrs	r3, r3, #5
 8005034:	b2db      	uxtb	r3, r3
 8005036:	f043 0302 	orr.w	r3, r3, #2
 800503a:	b2db      	uxtb	r3, r3
 800503c:	2b02      	cmp	r3, #2
 800503e:	d102      	bne.n	8005046 <HAL_RCC_OscConfig+0xa06>
 8005040:	4b90      	ldr	r3, [pc, #576]	; (8005284 <HAL_RCC_OscConfig+0xc44>)
 8005042:	6a1b      	ldr	r3, [r3, #32]
 8005044:	e00d      	b.n	8005062 <HAL_RCC_OscConfig+0xa22>
 8005046:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800504a:	2202      	movs	r2, #2
 800504c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800504e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	fa93 f2a3 	rbit	r2, r3
 8005058:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800505c:	601a      	str	r2, [r3, #0]
 800505e:	4b89      	ldr	r3, [pc, #548]	; (8005284 <HAL_RCC_OscConfig+0xc44>)
 8005060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005062:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8005066:	2102      	movs	r1, #2
 8005068:	6011      	str	r1, [r2, #0]
 800506a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800506e:	6812      	ldr	r2, [r2, #0]
 8005070:	fa92 f1a2 	rbit	r1, r2
 8005074:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8005078:	6011      	str	r1, [r2, #0]
  return result;
 800507a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800507e:	6812      	ldr	r2, [r2, #0]
 8005080:	fab2 f282 	clz	r2, r2
 8005084:	b2d2      	uxtb	r2, r2
 8005086:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800508a:	b2d2      	uxtb	r2, r2
 800508c:	f002 021f 	and.w	r2, r2, #31
 8005090:	2101      	movs	r1, #1
 8005092:	fa01 f202 	lsl.w	r2, r1, r2
 8005096:	4013      	ands	r3, r2
 8005098:	2b00      	cmp	r3, #0
 800509a:	d1a0      	bne.n	8004fde <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800509c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d105      	bne.n	80050b0 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050a4:	4b77      	ldr	r3, [pc, #476]	; (8005284 <HAL_RCC_OscConfig+0xc44>)
 80050a6:	69db      	ldr	r3, [r3, #28]
 80050a8:	4a76      	ldr	r2, [pc, #472]	; (8005284 <HAL_RCC_OscConfig+0xc44>)
 80050aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050ae:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80050b0:	1d3b      	adds	r3, r7, #4
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	69db      	ldr	r3, [r3, #28]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	f000 81c2 	beq.w	8005440 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80050bc:	4b71      	ldr	r3, [pc, #452]	; (8005284 <HAL_RCC_OscConfig+0xc44>)
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	f003 030c 	and.w	r3, r3, #12
 80050c4:	2b08      	cmp	r3, #8
 80050c6:	f000 819c 	beq.w	8005402 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80050ca:	1d3b      	adds	r3, r7, #4
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	69db      	ldr	r3, [r3, #28]
 80050d0:	2b02      	cmp	r3, #2
 80050d2:	f040 8114 	bne.w	80052fe <HAL_RCC_OscConfig+0xcbe>
 80050d6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80050da:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80050de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050e0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	fa93 f2a3 	rbit	r2, r3
 80050ea:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80050ee:	601a      	str	r2, [r3, #0]
  return result;
 80050f0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80050f4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050f6:	fab3 f383 	clz	r3, r3
 80050fa:	b2db      	uxtb	r3, r3
 80050fc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005100:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005104:	009b      	lsls	r3, r3, #2
 8005106:	461a      	mov	r2, r3
 8005108:	2300      	movs	r3, #0
 800510a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800510c:	f7fc fd40 	bl	8001b90 <HAL_GetTick>
 8005110:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005114:	e009      	b.n	800512a <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005116:	f7fc fd3b 	bl	8001b90 <HAL_GetTick>
 800511a:	4602      	mov	r2, r0
 800511c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005120:	1ad3      	subs	r3, r2, r3
 8005122:	2b02      	cmp	r3, #2
 8005124:	d901      	bls.n	800512a <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8005126:	2303      	movs	r3, #3
 8005128:	e18b      	b.n	8005442 <HAL_RCC_OscConfig+0xe02>
 800512a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800512e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005132:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005134:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	fa93 f2a3 	rbit	r2, r3
 800513e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005142:	601a      	str	r2, [r3, #0]
  return result;
 8005144:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005148:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800514a:	fab3 f383 	clz	r3, r3
 800514e:	b2db      	uxtb	r3, r3
 8005150:	095b      	lsrs	r3, r3, #5
 8005152:	b2db      	uxtb	r3, r3
 8005154:	f043 0301 	orr.w	r3, r3, #1
 8005158:	b2db      	uxtb	r3, r3
 800515a:	2b01      	cmp	r3, #1
 800515c:	d102      	bne.n	8005164 <HAL_RCC_OscConfig+0xb24>
 800515e:	4b49      	ldr	r3, [pc, #292]	; (8005284 <HAL_RCC_OscConfig+0xc44>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	e01b      	b.n	800519c <HAL_RCC_OscConfig+0xb5c>
 8005164:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005168:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800516c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800516e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	fa93 f2a3 	rbit	r2, r3
 8005178:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800517c:	601a      	str	r2, [r3, #0]
 800517e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005182:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005186:	601a      	str	r2, [r3, #0]
 8005188:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	fa93 f2a3 	rbit	r2, r3
 8005192:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005196:	601a      	str	r2, [r3, #0]
 8005198:	4b3a      	ldr	r3, [pc, #232]	; (8005284 <HAL_RCC_OscConfig+0xc44>)
 800519a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80051a0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80051a4:	6011      	str	r1, [r2, #0]
 80051a6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80051aa:	6812      	ldr	r2, [r2, #0]
 80051ac:	fa92 f1a2 	rbit	r1, r2
 80051b0:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80051b4:	6011      	str	r1, [r2, #0]
  return result;
 80051b6:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80051ba:	6812      	ldr	r2, [r2, #0]
 80051bc:	fab2 f282 	clz	r2, r2
 80051c0:	b2d2      	uxtb	r2, r2
 80051c2:	f042 0220 	orr.w	r2, r2, #32
 80051c6:	b2d2      	uxtb	r2, r2
 80051c8:	f002 021f 	and.w	r2, r2, #31
 80051cc:	2101      	movs	r1, #1
 80051ce:	fa01 f202 	lsl.w	r2, r1, r2
 80051d2:	4013      	ands	r3, r2
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d19e      	bne.n	8005116 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80051d8:	4b2a      	ldr	r3, [pc, #168]	; (8005284 <HAL_RCC_OscConfig+0xc44>)
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80051e0:	1d3b      	adds	r3, r7, #4
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80051e6:	1d3b      	adds	r3, r7, #4
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	6a1b      	ldr	r3, [r3, #32]
 80051ec:	430b      	orrs	r3, r1
 80051ee:	4925      	ldr	r1, [pc, #148]	; (8005284 <HAL_RCC_OscConfig+0xc44>)
 80051f0:	4313      	orrs	r3, r2
 80051f2:	604b      	str	r3, [r1, #4]
 80051f4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80051f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80051fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051fe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	fa93 f2a3 	rbit	r2, r3
 8005208:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800520c:	601a      	str	r2, [r3, #0]
  return result;
 800520e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005212:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005214:	fab3 f383 	clz	r3, r3
 8005218:	b2db      	uxtb	r3, r3
 800521a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800521e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	461a      	mov	r2, r3
 8005226:	2301      	movs	r3, #1
 8005228:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800522a:	f7fc fcb1 	bl	8001b90 <HAL_GetTick>
 800522e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005232:	e009      	b.n	8005248 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005234:	f7fc fcac 	bl	8001b90 <HAL_GetTick>
 8005238:	4602      	mov	r2, r0
 800523a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800523e:	1ad3      	subs	r3, r2, r3
 8005240:	2b02      	cmp	r3, #2
 8005242:	d901      	bls.n	8005248 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8005244:	2303      	movs	r3, #3
 8005246:	e0fc      	b.n	8005442 <HAL_RCC_OscConfig+0xe02>
 8005248:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800524c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005250:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005252:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	fa93 f2a3 	rbit	r2, r3
 800525c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005260:	601a      	str	r2, [r3, #0]
  return result;
 8005262:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005266:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005268:	fab3 f383 	clz	r3, r3
 800526c:	b2db      	uxtb	r3, r3
 800526e:	095b      	lsrs	r3, r3, #5
 8005270:	b2db      	uxtb	r3, r3
 8005272:	f043 0301 	orr.w	r3, r3, #1
 8005276:	b2db      	uxtb	r3, r3
 8005278:	2b01      	cmp	r3, #1
 800527a:	d105      	bne.n	8005288 <HAL_RCC_OscConfig+0xc48>
 800527c:	4b01      	ldr	r3, [pc, #4]	; (8005284 <HAL_RCC_OscConfig+0xc44>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	e01e      	b.n	80052c0 <HAL_RCC_OscConfig+0xc80>
 8005282:	bf00      	nop
 8005284:	40021000 	.word	0x40021000
 8005288:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800528c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005290:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005292:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	fa93 f2a3 	rbit	r2, r3
 800529c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80052a0:	601a      	str	r2, [r3, #0]
 80052a2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80052a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80052aa:	601a      	str	r2, [r3, #0]
 80052ac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	fa93 f2a3 	rbit	r2, r3
 80052b6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80052ba:	601a      	str	r2, [r3, #0]
 80052bc:	4b63      	ldr	r3, [pc, #396]	; (800544c <HAL_RCC_OscConfig+0xe0c>)
 80052be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80052c4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80052c8:	6011      	str	r1, [r2, #0]
 80052ca:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80052ce:	6812      	ldr	r2, [r2, #0]
 80052d0:	fa92 f1a2 	rbit	r1, r2
 80052d4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80052d8:	6011      	str	r1, [r2, #0]
  return result;
 80052da:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80052de:	6812      	ldr	r2, [r2, #0]
 80052e0:	fab2 f282 	clz	r2, r2
 80052e4:	b2d2      	uxtb	r2, r2
 80052e6:	f042 0220 	orr.w	r2, r2, #32
 80052ea:	b2d2      	uxtb	r2, r2
 80052ec:	f002 021f 	and.w	r2, r2, #31
 80052f0:	2101      	movs	r1, #1
 80052f2:	fa01 f202 	lsl.w	r2, r1, r2
 80052f6:	4013      	ands	r3, r2
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d09b      	beq.n	8005234 <HAL_RCC_OscConfig+0xbf4>
 80052fc:	e0a0      	b.n	8005440 <HAL_RCC_OscConfig+0xe00>
 80052fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005302:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005306:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005308:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	fa93 f2a3 	rbit	r2, r3
 8005312:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005316:	601a      	str	r2, [r3, #0]
  return result;
 8005318:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800531c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800531e:	fab3 f383 	clz	r3, r3
 8005322:	b2db      	uxtb	r3, r3
 8005324:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005328:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800532c:	009b      	lsls	r3, r3, #2
 800532e:	461a      	mov	r2, r3
 8005330:	2300      	movs	r3, #0
 8005332:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005334:	f7fc fc2c 	bl	8001b90 <HAL_GetTick>
 8005338:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800533c:	e009      	b.n	8005352 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800533e:	f7fc fc27 	bl	8001b90 <HAL_GetTick>
 8005342:	4602      	mov	r2, r0
 8005344:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005348:	1ad3      	subs	r3, r2, r3
 800534a:	2b02      	cmp	r3, #2
 800534c:	d901      	bls.n	8005352 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800534e:	2303      	movs	r3, #3
 8005350:	e077      	b.n	8005442 <HAL_RCC_OscConfig+0xe02>
 8005352:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005356:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800535a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800535c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	fa93 f2a3 	rbit	r2, r3
 8005366:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800536a:	601a      	str	r2, [r3, #0]
  return result;
 800536c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005370:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005372:	fab3 f383 	clz	r3, r3
 8005376:	b2db      	uxtb	r3, r3
 8005378:	095b      	lsrs	r3, r3, #5
 800537a:	b2db      	uxtb	r3, r3
 800537c:	f043 0301 	orr.w	r3, r3, #1
 8005380:	b2db      	uxtb	r3, r3
 8005382:	2b01      	cmp	r3, #1
 8005384:	d102      	bne.n	800538c <HAL_RCC_OscConfig+0xd4c>
 8005386:	4b31      	ldr	r3, [pc, #196]	; (800544c <HAL_RCC_OscConfig+0xe0c>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	e01b      	b.n	80053c4 <HAL_RCC_OscConfig+0xd84>
 800538c:	f107 0320 	add.w	r3, r7, #32
 8005390:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005394:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005396:	f107 0320 	add.w	r3, r7, #32
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	fa93 f2a3 	rbit	r2, r3
 80053a0:	f107 031c 	add.w	r3, r7, #28
 80053a4:	601a      	str	r2, [r3, #0]
 80053a6:	f107 0318 	add.w	r3, r7, #24
 80053aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80053ae:	601a      	str	r2, [r3, #0]
 80053b0:	f107 0318 	add.w	r3, r7, #24
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	fa93 f2a3 	rbit	r2, r3
 80053ba:	f107 0314 	add.w	r3, r7, #20
 80053be:	601a      	str	r2, [r3, #0]
 80053c0:	4b22      	ldr	r3, [pc, #136]	; (800544c <HAL_RCC_OscConfig+0xe0c>)
 80053c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c4:	f107 0210 	add.w	r2, r7, #16
 80053c8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80053cc:	6011      	str	r1, [r2, #0]
 80053ce:	f107 0210 	add.w	r2, r7, #16
 80053d2:	6812      	ldr	r2, [r2, #0]
 80053d4:	fa92 f1a2 	rbit	r1, r2
 80053d8:	f107 020c 	add.w	r2, r7, #12
 80053dc:	6011      	str	r1, [r2, #0]
  return result;
 80053de:	f107 020c 	add.w	r2, r7, #12
 80053e2:	6812      	ldr	r2, [r2, #0]
 80053e4:	fab2 f282 	clz	r2, r2
 80053e8:	b2d2      	uxtb	r2, r2
 80053ea:	f042 0220 	orr.w	r2, r2, #32
 80053ee:	b2d2      	uxtb	r2, r2
 80053f0:	f002 021f 	and.w	r2, r2, #31
 80053f4:	2101      	movs	r1, #1
 80053f6:	fa01 f202 	lsl.w	r2, r1, r2
 80053fa:	4013      	ands	r3, r2
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d19e      	bne.n	800533e <HAL_RCC_OscConfig+0xcfe>
 8005400:	e01e      	b.n	8005440 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005402:	1d3b      	adds	r3, r7, #4
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	69db      	ldr	r3, [r3, #28]
 8005408:	2b01      	cmp	r3, #1
 800540a:	d101      	bne.n	8005410 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	e018      	b.n	8005442 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005410:	4b0e      	ldr	r3, [pc, #56]	; (800544c <HAL_RCC_OscConfig+0xe0c>)
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005418:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800541c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005420:	1d3b      	adds	r3, r7, #4
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	6a1b      	ldr	r3, [r3, #32]
 8005426:	429a      	cmp	r2, r3
 8005428:	d108      	bne.n	800543c <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800542a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800542e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005432:	1d3b      	adds	r3, r7, #4
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005438:	429a      	cmp	r2, r3
 800543a:	d001      	beq.n	8005440 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	e000      	b.n	8005442 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8005440:	2300      	movs	r3, #0
}
 8005442:	4618      	mov	r0, r3
 8005444:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}
 800544c:	40021000 	.word	0x40021000

08005450 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b09e      	sub	sp, #120	; 0x78
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800545a:	2300      	movs	r3, #0
 800545c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d101      	bne.n	8005468 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	e162      	b.n	800572e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005468:	4b90      	ldr	r3, [pc, #576]	; (80056ac <HAL_RCC_ClockConfig+0x25c>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 0307 	and.w	r3, r3, #7
 8005470:	683a      	ldr	r2, [r7, #0]
 8005472:	429a      	cmp	r2, r3
 8005474:	d910      	bls.n	8005498 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005476:	4b8d      	ldr	r3, [pc, #564]	; (80056ac <HAL_RCC_ClockConfig+0x25c>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f023 0207 	bic.w	r2, r3, #7
 800547e:	498b      	ldr	r1, [pc, #556]	; (80056ac <HAL_RCC_ClockConfig+0x25c>)
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	4313      	orrs	r3, r2
 8005484:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005486:	4b89      	ldr	r3, [pc, #548]	; (80056ac <HAL_RCC_ClockConfig+0x25c>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f003 0307 	and.w	r3, r3, #7
 800548e:	683a      	ldr	r2, [r7, #0]
 8005490:	429a      	cmp	r2, r3
 8005492:	d001      	beq.n	8005498 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	e14a      	b.n	800572e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f003 0302 	and.w	r3, r3, #2
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d008      	beq.n	80054b6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054a4:	4b82      	ldr	r3, [pc, #520]	; (80056b0 <HAL_RCC_ClockConfig+0x260>)
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	497f      	ldr	r1, [pc, #508]	; (80056b0 <HAL_RCC_ClockConfig+0x260>)
 80054b2:	4313      	orrs	r3, r2
 80054b4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f003 0301 	and.w	r3, r3, #1
 80054be:	2b00      	cmp	r3, #0
 80054c0:	f000 80dc 	beq.w	800567c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d13c      	bne.n	8005546 <HAL_RCC_ClockConfig+0xf6>
 80054cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80054d0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80054d4:	fa93 f3a3 	rbit	r3, r3
 80054d8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80054da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054dc:	fab3 f383 	clz	r3, r3
 80054e0:	b2db      	uxtb	r3, r3
 80054e2:	095b      	lsrs	r3, r3, #5
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	f043 0301 	orr.w	r3, r3, #1
 80054ea:	b2db      	uxtb	r3, r3
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d102      	bne.n	80054f6 <HAL_RCC_ClockConfig+0xa6>
 80054f0:	4b6f      	ldr	r3, [pc, #444]	; (80056b0 <HAL_RCC_ClockConfig+0x260>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	e00f      	b.n	8005516 <HAL_RCC_ClockConfig+0xc6>
 80054f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80054fa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80054fe:	fa93 f3a3 	rbit	r3, r3
 8005502:	667b      	str	r3, [r7, #100]	; 0x64
 8005504:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005508:	663b      	str	r3, [r7, #96]	; 0x60
 800550a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800550c:	fa93 f3a3 	rbit	r3, r3
 8005510:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005512:	4b67      	ldr	r3, [pc, #412]	; (80056b0 <HAL_RCC_ClockConfig+0x260>)
 8005514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005516:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800551a:	65ba      	str	r2, [r7, #88]	; 0x58
 800551c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800551e:	fa92 f2a2 	rbit	r2, r2
 8005522:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8005524:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005526:	fab2 f282 	clz	r2, r2
 800552a:	b2d2      	uxtb	r2, r2
 800552c:	f042 0220 	orr.w	r2, r2, #32
 8005530:	b2d2      	uxtb	r2, r2
 8005532:	f002 021f 	and.w	r2, r2, #31
 8005536:	2101      	movs	r1, #1
 8005538:	fa01 f202 	lsl.w	r2, r1, r2
 800553c:	4013      	ands	r3, r2
 800553e:	2b00      	cmp	r3, #0
 8005540:	d17b      	bne.n	800563a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	e0f3      	b.n	800572e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	2b02      	cmp	r3, #2
 800554c:	d13c      	bne.n	80055c8 <HAL_RCC_ClockConfig+0x178>
 800554e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005552:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005554:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005556:	fa93 f3a3 	rbit	r3, r3
 800555a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800555c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800555e:	fab3 f383 	clz	r3, r3
 8005562:	b2db      	uxtb	r3, r3
 8005564:	095b      	lsrs	r3, r3, #5
 8005566:	b2db      	uxtb	r3, r3
 8005568:	f043 0301 	orr.w	r3, r3, #1
 800556c:	b2db      	uxtb	r3, r3
 800556e:	2b01      	cmp	r3, #1
 8005570:	d102      	bne.n	8005578 <HAL_RCC_ClockConfig+0x128>
 8005572:	4b4f      	ldr	r3, [pc, #316]	; (80056b0 <HAL_RCC_ClockConfig+0x260>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	e00f      	b.n	8005598 <HAL_RCC_ClockConfig+0x148>
 8005578:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800557c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800557e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005580:	fa93 f3a3 	rbit	r3, r3
 8005584:	647b      	str	r3, [r7, #68]	; 0x44
 8005586:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800558a:	643b      	str	r3, [r7, #64]	; 0x40
 800558c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800558e:	fa93 f3a3 	rbit	r3, r3
 8005592:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005594:	4b46      	ldr	r3, [pc, #280]	; (80056b0 <HAL_RCC_ClockConfig+0x260>)
 8005596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005598:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800559c:	63ba      	str	r2, [r7, #56]	; 0x38
 800559e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80055a0:	fa92 f2a2 	rbit	r2, r2
 80055a4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80055a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80055a8:	fab2 f282 	clz	r2, r2
 80055ac:	b2d2      	uxtb	r2, r2
 80055ae:	f042 0220 	orr.w	r2, r2, #32
 80055b2:	b2d2      	uxtb	r2, r2
 80055b4:	f002 021f 	and.w	r2, r2, #31
 80055b8:	2101      	movs	r1, #1
 80055ba:	fa01 f202 	lsl.w	r2, r1, r2
 80055be:	4013      	ands	r3, r2
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d13a      	bne.n	800563a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	e0b2      	b.n	800572e <HAL_RCC_ClockConfig+0x2de>
 80055c8:	2302      	movs	r3, #2
 80055ca:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ce:	fa93 f3a3 	rbit	r3, r3
 80055d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80055d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055d6:	fab3 f383 	clz	r3, r3
 80055da:	b2db      	uxtb	r3, r3
 80055dc:	095b      	lsrs	r3, r3, #5
 80055de:	b2db      	uxtb	r3, r3
 80055e0:	f043 0301 	orr.w	r3, r3, #1
 80055e4:	b2db      	uxtb	r3, r3
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d102      	bne.n	80055f0 <HAL_RCC_ClockConfig+0x1a0>
 80055ea:	4b31      	ldr	r3, [pc, #196]	; (80056b0 <HAL_RCC_ClockConfig+0x260>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	e00d      	b.n	800560c <HAL_RCC_ClockConfig+0x1bc>
 80055f0:	2302      	movs	r3, #2
 80055f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055f6:	fa93 f3a3 	rbit	r3, r3
 80055fa:	627b      	str	r3, [r7, #36]	; 0x24
 80055fc:	2302      	movs	r3, #2
 80055fe:	623b      	str	r3, [r7, #32]
 8005600:	6a3b      	ldr	r3, [r7, #32]
 8005602:	fa93 f3a3 	rbit	r3, r3
 8005606:	61fb      	str	r3, [r7, #28]
 8005608:	4b29      	ldr	r3, [pc, #164]	; (80056b0 <HAL_RCC_ClockConfig+0x260>)
 800560a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800560c:	2202      	movs	r2, #2
 800560e:	61ba      	str	r2, [r7, #24]
 8005610:	69ba      	ldr	r2, [r7, #24]
 8005612:	fa92 f2a2 	rbit	r2, r2
 8005616:	617a      	str	r2, [r7, #20]
  return result;
 8005618:	697a      	ldr	r2, [r7, #20]
 800561a:	fab2 f282 	clz	r2, r2
 800561e:	b2d2      	uxtb	r2, r2
 8005620:	f042 0220 	orr.w	r2, r2, #32
 8005624:	b2d2      	uxtb	r2, r2
 8005626:	f002 021f 	and.w	r2, r2, #31
 800562a:	2101      	movs	r1, #1
 800562c:	fa01 f202 	lsl.w	r2, r1, r2
 8005630:	4013      	ands	r3, r2
 8005632:	2b00      	cmp	r3, #0
 8005634:	d101      	bne.n	800563a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	e079      	b.n	800572e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800563a:	4b1d      	ldr	r3, [pc, #116]	; (80056b0 <HAL_RCC_ClockConfig+0x260>)
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	f023 0203 	bic.w	r2, r3, #3
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	491a      	ldr	r1, [pc, #104]	; (80056b0 <HAL_RCC_ClockConfig+0x260>)
 8005648:	4313      	orrs	r3, r2
 800564a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800564c:	f7fc faa0 	bl	8001b90 <HAL_GetTick>
 8005650:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005652:	e00a      	b.n	800566a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005654:	f7fc fa9c 	bl	8001b90 <HAL_GetTick>
 8005658:	4602      	mov	r2, r0
 800565a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800565c:	1ad3      	subs	r3, r2, r3
 800565e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005662:	4293      	cmp	r3, r2
 8005664:	d901      	bls.n	800566a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8005666:	2303      	movs	r3, #3
 8005668:	e061      	b.n	800572e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800566a:	4b11      	ldr	r3, [pc, #68]	; (80056b0 <HAL_RCC_ClockConfig+0x260>)
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	f003 020c 	and.w	r2, r3, #12
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	009b      	lsls	r3, r3, #2
 8005678:	429a      	cmp	r2, r3
 800567a:	d1eb      	bne.n	8005654 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800567c:	4b0b      	ldr	r3, [pc, #44]	; (80056ac <HAL_RCC_ClockConfig+0x25c>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f003 0307 	and.w	r3, r3, #7
 8005684:	683a      	ldr	r2, [r7, #0]
 8005686:	429a      	cmp	r2, r3
 8005688:	d214      	bcs.n	80056b4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800568a:	4b08      	ldr	r3, [pc, #32]	; (80056ac <HAL_RCC_ClockConfig+0x25c>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f023 0207 	bic.w	r2, r3, #7
 8005692:	4906      	ldr	r1, [pc, #24]	; (80056ac <HAL_RCC_ClockConfig+0x25c>)
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	4313      	orrs	r3, r2
 8005698:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800569a:	4b04      	ldr	r3, [pc, #16]	; (80056ac <HAL_RCC_ClockConfig+0x25c>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f003 0307 	and.w	r3, r3, #7
 80056a2:	683a      	ldr	r2, [r7, #0]
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d005      	beq.n	80056b4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	e040      	b.n	800572e <HAL_RCC_ClockConfig+0x2de>
 80056ac:	40022000 	.word	0x40022000
 80056b0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f003 0304 	and.w	r3, r3, #4
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d008      	beq.n	80056d2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80056c0:	4b1d      	ldr	r3, [pc, #116]	; (8005738 <HAL_RCC_ClockConfig+0x2e8>)
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	68db      	ldr	r3, [r3, #12]
 80056cc:	491a      	ldr	r1, [pc, #104]	; (8005738 <HAL_RCC_ClockConfig+0x2e8>)
 80056ce:	4313      	orrs	r3, r2
 80056d0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f003 0308 	and.w	r3, r3, #8
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d009      	beq.n	80056f2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80056de:	4b16      	ldr	r3, [pc, #88]	; (8005738 <HAL_RCC_ClockConfig+0x2e8>)
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	691b      	ldr	r3, [r3, #16]
 80056ea:	00db      	lsls	r3, r3, #3
 80056ec:	4912      	ldr	r1, [pc, #72]	; (8005738 <HAL_RCC_ClockConfig+0x2e8>)
 80056ee:	4313      	orrs	r3, r2
 80056f0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80056f2:	f000 f829 	bl	8005748 <HAL_RCC_GetSysClockFreq>
 80056f6:	4601      	mov	r1, r0
 80056f8:	4b0f      	ldr	r3, [pc, #60]	; (8005738 <HAL_RCC_ClockConfig+0x2e8>)
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005700:	22f0      	movs	r2, #240	; 0xf0
 8005702:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005704:	693a      	ldr	r2, [r7, #16]
 8005706:	fa92 f2a2 	rbit	r2, r2
 800570a:	60fa      	str	r2, [r7, #12]
  return result;
 800570c:	68fa      	ldr	r2, [r7, #12]
 800570e:	fab2 f282 	clz	r2, r2
 8005712:	b2d2      	uxtb	r2, r2
 8005714:	40d3      	lsrs	r3, r2
 8005716:	4a09      	ldr	r2, [pc, #36]	; (800573c <HAL_RCC_ClockConfig+0x2ec>)
 8005718:	5cd3      	ldrb	r3, [r2, r3]
 800571a:	fa21 f303 	lsr.w	r3, r1, r3
 800571e:	4a08      	ldr	r2, [pc, #32]	; (8005740 <HAL_RCC_ClockConfig+0x2f0>)
 8005720:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005722:	4b08      	ldr	r3, [pc, #32]	; (8005744 <HAL_RCC_ClockConfig+0x2f4>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4618      	mov	r0, r3
 8005728:	f7fc f9ee 	bl	8001b08 <HAL_InitTick>
  
  return HAL_OK;
 800572c:	2300      	movs	r3, #0
}
 800572e:	4618      	mov	r0, r3
 8005730:	3778      	adds	r7, #120	; 0x78
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}
 8005736:	bf00      	nop
 8005738:	40021000 	.word	0x40021000
 800573c:	0800e2c8 	.word	0x0800e2c8
 8005740:	20000000 	.word	0x20000000
 8005744:	20000004 	.word	0x20000004

08005748 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005748:	b480      	push	{r7}
 800574a:	b08b      	sub	sp, #44	; 0x2c
 800574c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800574e:	2300      	movs	r3, #0
 8005750:	61fb      	str	r3, [r7, #28]
 8005752:	2300      	movs	r3, #0
 8005754:	61bb      	str	r3, [r7, #24]
 8005756:	2300      	movs	r3, #0
 8005758:	627b      	str	r3, [r7, #36]	; 0x24
 800575a:	2300      	movs	r3, #0
 800575c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800575e:	2300      	movs	r3, #0
 8005760:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8005762:	4b29      	ldr	r3, [pc, #164]	; (8005808 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005768:	69fb      	ldr	r3, [r7, #28]
 800576a:	f003 030c 	and.w	r3, r3, #12
 800576e:	2b04      	cmp	r3, #4
 8005770:	d002      	beq.n	8005778 <HAL_RCC_GetSysClockFreq+0x30>
 8005772:	2b08      	cmp	r3, #8
 8005774:	d003      	beq.n	800577e <HAL_RCC_GetSysClockFreq+0x36>
 8005776:	e03c      	b.n	80057f2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005778:	4b24      	ldr	r3, [pc, #144]	; (800580c <HAL_RCC_GetSysClockFreq+0xc4>)
 800577a:	623b      	str	r3, [r7, #32]
      break;
 800577c:	e03c      	b.n	80057f8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800577e:	69fb      	ldr	r3, [r7, #28]
 8005780:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005784:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005788:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800578a:	68ba      	ldr	r2, [r7, #8]
 800578c:	fa92 f2a2 	rbit	r2, r2
 8005790:	607a      	str	r2, [r7, #4]
  return result;
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	fab2 f282 	clz	r2, r2
 8005798:	b2d2      	uxtb	r2, r2
 800579a:	40d3      	lsrs	r3, r2
 800579c:	4a1c      	ldr	r2, [pc, #112]	; (8005810 <HAL_RCC_GetSysClockFreq+0xc8>)
 800579e:	5cd3      	ldrb	r3, [r2, r3]
 80057a0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80057a2:	4b19      	ldr	r3, [pc, #100]	; (8005808 <HAL_RCC_GetSysClockFreq+0xc0>)
 80057a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057a6:	f003 030f 	and.w	r3, r3, #15
 80057aa:	220f      	movs	r2, #15
 80057ac:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057ae:	693a      	ldr	r2, [r7, #16]
 80057b0:	fa92 f2a2 	rbit	r2, r2
 80057b4:	60fa      	str	r2, [r7, #12]
  return result;
 80057b6:	68fa      	ldr	r2, [r7, #12]
 80057b8:	fab2 f282 	clz	r2, r2
 80057bc:	b2d2      	uxtb	r2, r2
 80057be:	40d3      	lsrs	r3, r2
 80057c0:	4a14      	ldr	r2, [pc, #80]	; (8005814 <HAL_RCC_GetSysClockFreq+0xcc>)
 80057c2:	5cd3      	ldrb	r3, [r2, r3]
 80057c4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80057c6:	69fb      	ldr	r3, [r7, #28]
 80057c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d008      	beq.n	80057e2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80057d0:	4a0e      	ldr	r2, [pc, #56]	; (800580c <HAL_RCC_GetSysClockFreq+0xc4>)
 80057d2:	69bb      	ldr	r3, [r7, #24]
 80057d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	fb02 f303 	mul.w	r3, r2, r3
 80057de:	627b      	str	r3, [r7, #36]	; 0x24
 80057e0:	e004      	b.n	80057ec <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	4a0c      	ldr	r2, [pc, #48]	; (8005818 <HAL_RCC_GetSysClockFreq+0xd0>)
 80057e6:	fb02 f303 	mul.w	r3, r2, r3
 80057ea:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80057ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ee:	623b      	str	r3, [r7, #32]
      break;
 80057f0:	e002      	b.n	80057f8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80057f2:	4b06      	ldr	r3, [pc, #24]	; (800580c <HAL_RCC_GetSysClockFreq+0xc4>)
 80057f4:	623b      	str	r3, [r7, #32]
      break;
 80057f6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80057f8:	6a3b      	ldr	r3, [r7, #32]
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	372c      	adds	r7, #44	; 0x2c
 80057fe:	46bd      	mov	sp, r7
 8005800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005804:	4770      	bx	lr
 8005806:	bf00      	nop
 8005808:	40021000 	.word	0x40021000
 800580c:	007a1200 	.word	0x007a1200
 8005810:	0800e2d8 	.word	0x0800e2d8
 8005814:	0800e2e8 	.word	0x0800e2e8
 8005818:	003d0900 	.word	0x003d0900

0800581c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b092      	sub	sp, #72	; 0x48
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005824:	2300      	movs	r3, #0
 8005826:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005828:	2300      	movs	r3, #0
 800582a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800582c:	2300      	movs	r3, #0
 800582e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800583a:	2b00      	cmp	r3, #0
 800583c:	f000 80d4 	beq.w	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005840:	4b4e      	ldr	r3, [pc, #312]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005842:	69db      	ldr	r3, [r3, #28]
 8005844:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005848:	2b00      	cmp	r3, #0
 800584a:	d10e      	bne.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800584c:	4b4b      	ldr	r3, [pc, #300]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800584e:	69db      	ldr	r3, [r3, #28]
 8005850:	4a4a      	ldr	r2, [pc, #296]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005852:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005856:	61d3      	str	r3, [r2, #28]
 8005858:	4b48      	ldr	r3, [pc, #288]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800585a:	69db      	ldr	r3, [r3, #28]
 800585c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005860:	60bb      	str	r3, [r7, #8]
 8005862:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005864:	2301      	movs	r3, #1
 8005866:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800586a:	4b45      	ldr	r3, [pc, #276]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005872:	2b00      	cmp	r3, #0
 8005874:	d118      	bne.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005876:	4b42      	ldr	r3, [pc, #264]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a41      	ldr	r2, [pc, #260]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800587c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005880:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005882:	f7fc f985 	bl	8001b90 <HAL_GetTick>
 8005886:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005888:	e008      	b.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800588a:	f7fc f981 	bl	8001b90 <HAL_GetTick>
 800588e:	4602      	mov	r2, r0
 8005890:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005892:	1ad3      	subs	r3, r2, r3
 8005894:	2b64      	cmp	r3, #100	; 0x64
 8005896:	d901      	bls.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005898:	2303      	movs	r3, #3
 800589a:	e169      	b.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800589c:	4b38      	ldr	r3, [pc, #224]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d0f0      	beq.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80058a8:	4b34      	ldr	r3, [pc, #208]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058aa:	6a1b      	ldr	r3, [r3, #32]
 80058ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058b0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80058b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	f000 8084 	beq.w	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80058c4:	429a      	cmp	r2, r3
 80058c6:	d07c      	beq.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80058c8:	4b2c      	ldr	r3, [pc, #176]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058ca:	6a1b      	ldr	r3, [r3, #32]
 80058cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80058d6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058da:	fa93 f3a3 	rbit	r3, r3
 80058de:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80058e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80058e2:	fab3 f383 	clz	r3, r3
 80058e6:	b2db      	uxtb	r3, r3
 80058e8:	461a      	mov	r2, r3
 80058ea:	4b26      	ldr	r3, [pc, #152]	; (8005984 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80058ec:	4413      	add	r3, r2
 80058ee:	009b      	lsls	r3, r3, #2
 80058f0:	461a      	mov	r2, r3
 80058f2:	2301      	movs	r3, #1
 80058f4:	6013      	str	r3, [r2, #0]
 80058f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80058fa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058fe:	fa93 f3a3 	rbit	r3, r3
 8005902:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005904:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005906:	fab3 f383 	clz	r3, r3
 800590a:	b2db      	uxtb	r3, r3
 800590c:	461a      	mov	r2, r3
 800590e:	4b1d      	ldr	r3, [pc, #116]	; (8005984 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005910:	4413      	add	r3, r2
 8005912:	009b      	lsls	r3, r3, #2
 8005914:	461a      	mov	r2, r3
 8005916:	2300      	movs	r3, #0
 8005918:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800591a:	4a18      	ldr	r2, [pc, #96]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800591c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800591e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005920:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005922:	f003 0301 	and.w	r3, r3, #1
 8005926:	2b00      	cmp	r3, #0
 8005928:	d04b      	beq.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800592a:	f7fc f931 	bl	8001b90 <HAL_GetTick>
 800592e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005930:	e00a      	b.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005932:	f7fc f92d 	bl	8001b90 <HAL_GetTick>
 8005936:	4602      	mov	r2, r0
 8005938:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800593a:	1ad3      	subs	r3, r2, r3
 800593c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005940:	4293      	cmp	r3, r2
 8005942:	d901      	bls.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005944:	2303      	movs	r3, #3
 8005946:	e113      	b.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8005948:	2302      	movs	r3, #2
 800594a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800594c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800594e:	fa93 f3a3 	rbit	r3, r3
 8005952:	627b      	str	r3, [r7, #36]	; 0x24
 8005954:	2302      	movs	r3, #2
 8005956:	623b      	str	r3, [r7, #32]
 8005958:	6a3b      	ldr	r3, [r7, #32]
 800595a:	fa93 f3a3 	rbit	r3, r3
 800595e:	61fb      	str	r3, [r7, #28]
  return result;
 8005960:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005962:	fab3 f383 	clz	r3, r3
 8005966:	b2db      	uxtb	r3, r3
 8005968:	095b      	lsrs	r3, r3, #5
 800596a:	b2db      	uxtb	r3, r3
 800596c:	f043 0302 	orr.w	r3, r3, #2
 8005970:	b2db      	uxtb	r3, r3
 8005972:	2b02      	cmp	r3, #2
 8005974:	d108      	bne.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005976:	4b01      	ldr	r3, [pc, #4]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005978:	6a1b      	ldr	r3, [r3, #32]
 800597a:	e00d      	b.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800597c:	40021000 	.word	0x40021000
 8005980:	40007000 	.word	0x40007000
 8005984:	10908100 	.word	0x10908100
 8005988:	2302      	movs	r3, #2
 800598a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800598c:	69bb      	ldr	r3, [r7, #24]
 800598e:	fa93 f3a3 	rbit	r3, r3
 8005992:	617b      	str	r3, [r7, #20]
 8005994:	4b78      	ldr	r3, [pc, #480]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005998:	2202      	movs	r2, #2
 800599a:	613a      	str	r2, [r7, #16]
 800599c:	693a      	ldr	r2, [r7, #16]
 800599e:	fa92 f2a2 	rbit	r2, r2
 80059a2:	60fa      	str	r2, [r7, #12]
  return result;
 80059a4:	68fa      	ldr	r2, [r7, #12]
 80059a6:	fab2 f282 	clz	r2, r2
 80059aa:	b2d2      	uxtb	r2, r2
 80059ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059b0:	b2d2      	uxtb	r2, r2
 80059b2:	f002 021f 	and.w	r2, r2, #31
 80059b6:	2101      	movs	r1, #1
 80059b8:	fa01 f202 	lsl.w	r2, r1, r2
 80059bc:	4013      	ands	r3, r2
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d0b7      	beq.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80059c2:	4b6d      	ldr	r3, [pc, #436]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059c4:	6a1b      	ldr	r3, [r3, #32]
 80059c6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	496a      	ldr	r1, [pc, #424]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059d0:	4313      	orrs	r3, r2
 80059d2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80059d4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d105      	bne.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059dc:	4b66      	ldr	r3, [pc, #408]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059de:	69db      	ldr	r3, [r3, #28]
 80059e0:	4a65      	ldr	r2, [pc, #404]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059e6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f003 0301 	and.w	r3, r3, #1
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d008      	beq.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80059f4:	4b60      	ldr	r3, [pc, #384]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059f8:	f023 0203 	bic.w	r2, r3, #3
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	495d      	ldr	r1, [pc, #372]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a02:	4313      	orrs	r3, r2
 8005a04:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f003 0302 	and.w	r3, r3, #2
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d008      	beq.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005a12:	4b59      	ldr	r3, [pc, #356]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a16:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	68db      	ldr	r3, [r3, #12]
 8005a1e:	4956      	ldr	r1, [pc, #344]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a20:	4313      	orrs	r3, r2
 8005a22:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f003 0304 	and.w	r3, r3, #4
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d008      	beq.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005a30:	4b51      	ldr	r3, [pc, #324]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a34:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	691b      	ldr	r3, [r3, #16]
 8005a3c:	494e      	ldr	r1, [pc, #312]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f003 0320 	and.w	r3, r3, #32
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d008      	beq.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005a4e:	4b4a      	ldr	r3, [pc, #296]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a52:	f023 0210 	bic.w	r2, r3, #16
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	69db      	ldr	r3, [r3, #28]
 8005a5a:	4947      	ldr	r1, [pc, #284]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d008      	beq.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005a6c:	4b42      	ldr	r3, [pc, #264]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a78:	493f      	ldr	r1, [pc, #252]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d008      	beq.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005a8a:	4b3b      	ldr	r3, [pc, #236]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a8e:	f023 0220 	bic.w	r2, r3, #32
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6a1b      	ldr	r3, [r3, #32]
 8005a96:	4938      	ldr	r1, [pc, #224]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f003 0308 	and.w	r3, r3, #8
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d008      	beq.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005aa8:	4b33      	ldr	r3, [pc, #204]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	695b      	ldr	r3, [r3, #20]
 8005ab4:	4930      	ldr	r1, [pc, #192]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f003 0310 	and.w	r3, r3, #16
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d008      	beq.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005ac6:	4b2c      	ldr	r3, [pc, #176]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	699b      	ldr	r3, [r3, #24]
 8005ad2:	4929      	ldr	r1, [pc, #164]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d008      	beq.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005ae4:	4b24      	ldr	r3, [pc, #144]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005af0:	4921      	ldr	r1, [pc, #132]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005af2:	4313      	orrs	r3, r2
 8005af4:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d008      	beq.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005b02:	4b1d      	ldr	r3, [pc, #116]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b06:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b0e:	491a      	ldr	r1, [pc, #104]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b10:	4313      	orrs	r3, r2
 8005b12:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d008      	beq.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8005b20:	4b15      	ldr	r3, [pc, #84]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b24:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b2c:	4912      	ldr	r1, [pc, #72]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d008      	beq.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005b3e:	4b0e      	ldr	r3, [pc, #56]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b42:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b4a:	490b      	ldr	r1, [pc, #44]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d008      	beq.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8005b5c:	4b06      	ldr	r3, [pc, #24]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b60:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b68:	4903      	ldr	r1, [pc, #12]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005b6e:	2300      	movs	r3, #0
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3748      	adds	r7, #72	; 0x48
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}
 8005b78:	40021000 	.word	0x40021000

08005b7c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b084      	sub	sp, #16
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d101      	bne.n	8005b8e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	e09d      	b.n	8005cca <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d108      	bne.n	8005ba8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b9e:	d009      	beq.n	8005bb4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	61da      	str	r2, [r3, #28]
 8005ba6:	e005      	b.n	8005bb4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2200      	movs	r2, #0
 8005bac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005bc0:	b2db      	uxtb	r3, r3
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d106      	bne.n	8005bd4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f7fb fdec 	bl	80017ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2202      	movs	r2, #2
 8005bd8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	681a      	ldr	r2, [r3, #0]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005bea:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	68db      	ldr	r3, [r3, #12]
 8005bf0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005bf4:	d902      	bls.n	8005bfc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	60fb      	str	r3, [r7, #12]
 8005bfa:	e002      	b.n	8005c02 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005bfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c00:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	68db      	ldr	r3, [r3, #12]
 8005c06:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005c0a:	d007      	beq.n	8005c1c <HAL_SPI_Init+0xa0>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	68db      	ldr	r3, [r3, #12]
 8005c10:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005c14:	d002      	beq.n	8005c1c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	689b      	ldr	r3, [r3, #8]
 8005c28:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005c2c:	431a      	orrs	r2, r3
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	691b      	ldr	r3, [r3, #16]
 8005c32:	f003 0302 	and.w	r3, r3, #2
 8005c36:	431a      	orrs	r2, r3
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	695b      	ldr	r3, [r3, #20]
 8005c3c:	f003 0301 	and.w	r3, r3, #1
 8005c40:	431a      	orrs	r2, r3
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	699b      	ldr	r3, [r3, #24]
 8005c46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c4a:	431a      	orrs	r2, r3
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	69db      	ldr	r3, [r3, #28]
 8005c50:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c54:	431a      	orrs	r2, r3
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6a1b      	ldr	r3, [r3, #32]
 8005c5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c5e:	ea42 0103 	orr.w	r1, r2, r3
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c66:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	430a      	orrs	r2, r1
 8005c70:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	699b      	ldr	r3, [r3, #24]
 8005c76:	0c1b      	lsrs	r3, r3, #16
 8005c78:	f003 0204 	and.w	r2, r3, #4
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c80:	f003 0310 	and.w	r3, r3, #16
 8005c84:	431a      	orrs	r2, r3
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c8a:	f003 0308 	and.w	r3, r3, #8
 8005c8e:	431a      	orrs	r2, r3
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	68db      	ldr	r3, [r3, #12]
 8005c94:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005c98:	ea42 0103 	orr.w	r1, r2, r3
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	430a      	orrs	r2, r1
 8005ca8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	69da      	ldr	r2, [r3, #28]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005cb8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005cc8:	2300      	movs	r3, #0
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3710      	adds	r7, #16
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}

08005cd2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005cd2:	b580      	push	{r7, lr}
 8005cd4:	b082      	sub	sp, #8
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d101      	bne.n	8005ce4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	e049      	b.n	8005d78 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cea:	b2db      	uxtb	r3, r3
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d106      	bne.n	8005cfe <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f7fb fd99 	bl	8001830 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2202      	movs	r2, #2
 8005d02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	3304      	adds	r3, #4
 8005d0e:	4619      	mov	r1, r3
 8005d10:	4610      	mov	r0, r2
 8005d12:	f000 f961 	bl	8005fd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2201      	movs	r2, #1
 8005d1a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2201      	movs	r2, #1
 8005d22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2201      	movs	r2, #1
 8005d2a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2201      	movs	r2, #1
 8005d32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2201      	movs	r2, #1
 8005d3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2201      	movs	r2, #1
 8005d42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2201      	movs	r2, #1
 8005d4a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2201      	movs	r2, #1
 8005d52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2201      	movs	r2, #1
 8005d5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2201      	movs	r2, #1
 8005d62:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2201      	movs	r2, #1
 8005d6a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2201      	movs	r2, #1
 8005d72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d76:	2300      	movs	r3, #0
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3708      	adds	r7, #8
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}

08005d80 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b085      	sub	sp, #20
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d8e:	b2db      	uxtb	r3, r3
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d001      	beq.n	8005d98 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	e042      	b.n	8005e1e <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2202      	movs	r2, #2
 8005d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a21      	ldr	r2, [pc, #132]	; (8005e2c <HAL_TIM_Base_Start+0xac>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d018      	beq.n	8005ddc <HAL_TIM_Base_Start+0x5c>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005db2:	d013      	beq.n	8005ddc <HAL_TIM_Base_Start+0x5c>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a1d      	ldr	r2, [pc, #116]	; (8005e30 <HAL_TIM_Base_Start+0xb0>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d00e      	beq.n	8005ddc <HAL_TIM_Base_Start+0x5c>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a1c      	ldr	r2, [pc, #112]	; (8005e34 <HAL_TIM_Base_Start+0xb4>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d009      	beq.n	8005ddc <HAL_TIM_Base_Start+0x5c>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a1a      	ldr	r2, [pc, #104]	; (8005e38 <HAL_TIM_Base_Start+0xb8>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d004      	beq.n	8005ddc <HAL_TIM_Base_Start+0x5c>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a19      	ldr	r2, [pc, #100]	; (8005e3c <HAL_TIM_Base_Start+0xbc>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d115      	bne.n	8005e08 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	689a      	ldr	r2, [r3, #8]
 8005de2:	4b17      	ldr	r3, [pc, #92]	; (8005e40 <HAL_TIM_Base_Start+0xc0>)
 8005de4:	4013      	ands	r3, r2
 8005de6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2b06      	cmp	r3, #6
 8005dec:	d015      	beq.n	8005e1a <HAL_TIM_Base_Start+0x9a>
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005df4:	d011      	beq.n	8005e1a <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f042 0201 	orr.w	r2, r2, #1
 8005e04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e06:	e008      	b.n	8005e1a <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f042 0201 	orr.w	r2, r2, #1
 8005e16:	601a      	str	r2, [r3, #0]
 8005e18:	e000      	b.n	8005e1c <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e1a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005e1c:	2300      	movs	r3, #0
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3714      	adds	r7, #20
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr
 8005e2a:	bf00      	nop
 8005e2c:	40012c00 	.word	0x40012c00
 8005e30:	40000400 	.word	0x40000400
 8005e34:	40000800 	.word	0x40000800
 8005e38:	40013400 	.word	0x40013400
 8005e3c:	40014000 	.word	0x40014000
 8005e40:	00010007 	.word	0x00010007

08005e44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b084      	sub	sp, #16
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
 8005e4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	d101      	bne.n	8005e60 <HAL_TIM_ConfigClockSource+0x1c>
 8005e5c:	2302      	movs	r3, #2
 8005e5e:	e0b6      	b.n	8005fce <HAL_TIM_ConfigClockSource+0x18a>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2201      	movs	r2, #1
 8005e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2202      	movs	r2, #2
 8005e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e7e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005e82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e8a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	68ba      	ldr	r2, [r7, #8]
 8005e92:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e9c:	d03e      	beq.n	8005f1c <HAL_TIM_ConfigClockSource+0xd8>
 8005e9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ea2:	f200 8087 	bhi.w	8005fb4 <HAL_TIM_ConfigClockSource+0x170>
 8005ea6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005eaa:	f000 8086 	beq.w	8005fba <HAL_TIM_ConfigClockSource+0x176>
 8005eae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005eb2:	d87f      	bhi.n	8005fb4 <HAL_TIM_ConfigClockSource+0x170>
 8005eb4:	2b70      	cmp	r3, #112	; 0x70
 8005eb6:	d01a      	beq.n	8005eee <HAL_TIM_ConfigClockSource+0xaa>
 8005eb8:	2b70      	cmp	r3, #112	; 0x70
 8005eba:	d87b      	bhi.n	8005fb4 <HAL_TIM_ConfigClockSource+0x170>
 8005ebc:	2b60      	cmp	r3, #96	; 0x60
 8005ebe:	d050      	beq.n	8005f62 <HAL_TIM_ConfigClockSource+0x11e>
 8005ec0:	2b60      	cmp	r3, #96	; 0x60
 8005ec2:	d877      	bhi.n	8005fb4 <HAL_TIM_ConfigClockSource+0x170>
 8005ec4:	2b50      	cmp	r3, #80	; 0x50
 8005ec6:	d03c      	beq.n	8005f42 <HAL_TIM_ConfigClockSource+0xfe>
 8005ec8:	2b50      	cmp	r3, #80	; 0x50
 8005eca:	d873      	bhi.n	8005fb4 <HAL_TIM_ConfigClockSource+0x170>
 8005ecc:	2b40      	cmp	r3, #64	; 0x40
 8005ece:	d058      	beq.n	8005f82 <HAL_TIM_ConfigClockSource+0x13e>
 8005ed0:	2b40      	cmp	r3, #64	; 0x40
 8005ed2:	d86f      	bhi.n	8005fb4 <HAL_TIM_ConfigClockSource+0x170>
 8005ed4:	2b30      	cmp	r3, #48	; 0x30
 8005ed6:	d064      	beq.n	8005fa2 <HAL_TIM_ConfigClockSource+0x15e>
 8005ed8:	2b30      	cmp	r3, #48	; 0x30
 8005eda:	d86b      	bhi.n	8005fb4 <HAL_TIM_ConfigClockSource+0x170>
 8005edc:	2b20      	cmp	r3, #32
 8005ede:	d060      	beq.n	8005fa2 <HAL_TIM_ConfigClockSource+0x15e>
 8005ee0:	2b20      	cmp	r3, #32
 8005ee2:	d867      	bhi.n	8005fb4 <HAL_TIM_ConfigClockSource+0x170>
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d05c      	beq.n	8005fa2 <HAL_TIM_ConfigClockSource+0x15e>
 8005ee8:	2b10      	cmp	r3, #16
 8005eea:	d05a      	beq.n	8005fa2 <HAL_TIM_ConfigClockSource+0x15e>
 8005eec:	e062      	b.n	8005fb4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6818      	ldr	r0, [r3, #0]
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	6899      	ldr	r1, [r3, #8]
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	685a      	ldr	r2, [r3, #4]
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	68db      	ldr	r3, [r3, #12]
 8005efe:	f000 f975 	bl	80061ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005f10:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	68ba      	ldr	r2, [r7, #8]
 8005f18:	609a      	str	r2, [r3, #8]
      break;
 8005f1a:	e04f      	b.n	8005fbc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6818      	ldr	r0, [r3, #0]
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	6899      	ldr	r1, [r3, #8]
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	685a      	ldr	r2, [r3, #4]
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	68db      	ldr	r3, [r3, #12]
 8005f2c:	f000 f95e 	bl	80061ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	689a      	ldr	r2, [r3, #8]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f3e:	609a      	str	r2, [r3, #8]
      break;
 8005f40:	e03c      	b.n	8005fbc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6818      	ldr	r0, [r3, #0]
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	6859      	ldr	r1, [r3, #4]
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	68db      	ldr	r3, [r3, #12]
 8005f4e:	461a      	mov	r2, r3
 8005f50:	f000 f8d2 	bl	80060f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	2150      	movs	r1, #80	; 0x50
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f000 f92b 	bl	80061b6 <TIM_ITRx_SetConfig>
      break;
 8005f60:	e02c      	b.n	8005fbc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6818      	ldr	r0, [r3, #0]
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	6859      	ldr	r1, [r3, #4]
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	68db      	ldr	r3, [r3, #12]
 8005f6e:	461a      	mov	r2, r3
 8005f70:	f000 f8f1 	bl	8006156 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	2160      	movs	r1, #96	; 0x60
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f000 f91b 	bl	80061b6 <TIM_ITRx_SetConfig>
      break;
 8005f80:	e01c      	b.n	8005fbc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6818      	ldr	r0, [r3, #0]
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	6859      	ldr	r1, [r3, #4]
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	68db      	ldr	r3, [r3, #12]
 8005f8e:	461a      	mov	r2, r3
 8005f90:	f000 f8b2 	bl	80060f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	2140      	movs	r1, #64	; 0x40
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f000 f90b 	bl	80061b6 <TIM_ITRx_SetConfig>
      break;
 8005fa0:	e00c      	b.n	8005fbc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681a      	ldr	r2, [r3, #0]
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4619      	mov	r1, r3
 8005fac:	4610      	mov	r0, r2
 8005fae:	f000 f902 	bl	80061b6 <TIM_ITRx_SetConfig>
      break;
 8005fb2:	e003      	b.n	8005fbc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	73fb      	strb	r3, [r7, #15]
      break;
 8005fb8:	e000      	b.n	8005fbc <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005fba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005fcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3710      	adds	r7, #16
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}
	...

08005fd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b085      	sub	sp, #20
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
 8005fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	4a3c      	ldr	r2, [pc, #240]	; (80060dc <TIM_Base_SetConfig+0x104>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d00f      	beq.n	8006010 <TIM_Base_SetConfig+0x38>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ff6:	d00b      	beq.n	8006010 <TIM_Base_SetConfig+0x38>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	4a39      	ldr	r2, [pc, #228]	; (80060e0 <TIM_Base_SetConfig+0x108>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d007      	beq.n	8006010 <TIM_Base_SetConfig+0x38>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	4a38      	ldr	r2, [pc, #224]	; (80060e4 <TIM_Base_SetConfig+0x10c>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d003      	beq.n	8006010 <TIM_Base_SetConfig+0x38>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	4a37      	ldr	r2, [pc, #220]	; (80060e8 <TIM_Base_SetConfig+0x110>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d108      	bne.n	8006022 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006016:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	68fa      	ldr	r2, [r7, #12]
 800601e:	4313      	orrs	r3, r2
 8006020:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	4a2d      	ldr	r2, [pc, #180]	; (80060dc <TIM_Base_SetConfig+0x104>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d01b      	beq.n	8006062 <TIM_Base_SetConfig+0x8a>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006030:	d017      	beq.n	8006062 <TIM_Base_SetConfig+0x8a>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	4a2a      	ldr	r2, [pc, #168]	; (80060e0 <TIM_Base_SetConfig+0x108>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d013      	beq.n	8006062 <TIM_Base_SetConfig+0x8a>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	4a29      	ldr	r2, [pc, #164]	; (80060e4 <TIM_Base_SetConfig+0x10c>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d00f      	beq.n	8006062 <TIM_Base_SetConfig+0x8a>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4a28      	ldr	r2, [pc, #160]	; (80060e8 <TIM_Base_SetConfig+0x110>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d00b      	beq.n	8006062 <TIM_Base_SetConfig+0x8a>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	4a27      	ldr	r2, [pc, #156]	; (80060ec <TIM_Base_SetConfig+0x114>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d007      	beq.n	8006062 <TIM_Base_SetConfig+0x8a>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	4a26      	ldr	r2, [pc, #152]	; (80060f0 <TIM_Base_SetConfig+0x118>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d003      	beq.n	8006062 <TIM_Base_SetConfig+0x8a>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	4a25      	ldr	r2, [pc, #148]	; (80060f4 <TIM_Base_SetConfig+0x11c>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d108      	bne.n	8006074 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006068:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	68db      	ldr	r3, [r3, #12]
 800606e:	68fa      	ldr	r2, [r7, #12]
 8006070:	4313      	orrs	r3, r2
 8006072:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	695b      	ldr	r3, [r3, #20]
 800607e:	4313      	orrs	r3, r2
 8006080:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	68fa      	ldr	r2, [r7, #12]
 8006086:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	689a      	ldr	r2, [r3, #8]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	4a10      	ldr	r2, [pc, #64]	; (80060dc <TIM_Base_SetConfig+0x104>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d00f      	beq.n	80060c0 <TIM_Base_SetConfig+0xe8>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	4a11      	ldr	r2, [pc, #68]	; (80060e8 <TIM_Base_SetConfig+0x110>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d00b      	beq.n	80060c0 <TIM_Base_SetConfig+0xe8>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	4a10      	ldr	r2, [pc, #64]	; (80060ec <TIM_Base_SetConfig+0x114>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d007      	beq.n	80060c0 <TIM_Base_SetConfig+0xe8>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	4a0f      	ldr	r2, [pc, #60]	; (80060f0 <TIM_Base_SetConfig+0x118>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d003      	beq.n	80060c0 <TIM_Base_SetConfig+0xe8>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	4a0e      	ldr	r2, [pc, #56]	; (80060f4 <TIM_Base_SetConfig+0x11c>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d103      	bne.n	80060c8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	691a      	ldr	r2, [r3, #16]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2201      	movs	r2, #1
 80060cc:	615a      	str	r2, [r3, #20]
}
 80060ce:	bf00      	nop
 80060d0:	3714      	adds	r7, #20
 80060d2:	46bd      	mov	sp, r7
 80060d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d8:	4770      	bx	lr
 80060da:	bf00      	nop
 80060dc:	40012c00 	.word	0x40012c00
 80060e0:	40000400 	.word	0x40000400
 80060e4:	40000800 	.word	0x40000800
 80060e8:	40013400 	.word	0x40013400
 80060ec:	40014000 	.word	0x40014000
 80060f0:	40014400 	.word	0x40014400
 80060f4:	40014800 	.word	0x40014800

080060f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b087      	sub	sp, #28
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	60f8      	str	r0, [r7, #12]
 8006100:	60b9      	str	r1, [r7, #8]
 8006102:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	6a1b      	ldr	r3, [r3, #32]
 8006108:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	6a1b      	ldr	r3, [r3, #32]
 800610e:	f023 0201 	bic.w	r2, r3, #1
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	699b      	ldr	r3, [r3, #24]
 800611a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006122:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	011b      	lsls	r3, r3, #4
 8006128:	693a      	ldr	r2, [r7, #16]
 800612a:	4313      	orrs	r3, r2
 800612c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	f023 030a 	bic.w	r3, r3, #10
 8006134:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006136:	697a      	ldr	r2, [r7, #20]
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	4313      	orrs	r3, r2
 800613c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	693a      	ldr	r2, [r7, #16]
 8006142:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	697a      	ldr	r2, [r7, #20]
 8006148:	621a      	str	r2, [r3, #32]
}
 800614a:	bf00      	nop
 800614c:	371c      	adds	r7, #28
 800614e:	46bd      	mov	sp, r7
 8006150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006154:	4770      	bx	lr

08006156 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006156:	b480      	push	{r7}
 8006158:	b087      	sub	sp, #28
 800615a:	af00      	add	r7, sp, #0
 800615c:	60f8      	str	r0, [r7, #12]
 800615e:	60b9      	str	r1, [r7, #8]
 8006160:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	6a1b      	ldr	r3, [r3, #32]
 8006166:	f023 0210 	bic.w	r2, r3, #16
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	699b      	ldr	r3, [r3, #24]
 8006172:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	6a1b      	ldr	r3, [r3, #32]
 8006178:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006180:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	031b      	lsls	r3, r3, #12
 8006186:	697a      	ldr	r2, [r7, #20]
 8006188:	4313      	orrs	r3, r2
 800618a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006192:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	011b      	lsls	r3, r3, #4
 8006198:	693a      	ldr	r2, [r7, #16]
 800619a:	4313      	orrs	r3, r2
 800619c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	697a      	ldr	r2, [r7, #20]
 80061a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	693a      	ldr	r2, [r7, #16]
 80061a8:	621a      	str	r2, [r3, #32]
}
 80061aa:	bf00      	nop
 80061ac:	371c      	adds	r7, #28
 80061ae:	46bd      	mov	sp, r7
 80061b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b4:	4770      	bx	lr

080061b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80061b6:	b480      	push	{r7}
 80061b8:	b085      	sub	sp, #20
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	6078      	str	r0, [r7, #4]
 80061be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80061ce:	683a      	ldr	r2, [r7, #0]
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	4313      	orrs	r3, r2
 80061d4:	f043 0307 	orr.w	r3, r3, #7
 80061d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	68fa      	ldr	r2, [r7, #12]
 80061de:	609a      	str	r2, [r3, #8]
}
 80061e0:	bf00      	nop
 80061e2:	3714      	adds	r7, #20
 80061e4:	46bd      	mov	sp, r7
 80061e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ea:	4770      	bx	lr

080061ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b087      	sub	sp, #28
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	60f8      	str	r0, [r7, #12]
 80061f4:	60b9      	str	r1, [r7, #8]
 80061f6:	607a      	str	r2, [r7, #4]
 80061f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006206:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	021a      	lsls	r2, r3, #8
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	431a      	orrs	r2, r3
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	4313      	orrs	r3, r2
 8006214:	697a      	ldr	r2, [r7, #20]
 8006216:	4313      	orrs	r3, r2
 8006218:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	697a      	ldr	r2, [r7, #20]
 800621e:	609a      	str	r2, [r3, #8]
}
 8006220:	bf00      	nop
 8006222:	371c      	adds	r7, #28
 8006224:	46bd      	mov	sp, r7
 8006226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622a:	4770      	bx	lr

0800622c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800622c:	b480      	push	{r7}
 800622e:	b085      	sub	sp, #20
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
 8006234:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800623c:	2b01      	cmp	r3, #1
 800623e:	d101      	bne.n	8006244 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006240:	2302      	movs	r3, #2
 8006242:	e063      	b.n	800630c <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2201      	movs	r2, #1
 8006248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2202      	movs	r2, #2
 8006250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	689b      	ldr	r3, [r3, #8]
 8006262:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a2b      	ldr	r2, [pc, #172]	; (8006318 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d004      	beq.n	8006278 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a2a      	ldr	r2, [pc, #168]	; (800631c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d108      	bne.n	800628a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800627e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	685b      	ldr	r3, [r3, #4]
 8006284:	68fa      	ldr	r2, [r7, #12]
 8006286:	4313      	orrs	r3, r2
 8006288:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006290:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	68fa      	ldr	r2, [r7, #12]
 8006298:	4313      	orrs	r3, r2
 800629a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	68fa      	ldr	r2, [r7, #12]
 80062a2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a1b      	ldr	r2, [pc, #108]	; (8006318 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d018      	beq.n	80062e0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062b6:	d013      	beq.n	80062e0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a18      	ldr	r2, [pc, #96]	; (8006320 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d00e      	beq.n	80062e0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a17      	ldr	r2, [pc, #92]	; (8006324 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d009      	beq.n	80062e0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a12      	ldr	r2, [pc, #72]	; (800631c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d004      	beq.n	80062e0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a13      	ldr	r2, [pc, #76]	; (8006328 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d10c      	bne.n	80062fa <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062e6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	689b      	ldr	r3, [r3, #8]
 80062ec:	68ba      	ldr	r2, [r7, #8]
 80062ee:	4313      	orrs	r3, r2
 80062f0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	68ba      	ldr	r2, [r7, #8]
 80062f8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2201      	movs	r2, #1
 80062fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2200      	movs	r2, #0
 8006306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800630a:	2300      	movs	r3, #0
}
 800630c:	4618      	mov	r0, r3
 800630e:	3714      	adds	r7, #20
 8006310:	46bd      	mov	sp, r7
 8006312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006316:	4770      	bx	lr
 8006318:	40012c00 	.word	0x40012c00
 800631c:	40013400 	.word	0x40013400
 8006320:	40000400 	.word	0x40000400
 8006324:	40000800 	.word	0x40000800
 8006328:	40014000 	.word	0x40014000

0800632c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800632c:	b480      	push	{r7}
 800632e:	b085      	sub	sp, #20
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2200      	movs	r2, #0
 8006338:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800633c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006340:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	b29a      	uxth	r2, r3
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800634c:	2300      	movs	r3, #0
}
 800634e:	4618      	mov	r0, r3
 8006350:	3714      	adds	r7, #20
 8006352:	46bd      	mov	sp, r7
 8006354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006358:	4770      	bx	lr

0800635a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800635a:	b480      	push	{r7}
 800635c:	b085      	sub	sp, #20
 800635e:	af00      	add	r7, sp, #0
 8006360:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006362:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006366:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800636e:	b29a      	uxth	r2, r3
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	b29b      	uxth	r3, r3
 8006374:	43db      	mvns	r3, r3
 8006376:	b29b      	uxth	r3, r3
 8006378:	4013      	ands	r3, r2
 800637a:	b29a      	uxth	r2, r3
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006382:	2300      	movs	r3, #0
}
 8006384:	4618      	mov	r0, r3
 8006386:	3714      	adds	r7, #20
 8006388:	46bd      	mov	sp, r7
 800638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638e:	4770      	bx	lr

08006390 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006390:	b084      	sub	sp, #16
 8006392:	b480      	push	{r7}
 8006394:	b083      	sub	sp, #12
 8006396:	af00      	add	r7, sp, #0
 8006398:	6078      	str	r0, [r7, #4]
 800639a:	f107 0014 	add.w	r0, r7, #20
 800639e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2201      	movs	r2, #1
 80063a6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2200      	movs	r2, #0
 80063ae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2200      	movs	r2, #0
 80063b6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2200      	movs	r2, #0
 80063be:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80063c2:	2300      	movs	r3, #0
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	370c      	adds	r7, #12
 80063c8:	46bd      	mov	sp, r7
 80063ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ce:	b004      	add	sp, #16
 80063d0:	4770      	bx	lr
	...

080063d4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b09d      	sub	sp, #116	; 0x74
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80063de:	2300      	movs	r3, #0
 80063e0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80063e4:	687a      	ldr	r2, [r7, #4]
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	781b      	ldrb	r3, [r3, #0]
 80063ea:	009b      	lsls	r3, r3, #2
 80063ec:	4413      	add	r3, r2
 80063ee:	881b      	ldrh	r3, [r3, #0]
 80063f0:	b29b      	uxth	r3, r3
 80063f2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80063f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063fa:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	78db      	ldrb	r3, [r3, #3]
 8006402:	2b03      	cmp	r3, #3
 8006404:	d81f      	bhi.n	8006446 <USB_ActivateEndpoint+0x72>
 8006406:	a201      	add	r2, pc, #4	; (adr r2, 800640c <USB_ActivateEndpoint+0x38>)
 8006408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800640c:	0800641d 	.word	0x0800641d
 8006410:	08006439 	.word	0x08006439
 8006414:	0800644f 	.word	0x0800644f
 8006418:	0800642b 	.word	0x0800642b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800641c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006420:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006424:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006428:	e012      	b.n	8006450 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800642a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800642e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8006432:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006436:	e00b      	b.n	8006450 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006438:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800643c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006440:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006444:	e004      	b.n	8006450 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800644c:	e000      	b.n	8006450 <USB_ActivateEndpoint+0x7c>
      break;
 800644e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006450:	687a      	ldr	r2, [r7, #4]
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	781b      	ldrb	r3, [r3, #0]
 8006456:	009b      	lsls	r3, r3, #2
 8006458:	441a      	add	r2, r3
 800645a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800645e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006462:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006466:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800646a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800646e:	b29b      	uxth	r3, r3
 8006470:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006472:	687a      	ldr	r2, [r7, #4]
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	781b      	ldrb	r3, [r3, #0]
 8006478:	009b      	lsls	r3, r3, #2
 800647a:	4413      	add	r3, r2
 800647c:	881b      	ldrh	r3, [r3, #0]
 800647e:	b29b      	uxth	r3, r3
 8006480:	b21b      	sxth	r3, r3
 8006482:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006486:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800648a:	b21a      	sxth	r2, r3
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	781b      	ldrb	r3, [r3, #0]
 8006490:	b21b      	sxth	r3, r3
 8006492:	4313      	orrs	r3, r2
 8006494:	b21b      	sxth	r3, r3
 8006496:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800649a:	687a      	ldr	r2, [r7, #4]
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	781b      	ldrb	r3, [r3, #0]
 80064a0:	009b      	lsls	r3, r3, #2
 80064a2:	441a      	add	r2, r3
 80064a4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80064a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064b8:	b29b      	uxth	r3, r3
 80064ba:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	7b1b      	ldrb	r3, [r3, #12]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	f040 8149 	bne.w	8006758 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	785b      	ldrb	r3, [r3, #1]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	f000 8084 	beq.w	80065d8 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	61bb      	str	r3, [r7, #24]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064da:	b29b      	uxth	r3, r3
 80064dc:	461a      	mov	r2, r3
 80064de:	69bb      	ldr	r3, [r7, #24]
 80064e0:	4413      	add	r3, r2
 80064e2:	61bb      	str	r3, [r7, #24]
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	781b      	ldrb	r3, [r3, #0]
 80064e8:	011a      	lsls	r2, r3, #4
 80064ea:	69bb      	ldr	r3, [r7, #24]
 80064ec:	4413      	add	r3, r2
 80064ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064f2:	617b      	str	r3, [r7, #20]
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	88db      	ldrh	r3, [r3, #6]
 80064f8:	085b      	lsrs	r3, r3, #1
 80064fa:	b29b      	uxth	r3, r3
 80064fc:	005b      	lsls	r3, r3, #1
 80064fe:	b29a      	uxth	r2, r3
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006504:	687a      	ldr	r2, [r7, #4]
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	781b      	ldrb	r3, [r3, #0]
 800650a:	009b      	lsls	r3, r3, #2
 800650c:	4413      	add	r3, r2
 800650e:	881b      	ldrh	r3, [r3, #0]
 8006510:	827b      	strh	r3, [r7, #18]
 8006512:	8a7b      	ldrh	r3, [r7, #18]
 8006514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006518:	2b00      	cmp	r3, #0
 800651a:	d01b      	beq.n	8006554 <USB_ActivateEndpoint+0x180>
 800651c:	687a      	ldr	r2, [r7, #4]
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	781b      	ldrb	r3, [r3, #0]
 8006522:	009b      	lsls	r3, r3, #2
 8006524:	4413      	add	r3, r2
 8006526:	881b      	ldrh	r3, [r3, #0]
 8006528:	b29b      	uxth	r3, r3
 800652a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800652e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006532:	823b      	strh	r3, [r7, #16]
 8006534:	687a      	ldr	r2, [r7, #4]
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	781b      	ldrb	r3, [r3, #0]
 800653a:	009b      	lsls	r3, r3, #2
 800653c:	441a      	add	r2, r3
 800653e:	8a3b      	ldrh	r3, [r7, #16]
 8006540:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006544:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006548:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800654c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006550:	b29b      	uxth	r3, r3
 8006552:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	78db      	ldrb	r3, [r3, #3]
 8006558:	2b01      	cmp	r3, #1
 800655a:	d020      	beq.n	800659e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800655c:	687a      	ldr	r2, [r7, #4]
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	781b      	ldrb	r3, [r3, #0]
 8006562:	009b      	lsls	r3, r3, #2
 8006564:	4413      	add	r3, r2
 8006566:	881b      	ldrh	r3, [r3, #0]
 8006568:	b29b      	uxth	r3, r3
 800656a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800656e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006572:	81bb      	strh	r3, [r7, #12]
 8006574:	89bb      	ldrh	r3, [r7, #12]
 8006576:	f083 0320 	eor.w	r3, r3, #32
 800657a:	81bb      	strh	r3, [r7, #12]
 800657c:	687a      	ldr	r2, [r7, #4]
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	781b      	ldrb	r3, [r3, #0]
 8006582:	009b      	lsls	r3, r3, #2
 8006584:	441a      	add	r2, r3
 8006586:	89bb      	ldrh	r3, [r7, #12]
 8006588:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800658c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006590:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006594:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006598:	b29b      	uxth	r3, r3
 800659a:	8013      	strh	r3, [r2, #0]
 800659c:	e2a6      	b.n	8006aec <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800659e:	687a      	ldr	r2, [r7, #4]
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	781b      	ldrb	r3, [r3, #0]
 80065a4:	009b      	lsls	r3, r3, #2
 80065a6:	4413      	add	r3, r2
 80065a8:	881b      	ldrh	r3, [r3, #0]
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065b4:	81fb      	strh	r3, [r7, #14]
 80065b6:	687a      	ldr	r2, [r7, #4]
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	781b      	ldrb	r3, [r3, #0]
 80065bc:	009b      	lsls	r3, r3, #2
 80065be:	441a      	add	r2, r3
 80065c0:	89fb      	ldrh	r3, [r7, #14]
 80065c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065d2:	b29b      	uxth	r3, r3
 80065d4:	8013      	strh	r3, [r2, #0]
 80065d6:	e289      	b.n	8006aec <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	633b      	str	r3, [r7, #48]	; 0x30
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065e2:	b29b      	uxth	r3, r3
 80065e4:	461a      	mov	r2, r3
 80065e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065e8:	4413      	add	r3, r2
 80065ea:	633b      	str	r3, [r7, #48]	; 0x30
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	781b      	ldrb	r3, [r3, #0]
 80065f0:	011a      	lsls	r2, r3, #4
 80065f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f4:	4413      	add	r3, r2
 80065f6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80065fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	88db      	ldrh	r3, [r3, #6]
 8006600:	085b      	lsrs	r3, r3, #1
 8006602:	b29b      	uxth	r3, r3
 8006604:	005b      	lsls	r3, r3, #1
 8006606:	b29a      	uxth	r2, r3
 8006608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800660a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006616:	b29b      	uxth	r3, r3
 8006618:	461a      	mov	r2, r3
 800661a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800661c:	4413      	add	r3, r2
 800661e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	781b      	ldrb	r3, [r3, #0]
 8006624:	011a      	lsls	r2, r3, #4
 8006626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006628:	4413      	add	r3, r2
 800662a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800662e:	627b      	str	r3, [r7, #36]	; 0x24
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	691b      	ldr	r3, [r3, #16]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d112      	bne.n	800665e <USB_ActivateEndpoint+0x28a>
 8006638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800663a:	881b      	ldrh	r3, [r3, #0]
 800663c:	b29b      	uxth	r3, r3
 800663e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006642:	b29a      	uxth	r2, r3
 8006644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006646:	801a      	strh	r2, [r3, #0]
 8006648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800664a:	881b      	ldrh	r3, [r3, #0]
 800664c:	b29b      	uxth	r3, r3
 800664e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006652:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006656:	b29a      	uxth	r2, r3
 8006658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800665a:	801a      	strh	r2, [r3, #0]
 800665c:	e02f      	b.n	80066be <USB_ActivateEndpoint+0x2ea>
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	691b      	ldr	r3, [r3, #16]
 8006662:	2b3e      	cmp	r3, #62	; 0x3e
 8006664:	d813      	bhi.n	800668e <USB_ActivateEndpoint+0x2ba>
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	691b      	ldr	r3, [r3, #16]
 800666a:	085b      	lsrs	r3, r3, #1
 800666c:	66bb      	str	r3, [r7, #104]	; 0x68
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	691b      	ldr	r3, [r3, #16]
 8006672:	f003 0301 	and.w	r3, r3, #1
 8006676:	2b00      	cmp	r3, #0
 8006678:	d002      	beq.n	8006680 <USB_ActivateEndpoint+0x2ac>
 800667a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800667c:	3301      	adds	r3, #1
 800667e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006680:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006682:	b29b      	uxth	r3, r3
 8006684:	029b      	lsls	r3, r3, #10
 8006686:	b29a      	uxth	r2, r3
 8006688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800668a:	801a      	strh	r2, [r3, #0]
 800668c:	e017      	b.n	80066be <USB_ActivateEndpoint+0x2ea>
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	691b      	ldr	r3, [r3, #16]
 8006692:	095b      	lsrs	r3, r3, #5
 8006694:	66bb      	str	r3, [r7, #104]	; 0x68
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	691b      	ldr	r3, [r3, #16]
 800669a:	f003 031f 	and.w	r3, r3, #31
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d102      	bne.n	80066a8 <USB_ActivateEndpoint+0x2d4>
 80066a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80066a4:	3b01      	subs	r3, #1
 80066a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80066a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80066aa:	b29b      	uxth	r3, r3
 80066ac:	029b      	lsls	r3, r3, #10
 80066ae:	b29b      	uxth	r3, r3
 80066b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066b8:	b29a      	uxth	r2, r3
 80066ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066bc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80066be:	687a      	ldr	r2, [r7, #4]
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	009b      	lsls	r3, r3, #2
 80066c6:	4413      	add	r3, r2
 80066c8:	881b      	ldrh	r3, [r3, #0]
 80066ca:	847b      	strh	r3, [r7, #34]	; 0x22
 80066cc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80066ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d01b      	beq.n	800670e <USB_ActivateEndpoint+0x33a>
 80066d6:	687a      	ldr	r2, [r7, #4]
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	781b      	ldrb	r3, [r3, #0]
 80066dc:	009b      	lsls	r3, r3, #2
 80066de:	4413      	add	r3, r2
 80066e0:	881b      	ldrh	r3, [r3, #0]
 80066e2:	b29b      	uxth	r3, r3
 80066e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066ec:	843b      	strh	r3, [r7, #32]
 80066ee:	687a      	ldr	r2, [r7, #4]
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	781b      	ldrb	r3, [r3, #0]
 80066f4:	009b      	lsls	r3, r3, #2
 80066f6:	441a      	add	r2, r3
 80066f8:	8c3b      	ldrh	r3, [r7, #32]
 80066fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006702:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006706:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800670a:	b29b      	uxth	r3, r3
 800670c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800670e:	687a      	ldr	r2, [r7, #4]
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	781b      	ldrb	r3, [r3, #0]
 8006714:	009b      	lsls	r3, r3, #2
 8006716:	4413      	add	r3, r2
 8006718:	881b      	ldrh	r3, [r3, #0]
 800671a:	b29b      	uxth	r3, r3
 800671c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006720:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006724:	83fb      	strh	r3, [r7, #30]
 8006726:	8bfb      	ldrh	r3, [r7, #30]
 8006728:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800672c:	83fb      	strh	r3, [r7, #30]
 800672e:	8bfb      	ldrh	r3, [r7, #30]
 8006730:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006734:	83fb      	strh	r3, [r7, #30]
 8006736:	687a      	ldr	r2, [r7, #4]
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	781b      	ldrb	r3, [r3, #0]
 800673c:	009b      	lsls	r3, r3, #2
 800673e:	441a      	add	r2, r3
 8006740:	8bfb      	ldrh	r3, [r7, #30]
 8006742:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006746:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800674a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800674e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006752:	b29b      	uxth	r3, r3
 8006754:	8013      	strh	r3, [r2, #0]
 8006756:	e1c9      	b.n	8006aec <USB_ActivateEndpoint+0x718>
    }
  }
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	78db      	ldrb	r3, [r3, #3]
 800675c:	2b02      	cmp	r3, #2
 800675e:	d11e      	bne.n	800679e <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006760:	687a      	ldr	r2, [r7, #4]
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	781b      	ldrb	r3, [r3, #0]
 8006766:	009b      	lsls	r3, r3, #2
 8006768:	4413      	add	r3, r2
 800676a:	881b      	ldrh	r3, [r3, #0]
 800676c:	b29b      	uxth	r3, r3
 800676e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006772:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006776:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800677a:	687a      	ldr	r2, [r7, #4]
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	781b      	ldrb	r3, [r3, #0]
 8006780:	009b      	lsls	r3, r3, #2
 8006782:	441a      	add	r2, r3
 8006784:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006788:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800678c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006790:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006794:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006798:	b29b      	uxth	r3, r3
 800679a:	8013      	strh	r3, [r2, #0]
 800679c:	e01d      	b.n	80067da <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800679e:	687a      	ldr	r2, [r7, #4]
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	781b      	ldrb	r3, [r3, #0]
 80067a4:	009b      	lsls	r3, r3, #2
 80067a6:	4413      	add	r3, r2
 80067a8:	881b      	ldrh	r3, [r3, #0]
 80067aa:	b29b      	uxth	r3, r3
 80067ac:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80067b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067b4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80067b8:	687a      	ldr	r2, [r7, #4]
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	781b      	ldrb	r3, [r3, #0]
 80067be:	009b      	lsls	r3, r3, #2
 80067c0:	441a      	add	r2, r3
 80067c2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80067c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067d6:	b29b      	uxth	r3, r3
 80067d8:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067e4:	b29b      	uxth	r3, r3
 80067e6:	461a      	mov	r2, r3
 80067e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067ea:	4413      	add	r3, r2
 80067ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	781b      	ldrb	r3, [r3, #0]
 80067f2:	011a      	lsls	r2, r3, #4
 80067f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067f6:	4413      	add	r3, r2
 80067f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067fc:	65bb      	str	r3, [r7, #88]	; 0x58
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	891b      	ldrh	r3, [r3, #8]
 8006802:	085b      	lsrs	r3, r3, #1
 8006804:	b29b      	uxth	r3, r3
 8006806:	005b      	lsls	r3, r3, #1
 8006808:	b29a      	uxth	r2, r3
 800680a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800680c:	801a      	strh	r2, [r3, #0]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	657b      	str	r3, [r7, #84]	; 0x54
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006818:	b29b      	uxth	r3, r3
 800681a:	461a      	mov	r2, r3
 800681c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800681e:	4413      	add	r3, r2
 8006820:	657b      	str	r3, [r7, #84]	; 0x54
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	781b      	ldrb	r3, [r3, #0]
 8006826:	011a      	lsls	r2, r3, #4
 8006828:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800682a:	4413      	add	r3, r2
 800682c:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8006830:	653b      	str	r3, [r7, #80]	; 0x50
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	895b      	ldrh	r3, [r3, #10]
 8006836:	085b      	lsrs	r3, r3, #1
 8006838:	b29b      	uxth	r3, r3
 800683a:	005b      	lsls	r3, r3, #1
 800683c:	b29a      	uxth	r2, r3
 800683e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006840:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	785b      	ldrb	r3, [r3, #1]
 8006846:	2b00      	cmp	r3, #0
 8006848:	f040 8093 	bne.w	8006972 <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800684c:	687a      	ldr	r2, [r7, #4]
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	781b      	ldrb	r3, [r3, #0]
 8006852:	009b      	lsls	r3, r3, #2
 8006854:	4413      	add	r3, r2
 8006856:	881b      	ldrh	r3, [r3, #0]
 8006858:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800685c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006860:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006864:	2b00      	cmp	r3, #0
 8006866:	d01b      	beq.n	80068a0 <USB_ActivateEndpoint+0x4cc>
 8006868:	687a      	ldr	r2, [r7, #4]
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	781b      	ldrb	r3, [r3, #0]
 800686e:	009b      	lsls	r3, r3, #2
 8006870:	4413      	add	r3, r2
 8006872:	881b      	ldrh	r3, [r3, #0]
 8006874:	b29b      	uxth	r3, r3
 8006876:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800687a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800687e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006880:	687a      	ldr	r2, [r7, #4]
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	781b      	ldrb	r3, [r3, #0]
 8006886:	009b      	lsls	r3, r3, #2
 8006888:	441a      	add	r2, r3
 800688a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800688c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006890:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006894:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006898:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800689c:	b29b      	uxth	r3, r3
 800689e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80068a0:	687a      	ldr	r2, [r7, #4]
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	781b      	ldrb	r3, [r3, #0]
 80068a6:	009b      	lsls	r3, r3, #2
 80068a8:	4413      	add	r3, r2
 80068aa:	881b      	ldrh	r3, [r3, #0]
 80068ac:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80068ae:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80068b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d01b      	beq.n	80068f0 <USB_ActivateEndpoint+0x51c>
 80068b8:	687a      	ldr	r2, [r7, #4]
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	781b      	ldrb	r3, [r3, #0]
 80068be:	009b      	lsls	r3, r3, #2
 80068c0:	4413      	add	r3, r2
 80068c2:	881b      	ldrh	r3, [r3, #0]
 80068c4:	b29b      	uxth	r3, r3
 80068c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068ce:	877b      	strh	r3, [r7, #58]	; 0x3a
 80068d0:	687a      	ldr	r2, [r7, #4]
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	781b      	ldrb	r3, [r3, #0]
 80068d6:	009b      	lsls	r3, r3, #2
 80068d8:	441a      	add	r2, r3
 80068da:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80068dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068e8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80068ec:	b29b      	uxth	r3, r3
 80068ee:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80068f0:	687a      	ldr	r2, [r7, #4]
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	781b      	ldrb	r3, [r3, #0]
 80068f6:	009b      	lsls	r3, r3, #2
 80068f8:	4413      	add	r3, r2
 80068fa:	881b      	ldrh	r3, [r3, #0]
 80068fc:	b29b      	uxth	r3, r3
 80068fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006902:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006906:	873b      	strh	r3, [r7, #56]	; 0x38
 8006908:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800690a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800690e:	873b      	strh	r3, [r7, #56]	; 0x38
 8006910:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006912:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006916:	873b      	strh	r3, [r7, #56]	; 0x38
 8006918:	687a      	ldr	r2, [r7, #4]
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	781b      	ldrb	r3, [r3, #0]
 800691e:	009b      	lsls	r3, r3, #2
 8006920:	441a      	add	r2, r3
 8006922:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006924:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006928:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800692c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006930:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006934:	b29b      	uxth	r3, r3
 8006936:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006938:	687a      	ldr	r2, [r7, #4]
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	781b      	ldrb	r3, [r3, #0]
 800693e:	009b      	lsls	r3, r3, #2
 8006940:	4413      	add	r3, r2
 8006942:	881b      	ldrh	r3, [r3, #0]
 8006944:	b29b      	uxth	r3, r3
 8006946:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800694a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800694e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006950:	687a      	ldr	r2, [r7, #4]
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	781b      	ldrb	r3, [r3, #0]
 8006956:	009b      	lsls	r3, r3, #2
 8006958:	441a      	add	r2, r3
 800695a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800695c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006960:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006964:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006968:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800696c:	b29b      	uxth	r3, r3
 800696e:	8013      	strh	r3, [r2, #0]
 8006970:	e0bc      	b.n	8006aec <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006972:	687a      	ldr	r2, [r7, #4]
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	781b      	ldrb	r3, [r3, #0]
 8006978:	009b      	lsls	r3, r3, #2
 800697a:	4413      	add	r3, r2
 800697c:	881b      	ldrh	r3, [r3, #0]
 800697e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006982:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006986:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800698a:	2b00      	cmp	r3, #0
 800698c:	d01d      	beq.n	80069ca <USB_ActivateEndpoint+0x5f6>
 800698e:	687a      	ldr	r2, [r7, #4]
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	781b      	ldrb	r3, [r3, #0]
 8006994:	009b      	lsls	r3, r3, #2
 8006996:	4413      	add	r3, r2
 8006998:	881b      	ldrh	r3, [r3, #0]
 800699a:	b29b      	uxth	r3, r3
 800699c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069a4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80069a8:	687a      	ldr	r2, [r7, #4]
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	781b      	ldrb	r3, [r3, #0]
 80069ae:	009b      	lsls	r3, r3, #2
 80069b0:	441a      	add	r2, r3
 80069b2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80069b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80069c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069c6:	b29b      	uxth	r3, r3
 80069c8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80069ca:	687a      	ldr	r2, [r7, #4]
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	781b      	ldrb	r3, [r3, #0]
 80069d0:	009b      	lsls	r3, r3, #2
 80069d2:	4413      	add	r3, r2
 80069d4:	881b      	ldrh	r3, [r3, #0]
 80069d6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80069da:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80069de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d01d      	beq.n	8006a22 <USB_ActivateEndpoint+0x64e>
 80069e6:	687a      	ldr	r2, [r7, #4]
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	781b      	ldrb	r3, [r3, #0]
 80069ec:	009b      	lsls	r3, r3, #2
 80069ee:	4413      	add	r3, r2
 80069f0:	881b      	ldrh	r3, [r3, #0]
 80069f2:	b29b      	uxth	r3, r3
 80069f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069fc:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006a00:	687a      	ldr	r2, [r7, #4]
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	781b      	ldrb	r3, [r3, #0]
 8006a06:	009b      	lsls	r3, r3, #2
 8006a08:	441a      	add	r2, r3
 8006a0a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006a0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a1a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006a1e:	b29b      	uxth	r3, r3
 8006a20:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	78db      	ldrb	r3, [r3, #3]
 8006a26:	2b01      	cmp	r3, #1
 8006a28:	d024      	beq.n	8006a74 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006a2a:	687a      	ldr	r2, [r7, #4]
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	781b      	ldrb	r3, [r3, #0]
 8006a30:	009b      	lsls	r3, r3, #2
 8006a32:	4413      	add	r3, r2
 8006a34:	881b      	ldrh	r3, [r3, #0]
 8006a36:	b29b      	uxth	r3, r3
 8006a38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a40:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006a44:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006a48:	f083 0320 	eor.w	r3, r3, #32
 8006a4c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006a50:	687a      	ldr	r2, [r7, #4]
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	781b      	ldrb	r3, [r3, #0]
 8006a56:	009b      	lsls	r3, r3, #2
 8006a58:	441a      	add	r2, r3
 8006a5a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006a5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a6e:	b29b      	uxth	r3, r3
 8006a70:	8013      	strh	r3, [r2, #0]
 8006a72:	e01d      	b.n	8006ab0 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006a74:	687a      	ldr	r2, [r7, #4]
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	781b      	ldrb	r3, [r3, #0]
 8006a7a:	009b      	lsls	r3, r3, #2
 8006a7c:	4413      	add	r3, r2
 8006a7e:	881b      	ldrh	r3, [r3, #0]
 8006a80:	b29b      	uxth	r3, r3
 8006a82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a8a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006a8e:	687a      	ldr	r2, [r7, #4]
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	781b      	ldrb	r3, [r3, #0]
 8006a94:	009b      	lsls	r3, r3, #2
 8006a96:	441a      	add	r2, r3
 8006a98:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006a9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006aa0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006aa4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006aa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006aac:	b29b      	uxth	r3, r3
 8006aae:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006ab0:	687a      	ldr	r2, [r7, #4]
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	781b      	ldrb	r3, [r3, #0]
 8006ab6:	009b      	lsls	r3, r3, #2
 8006ab8:	4413      	add	r3, r2
 8006aba:	881b      	ldrh	r3, [r3, #0]
 8006abc:	b29b      	uxth	r3, r3
 8006abe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ac2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ac6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006aca:	687a      	ldr	r2, [r7, #4]
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	781b      	ldrb	r3, [r3, #0]
 8006ad0:	009b      	lsls	r3, r3, #2
 8006ad2:	441a      	add	r2, r3
 8006ad4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006ad8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006adc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ae0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ae4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ae8:	b29b      	uxth	r3, r3
 8006aea:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8006aec:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	3774      	adds	r7, #116	; 0x74
 8006af4:	46bd      	mov	sp, r7
 8006af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afa:	4770      	bx	lr

08006afc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b08d      	sub	sp, #52	; 0x34
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	7b1b      	ldrb	r3, [r3, #12]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	f040 808e 	bne.w	8006c2c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	785b      	ldrb	r3, [r3, #1]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d044      	beq.n	8006ba2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006b18:	687a      	ldr	r2, [r7, #4]
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	781b      	ldrb	r3, [r3, #0]
 8006b1e:	009b      	lsls	r3, r3, #2
 8006b20:	4413      	add	r3, r2
 8006b22:	881b      	ldrh	r3, [r3, #0]
 8006b24:	81bb      	strh	r3, [r7, #12]
 8006b26:	89bb      	ldrh	r3, [r7, #12]
 8006b28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d01b      	beq.n	8006b68 <USB_DeactivateEndpoint+0x6c>
 8006b30:	687a      	ldr	r2, [r7, #4]
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	781b      	ldrb	r3, [r3, #0]
 8006b36:	009b      	lsls	r3, r3, #2
 8006b38:	4413      	add	r3, r2
 8006b3a:	881b      	ldrh	r3, [r3, #0]
 8006b3c:	b29b      	uxth	r3, r3
 8006b3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b46:	817b      	strh	r3, [r7, #10]
 8006b48:	687a      	ldr	r2, [r7, #4]
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	781b      	ldrb	r3, [r3, #0]
 8006b4e:	009b      	lsls	r3, r3, #2
 8006b50:	441a      	add	r2, r3
 8006b52:	897b      	ldrh	r3, [r7, #10]
 8006b54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b60:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006b68:	687a      	ldr	r2, [r7, #4]
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	781b      	ldrb	r3, [r3, #0]
 8006b6e:	009b      	lsls	r3, r3, #2
 8006b70:	4413      	add	r3, r2
 8006b72:	881b      	ldrh	r3, [r3, #0]
 8006b74:	b29b      	uxth	r3, r3
 8006b76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b7e:	813b      	strh	r3, [r7, #8]
 8006b80:	687a      	ldr	r2, [r7, #4]
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	781b      	ldrb	r3, [r3, #0]
 8006b86:	009b      	lsls	r3, r3, #2
 8006b88:	441a      	add	r2, r3
 8006b8a:	893b      	ldrh	r3, [r7, #8]
 8006b8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b9c:	b29b      	uxth	r3, r3
 8006b9e:	8013      	strh	r3, [r2, #0]
 8006ba0:	e192      	b.n	8006ec8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006ba2:	687a      	ldr	r2, [r7, #4]
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	781b      	ldrb	r3, [r3, #0]
 8006ba8:	009b      	lsls	r3, r3, #2
 8006baa:	4413      	add	r3, r2
 8006bac:	881b      	ldrh	r3, [r3, #0]
 8006bae:	827b      	strh	r3, [r7, #18]
 8006bb0:	8a7b      	ldrh	r3, [r7, #18]
 8006bb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d01b      	beq.n	8006bf2 <USB_DeactivateEndpoint+0xf6>
 8006bba:	687a      	ldr	r2, [r7, #4]
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	781b      	ldrb	r3, [r3, #0]
 8006bc0:	009b      	lsls	r3, r3, #2
 8006bc2:	4413      	add	r3, r2
 8006bc4:	881b      	ldrh	r3, [r3, #0]
 8006bc6:	b29b      	uxth	r3, r3
 8006bc8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bd0:	823b      	strh	r3, [r7, #16]
 8006bd2:	687a      	ldr	r2, [r7, #4]
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	781b      	ldrb	r3, [r3, #0]
 8006bd8:	009b      	lsls	r3, r3, #2
 8006bda:	441a      	add	r2, r3
 8006bdc:	8a3b      	ldrh	r3, [r7, #16]
 8006bde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006be2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006be6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006bea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006bf2:	687a      	ldr	r2, [r7, #4]
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	781b      	ldrb	r3, [r3, #0]
 8006bf8:	009b      	lsls	r3, r3, #2
 8006bfa:	4413      	add	r3, r2
 8006bfc:	881b      	ldrh	r3, [r3, #0]
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c08:	81fb      	strh	r3, [r7, #14]
 8006c0a:	687a      	ldr	r2, [r7, #4]
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	781b      	ldrb	r3, [r3, #0]
 8006c10:	009b      	lsls	r3, r3, #2
 8006c12:	441a      	add	r2, r3
 8006c14:	89fb      	ldrh	r3, [r7, #14]
 8006c16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c26:	b29b      	uxth	r3, r3
 8006c28:	8013      	strh	r3, [r2, #0]
 8006c2a:	e14d      	b.n	8006ec8 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	785b      	ldrb	r3, [r3, #1]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	f040 80a5 	bne.w	8006d80 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006c36:	687a      	ldr	r2, [r7, #4]
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	781b      	ldrb	r3, [r3, #0]
 8006c3c:	009b      	lsls	r3, r3, #2
 8006c3e:	4413      	add	r3, r2
 8006c40:	881b      	ldrh	r3, [r3, #0]
 8006c42:	843b      	strh	r3, [r7, #32]
 8006c44:	8c3b      	ldrh	r3, [r7, #32]
 8006c46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d01b      	beq.n	8006c86 <USB_DeactivateEndpoint+0x18a>
 8006c4e:	687a      	ldr	r2, [r7, #4]
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	781b      	ldrb	r3, [r3, #0]
 8006c54:	009b      	lsls	r3, r3, #2
 8006c56:	4413      	add	r3, r2
 8006c58:	881b      	ldrh	r3, [r3, #0]
 8006c5a:	b29b      	uxth	r3, r3
 8006c5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c64:	83fb      	strh	r3, [r7, #30]
 8006c66:	687a      	ldr	r2, [r7, #4]
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	781b      	ldrb	r3, [r3, #0]
 8006c6c:	009b      	lsls	r3, r3, #2
 8006c6e:	441a      	add	r2, r3
 8006c70:	8bfb      	ldrh	r3, [r7, #30]
 8006c72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c7a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006c7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006c86:	687a      	ldr	r2, [r7, #4]
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	781b      	ldrb	r3, [r3, #0]
 8006c8c:	009b      	lsls	r3, r3, #2
 8006c8e:	4413      	add	r3, r2
 8006c90:	881b      	ldrh	r3, [r3, #0]
 8006c92:	83bb      	strh	r3, [r7, #28]
 8006c94:	8bbb      	ldrh	r3, [r7, #28]
 8006c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d01b      	beq.n	8006cd6 <USB_DeactivateEndpoint+0x1da>
 8006c9e:	687a      	ldr	r2, [r7, #4]
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	781b      	ldrb	r3, [r3, #0]
 8006ca4:	009b      	lsls	r3, r3, #2
 8006ca6:	4413      	add	r3, r2
 8006ca8:	881b      	ldrh	r3, [r3, #0]
 8006caa:	b29b      	uxth	r3, r3
 8006cac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cb4:	837b      	strh	r3, [r7, #26]
 8006cb6:	687a      	ldr	r2, [r7, #4]
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	781b      	ldrb	r3, [r3, #0]
 8006cbc:	009b      	lsls	r3, r3, #2
 8006cbe:	441a      	add	r2, r3
 8006cc0:	8b7b      	ldrh	r3, [r7, #26]
 8006cc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006cd2:	b29b      	uxth	r3, r3
 8006cd4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006cd6:	687a      	ldr	r2, [r7, #4]
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	781b      	ldrb	r3, [r3, #0]
 8006cdc:	009b      	lsls	r3, r3, #2
 8006cde:	4413      	add	r3, r2
 8006ce0:	881b      	ldrh	r3, [r3, #0]
 8006ce2:	b29b      	uxth	r3, r3
 8006ce4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ce8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cec:	833b      	strh	r3, [r7, #24]
 8006cee:	687a      	ldr	r2, [r7, #4]
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	781b      	ldrb	r3, [r3, #0]
 8006cf4:	009b      	lsls	r3, r3, #2
 8006cf6:	441a      	add	r2, r3
 8006cf8:	8b3b      	ldrh	r3, [r7, #24]
 8006cfa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cfe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d06:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006d0a:	b29b      	uxth	r3, r3
 8006d0c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006d0e:	687a      	ldr	r2, [r7, #4]
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	781b      	ldrb	r3, [r3, #0]
 8006d14:	009b      	lsls	r3, r3, #2
 8006d16:	4413      	add	r3, r2
 8006d18:	881b      	ldrh	r3, [r3, #0]
 8006d1a:	b29b      	uxth	r3, r3
 8006d1c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d24:	82fb      	strh	r3, [r7, #22]
 8006d26:	687a      	ldr	r2, [r7, #4]
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	781b      	ldrb	r3, [r3, #0]
 8006d2c:	009b      	lsls	r3, r3, #2
 8006d2e:	441a      	add	r2, r3
 8006d30:	8afb      	ldrh	r3, [r7, #22]
 8006d32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d42:	b29b      	uxth	r3, r3
 8006d44:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006d46:	687a      	ldr	r2, [r7, #4]
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	781b      	ldrb	r3, [r3, #0]
 8006d4c:	009b      	lsls	r3, r3, #2
 8006d4e:	4413      	add	r3, r2
 8006d50:	881b      	ldrh	r3, [r3, #0]
 8006d52:	b29b      	uxth	r3, r3
 8006d54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d5c:	82bb      	strh	r3, [r7, #20]
 8006d5e:	687a      	ldr	r2, [r7, #4]
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	781b      	ldrb	r3, [r3, #0]
 8006d64:	009b      	lsls	r3, r3, #2
 8006d66:	441a      	add	r2, r3
 8006d68:	8abb      	ldrh	r3, [r7, #20]
 8006d6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	8013      	strh	r3, [r2, #0]
 8006d7e:	e0a3      	b.n	8006ec8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006d80:	687a      	ldr	r2, [r7, #4]
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	781b      	ldrb	r3, [r3, #0]
 8006d86:	009b      	lsls	r3, r3, #2
 8006d88:	4413      	add	r3, r2
 8006d8a:	881b      	ldrh	r3, [r3, #0]
 8006d8c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006d8e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006d90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d01b      	beq.n	8006dd0 <USB_DeactivateEndpoint+0x2d4>
 8006d98:	687a      	ldr	r2, [r7, #4]
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	781b      	ldrb	r3, [r3, #0]
 8006d9e:	009b      	lsls	r3, r3, #2
 8006da0:	4413      	add	r3, r2
 8006da2:	881b      	ldrh	r3, [r3, #0]
 8006da4:	b29b      	uxth	r3, r3
 8006da6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006daa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dae:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006db0:	687a      	ldr	r2, [r7, #4]
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	781b      	ldrb	r3, [r3, #0]
 8006db6:	009b      	lsls	r3, r3, #2
 8006db8:	441a      	add	r2, r3
 8006dba:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006dbc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dc0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dc4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006dc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dcc:	b29b      	uxth	r3, r3
 8006dce:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006dd0:	687a      	ldr	r2, [r7, #4]
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	781b      	ldrb	r3, [r3, #0]
 8006dd6:	009b      	lsls	r3, r3, #2
 8006dd8:	4413      	add	r3, r2
 8006dda:	881b      	ldrh	r3, [r3, #0]
 8006ddc:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006dde:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006de0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d01b      	beq.n	8006e20 <USB_DeactivateEndpoint+0x324>
 8006de8:	687a      	ldr	r2, [r7, #4]
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	781b      	ldrb	r3, [r3, #0]
 8006dee:	009b      	lsls	r3, r3, #2
 8006df0:	4413      	add	r3, r2
 8006df2:	881b      	ldrh	r3, [r3, #0]
 8006df4:	b29b      	uxth	r3, r3
 8006df6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dfe:	853b      	strh	r3, [r7, #40]	; 0x28
 8006e00:	687a      	ldr	r2, [r7, #4]
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	781b      	ldrb	r3, [r3, #0]
 8006e06:	009b      	lsls	r3, r3, #2
 8006e08:	441a      	add	r2, r3
 8006e0a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006e0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e18:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006e1c:	b29b      	uxth	r3, r3
 8006e1e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006e20:	687a      	ldr	r2, [r7, #4]
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	781b      	ldrb	r3, [r3, #0]
 8006e26:	009b      	lsls	r3, r3, #2
 8006e28:	4413      	add	r3, r2
 8006e2a:	881b      	ldrh	r3, [r3, #0]
 8006e2c:	b29b      	uxth	r3, r3
 8006e2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e36:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006e38:	687a      	ldr	r2, [r7, #4]
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	781b      	ldrb	r3, [r3, #0]
 8006e3e:	009b      	lsls	r3, r3, #2
 8006e40:	441a      	add	r2, r3
 8006e42:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006e44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e4c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006e50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e54:	b29b      	uxth	r3, r3
 8006e56:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006e58:	687a      	ldr	r2, [r7, #4]
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	781b      	ldrb	r3, [r3, #0]
 8006e5e:	009b      	lsls	r3, r3, #2
 8006e60:	4413      	add	r3, r2
 8006e62:	881b      	ldrh	r3, [r3, #0]
 8006e64:	b29b      	uxth	r3, r3
 8006e66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e6e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006e70:	687a      	ldr	r2, [r7, #4]
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	781b      	ldrb	r3, [r3, #0]
 8006e76:	009b      	lsls	r3, r3, #2
 8006e78:	441a      	add	r2, r3
 8006e7a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006e7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e8c:	b29b      	uxth	r3, r3
 8006e8e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006e90:	687a      	ldr	r2, [r7, #4]
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	781b      	ldrb	r3, [r3, #0]
 8006e96:	009b      	lsls	r3, r3, #2
 8006e98:	4413      	add	r3, r2
 8006e9a:	881b      	ldrh	r3, [r3, #0]
 8006e9c:	b29b      	uxth	r3, r3
 8006e9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ea2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ea6:	847b      	strh	r3, [r7, #34]	; 0x22
 8006ea8:	687a      	ldr	r2, [r7, #4]
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	781b      	ldrb	r3, [r3, #0]
 8006eae:	009b      	lsls	r3, r3, #2
 8006eb0:	441a      	add	r2, r3
 8006eb2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006eb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006eb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ebc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ec0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ec4:	b29b      	uxth	r3, r3
 8006ec6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006ec8:	2300      	movs	r3, #0
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	3734      	adds	r7, #52	; 0x34
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed4:	4770      	bx	lr

08006ed6 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006ed6:	b580      	push	{r7, lr}
 8006ed8:	b0c2      	sub	sp, #264	; 0x108
 8006eda:	af00      	add	r7, sp, #0
 8006edc:	1d3b      	adds	r3, r7, #4
 8006ede:	6018      	str	r0, [r3, #0]
 8006ee0:	463b      	mov	r3, r7
 8006ee2:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006ee4:	463b      	mov	r3, r7
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	785b      	ldrb	r3, [r3, #1]
 8006eea:	2b01      	cmp	r3, #1
 8006eec:	f040 8509 	bne.w	8007902 <USB_EPStartXfer+0xa2c>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006ef0:	463b      	mov	r3, r7
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	699a      	ldr	r2, [r3, #24]
 8006ef6:	463b      	mov	r3, r7
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	691b      	ldr	r3, [r3, #16]
 8006efc:	429a      	cmp	r2, r3
 8006efe:	d905      	bls.n	8006f0c <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8006f00:	463b      	mov	r3, r7
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	691b      	ldr	r3, [r3, #16]
 8006f06:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006f0a:	e004      	b.n	8006f16 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8006f0c:	463b      	mov	r3, r7
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	699b      	ldr	r3, [r3, #24]
 8006f12:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006f16:	463b      	mov	r3, r7
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	7b1b      	ldrb	r3, [r3, #12]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d128      	bne.n	8006f72 <USB_EPStartXfer+0x9c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006f20:	463b      	mov	r3, r7
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	6959      	ldr	r1, [r3, #20]
 8006f26:	463b      	mov	r3, r7
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	88da      	ldrh	r2, [r3, #6]
 8006f2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f30:	b29b      	uxth	r3, r3
 8006f32:	1d38      	adds	r0, r7, #4
 8006f34:	6800      	ldr	r0, [r0, #0]
 8006f36:	f001 f9ce 	bl	80082d6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006f3a:	1d3b      	adds	r3, r7, #4
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	613b      	str	r3, [r7, #16]
 8006f40:	1d3b      	adds	r3, r7, #4
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f48:	b29b      	uxth	r3, r3
 8006f4a:	461a      	mov	r2, r3
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	4413      	add	r3, r2
 8006f50:	613b      	str	r3, [r7, #16]
 8006f52:	463b      	mov	r3, r7
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	781b      	ldrb	r3, [r3, #0]
 8006f58:	011a      	lsls	r2, r3, #4
 8006f5a:	693b      	ldr	r3, [r7, #16]
 8006f5c:	4413      	add	r3, r2
 8006f5e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006f62:	60fb      	str	r3, [r7, #12]
 8006f64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f68:	b29a      	uxth	r2, r3
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	801a      	strh	r2, [r3, #0]
 8006f6e:	f000 bc9f 	b.w	80078b0 <USB_EPStartXfer+0x9da>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006f72:	463b      	mov	r3, r7
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	78db      	ldrb	r3, [r3, #3]
 8006f78:	2b02      	cmp	r3, #2
 8006f7a:	f040 8347 	bne.w	800760c <USB_EPStartXfer+0x736>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006f7e:	463b      	mov	r3, r7
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	6a1a      	ldr	r2, [r3, #32]
 8006f84:	463b      	mov	r3, r7
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	691b      	ldr	r3, [r3, #16]
 8006f8a:	429a      	cmp	r2, r3
 8006f8c:	f240 82eb 	bls.w	8007566 <USB_EPStartXfer+0x690>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006f90:	1d3b      	adds	r3, r7, #4
 8006f92:	681a      	ldr	r2, [r3, #0]
 8006f94:	463b      	mov	r3, r7
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	781b      	ldrb	r3, [r3, #0]
 8006f9a:	009b      	lsls	r3, r3, #2
 8006f9c:	4413      	add	r3, r2
 8006f9e:	881b      	ldrh	r3, [r3, #0]
 8006fa0:	b29b      	uxth	r3, r3
 8006fa2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006faa:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8006fae:	1d3b      	adds	r3, r7, #4
 8006fb0:	681a      	ldr	r2, [r3, #0]
 8006fb2:	463b      	mov	r3, r7
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	781b      	ldrb	r3, [r3, #0]
 8006fb8:	009b      	lsls	r3, r3, #2
 8006fba:	441a      	add	r2, r3
 8006fbc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006fc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fc8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006fcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006fd4:	463b      	mov	r3, r7
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	6a1a      	ldr	r2, [r3, #32]
 8006fda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fde:	1ad2      	subs	r2, r2, r3
 8006fe0:	463b      	mov	r3, r7
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006fe6:	1d3b      	adds	r3, r7, #4
 8006fe8:	681a      	ldr	r2, [r3, #0]
 8006fea:	463b      	mov	r3, r7
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	781b      	ldrb	r3, [r3, #0]
 8006ff0:	009b      	lsls	r3, r3, #2
 8006ff2:	4413      	add	r3, r2
 8006ff4:	881b      	ldrh	r3, [r3, #0]
 8006ff6:	b29b      	uxth	r3, r3
 8006ff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	f000 8159 	beq.w	80072b4 <USB_EPStartXfer+0x3de>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007002:	1d3b      	adds	r3, r7, #4
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	633b      	str	r3, [r7, #48]	; 0x30
 8007008:	463b      	mov	r3, r7
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	785b      	ldrb	r3, [r3, #1]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d164      	bne.n	80070dc <USB_EPStartXfer+0x206>
 8007012:	1d3b      	adds	r3, r7, #4
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	62bb      	str	r3, [r7, #40]	; 0x28
 8007018:	1d3b      	adds	r3, r7, #4
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007020:	b29b      	uxth	r3, r3
 8007022:	461a      	mov	r2, r3
 8007024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007026:	4413      	add	r3, r2
 8007028:	62bb      	str	r3, [r7, #40]	; 0x28
 800702a:	463b      	mov	r3, r7
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	781b      	ldrb	r3, [r3, #0]
 8007030:	011a      	lsls	r2, r3, #4
 8007032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007034:	4413      	add	r3, r2
 8007036:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800703a:	627b      	str	r3, [r7, #36]	; 0x24
 800703c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007040:	2b00      	cmp	r3, #0
 8007042:	d112      	bne.n	800706a <USB_EPStartXfer+0x194>
 8007044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007046:	881b      	ldrh	r3, [r3, #0]
 8007048:	b29b      	uxth	r3, r3
 800704a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800704e:	b29a      	uxth	r2, r3
 8007050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007052:	801a      	strh	r2, [r3, #0]
 8007054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007056:	881b      	ldrh	r3, [r3, #0]
 8007058:	b29b      	uxth	r3, r3
 800705a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800705e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007062:	b29a      	uxth	r2, r3
 8007064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007066:	801a      	strh	r2, [r3, #0]
 8007068:	e054      	b.n	8007114 <USB_EPStartXfer+0x23e>
 800706a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800706e:	2b3e      	cmp	r3, #62	; 0x3e
 8007070:	d817      	bhi.n	80070a2 <USB_EPStartXfer+0x1cc>
 8007072:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007076:	085b      	lsrs	r3, r3, #1
 8007078:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800707c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007080:	f003 0301 	and.w	r3, r3, #1
 8007084:	2b00      	cmp	r3, #0
 8007086:	d004      	beq.n	8007092 <USB_EPStartXfer+0x1bc>
 8007088:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800708c:	3301      	adds	r3, #1
 800708e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007092:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007096:	b29b      	uxth	r3, r3
 8007098:	029b      	lsls	r3, r3, #10
 800709a:	b29a      	uxth	r2, r3
 800709c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800709e:	801a      	strh	r2, [r3, #0]
 80070a0:	e038      	b.n	8007114 <USB_EPStartXfer+0x23e>
 80070a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070a6:	095b      	lsrs	r3, r3, #5
 80070a8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80070ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070b0:	f003 031f 	and.w	r3, r3, #31
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d104      	bne.n	80070c2 <USB_EPStartXfer+0x1ec>
 80070b8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80070bc:	3b01      	subs	r3, #1
 80070be:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80070c2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80070c6:	b29b      	uxth	r3, r3
 80070c8:	029b      	lsls	r3, r3, #10
 80070ca:	b29b      	uxth	r3, r3
 80070cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070d4:	b29a      	uxth	r2, r3
 80070d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d8:	801a      	strh	r2, [r3, #0]
 80070da:	e01b      	b.n	8007114 <USB_EPStartXfer+0x23e>
 80070dc:	463b      	mov	r3, r7
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	785b      	ldrb	r3, [r3, #1]
 80070e2:	2b01      	cmp	r3, #1
 80070e4:	d116      	bne.n	8007114 <USB_EPStartXfer+0x23e>
 80070e6:	1d3b      	adds	r3, r7, #4
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070ee:	b29b      	uxth	r3, r3
 80070f0:	461a      	mov	r2, r3
 80070f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070f4:	4413      	add	r3, r2
 80070f6:	633b      	str	r3, [r7, #48]	; 0x30
 80070f8:	463b      	mov	r3, r7
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	781b      	ldrb	r3, [r3, #0]
 80070fe:	011a      	lsls	r2, r3, #4
 8007100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007102:	4413      	add	r3, r2
 8007104:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007108:	62fb      	str	r3, [r7, #44]	; 0x2c
 800710a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800710e:	b29a      	uxth	r2, r3
 8007110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007112:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007114:	463b      	mov	r3, r7
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	895b      	ldrh	r3, [r3, #10]
 800711a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800711e:	463b      	mov	r3, r7
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	6959      	ldr	r1, [r3, #20]
 8007124:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007128:	b29b      	uxth	r3, r3
 800712a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800712e:	1d38      	adds	r0, r7, #4
 8007130:	6800      	ldr	r0, [r0, #0]
 8007132:	f001 f8d0 	bl	80082d6 <USB_WritePMA>
            ep->xfer_buff += len;
 8007136:	463b      	mov	r3, r7
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	695a      	ldr	r2, [r3, #20]
 800713c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007140:	441a      	add	r2, r3
 8007142:	463b      	mov	r3, r7
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007148:	463b      	mov	r3, r7
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	6a1a      	ldr	r2, [r3, #32]
 800714e:	463b      	mov	r3, r7
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	691b      	ldr	r3, [r3, #16]
 8007154:	429a      	cmp	r2, r3
 8007156:	d909      	bls.n	800716c <USB_EPStartXfer+0x296>
            {
              ep->xfer_len_db -= len;
 8007158:	463b      	mov	r3, r7
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	6a1a      	ldr	r2, [r3, #32]
 800715e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007162:	1ad2      	subs	r2, r2, r3
 8007164:	463b      	mov	r3, r7
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	621a      	str	r2, [r3, #32]
 800716a:	e008      	b.n	800717e <USB_EPStartXfer+0x2a8>
            }
            else
            {
              len = ep->xfer_len_db;
 800716c:	463b      	mov	r3, r7
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	6a1b      	ldr	r3, [r3, #32]
 8007172:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8007176:	463b      	mov	r3, r7
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	2200      	movs	r2, #0
 800717c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800717e:	463b      	mov	r3, r7
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	785b      	ldrb	r3, [r3, #1]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d164      	bne.n	8007252 <USB_EPStartXfer+0x37c>
 8007188:	1d3b      	adds	r3, r7, #4
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	61bb      	str	r3, [r7, #24]
 800718e:	1d3b      	adds	r3, r7, #4
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007196:	b29b      	uxth	r3, r3
 8007198:	461a      	mov	r2, r3
 800719a:	69bb      	ldr	r3, [r7, #24]
 800719c:	4413      	add	r3, r2
 800719e:	61bb      	str	r3, [r7, #24]
 80071a0:	463b      	mov	r3, r7
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	781b      	ldrb	r3, [r3, #0]
 80071a6:	011a      	lsls	r2, r3, #4
 80071a8:	69bb      	ldr	r3, [r7, #24]
 80071aa:	4413      	add	r3, r2
 80071ac:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80071b0:	617b      	str	r3, [r7, #20]
 80071b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d112      	bne.n	80071e0 <USB_EPStartXfer+0x30a>
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	881b      	ldrh	r3, [r3, #0]
 80071be:	b29b      	uxth	r3, r3
 80071c0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80071c4:	b29a      	uxth	r2, r3
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	801a      	strh	r2, [r3, #0]
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	881b      	ldrh	r3, [r3, #0]
 80071ce:	b29b      	uxth	r3, r3
 80071d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071d8:	b29a      	uxth	r2, r3
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	801a      	strh	r2, [r3, #0]
 80071de:	e057      	b.n	8007290 <USB_EPStartXfer+0x3ba>
 80071e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071e4:	2b3e      	cmp	r3, #62	; 0x3e
 80071e6:	d817      	bhi.n	8007218 <USB_EPStartXfer+0x342>
 80071e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071ec:	085b      	lsrs	r3, r3, #1
 80071ee:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80071f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071f6:	f003 0301 	and.w	r3, r3, #1
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d004      	beq.n	8007208 <USB_EPStartXfer+0x332>
 80071fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007202:	3301      	adds	r3, #1
 8007204:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007208:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800720c:	b29b      	uxth	r3, r3
 800720e:	029b      	lsls	r3, r3, #10
 8007210:	b29a      	uxth	r2, r3
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	801a      	strh	r2, [r3, #0]
 8007216:	e03b      	b.n	8007290 <USB_EPStartXfer+0x3ba>
 8007218:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800721c:	095b      	lsrs	r3, r3, #5
 800721e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007222:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007226:	f003 031f 	and.w	r3, r3, #31
 800722a:	2b00      	cmp	r3, #0
 800722c:	d104      	bne.n	8007238 <USB_EPStartXfer+0x362>
 800722e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007232:	3b01      	subs	r3, #1
 8007234:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007238:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800723c:	b29b      	uxth	r3, r3
 800723e:	029b      	lsls	r3, r3, #10
 8007240:	b29b      	uxth	r3, r3
 8007242:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007246:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800724a:	b29a      	uxth	r2, r3
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	801a      	strh	r2, [r3, #0]
 8007250:	e01e      	b.n	8007290 <USB_EPStartXfer+0x3ba>
 8007252:	463b      	mov	r3, r7
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	785b      	ldrb	r3, [r3, #1]
 8007258:	2b01      	cmp	r3, #1
 800725a:	d119      	bne.n	8007290 <USB_EPStartXfer+0x3ba>
 800725c:	1d3b      	adds	r3, r7, #4
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	623b      	str	r3, [r7, #32]
 8007262:	1d3b      	adds	r3, r7, #4
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800726a:	b29b      	uxth	r3, r3
 800726c:	461a      	mov	r2, r3
 800726e:	6a3b      	ldr	r3, [r7, #32]
 8007270:	4413      	add	r3, r2
 8007272:	623b      	str	r3, [r7, #32]
 8007274:	463b      	mov	r3, r7
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	781b      	ldrb	r3, [r3, #0]
 800727a:	011a      	lsls	r2, r3, #4
 800727c:	6a3b      	ldr	r3, [r7, #32]
 800727e:	4413      	add	r3, r2
 8007280:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007284:	61fb      	str	r3, [r7, #28]
 8007286:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800728a:	b29a      	uxth	r2, r3
 800728c:	69fb      	ldr	r3, [r7, #28]
 800728e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007290:	463b      	mov	r3, r7
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	891b      	ldrh	r3, [r3, #8]
 8007296:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800729a:	463b      	mov	r3, r7
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	6959      	ldr	r1, [r3, #20]
 80072a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072a4:	b29b      	uxth	r3, r3
 80072a6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80072aa:	1d38      	adds	r0, r7, #4
 80072ac:	6800      	ldr	r0, [r0, #0]
 80072ae:	f001 f812 	bl	80082d6 <USB_WritePMA>
 80072b2:	e2fd      	b.n	80078b0 <USB_EPStartXfer+0x9da>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80072b4:	463b      	mov	r3, r7
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	785b      	ldrb	r3, [r3, #1]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d164      	bne.n	8007388 <USB_EPStartXfer+0x4b2>
 80072be:	1d3b      	adds	r3, r7, #4
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80072c4:	1d3b      	adds	r3, r7, #4
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072cc:	b29b      	uxth	r3, r3
 80072ce:	461a      	mov	r2, r3
 80072d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80072d2:	4413      	add	r3, r2
 80072d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80072d6:	463b      	mov	r3, r7
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	781b      	ldrb	r3, [r3, #0]
 80072dc:	011a      	lsls	r2, r3, #4
 80072de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80072e0:	4413      	add	r3, r2
 80072e2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80072e6:	647b      	str	r3, [r7, #68]	; 0x44
 80072e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d112      	bne.n	8007316 <USB_EPStartXfer+0x440>
 80072f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072f2:	881b      	ldrh	r3, [r3, #0]
 80072f4:	b29b      	uxth	r3, r3
 80072f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80072fa:	b29a      	uxth	r2, r3
 80072fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072fe:	801a      	strh	r2, [r3, #0]
 8007300:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007302:	881b      	ldrh	r3, [r3, #0]
 8007304:	b29b      	uxth	r3, r3
 8007306:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800730a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800730e:	b29a      	uxth	r2, r3
 8007310:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007312:	801a      	strh	r2, [r3, #0]
 8007314:	e057      	b.n	80073c6 <USB_EPStartXfer+0x4f0>
 8007316:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800731a:	2b3e      	cmp	r3, #62	; 0x3e
 800731c:	d817      	bhi.n	800734e <USB_EPStartXfer+0x478>
 800731e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007322:	085b      	lsrs	r3, r3, #1
 8007324:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007328:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800732c:	f003 0301 	and.w	r3, r3, #1
 8007330:	2b00      	cmp	r3, #0
 8007332:	d004      	beq.n	800733e <USB_EPStartXfer+0x468>
 8007334:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007338:	3301      	adds	r3, #1
 800733a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800733e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007342:	b29b      	uxth	r3, r3
 8007344:	029b      	lsls	r3, r3, #10
 8007346:	b29a      	uxth	r2, r3
 8007348:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800734a:	801a      	strh	r2, [r3, #0]
 800734c:	e03b      	b.n	80073c6 <USB_EPStartXfer+0x4f0>
 800734e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007352:	095b      	lsrs	r3, r3, #5
 8007354:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007358:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800735c:	f003 031f 	and.w	r3, r3, #31
 8007360:	2b00      	cmp	r3, #0
 8007362:	d104      	bne.n	800736e <USB_EPStartXfer+0x498>
 8007364:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007368:	3b01      	subs	r3, #1
 800736a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800736e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007372:	b29b      	uxth	r3, r3
 8007374:	029b      	lsls	r3, r3, #10
 8007376:	b29b      	uxth	r3, r3
 8007378:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800737c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007380:	b29a      	uxth	r2, r3
 8007382:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007384:	801a      	strh	r2, [r3, #0]
 8007386:	e01e      	b.n	80073c6 <USB_EPStartXfer+0x4f0>
 8007388:	463b      	mov	r3, r7
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	785b      	ldrb	r3, [r3, #1]
 800738e:	2b01      	cmp	r3, #1
 8007390:	d119      	bne.n	80073c6 <USB_EPStartXfer+0x4f0>
 8007392:	1d3b      	adds	r3, r7, #4
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	653b      	str	r3, [r7, #80]	; 0x50
 8007398:	1d3b      	adds	r3, r7, #4
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073a0:	b29b      	uxth	r3, r3
 80073a2:	461a      	mov	r2, r3
 80073a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073a6:	4413      	add	r3, r2
 80073a8:	653b      	str	r3, [r7, #80]	; 0x50
 80073aa:	463b      	mov	r3, r7
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	781b      	ldrb	r3, [r3, #0]
 80073b0:	011a      	lsls	r2, r3, #4
 80073b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073b4:	4413      	add	r3, r2
 80073b6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80073ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80073bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073c0:	b29a      	uxth	r2, r3
 80073c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073c4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80073c6:	463b      	mov	r3, r7
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	891b      	ldrh	r3, [r3, #8]
 80073cc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80073d0:	463b      	mov	r3, r7
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	6959      	ldr	r1, [r3, #20]
 80073d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073da:	b29b      	uxth	r3, r3
 80073dc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80073e0:	1d38      	adds	r0, r7, #4
 80073e2:	6800      	ldr	r0, [r0, #0]
 80073e4:	f000 ff77 	bl	80082d6 <USB_WritePMA>
            ep->xfer_buff += len;
 80073e8:	463b      	mov	r3, r7
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	695a      	ldr	r2, [r3, #20]
 80073ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073f2:	441a      	add	r2, r3
 80073f4:	463b      	mov	r3, r7
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80073fa:	463b      	mov	r3, r7
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	6a1a      	ldr	r2, [r3, #32]
 8007400:	463b      	mov	r3, r7
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	691b      	ldr	r3, [r3, #16]
 8007406:	429a      	cmp	r2, r3
 8007408:	d909      	bls.n	800741e <USB_EPStartXfer+0x548>
            {
              ep->xfer_len_db -= len;
 800740a:	463b      	mov	r3, r7
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	6a1a      	ldr	r2, [r3, #32]
 8007410:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007414:	1ad2      	subs	r2, r2, r3
 8007416:	463b      	mov	r3, r7
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	621a      	str	r2, [r3, #32]
 800741c:	e008      	b.n	8007430 <USB_EPStartXfer+0x55a>
            }
            else
            {
              len = ep->xfer_len_db;
 800741e:	463b      	mov	r3, r7
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	6a1b      	ldr	r3, [r3, #32]
 8007424:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8007428:	463b      	mov	r3, r7
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	2200      	movs	r2, #0
 800742e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007430:	1d3b      	adds	r3, r7, #4
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	643b      	str	r3, [r7, #64]	; 0x40
 8007436:	463b      	mov	r3, r7
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	785b      	ldrb	r3, [r3, #1]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d164      	bne.n	800750a <USB_EPStartXfer+0x634>
 8007440:	1d3b      	adds	r3, r7, #4
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	63bb      	str	r3, [r7, #56]	; 0x38
 8007446:	1d3b      	adds	r3, r7, #4
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800744e:	b29b      	uxth	r3, r3
 8007450:	461a      	mov	r2, r3
 8007452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007454:	4413      	add	r3, r2
 8007456:	63bb      	str	r3, [r7, #56]	; 0x38
 8007458:	463b      	mov	r3, r7
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	781b      	ldrb	r3, [r3, #0]
 800745e:	011a      	lsls	r2, r3, #4
 8007460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007462:	4413      	add	r3, r2
 8007464:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007468:	637b      	str	r3, [r7, #52]	; 0x34
 800746a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800746e:	2b00      	cmp	r3, #0
 8007470:	d112      	bne.n	8007498 <USB_EPStartXfer+0x5c2>
 8007472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007474:	881b      	ldrh	r3, [r3, #0]
 8007476:	b29b      	uxth	r3, r3
 8007478:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800747c:	b29a      	uxth	r2, r3
 800747e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007480:	801a      	strh	r2, [r3, #0]
 8007482:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007484:	881b      	ldrh	r3, [r3, #0]
 8007486:	b29b      	uxth	r3, r3
 8007488:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800748c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007490:	b29a      	uxth	r2, r3
 8007492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007494:	801a      	strh	r2, [r3, #0]
 8007496:	e054      	b.n	8007542 <USB_EPStartXfer+0x66c>
 8007498:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800749c:	2b3e      	cmp	r3, #62	; 0x3e
 800749e:	d817      	bhi.n	80074d0 <USB_EPStartXfer+0x5fa>
 80074a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074a4:	085b      	lsrs	r3, r3, #1
 80074a6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80074aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074ae:	f003 0301 	and.w	r3, r3, #1
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d004      	beq.n	80074c0 <USB_EPStartXfer+0x5ea>
 80074b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074ba:	3301      	adds	r3, #1
 80074bc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80074c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074c4:	b29b      	uxth	r3, r3
 80074c6:	029b      	lsls	r3, r3, #10
 80074c8:	b29a      	uxth	r2, r3
 80074ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074cc:	801a      	strh	r2, [r3, #0]
 80074ce:	e038      	b.n	8007542 <USB_EPStartXfer+0x66c>
 80074d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074d4:	095b      	lsrs	r3, r3, #5
 80074d6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80074da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074de:	f003 031f 	and.w	r3, r3, #31
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d104      	bne.n	80074f0 <USB_EPStartXfer+0x61a>
 80074e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074ea:	3b01      	subs	r3, #1
 80074ec:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80074f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074f4:	b29b      	uxth	r3, r3
 80074f6:	029b      	lsls	r3, r3, #10
 80074f8:	b29b      	uxth	r3, r3
 80074fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007502:	b29a      	uxth	r2, r3
 8007504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007506:	801a      	strh	r2, [r3, #0]
 8007508:	e01b      	b.n	8007542 <USB_EPStartXfer+0x66c>
 800750a:	463b      	mov	r3, r7
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	785b      	ldrb	r3, [r3, #1]
 8007510:	2b01      	cmp	r3, #1
 8007512:	d116      	bne.n	8007542 <USB_EPStartXfer+0x66c>
 8007514:	1d3b      	adds	r3, r7, #4
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800751c:	b29b      	uxth	r3, r3
 800751e:	461a      	mov	r2, r3
 8007520:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007522:	4413      	add	r3, r2
 8007524:	643b      	str	r3, [r7, #64]	; 0x40
 8007526:	463b      	mov	r3, r7
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	781b      	ldrb	r3, [r3, #0]
 800752c:	011a      	lsls	r2, r3, #4
 800752e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007530:	4413      	add	r3, r2
 8007532:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007536:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007538:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800753c:	b29a      	uxth	r2, r3
 800753e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007540:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007542:	463b      	mov	r3, r7
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	895b      	ldrh	r3, [r3, #10]
 8007548:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800754c:	463b      	mov	r3, r7
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	6959      	ldr	r1, [r3, #20]
 8007552:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007556:	b29b      	uxth	r3, r3
 8007558:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800755c:	1d38      	adds	r0, r7, #4
 800755e:	6800      	ldr	r0, [r0, #0]
 8007560:	f000 feb9 	bl	80082d6 <USB_WritePMA>
 8007564:	e1a4      	b.n	80078b0 <USB_EPStartXfer+0x9da>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007566:	463b      	mov	r3, r7
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	6a1b      	ldr	r3, [r3, #32]
 800756c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007570:	1d3b      	adds	r3, r7, #4
 8007572:	681a      	ldr	r2, [r3, #0]
 8007574:	463b      	mov	r3, r7
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	781b      	ldrb	r3, [r3, #0]
 800757a:	009b      	lsls	r3, r3, #2
 800757c:	4413      	add	r3, r2
 800757e:	881b      	ldrh	r3, [r3, #0]
 8007580:	b29b      	uxth	r3, r3
 8007582:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007586:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800758a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800758e:	1d3b      	adds	r3, r7, #4
 8007590:	681a      	ldr	r2, [r3, #0]
 8007592:	463b      	mov	r3, r7
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	781b      	ldrb	r3, [r3, #0]
 8007598:	009b      	lsls	r3, r3, #2
 800759a:	441a      	add	r2, r3
 800759c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80075a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075b0:	b29b      	uxth	r3, r3
 80075b2:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80075b4:	1d3b      	adds	r3, r7, #4
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80075ba:	1d3b      	adds	r3, r7, #4
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075c2:	b29b      	uxth	r3, r3
 80075c4:	461a      	mov	r2, r3
 80075c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80075c8:	4413      	add	r3, r2
 80075ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80075cc:	463b      	mov	r3, r7
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	781b      	ldrb	r3, [r3, #0]
 80075d2:	011a      	lsls	r2, r3, #4
 80075d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80075d6:	4413      	add	r3, r2
 80075d8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80075dc:	65bb      	str	r3, [r7, #88]	; 0x58
 80075de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075e2:	b29a      	uxth	r2, r3
 80075e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80075e6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80075e8:	463b      	mov	r3, r7
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	891b      	ldrh	r3, [r3, #8]
 80075ee:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80075f2:	463b      	mov	r3, r7
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	6959      	ldr	r1, [r3, #20]
 80075f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075fc:	b29b      	uxth	r3, r3
 80075fe:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007602:	1d38      	adds	r0, r7, #4
 8007604:	6800      	ldr	r0, [r0, #0]
 8007606:	f000 fe66 	bl	80082d6 <USB_WritePMA>
 800760a:	e151      	b.n	80078b0 <USB_EPStartXfer+0x9da>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800760c:	463b      	mov	r3, r7
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	6a1a      	ldr	r2, [r3, #32]
 8007612:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007616:	1ad2      	subs	r2, r2, r3
 8007618:	463b      	mov	r3, r7
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800761e:	1d3b      	adds	r3, r7, #4
 8007620:	681a      	ldr	r2, [r3, #0]
 8007622:	463b      	mov	r3, r7
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	781b      	ldrb	r3, [r3, #0]
 8007628:	009b      	lsls	r3, r3, #2
 800762a:	4413      	add	r3, r2
 800762c:	881b      	ldrh	r3, [r3, #0]
 800762e:	b29b      	uxth	r3, r3
 8007630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007634:	2b00      	cmp	r3, #0
 8007636:	f000 809b 	beq.w	8007770 <USB_EPStartXfer+0x89a>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800763a:	1d3b      	adds	r3, r7, #4
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	673b      	str	r3, [r7, #112]	; 0x70
 8007640:	463b      	mov	r3, r7
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	785b      	ldrb	r3, [r3, #1]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d164      	bne.n	8007714 <USB_EPStartXfer+0x83e>
 800764a:	1d3b      	adds	r3, r7, #4
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007650:	1d3b      	adds	r3, r7, #4
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007658:	b29b      	uxth	r3, r3
 800765a:	461a      	mov	r2, r3
 800765c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800765e:	4413      	add	r3, r2
 8007660:	66bb      	str	r3, [r7, #104]	; 0x68
 8007662:	463b      	mov	r3, r7
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	781b      	ldrb	r3, [r3, #0]
 8007668:	011a      	lsls	r2, r3, #4
 800766a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800766c:	4413      	add	r3, r2
 800766e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007672:	667b      	str	r3, [r7, #100]	; 0x64
 8007674:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007678:	2b00      	cmp	r3, #0
 800767a:	d112      	bne.n	80076a2 <USB_EPStartXfer+0x7cc>
 800767c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800767e:	881b      	ldrh	r3, [r3, #0]
 8007680:	b29b      	uxth	r3, r3
 8007682:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007686:	b29a      	uxth	r2, r3
 8007688:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800768a:	801a      	strh	r2, [r3, #0]
 800768c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800768e:	881b      	ldrh	r3, [r3, #0]
 8007690:	b29b      	uxth	r3, r3
 8007692:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007696:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800769a:	b29a      	uxth	r2, r3
 800769c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800769e:	801a      	strh	r2, [r3, #0]
 80076a0:	e054      	b.n	800774c <USB_EPStartXfer+0x876>
 80076a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076a6:	2b3e      	cmp	r3, #62	; 0x3e
 80076a8:	d817      	bhi.n	80076da <USB_EPStartXfer+0x804>
 80076aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076ae:	085b      	lsrs	r3, r3, #1
 80076b0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80076b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076b8:	f003 0301 	and.w	r3, r3, #1
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d004      	beq.n	80076ca <USB_EPStartXfer+0x7f4>
 80076c0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80076c4:	3301      	adds	r3, #1
 80076c6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80076ca:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80076ce:	b29b      	uxth	r3, r3
 80076d0:	029b      	lsls	r3, r3, #10
 80076d2:	b29a      	uxth	r2, r3
 80076d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80076d6:	801a      	strh	r2, [r3, #0]
 80076d8:	e038      	b.n	800774c <USB_EPStartXfer+0x876>
 80076da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076de:	095b      	lsrs	r3, r3, #5
 80076e0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80076e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076e8:	f003 031f 	and.w	r3, r3, #31
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d104      	bne.n	80076fa <USB_EPStartXfer+0x824>
 80076f0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80076f4:	3b01      	subs	r3, #1
 80076f6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80076fa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80076fe:	b29b      	uxth	r3, r3
 8007700:	029b      	lsls	r3, r3, #10
 8007702:	b29b      	uxth	r3, r3
 8007704:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007708:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800770c:	b29a      	uxth	r2, r3
 800770e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007710:	801a      	strh	r2, [r3, #0]
 8007712:	e01b      	b.n	800774c <USB_EPStartXfer+0x876>
 8007714:	463b      	mov	r3, r7
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	785b      	ldrb	r3, [r3, #1]
 800771a:	2b01      	cmp	r3, #1
 800771c:	d116      	bne.n	800774c <USB_EPStartXfer+0x876>
 800771e:	1d3b      	adds	r3, r7, #4
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007726:	b29b      	uxth	r3, r3
 8007728:	461a      	mov	r2, r3
 800772a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800772c:	4413      	add	r3, r2
 800772e:	673b      	str	r3, [r7, #112]	; 0x70
 8007730:	463b      	mov	r3, r7
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	781b      	ldrb	r3, [r3, #0]
 8007736:	011a      	lsls	r2, r3, #4
 8007738:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800773a:	4413      	add	r3, r2
 800773c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007740:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007742:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007746:	b29a      	uxth	r2, r3
 8007748:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800774a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800774c:	463b      	mov	r3, r7
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	895b      	ldrh	r3, [r3, #10]
 8007752:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007756:	463b      	mov	r3, r7
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	6959      	ldr	r1, [r3, #20]
 800775c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007760:	b29b      	uxth	r3, r3
 8007762:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007766:	1d38      	adds	r0, r7, #4
 8007768:	6800      	ldr	r0, [r0, #0]
 800776a:	f000 fdb4 	bl	80082d6 <USB_WritePMA>
 800776e:	e09f      	b.n	80078b0 <USB_EPStartXfer+0x9da>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007770:	463b      	mov	r3, r7
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	785b      	ldrb	r3, [r3, #1]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d164      	bne.n	8007844 <USB_EPStartXfer+0x96e>
 800777a:	1d3b      	adds	r3, r7, #4
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007780:	1d3b      	adds	r3, r7, #4
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007788:	b29b      	uxth	r3, r3
 800778a:	461a      	mov	r2, r3
 800778c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800778e:	4413      	add	r3, r2
 8007790:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007792:	463b      	mov	r3, r7
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	781b      	ldrb	r3, [r3, #0]
 8007798:	011a      	lsls	r2, r3, #4
 800779a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800779c:	4413      	add	r3, r2
 800779e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80077a2:	67bb      	str	r3, [r7, #120]	; 0x78
 80077a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d112      	bne.n	80077d2 <USB_EPStartXfer+0x8fc>
 80077ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80077ae:	881b      	ldrh	r3, [r3, #0]
 80077b0:	b29b      	uxth	r3, r3
 80077b2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80077b6:	b29a      	uxth	r2, r3
 80077b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80077ba:	801a      	strh	r2, [r3, #0]
 80077bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80077be:	881b      	ldrh	r3, [r3, #0]
 80077c0:	b29b      	uxth	r3, r3
 80077c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077ca:	b29a      	uxth	r2, r3
 80077cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80077ce:	801a      	strh	r2, [r3, #0]
 80077d0:	e05d      	b.n	800788e <USB_EPStartXfer+0x9b8>
 80077d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077d6:	2b3e      	cmp	r3, #62	; 0x3e
 80077d8:	d817      	bhi.n	800780a <USB_EPStartXfer+0x934>
 80077da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077de:	085b      	lsrs	r3, r3, #1
 80077e0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80077e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077e8:	f003 0301 	and.w	r3, r3, #1
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d004      	beq.n	80077fa <USB_EPStartXfer+0x924>
 80077f0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80077f4:	3301      	adds	r3, #1
 80077f6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80077fa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80077fe:	b29b      	uxth	r3, r3
 8007800:	029b      	lsls	r3, r3, #10
 8007802:	b29a      	uxth	r2, r3
 8007804:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007806:	801a      	strh	r2, [r3, #0]
 8007808:	e041      	b.n	800788e <USB_EPStartXfer+0x9b8>
 800780a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800780e:	095b      	lsrs	r3, r3, #5
 8007810:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007814:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007818:	f003 031f 	and.w	r3, r3, #31
 800781c:	2b00      	cmp	r3, #0
 800781e:	d104      	bne.n	800782a <USB_EPStartXfer+0x954>
 8007820:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007824:	3b01      	subs	r3, #1
 8007826:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800782a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800782e:	b29b      	uxth	r3, r3
 8007830:	029b      	lsls	r3, r3, #10
 8007832:	b29b      	uxth	r3, r3
 8007834:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007838:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800783c:	b29a      	uxth	r2, r3
 800783e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007840:	801a      	strh	r2, [r3, #0]
 8007842:	e024      	b.n	800788e <USB_EPStartXfer+0x9b8>
 8007844:	463b      	mov	r3, r7
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	785b      	ldrb	r3, [r3, #1]
 800784a:	2b01      	cmp	r3, #1
 800784c:	d11f      	bne.n	800788e <USB_EPStartXfer+0x9b8>
 800784e:	1d3b      	adds	r3, r7, #4
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007856:	1d3b      	adds	r3, r7, #4
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800785e:	b29b      	uxth	r3, r3
 8007860:	461a      	mov	r2, r3
 8007862:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007866:	4413      	add	r3, r2
 8007868:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800786c:	463b      	mov	r3, r7
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	781b      	ldrb	r3, [r3, #0]
 8007872:	011a      	lsls	r2, r3, #4
 8007874:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007878:	4413      	add	r3, r2
 800787a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800787e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007882:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007886:	b29a      	uxth	r2, r3
 8007888:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800788c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800788e:	463b      	mov	r3, r7
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	891b      	ldrh	r3, [r3, #8]
 8007894:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007898:	463b      	mov	r3, r7
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	6959      	ldr	r1, [r3, #20]
 800789e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078a2:	b29b      	uxth	r3, r3
 80078a4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80078a8:	1d38      	adds	r0, r7, #4
 80078aa:	6800      	ldr	r0, [r0, #0]
 80078ac:	f000 fd13 	bl	80082d6 <USB_WritePMA>
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80078b0:	1d3b      	adds	r3, r7, #4
 80078b2:	681a      	ldr	r2, [r3, #0]
 80078b4:	463b      	mov	r3, r7
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	781b      	ldrb	r3, [r3, #0]
 80078ba:	009b      	lsls	r3, r3, #2
 80078bc:	4413      	add	r3, r2
 80078be:	881b      	ldrh	r3, [r3, #0]
 80078c0:	b29b      	uxth	r3, r3
 80078c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078ca:	817b      	strh	r3, [r7, #10]
 80078cc:	897b      	ldrh	r3, [r7, #10]
 80078ce:	f083 0310 	eor.w	r3, r3, #16
 80078d2:	817b      	strh	r3, [r7, #10]
 80078d4:	897b      	ldrh	r3, [r7, #10]
 80078d6:	f083 0320 	eor.w	r3, r3, #32
 80078da:	817b      	strh	r3, [r7, #10]
 80078dc:	1d3b      	adds	r3, r7, #4
 80078de:	681a      	ldr	r2, [r3, #0]
 80078e0:	463b      	mov	r3, r7
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	781b      	ldrb	r3, [r3, #0]
 80078e6:	009b      	lsls	r3, r3, #2
 80078e8:	441a      	add	r2, r3
 80078ea:	897b      	ldrh	r3, [r7, #10]
 80078ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078fc:	b29b      	uxth	r3, r3
 80078fe:	8013      	strh	r3, [r2, #0]
 8007900:	e3b5      	b.n	800806e <USB_EPStartXfer+0x1198>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007902:	463b      	mov	r3, r7
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	7b1b      	ldrb	r3, [r3, #12]
 8007908:	2b00      	cmp	r3, #0
 800790a:	f040 8090 	bne.w	8007a2e <USB_EPStartXfer+0xb58>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800790e:	463b      	mov	r3, r7
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	699a      	ldr	r2, [r3, #24]
 8007914:	463b      	mov	r3, r7
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	691b      	ldr	r3, [r3, #16]
 800791a:	429a      	cmp	r2, r3
 800791c:	d90e      	bls.n	800793c <USB_EPStartXfer+0xa66>
      {
        len = ep->maxpacket;
 800791e:	463b      	mov	r3, r7
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	691b      	ldr	r3, [r3, #16]
 8007924:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8007928:	463b      	mov	r3, r7
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	699a      	ldr	r2, [r3, #24]
 800792e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007932:	1ad2      	subs	r2, r2, r3
 8007934:	463b      	mov	r3, r7
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	619a      	str	r2, [r3, #24]
 800793a:	e008      	b.n	800794e <USB_EPStartXfer+0xa78>
      }
      else
      {
        len = ep->xfer_len;
 800793c:	463b      	mov	r3, r7
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	699b      	ldr	r3, [r3, #24]
 8007942:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8007946:	463b      	mov	r3, r7
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	2200      	movs	r2, #0
 800794c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800794e:	1d3b      	adds	r3, r7, #4
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007956:	1d3b      	adds	r3, r7, #4
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800795e:	b29b      	uxth	r3, r3
 8007960:	461a      	mov	r2, r3
 8007962:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007966:	4413      	add	r3, r2
 8007968:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800796c:	463b      	mov	r3, r7
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	781b      	ldrb	r3, [r3, #0]
 8007972:	011a      	lsls	r2, r3, #4
 8007974:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007978:	4413      	add	r3, r2
 800797a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800797e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007982:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007986:	2b00      	cmp	r3, #0
 8007988:	d116      	bne.n	80079b8 <USB_EPStartXfer+0xae2>
 800798a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800798e:	881b      	ldrh	r3, [r3, #0]
 8007990:	b29b      	uxth	r3, r3
 8007992:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007996:	b29a      	uxth	r2, r3
 8007998:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800799c:	801a      	strh	r2, [r3, #0]
 800799e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80079a2:	881b      	ldrh	r3, [r3, #0]
 80079a4:	b29b      	uxth	r3, r3
 80079a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079ae:	b29a      	uxth	r2, r3
 80079b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80079b4:	801a      	strh	r2, [r3, #0]
 80079b6:	e32c      	b.n	8008012 <USB_EPStartXfer+0x113c>
 80079b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079bc:	2b3e      	cmp	r3, #62	; 0x3e
 80079be:	d818      	bhi.n	80079f2 <USB_EPStartXfer+0xb1c>
 80079c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079c4:	085b      	lsrs	r3, r3, #1
 80079c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80079ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079ce:	f003 0301 	and.w	r3, r3, #1
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d004      	beq.n	80079e0 <USB_EPStartXfer+0xb0a>
 80079d6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80079da:	3301      	adds	r3, #1
 80079dc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80079e0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80079e4:	b29b      	uxth	r3, r3
 80079e6:	029b      	lsls	r3, r3, #10
 80079e8:	b29a      	uxth	r2, r3
 80079ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80079ee:	801a      	strh	r2, [r3, #0]
 80079f0:	e30f      	b.n	8008012 <USB_EPStartXfer+0x113c>
 80079f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079f6:	095b      	lsrs	r3, r3, #5
 80079f8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80079fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a00:	f003 031f 	and.w	r3, r3, #31
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d104      	bne.n	8007a12 <USB_EPStartXfer+0xb3c>
 8007a08:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007a0c:	3b01      	subs	r3, #1
 8007a0e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007a12:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007a16:	b29b      	uxth	r3, r3
 8007a18:	029b      	lsls	r3, r3, #10
 8007a1a:	b29b      	uxth	r3, r3
 8007a1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a24:	b29a      	uxth	r2, r3
 8007a26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007a2a:	801a      	strh	r2, [r3, #0]
 8007a2c:	e2f1      	b.n	8008012 <USB_EPStartXfer+0x113c>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007a2e:	463b      	mov	r3, r7
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	78db      	ldrb	r3, [r3, #3]
 8007a34:	2b02      	cmp	r3, #2
 8007a36:	f040 818f 	bne.w	8007d58 <USB_EPStartXfer+0xe82>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007a3a:	463b      	mov	r3, r7
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	785b      	ldrb	r3, [r3, #1]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d175      	bne.n	8007b30 <USB_EPStartXfer+0xc5a>
 8007a44:	1d3b      	adds	r3, r7, #4
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007a4c:	1d3b      	adds	r3, r7, #4
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a54:	b29b      	uxth	r3, r3
 8007a56:	461a      	mov	r2, r3
 8007a58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007a5c:	4413      	add	r3, r2
 8007a5e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007a62:	463b      	mov	r3, r7
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	781b      	ldrb	r3, [r3, #0]
 8007a68:	011a      	lsls	r2, r3, #4
 8007a6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007a6e:	4413      	add	r3, r2
 8007a70:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007a74:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007a78:	463b      	mov	r3, r7
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	691b      	ldr	r3, [r3, #16]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d116      	bne.n	8007ab0 <USB_EPStartXfer+0xbda>
 8007a82:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007a86:	881b      	ldrh	r3, [r3, #0]
 8007a88:	b29b      	uxth	r3, r3
 8007a8a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007a8e:	b29a      	uxth	r2, r3
 8007a90:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007a94:	801a      	strh	r2, [r3, #0]
 8007a96:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007a9a:	881b      	ldrh	r3, [r3, #0]
 8007a9c:	b29b      	uxth	r3, r3
 8007a9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007aa2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007aa6:	b29a      	uxth	r2, r3
 8007aa8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007aac:	801a      	strh	r2, [r3, #0]
 8007aae:	e065      	b.n	8007b7c <USB_EPStartXfer+0xca6>
 8007ab0:	463b      	mov	r3, r7
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	691b      	ldr	r3, [r3, #16]
 8007ab6:	2b3e      	cmp	r3, #62	; 0x3e
 8007ab8:	d81a      	bhi.n	8007af0 <USB_EPStartXfer+0xc1a>
 8007aba:	463b      	mov	r3, r7
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	691b      	ldr	r3, [r3, #16]
 8007ac0:	085b      	lsrs	r3, r3, #1
 8007ac2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007ac6:	463b      	mov	r3, r7
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	691b      	ldr	r3, [r3, #16]
 8007acc:	f003 0301 	and.w	r3, r3, #1
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d004      	beq.n	8007ade <USB_EPStartXfer+0xc08>
 8007ad4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ad8:	3301      	adds	r3, #1
 8007ada:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007ade:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ae2:	b29b      	uxth	r3, r3
 8007ae4:	029b      	lsls	r3, r3, #10
 8007ae6:	b29a      	uxth	r2, r3
 8007ae8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007aec:	801a      	strh	r2, [r3, #0]
 8007aee:	e045      	b.n	8007b7c <USB_EPStartXfer+0xca6>
 8007af0:	463b      	mov	r3, r7
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	691b      	ldr	r3, [r3, #16]
 8007af6:	095b      	lsrs	r3, r3, #5
 8007af8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007afc:	463b      	mov	r3, r7
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	691b      	ldr	r3, [r3, #16]
 8007b02:	f003 031f 	and.w	r3, r3, #31
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d104      	bne.n	8007b14 <USB_EPStartXfer+0xc3e>
 8007b0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b0e:	3b01      	subs	r3, #1
 8007b10:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007b14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b18:	b29b      	uxth	r3, r3
 8007b1a:	029b      	lsls	r3, r3, #10
 8007b1c:	b29b      	uxth	r3, r3
 8007b1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b26:	b29a      	uxth	r2, r3
 8007b28:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007b2c:	801a      	strh	r2, [r3, #0]
 8007b2e:	e025      	b.n	8007b7c <USB_EPStartXfer+0xca6>
 8007b30:	463b      	mov	r3, r7
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	785b      	ldrb	r3, [r3, #1]
 8007b36:	2b01      	cmp	r3, #1
 8007b38:	d120      	bne.n	8007b7c <USB_EPStartXfer+0xca6>
 8007b3a:	1d3b      	adds	r3, r7, #4
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007b42:	1d3b      	adds	r3, r7, #4
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b4a:	b29b      	uxth	r3, r3
 8007b4c:	461a      	mov	r2, r3
 8007b4e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007b52:	4413      	add	r3, r2
 8007b54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007b58:	463b      	mov	r3, r7
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	781b      	ldrb	r3, [r3, #0]
 8007b5e:	011a      	lsls	r2, r3, #4
 8007b60:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007b64:	4413      	add	r3, r2
 8007b66:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007b6a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007b6e:	463b      	mov	r3, r7
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	691b      	ldr	r3, [r3, #16]
 8007b74:	b29a      	uxth	r2, r3
 8007b76:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007b7a:	801a      	strh	r2, [r3, #0]
 8007b7c:	1d3b      	adds	r3, r7, #4
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007b84:	463b      	mov	r3, r7
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	785b      	ldrb	r3, [r3, #1]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d175      	bne.n	8007c7a <USB_EPStartXfer+0xda4>
 8007b8e:	1d3b      	adds	r3, r7, #4
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007b96:	1d3b      	adds	r3, r7, #4
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b9e:	b29b      	uxth	r3, r3
 8007ba0:	461a      	mov	r2, r3
 8007ba2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007ba6:	4413      	add	r3, r2
 8007ba8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007bac:	463b      	mov	r3, r7
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	781b      	ldrb	r3, [r3, #0]
 8007bb2:	011a      	lsls	r2, r3, #4
 8007bb4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007bb8:	4413      	add	r3, r2
 8007bba:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007bbe:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007bc2:	463b      	mov	r3, r7
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	691b      	ldr	r3, [r3, #16]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d116      	bne.n	8007bfa <USB_EPStartXfer+0xd24>
 8007bcc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007bd0:	881b      	ldrh	r3, [r3, #0]
 8007bd2:	b29b      	uxth	r3, r3
 8007bd4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007bd8:	b29a      	uxth	r2, r3
 8007bda:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007bde:	801a      	strh	r2, [r3, #0]
 8007be0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007be4:	881b      	ldrh	r3, [r3, #0]
 8007be6:	b29b      	uxth	r3, r3
 8007be8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bf0:	b29a      	uxth	r2, r3
 8007bf2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007bf6:	801a      	strh	r2, [r3, #0]
 8007bf8:	e061      	b.n	8007cbe <USB_EPStartXfer+0xde8>
 8007bfa:	463b      	mov	r3, r7
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	691b      	ldr	r3, [r3, #16]
 8007c00:	2b3e      	cmp	r3, #62	; 0x3e
 8007c02:	d81a      	bhi.n	8007c3a <USB_EPStartXfer+0xd64>
 8007c04:	463b      	mov	r3, r7
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	691b      	ldr	r3, [r3, #16]
 8007c0a:	085b      	lsrs	r3, r3, #1
 8007c0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007c10:	463b      	mov	r3, r7
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	691b      	ldr	r3, [r3, #16]
 8007c16:	f003 0301 	and.w	r3, r3, #1
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d004      	beq.n	8007c28 <USB_EPStartXfer+0xd52>
 8007c1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c22:	3301      	adds	r3, #1
 8007c24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007c28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c2c:	b29b      	uxth	r3, r3
 8007c2e:	029b      	lsls	r3, r3, #10
 8007c30:	b29a      	uxth	r2, r3
 8007c32:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007c36:	801a      	strh	r2, [r3, #0]
 8007c38:	e041      	b.n	8007cbe <USB_EPStartXfer+0xde8>
 8007c3a:	463b      	mov	r3, r7
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	691b      	ldr	r3, [r3, #16]
 8007c40:	095b      	lsrs	r3, r3, #5
 8007c42:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007c46:	463b      	mov	r3, r7
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	691b      	ldr	r3, [r3, #16]
 8007c4c:	f003 031f 	and.w	r3, r3, #31
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d104      	bne.n	8007c5e <USB_EPStartXfer+0xd88>
 8007c54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c58:	3b01      	subs	r3, #1
 8007c5a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007c5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c62:	b29b      	uxth	r3, r3
 8007c64:	029b      	lsls	r3, r3, #10
 8007c66:	b29b      	uxth	r3, r3
 8007c68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c70:	b29a      	uxth	r2, r3
 8007c72:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007c76:	801a      	strh	r2, [r3, #0]
 8007c78:	e021      	b.n	8007cbe <USB_EPStartXfer+0xde8>
 8007c7a:	463b      	mov	r3, r7
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	785b      	ldrb	r3, [r3, #1]
 8007c80:	2b01      	cmp	r3, #1
 8007c82:	d11c      	bne.n	8007cbe <USB_EPStartXfer+0xde8>
 8007c84:	1d3b      	adds	r3, r7, #4
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c8c:	b29b      	uxth	r3, r3
 8007c8e:	461a      	mov	r2, r3
 8007c90:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007c94:	4413      	add	r3, r2
 8007c96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007c9a:	463b      	mov	r3, r7
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	781b      	ldrb	r3, [r3, #0]
 8007ca0:	011a      	lsls	r2, r3, #4
 8007ca2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007ca6:	4413      	add	r3, r2
 8007ca8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007cac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007cb0:	463b      	mov	r3, r7
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	691b      	ldr	r3, [r3, #16]
 8007cb6:	b29a      	uxth	r2, r3
 8007cb8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007cbc:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007cbe:	463b      	mov	r3, r7
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	69db      	ldr	r3, [r3, #28]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	f000 81a4 	beq.w	8008012 <USB_EPStartXfer+0x113c>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007cca:	1d3b      	adds	r3, r7, #4
 8007ccc:	681a      	ldr	r2, [r3, #0]
 8007cce:	463b      	mov	r3, r7
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	781b      	ldrb	r3, [r3, #0]
 8007cd4:	009b      	lsls	r3, r3, #2
 8007cd6:	4413      	add	r3, r2
 8007cd8:	881b      	ldrh	r3, [r3, #0]
 8007cda:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007cde:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007ce2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d005      	beq.n	8007cf6 <USB_EPStartXfer+0xe20>
 8007cea:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007cee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d10d      	bne.n	8007d12 <USB_EPStartXfer+0xe3c>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007cf6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007cfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	f040 8187 	bne.w	8008012 <USB_EPStartXfer+0x113c>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007d04:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007d08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	f040 8180 	bne.w	8008012 <USB_EPStartXfer+0x113c>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8007d12:	1d3b      	adds	r3, r7, #4
 8007d14:	681a      	ldr	r2, [r3, #0]
 8007d16:	463b      	mov	r3, r7
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	781b      	ldrb	r3, [r3, #0]
 8007d1c:	009b      	lsls	r3, r3, #2
 8007d1e:	4413      	add	r3, r2
 8007d20:	881b      	ldrh	r3, [r3, #0]
 8007d22:	b29b      	uxth	r3, r3
 8007d24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d2c:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8007d30:	1d3b      	adds	r3, r7, #4
 8007d32:	681a      	ldr	r2, [r3, #0]
 8007d34:	463b      	mov	r3, r7
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	781b      	ldrb	r3, [r3, #0]
 8007d3a:	009b      	lsls	r3, r3, #2
 8007d3c:	441a      	add	r2, r3
 8007d3e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8007d42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d4e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007d52:	b29b      	uxth	r3, r3
 8007d54:	8013      	strh	r3, [r2, #0]
 8007d56:	e15c      	b.n	8008012 <USB_EPStartXfer+0x113c>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007d58:	463b      	mov	r3, r7
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	78db      	ldrb	r3, [r3, #3]
 8007d5e:	2b01      	cmp	r3, #1
 8007d60:	f040 8155 	bne.w	800800e <USB_EPStartXfer+0x1138>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007d64:	463b      	mov	r3, r7
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	699a      	ldr	r2, [r3, #24]
 8007d6a:	463b      	mov	r3, r7
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	691b      	ldr	r3, [r3, #16]
 8007d70:	429a      	cmp	r2, r3
 8007d72:	d90e      	bls.n	8007d92 <USB_EPStartXfer+0xebc>
        {
          len = ep->maxpacket;
 8007d74:	463b      	mov	r3, r7
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	691b      	ldr	r3, [r3, #16]
 8007d7a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8007d7e:	463b      	mov	r3, r7
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	699a      	ldr	r2, [r3, #24]
 8007d84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d88:	1ad2      	subs	r2, r2, r3
 8007d8a:	463b      	mov	r3, r7
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	619a      	str	r2, [r3, #24]
 8007d90:	e008      	b.n	8007da4 <USB_EPStartXfer+0xece>
        }
        else
        {
          len = ep->xfer_len;
 8007d92:	463b      	mov	r3, r7
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	699b      	ldr	r3, [r3, #24]
 8007d98:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8007d9c:	463b      	mov	r3, r7
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	2200      	movs	r2, #0
 8007da2:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007da4:	463b      	mov	r3, r7
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	785b      	ldrb	r3, [r3, #1]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d16f      	bne.n	8007e8e <USB_EPStartXfer+0xfb8>
 8007dae:	1d3b      	adds	r3, r7, #4
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007db6:	1d3b      	adds	r3, r7, #4
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007dbe:	b29b      	uxth	r3, r3
 8007dc0:	461a      	mov	r2, r3
 8007dc2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007dc6:	4413      	add	r3, r2
 8007dc8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007dcc:	463b      	mov	r3, r7
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	781b      	ldrb	r3, [r3, #0]
 8007dd2:	011a      	lsls	r2, r3, #4
 8007dd4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007dd8:	4413      	add	r3, r2
 8007dda:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007dde:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007de2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d116      	bne.n	8007e18 <USB_EPStartXfer+0xf42>
 8007dea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007dee:	881b      	ldrh	r3, [r3, #0]
 8007df0:	b29b      	uxth	r3, r3
 8007df2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007df6:	b29a      	uxth	r2, r3
 8007df8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007dfc:	801a      	strh	r2, [r3, #0]
 8007dfe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007e02:	881b      	ldrh	r3, [r3, #0]
 8007e04:	b29b      	uxth	r3, r3
 8007e06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e0e:	b29a      	uxth	r2, r3
 8007e10:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007e14:	801a      	strh	r2, [r3, #0]
 8007e16:	e05f      	b.n	8007ed8 <USB_EPStartXfer+0x1002>
 8007e18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e1c:	2b3e      	cmp	r3, #62	; 0x3e
 8007e1e:	d818      	bhi.n	8007e52 <USB_EPStartXfer+0xf7c>
 8007e20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e24:	085b      	lsrs	r3, r3, #1
 8007e26:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007e2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e2e:	f003 0301 	and.w	r3, r3, #1
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d004      	beq.n	8007e40 <USB_EPStartXfer+0xf6a>
 8007e36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e3a:	3301      	adds	r3, #1
 8007e3c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007e40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e44:	b29b      	uxth	r3, r3
 8007e46:	029b      	lsls	r3, r3, #10
 8007e48:	b29a      	uxth	r2, r3
 8007e4a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007e4e:	801a      	strh	r2, [r3, #0]
 8007e50:	e042      	b.n	8007ed8 <USB_EPStartXfer+0x1002>
 8007e52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e56:	095b      	lsrs	r3, r3, #5
 8007e58:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007e5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e60:	f003 031f 	and.w	r3, r3, #31
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d104      	bne.n	8007e72 <USB_EPStartXfer+0xf9c>
 8007e68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e6c:	3b01      	subs	r3, #1
 8007e6e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007e72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e76:	b29b      	uxth	r3, r3
 8007e78:	029b      	lsls	r3, r3, #10
 8007e7a:	b29b      	uxth	r3, r3
 8007e7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e84:	b29a      	uxth	r2, r3
 8007e86:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007e8a:	801a      	strh	r2, [r3, #0]
 8007e8c:	e024      	b.n	8007ed8 <USB_EPStartXfer+0x1002>
 8007e8e:	463b      	mov	r3, r7
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	785b      	ldrb	r3, [r3, #1]
 8007e94:	2b01      	cmp	r3, #1
 8007e96:	d11f      	bne.n	8007ed8 <USB_EPStartXfer+0x1002>
 8007e98:	1d3b      	adds	r3, r7, #4
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007ea0:	1d3b      	adds	r3, r7, #4
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ea8:	b29b      	uxth	r3, r3
 8007eaa:	461a      	mov	r2, r3
 8007eac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007eb0:	4413      	add	r3, r2
 8007eb2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007eb6:	463b      	mov	r3, r7
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	781b      	ldrb	r3, [r3, #0]
 8007ebc:	011a      	lsls	r2, r3, #4
 8007ebe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007ec2:	4413      	add	r3, r2
 8007ec4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007ec8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007ecc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ed0:	b29a      	uxth	r2, r3
 8007ed2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007ed6:	801a      	strh	r2, [r3, #0]
 8007ed8:	1d3b      	adds	r3, r7, #4
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007ee0:	463b      	mov	r3, r7
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	785b      	ldrb	r3, [r3, #1]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d16f      	bne.n	8007fca <USB_EPStartXfer+0x10f4>
 8007eea:	1d3b      	adds	r3, r7, #4
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007ef2:	1d3b      	adds	r3, r7, #4
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007efa:	b29b      	uxth	r3, r3
 8007efc:	461a      	mov	r2, r3
 8007efe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007f02:	4413      	add	r3, r2
 8007f04:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007f08:	463b      	mov	r3, r7
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	781b      	ldrb	r3, [r3, #0]
 8007f0e:	011a      	lsls	r2, r3, #4
 8007f10:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007f14:	4413      	add	r3, r2
 8007f16:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007f1a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007f1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d116      	bne.n	8007f54 <USB_EPStartXfer+0x107e>
 8007f26:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007f2a:	881b      	ldrh	r3, [r3, #0]
 8007f2c:	b29b      	uxth	r3, r3
 8007f2e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007f32:	b29a      	uxth	r2, r3
 8007f34:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007f38:	801a      	strh	r2, [r3, #0]
 8007f3a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007f3e:	881b      	ldrh	r3, [r3, #0]
 8007f40:	b29b      	uxth	r3, r3
 8007f42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f4a:	b29a      	uxth	r2, r3
 8007f4c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007f50:	801a      	strh	r2, [r3, #0]
 8007f52:	e05e      	b.n	8008012 <USB_EPStartXfer+0x113c>
 8007f54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f58:	2b3e      	cmp	r3, #62	; 0x3e
 8007f5a:	d818      	bhi.n	8007f8e <USB_EPStartXfer+0x10b8>
 8007f5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f60:	085b      	lsrs	r3, r3, #1
 8007f62:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007f66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f6a:	f003 0301 	and.w	r3, r3, #1
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d004      	beq.n	8007f7c <USB_EPStartXfer+0x10a6>
 8007f72:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007f76:	3301      	adds	r3, #1
 8007f78:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007f7c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007f80:	b29b      	uxth	r3, r3
 8007f82:	029b      	lsls	r3, r3, #10
 8007f84:	b29a      	uxth	r2, r3
 8007f86:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007f8a:	801a      	strh	r2, [r3, #0]
 8007f8c:	e041      	b.n	8008012 <USB_EPStartXfer+0x113c>
 8007f8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f92:	095b      	lsrs	r3, r3, #5
 8007f94:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007f98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f9c:	f003 031f 	and.w	r3, r3, #31
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d104      	bne.n	8007fae <USB_EPStartXfer+0x10d8>
 8007fa4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007fa8:	3b01      	subs	r3, #1
 8007faa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007fae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007fb2:	b29b      	uxth	r3, r3
 8007fb4:	029b      	lsls	r3, r3, #10
 8007fb6:	b29b      	uxth	r3, r3
 8007fb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007fbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007fc0:	b29a      	uxth	r2, r3
 8007fc2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007fc6:	801a      	strh	r2, [r3, #0]
 8007fc8:	e023      	b.n	8008012 <USB_EPStartXfer+0x113c>
 8007fca:	463b      	mov	r3, r7
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	785b      	ldrb	r3, [r3, #1]
 8007fd0:	2b01      	cmp	r3, #1
 8007fd2:	d11e      	bne.n	8008012 <USB_EPStartXfer+0x113c>
 8007fd4:	1d3b      	adds	r3, r7, #4
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007fdc:	b29b      	uxth	r3, r3
 8007fde:	461a      	mov	r2, r3
 8007fe0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007fe4:	4413      	add	r3, r2
 8007fe6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007fea:	463b      	mov	r3, r7
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	781b      	ldrb	r3, [r3, #0]
 8007ff0:	011a      	lsls	r2, r3, #4
 8007ff2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007ff6:	4413      	add	r3, r2
 8007ff8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007ffc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008000:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008004:	b29a      	uxth	r2, r3
 8008006:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800800a:	801a      	strh	r2, [r3, #0]
 800800c:	e001      	b.n	8008012 <USB_EPStartXfer+0x113c>
      }
      else
      {
        return HAL_ERROR;
 800800e:	2301      	movs	r3, #1
 8008010:	e02e      	b.n	8008070 <USB_EPStartXfer+0x119a>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008012:	1d3b      	adds	r3, r7, #4
 8008014:	681a      	ldr	r2, [r3, #0]
 8008016:	463b      	mov	r3, r7
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	781b      	ldrb	r3, [r3, #0]
 800801c:	009b      	lsls	r3, r3, #2
 800801e:	4413      	add	r3, r2
 8008020:	881b      	ldrh	r3, [r3, #0]
 8008022:	b29b      	uxth	r3, r3
 8008024:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008028:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800802c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008030:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008034:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008038:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800803c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008040:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008044:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008048:	1d3b      	adds	r3, r7, #4
 800804a:	681a      	ldr	r2, [r3, #0]
 800804c:	463b      	mov	r3, r7
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	781b      	ldrb	r3, [r3, #0]
 8008052:	009b      	lsls	r3, r3, #2
 8008054:	441a      	add	r2, r3
 8008056:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800805a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800805e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008062:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008066:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800806a:	b29b      	uxth	r3, r3
 800806c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800806e:	2300      	movs	r3, #0
}
 8008070:	4618      	mov	r0, r3
 8008072:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}

0800807a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800807a:	b480      	push	{r7}
 800807c:	b085      	sub	sp, #20
 800807e:	af00      	add	r7, sp, #0
 8008080:	6078      	str	r0, [r7, #4]
 8008082:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	785b      	ldrb	r3, [r3, #1]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d020      	beq.n	80080ce <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800808c:	687a      	ldr	r2, [r7, #4]
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	781b      	ldrb	r3, [r3, #0]
 8008092:	009b      	lsls	r3, r3, #2
 8008094:	4413      	add	r3, r2
 8008096:	881b      	ldrh	r3, [r3, #0]
 8008098:	b29b      	uxth	r3, r3
 800809a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800809e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080a2:	81bb      	strh	r3, [r7, #12]
 80080a4:	89bb      	ldrh	r3, [r7, #12]
 80080a6:	f083 0310 	eor.w	r3, r3, #16
 80080aa:	81bb      	strh	r3, [r7, #12]
 80080ac:	687a      	ldr	r2, [r7, #4]
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	781b      	ldrb	r3, [r3, #0]
 80080b2:	009b      	lsls	r3, r3, #2
 80080b4:	441a      	add	r2, r3
 80080b6:	89bb      	ldrh	r3, [r7, #12]
 80080b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080c8:	b29b      	uxth	r3, r3
 80080ca:	8013      	strh	r3, [r2, #0]
 80080cc:	e01f      	b.n	800810e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80080ce:	687a      	ldr	r2, [r7, #4]
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	781b      	ldrb	r3, [r3, #0]
 80080d4:	009b      	lsls	r3, r3, #2
 80080d6:	4413      	add	r3, r2
 80080d8:	881b      	ldrh	r3, [r3, #0]
 80080da:	b29b      	uxth	r3, r3
 80080dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80080e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080e4:	81fb      	strh	r3, [r7, #14]
 80080e6:	89fb      	ldrh	r3, [r7, #14]
 80080e8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80080ec:	81fb      	strh	r3, [r7, #14]
 80080ee:	687a      	ldr	r2, [r7, #4]
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	781b      	ldrb	r3, [r3, #0]
 80080f4:	009b      	lsls	r3, r3, #2
 80080f6:	441a      	add	r2, r3
 80080f8:	89fb      	ldrh	r3, [r7, #14]
 80080fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008102:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008106:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800810a:	b29b      	uxth	r3, r3
 800810c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800810e:	2300      	movs	r3, #0
}
 8008110:	4618      	mov	r0, r3
 8008112:	3714      	adds	r7, #20
 8008114:	46bd      	mov	sp, r7
 8008116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811a:	4770      	bx	lr

0800811c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800811c:	b480      	push	{r7}
 800811e:	b087      	sub	sp, #28
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
 8008124:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	7b1b      	ldrb	r3, [r3, #12]
 800812a:	2b00      	cmp	r3, #0
 800812c:	f040 809d 	bne.w	800826a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	785b      	ldrb	r3, [r3, #1]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d04c      	beq.n	80081d2 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008138:	687a      	ldr	r2, [r7, #4]
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	781b      	ldrb	r3, [r3, #0]
 800813e:	009b      	lsls	r3, r3, #2
 8008140:	4413      	add	r3, r2
 8008142:	881b      	ldrh	r3, [r3, #0]
 8008144:	823b      	strh	r3, [r7, #16]
 8008146:	8a3b      	ldrh	r3, [r7, #16]
 8008148:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800814c:	2b00      	cmp	r3, #0
 800814e:	d01b      	beq.n	8008188 <USB_EPClearStall+0x6c>
 8008150:	687a      	ldr	r2, [r7, #4]
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	781b      	ldrb	r3, [r3, #0]
 8008156:	009b      	lsls	r3, r3, #2
 8008158:	4413      	add	r3, r2
 800815a:	881b      	ldrh	r3, [r3, #0]
 800815c:	b29b      	uxth	r3, r3
 800815e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008166:	81fb      	strh	r3, [r7, #14]
 8008168:	687a      	ldr	r2, [r7, #4]
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	781b      	ldrb	r3, [r3, #0]
 800816e:	009b      	lsls	r3, r3, #2
 8008170:	441a      	add	r2, r3
 8008172:	89fb      	ldrh	r3, [r7, #14]
 8008174:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008178:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800817c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008180:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008184:	b29b      	uxth	r3, r3
 8008186:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	78db      	ldrb	r3, [r3, #3]
 800818c:	2b01      	cmp	r3, #1
 800818e:	d06c      	beq.n	800826a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008190:	687a      	ldr	r2, [r7, #4]
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	781b      	ldrb	r3, [r3, #0]
 8008196:	009b      	lsls	r3, r3, #2
 8008198:	4413      	add	r3, r2
 800819a:	881b      	ldrh	r3, [r3, #0]
 800819c:	b29b      	uxth	r3, r3
 800819e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081a6:	81bb      	strh	r3, [r7, #12]
 80081a8:	89bb      	ldrh	r3, [r7, #12]
 80081aa:	f083 0320 	eor.w	r3, r3, #32
 80081ae:	81bb      	strh	r3, [r7, #12]
 80081b0:	687a      	ldr	r2, [r7, #4]
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	781b      	ldrb	r3, [r3, #0]
 80081b6:	009b      	lsls	r3, r3, #2
 80081b8:	441a      	add	r2, r3
 80081ba:	89bb      	ldrh	r3, [r7, #12]
 80081bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081cc:	b29b      	uxth	r3, r3
 80081ce:	8013      	strh	r3, [r2, #0]
 80081d0:	e04b      	b.n	800826a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80081d2:	687a      	ldr	r2, [r7, #4]
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	781b      	ldrb	r3, [r3, #0]
 80081d8:	009b      	lsls	r3, r3, #2
 80081da:	4413      	add	r3, r2
 80081dc:	881b      	ldrh	r3, [r3, #0]
 80081de:	82fb      	strh	r3, [r7, #22]
 80081e0:	8afb      	ldrh	r3, [r7, #22]
 80081e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d01b      	beq.n	8008222 <USB_EPClearStall+0x106>
 80081ea:	687a      	ldr	r2, [r7, #4]
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	781b      	ldrb	r3, [r3, #0]
 80081f0:	009b      	lsls	r3, r3, #2
 80081f2:	4413      	add	r3, r2
 80081f4:	881b      	ldrh	r3, [r3, #0]
 80081f6:	b29b      	uxth	r3, r3
 80081f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008200:	82bb      	strh	r3, [r7, #20]
 8008202:	687a      	ldr	r2, [r7, #4]
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	781b      	ldrb	r3, [r3, #0]
 8008208:	009b      	lsls	r3, r3, #2
 800820a:	441a      	add	r2, r3
 800820c:	8abb      	ldrh	r3, [r7, #20]
 800820e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008212:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008216:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800821a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800821e:	b29b      	uxth	r3, r3
 8008220:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008222:	687a      	ldr	r2, [r7, #4]
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	781b      	ldrb	r3, [r3, #0]
 8008228:	009b      	lsls	r3, r3, #2
 800822a:	4413      	add	r3, r2
 800822c:	881b      	ldrh	r3, [r3, #0]
 800822e:	b29b      	uxth	r3, r3
 8008230:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008234:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008238:	827b      	strh	r3, [r7, #18]
 800823a:	8a7b      	ldrh	r3, [r7, #18]
 800823c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008240:	827b      	strh	r3, [r7, #18]
 8008242:	8a7b      	ldrh	r3, [r7, #18]
 8008244:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008248:	827b      	strh	r3, [r7, #18]
 800824a:	687a      	ldr	r2, [r7, #4]
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	781b      	ldrb	r3, [r3, #0]
 8008250:	009b      	lsls	r3, r3, #2
 8008252:	441a      	add	r2, r3
 8008254:	8a7b      	ldrh	r3, [r7, #18]
 8008256:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800825a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800825e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008262:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008266:	b29b      	uxth	r3, r3
 8008268:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800826a:	2300      	movs	r3, #0
}
 800826c:	4618      	mov	r0, r3
 800826e:	371c      	adds	r7, #28
 8008270:	46bd      	mov	sp, r7
 8008272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008276:	4770      	bx	lr

08008278 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008278:	b480      	push	{r7}
 800827a:	b083      	sub	sp, #12
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
 8008280:	460b      	mov	r3, r1
 8008282:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008284:	78fb      	ldrb	r3, [r7, #3]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d103      	bne.n	8008292 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2280      	movs	r2, #128	; 0x80
 800828e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008292:	2300      	movs	r3, #0
}
 8008294:	4618      	mov	r0, r3
 8008296:	370c      	adds	r7, #12
 8008298:	46bd      	mov	sp, r7
 800829a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829e:	4770      	bx	lr

080082a0 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80082a0:	b480      	push	{r7}
 80082a2:	b083      	sub	sp, #12
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80082a8:	2300      	movs	r3, #0
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	370c      	adds	r7, #12
 80082ae:	46bd      	mov	sp, r7
 80082b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b4:	4770      	bx	lr

080082b6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80082b6:	b480      	push	{r7}
 80082b8:	b085      	sub	sp, #20
 80082ba:	af00      	add	r7, sp, #0
 80082bc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80082c4:	b29b      	uxth	r3, r3
 80082c6:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80082c8:	68fb      	ldr	r3, [r7, #12]
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	3714      	adds	r7, #20
 80082ce:	46bd      	mov	sp, r7
 80082d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d4:	4770      	bx	lr

080082d6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80082d6:	b480      	push	{r7}
 80082d8:	b08d      	sub	sp, #52	; 0x34
 80082da:	af00      	add	r7, sp, #0
 80082dc:	60f8      	str	r0, [r7, #12]
 80082de:	60b9      	str	r1, [r7, #8]
 80082e0:	4611      	mov	r1, r2
 80082e2:	461a      	mov	r2, r3
 80082e4:	460b      	mov	r3, r1
 80082e6:	80fb      	strh	r3, [r7, #6]
 80082e8:	4613      	mov	r3, r2
 80082ea:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80082ec:	88bb      	ldrh	r3, [r7, #4]
 80082ee:	3301      	adds	r3, #1
 80082f0:	085b      	lsrs	r3, r3, #1
 80082f2:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80082fc:	88fb      	ldrh	r3, [r7, #6]
 80082fe:	005a      	lsls	r2, r3, #1
 8008300:	69fb      	ldr	r3, [r7, #28]
 8008302:	4413      	add	r3, r2
 8008304:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008308:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800830a:	6a3b      	ldr	r3, [r7, #32]
 800830c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800830e:	e01e      	b.n	800834e <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8008310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008312:	781b      	ldrb	r3, [r3, #0]
 8008314:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8008316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008318:	3301      	adds	r3, #1
 800831a:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800831c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800831e:	781b      	ldrb	r3, [r3, #0]
 8008320:	b29b      	uxth	r3, r3
 8008322:	021b      	lsls	r3, r3, #8
 8008324:	b29b      	uxth	r3, r3
 8008326:	461a      	mov	r2, r3
 8008328:	69bb      	ldr	r3, [r7, #24]
 800832a:	4313      	orrs	r3, r2
 800832c:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800832e:	697b      	ldr	r3, [r7, #20]
 8008330:	b29a      	uxth	r2, r3
 8008332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008334:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008338:	3302      	adds	r3, #2
 800833a:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800833c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800833e:	3302      	adds	r3, #2
 8008340:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8008342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008344:	3301      	adds	r3, #1
 8008346:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8008348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800834a:	3b01      	subs	r3, #1
 800834c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800834e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008350:	2b00      	cmp	r3, #0
 8008352:	d1dd      	bne.n	8008310 <USB_WritePMA+0x3a>
  }
}
 8008354:	bf00      	nop
 8008356:	bf00      	nop
 8008358:	3734      	adds	r7, #52	; 0x34
 800835a:	46bd      	mov	sp, r7
 800835c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008360:	4770      	bx	lr

08008362 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008362:	b480      	push	{r7}
 8008364:	b08b      	sub	sp, #44	; 0x2c
 8008366:	af00      	add	r7, sp, #0
 8008368:	60f8      	str	r0, [r7, #12]
 800836a:	60b9      	str	r1, [r7, #8]
 800836c:	4611      	mov	r1, r2
 800836e:	461a      	mov	r2, r3
 8008370:	460b      	mov	r3, r1
 8008372:	80fb      	strh	r3, [r7, #6]
 8008374:	4613      	mov	r3, r2
 8008376:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008378:	88bb      	ldrh	r3, [r7, #4]
 800837a:	085b      	lsrs	r3, r3, #1
 800837c:	b29b      	uxth	r3, r3
 800837e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008388:	88fb      	ldrh	r3, [r7, #6]
 800838a:	005a      	lsls	r2, r3, #1
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	4413      	add	r3, r2
 8008390:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008394:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8008396:	69bb      	ldr	r3, [r7, #24]
 8008398:	627b      	str	r3, [r7, #36]	; 0x24
 800839a:	e01b      	b.n	80083d4 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800839c:	6a3b      	ldr	r3, [r7, #32]
 800839e:	881b      	ldrh	r3, [r3, #0]
 80083a0:	b29b      	uxth	r3, r3
 80083a2:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80083a4:	6a3b      	ldr	r3, [r7, #32]
 80083a6:	3302      	adds	r3, #2
 80083a8:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80083aa:	693b      	ldr	r3, [r7, #16]
 80083ac:	b2da      	uxtb	r2, r3
 80083ae:	69fb      	ldr	r3, [r7, #28]
 80083b0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80083b2:	69fb      	ldr	r3, [r7, #28]
 80083b4:	3301      	adds	r3, #1
 80083b6:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80083b8:	693b      	ldr	r3, [r7, #16]
 80083ba:	0a1b      	lsrs	r3, r3, #8
 80083bc:	b2da      	uxtb	r2, r3
 80083be:	69fb      	ldr	r3, [r7, #28]
 80083c0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80083c2:	69fb      	ldr	r3, [r7, #28]
 80083c4:	3301      	adds	r3, #1
 80083c6:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80083c8:	6a3b      	ldr	r3, [r7, #32]
 80083ca:	3302      	adds	r3, #2
 80083cc:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80083ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d0:	3b01      	subs	r3, #1
 80083d2:	627b      	str	r3, [r7, #36]	; 0x24
 80083d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d1e0      	bne.n	800839c <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80083da:	88bb      	ldrh	r3, [r7, #4]
 80083dc:	f003 0301 	and.w	r3, r3, #1
 80083e0:	b29b      	uxth	r3, r3
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d007      	beq.n	80083f6 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80083e6:	6a3b      	ldr	r3, [r7, #32]
 80083e8:	881b      	ldrh	r3, [r3, #0]
 80083ea:	b29b      	uxth	r3, r3
 80083ec:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80083ee:	693b      	ldr	r3, [r7, #16]
 80083f0:	b2da      	uxtb	r2, r3
 80083f2:	69fb      	ldr	r3, [r7, #28]
 80083f4:	701a      	strb	r2, [r3, #0]
  }
}
 80083f6:	bf00      	nop
 80083f8:	372c      	adds	r7, #44	; 0x2c
 80083fa:	46bd      	mov	sp, r7
 80083fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008400:	4770      	bx	lr

08008402 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008402:	b580      	push	{r7, lr}
 8008404:	b084      	sub	sp, #16
 8008406:	af00      	add	r7, sp, #0
 8008408:	6078      	str	r0, [r7, #4]
 800840a:	460b      	mov	r3, r1
 800840c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800840e:	2300      	movs	r3, #0
 8008410:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	7c1b      	ldrb	r3, [r3, #16]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d115      	bne.n	8008446 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800841a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800841e:	2202      	movs	r2, #2
 8008420:	2181      	movs	r1, #129	; 0x81
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f001 feb9 	bl	800a19a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2201      	movs	r2, #1
 800842c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800842e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008432:	2202      	movs	r2, #2
 8008434:	2101      	movs	r1, #1
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f001 feaf 	bl	800a19a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2201      	movs	r2, #1
 8008440:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8008444:	e012      	b.n	800846c <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008446:	2340      	movs	r3, #64	; 0x40
 8008448:	2202      	movs	r2, #2
 800844a:	2181      	movs	r1, #129	; 0x81
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f001 fea4 	bl	800a19a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2201      	movs	r2, #1
 8008456:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008458:	2340      	movs	r3, #64	; 0x40
 800845a:	2202      	movs	r2, #2
 800845c:	2101      	movs	r1, #1
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f001 fe9b 	bl	800a19a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2201      	movs	r2, #1
 8008468:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800846c:	2308      	movs	r3, #8
 800846e:	2203      	movs	r2, #3
 8008470:	2182      	movs	r1, #130	; 0x82
 8008472:	6878      	ldr	r0, [r7, #4]
 8008474:	f001 fe91 	bl	800a19a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2201      	movs	r2, #1
 800847c:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800847e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008482:	f001 ffb3 	bl	800a3ec <USBD_static_malloc>
 8008486:	4602      	mov	r2, r0
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008494:	2b00      	cmp	r3, #0
 8008496:	d102      	bne.n	800849e <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8008498:	2301      	movs	r3, #1
 800849a:	73fb      	strb	r3, [r7, #15]
 800849c:	e026      	b.n	80084ec <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084a4:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80084b0:	68bb      	ldr	r3, [r7, #8]
 80084b2:	2200      	movs	r2, #0
 80084b4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	2200      	movs	r2, #0
 80084bc:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	7c1b      	ldrb	r3, [r3, #16]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d109      	bne.n	80084dc <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80084ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80084d2:	2101      	movs	r1, #1
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f001 ff52 	bl	800a37e <USBD_LL_PrepareReceive>
 80084da:	e007      	b.n	80084ec <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80084e2:	2340      	movs	r3, #64	; 0x40
 80084e4:	2101      	movs	r1, #1
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f001 ff49 	bl	800a37e <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80084ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	3710      	adds	r7, #16
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}

080084f6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80084f6:	b580      	push	{r7, lr}
 80084f8:	b084      	sub	sp, #16
 80084fa:	af00      	add	r7, sp, #0
 80084fc:	6078      	str	r0, [r7, #4]
 80084fe:	460b      	mov	r3, r1
 8008500:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008502:	2300      	movs	r3, #0
 8008504:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008506:	2181      	movs	r1, #129	; 0x81
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	f001 fe6c 	bl	800a1e6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2200      	movs	r2, #0
 8008512:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008514:	2101      	movs	r1, #1
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f001 fe65 	bl	800a1e6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2200      	movs	r2, #0
 8008520:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008524:	2182      	movs	r1, #130	; 0x82
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	f001 fe5d 	bl	800a1e6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2200      	movs	r2, #0
 8008530:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008538:	2b00      	cmp	r3, #0
 800853a:	d00e      	beq.n	800855a <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008542:	685b      	ldr	r3, [r3, #4]
 8008544:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800854c:	4618      	mov	r0, r3
 800854e:	f001 ff5b 	bl	800a408 <USBD_static_free>
    pdev->pClassData = NULL;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2200      	movs	r2, #0
 8008556:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800855a:	7bfb      	ldrb	r3, [r7, #15]
}
 800855c:	4618      	mov	r0, r3
 800855e:	3710      	adds	r7, #16
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}

08008564 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b086      	sub	sp, #24
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
 800856c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008574:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008576:	2300      	movs	r3, #0
 8008578:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800857a:	2300      	movs	r3, #0
 800857c:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800857e:	2300      	movs	r3, #0
 8008580:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	781b      	ldrb	r3, [r3, #0]
 8008586:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800858a:	2b00      	cmp	r3, #0
 800858c:	d039      	beq.n	8008602 <USBD_CDC_Setup+0x9e>
 800858e:	2b20      	cmp	r3, #32
 8008590:	d17f      	bne.n	8008692 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	88db      	ldrh	r3, [r3, #6]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d029      	beq.n	80085ee <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	781b      	ldrb	r3, [r3, #0]
 800859e:	b25b      	sxtb	r3, r3
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	da11      	bge.n	80085c8 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80085aa:	689b      	ldr	r3, [r3, #8]
 80085ac:	683a      	ldr	r2, [r7, #0]
 80085ae:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80085b0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80085b2:	683a      	ldr	r2, [r7, #0]
 80085b4:	88d2      	ldrh	r2, [r2, #6]
 80085b6:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80085b8:	6939      	ldr	r1, [r7, #16]
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	88db      	ldrh	r3, [r3, #6]
 80085be:	461a      	mov	r2, r3
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	f001 fa14 	bl	80099ee <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80085c6:	e06b      	b.n	80086a0 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	785a      	ldrb	r2, [r3, #1]
 80085cc:	693b      	ldr	r3, [r7, #16]
 80085ce:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	88db      	ldrh	r3, [r3, #6]
 80085d6:	b2da      	uxtb	r2, r3
 80085d8:	693b      	ldr	r3, [r7, #16]
 80085da:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80085de:	6939      	ldr	r1, [r7, #16]
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	88db      	ldrh	r3, [r3, #6]
 80085e4:	461a      	mov	r2, r3
 80085e6:	6878      	ldr	r0, [r7, #4]
 80085e8:	f001 fa2f 	bl	8009a4a <USBD_CtlPrepareRx>
      break;
 80085ec:	e058      	b.n	80086a0 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80085f4:	689b      	ldr	r3, [r3, #8]
 80085f6:	683a      	ldr	r2, [r7, #0]
 80085f8:	7850      	ldrb	r0, [r2, #1]
 80085fa:	2200      	movs	r2, #0
 80085fc:	6839      	ldr	r1, [r7, #0]
 80085fe:	4798      	blx	r3
      break;
 8008600:	e04e      	b.n	80086a0 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	785b      	ldrb	r3, [r3, #1]
 8008606:	2b0b      	cmp	r3, #11
 8008608:	d02e      	beq.n	8008668 <USBD_CDC_Setup+0x104>
 800860a:	2b0b      	cmp	r3, #11
 800860c:	dc38      	bgt.n	8008680 <USBD_CDC_Setup+0x11c>
 800860e:	2b00      	cmp	r3, #0
 8008610:	d002      	beq.n	8008618 <USBD_CDC_Setup+0xb4>
 8008612:	2b0a      	cmp	r3, #10
 8008614:	d014      	beq.n	8008640 <USBD_CDC_Setup+0xdc>
 8008616:	e033      	b.n	8008680 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800861e:	2b03      	cmp	r3, #3
 8008620:	d107      	bne.n	8008632 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008622:	f107 030c 	add.w	r3, r7, #12
 8008626:	2202      	movs	r2, #2
 8008628:	4619      	mov	r1, r3
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f001 f9df 	bl	80099ee <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008630:	e02e      	b.n	8008690 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008632:	6839      	ldr	r1, [r7, #0]
 8008634:	6878      	ldr	r0, [r7, #4]
 8008636:	f001 f96f 	bl	8009918 <USBD_CtlError>
            ret = USBD_FAIL;
 800863a:	2302      	movs	r3, #2
 800863c:	75fb      	strb	r3, [r7, #23]
          break;
 800863e:	e027      	b.n	8008690 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008646:	2b03      	cmp	r3, #3
 8008648:	d107      	bne.n	800865a <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800864a:	f107 030f 	add.w	r3, r7, #15
 800864e:	2201      	movs	r2, #1
 8008650:	4619      	mov	r1, r3
 8008652:	6878      	ldr	r0, [r7, #4]
 8008654:	f001 f9cb 	bl	80099ee <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008658:	e01a      	b.n	8008690 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800865a:	6839      	ldr	r1, [r7, #0]
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f001 f95b 	bl	8009918 <USBD_CtlError>
            ret = USBD_FAIL;
 8008662:	2302      	movs	r3, #2
 8008664:	75fb      	strb	r3, [r7, #23]
          break;
 8008666:	e013      	b.n	8008690 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800866e:	2b03      	cmp	r3, #3
 8008670:	d00d      	beq.n	800868e <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8008672:	6839      	ldr	r1, [r7, #0]
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f001 f94f 	bl	8009918 <USBD_CtlError>
            ret = USBD_FAIL;
 800867a:	2302      	movs	r3, #2
 800867c:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800867e:	e006      	b.n	800868e <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8008680:	6839      	ldr	r1, [r7, #0]
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f001 f948 	bl	8009918 <USBD_CtlError>
          ret = USBD_FAIL;
 8008688:	2302      	movs	r3, #2
 800868a:	75fb      	strb	r3, [r7, #23]
          break;
 800868c:	e000      	b.n	8008690 <USBD_CDC_Setup+0x12c>
          break;
 800868e:	bf00      	nop
      }
      break;
 8008690:	e006      	b.n	80086a0 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008692:	6839      	ldr	r1, [r7, #0]
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	f001 f93f 	bl	8009918 <USBD_CtlError>
      ret = USBD_FAIL;
 800869a:	2302      	movs	r3, #2
 800869c:	75fb      	strb	r3, [r7, #23]
      break;
 800869e:	bf00      	nop
  }

  return ret;
 80086a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	3718      	adds	r7, #24
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}

080086aa <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80086aa:	b580      	push	{r7, lr}
 80086ac:	b084      	sub	sp, #16
 80086ae:	af00      	add	r7, sp, #0
 80086b0:	6078      	str	r0, [r7, #4]
 80086b2:	460b      	mov	r3, r1
 80086b4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086bc:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80086c4:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d03a      	beq.n	8008746 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80086d0:	78fa      	ldrb	r2, [r7, #3]
 80086d2:	6879      	ldr	r1, [r7, #4]
 80086d4:	4613      	mov	r3, r2
 80086d6:	009b      	lsls	r3, r3, #2
 80086d8:	4413      	add	r3, r2
 80086da:	009b      	lsls	r3, r3, #2
 80086dc:	440b      	add	r3, r1
 80086de:	331c      	adds	r3, #28
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d029      	beq.n	800873a <USBD_CDC_DataIn+0x90>
 80086e6:	78fa      	ldrb	r2, [r7, #3]
 80086e8:	6879      	ldr	r1, [r7, #4]
 80086ea:	4613      	mov	r3, r2
 80086ec:	009b      	lsls	r3, r3, #2
 80086ee:	4413      	add	r3, r2
 80086f0:	009b      	lsls	r3, r3, #2
 80086f2:	440b      	add	r3, r1
 80086f4:	331c      	adds	r3, #28
 80086f6:	681a      	ldr	r2, [r3, #0]
 80086f8:	78f9      	ldrb	r1, [r7, #3]
 80086fa:	68b8      	ldr	r0, [r7, #8]
 80086fc:	460b      	mov	r3, r1
 80086fe:	009b      	lsls	r3, r3, #2
 8008700:	440b      	add	r3, r1
 8008702:	00db      	lsls	r3, r3, #3
 8008704:	4403      	add	r3, r0
 8008706:	3338      	adds	r3, #56	; 0x38
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	fbb2 f1f3 	udiv	r1, r2, r3
 800870e:	fb03 f301 	mul.w	r3, r3, r1
 8008712:	1ad3      	subs	r3, r2, r3
 8008714:	2b00      	cmp	r3, #0
 8008716:	d110      	bne.n	800873a <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008718:	78fa      	ldrb	r2, [r7, #3]
 800871a:	6879      	ldr	r1, [r7, #4]
 800871c:	4613      	mov	r3, r2
 800871e:	009b      	lsls	r3, r3, #2
 8008720:	4413      	add	r3, r2
 8008722:	009b      	lsls	r3, r3, #2
 8008724:	440b      	add	r3, r1
 8008726:	331c      	adds	r3, #28
 8008728:	2200      	movs	r2, #0
 800872a:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800872c:	78f9      	ldrb	r1, [r7, #3]
 800872e:	2300      	movs	r3, #0
 8008730:	2200      	movs	r2, #0
 8008732:	6878      	ldr	r0, [r7, #4]
 8008734:	f001 fe00 	bl	800a338 <USBD_LL_Transmit>
 8008738:	e003      	b.n	8008742 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	2200      	movs	r2, #0
 800873e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8008742:	2300      	movs	r3, #0
 8008744:	e000      	b.n	8008748 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8008746:	2302      	movs	r3, #2
  }
}
 8008748:	4618      	mov	r0, r3
 800874a:	3710      	adds	r7, #16
 800874c:	46bd      	mov	sp, r7
 800874e:	bd80      	pop	{r7, pc}

08008750 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b084      	sub	sp, #16
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
 8008758:	460b      	mov	r3, r1
 800875a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008762:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008764:	78fb      	ldrb	r3, [r7, #3]
 8008766:	4619      	mov	r1, r3
 8008768:	6878      	ldr	r0, [r7, #4]
 800876a:	f001 fe2b 	bl	800a3c4 <USBD_LL_GetRxDataSize>
 800876e:	4602      	mov	r2, r0
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800877c:	2b00      	cmp	r3, #0
 800877e:	d00d      	beq.n	800879c <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008786:	68db      	ldr	r3, [r3, #12]
 8008788:	68fa      	ldr	r2, [r7, #12]
 800878a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800878e:	68fa      	ldr	r2, [r7, #12]
 8008790:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008794:	4611      	mov	r1, r2
 8008796:	4798      	blx	r3

    return USBD_OK;
 8008798:	2300      	movs	r3, #0
 800879a:	e000      	b.n	800879e <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800879c:	2302      	movs	r3, #2
  }
}
 800879e:	4618      	mov	r0, r3
 80087a0:	3710      	adds	r7, #16
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd80      	pop	{r7, pc}

080087a6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80087a6:	b580      	push	{r7, lr}
 80087a8:	b084      	sub	sp, #16
 80087aa:	af00      	add	r7, sp, #0
 80087ac:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087b4:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d015      	beq.n	80087ec <USBD_CDC_EP0_RxReady+0x46>
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80087c6:	2bff      	cmp	r3, #255	; 0xff
 80087c8:	d010      	beq.n	80087ec <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80087d0:	689b      	ldr	r3, [r3, #8]
 80087d2:	68fa      	ldr	r2, [r7, #12]
 80087d4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80087d8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80087da:	68fa      	ldr	r2, [r7, #12]
 80087dc:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80087e0:	b292      	uxth	r2, r2
 80087e2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	22ff      	movs	r2, #255	; 0xff
 80087e8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80087ec:	2300      	movs	r3, #0
}
 80087ee:	4618      	mov	r0, r3
 80087f0:	3710      	adds	r7, #16
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bd80      	pop	{r7, pc}
	...

080087f8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80087f8:	b480      	push	{r7}
 80087fa:	b083      	sub	sp, #12
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2243      	movs	r2, #67	; 0x43
 8008804:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008806:	4b03      	ldr	r3, [pc, #12]	; (8008814 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008808:	4618      	mov	r0, r3
 800880a:	370c      	adds	r7, #12
 800880c:	46bd      	mov	sp, r7
 800880e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008812:	4770      	bx	lr
 8008814:	20000094 	.word	0x20000094

08008818 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008818:	b480      	push	{r7}
 800881a:	b083      	sub	sp, #12
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2243      	movs	r2, #67	; 0x43
 8008824:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8008826:	4b03      	ldr	r3, [pc, #12]	; (8008834 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008828:	4618      	mov	r0, r3
 800882a:	370c      	adds	r7, #12
 800882c:	46bd      	mov	sp, r7
 800882e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008832:	4770      	bx	lr
 8008834:	20000050 	.word	0x20000050

08008838 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008838:	b480      	push	{r7}
 800883a:	b083      	sub	sp, #12
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2243      	movs	r2, #67	; 0x43
 8008844:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8008846:	4b03      	ldr	r3, [pc, #12]	; (8008854 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008848:	4618      	mov	r0, r3
 800884a:	370c      	adds	r7, #12
 800884c:	46bd      	mov	sp, r7
 800884e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008852:	4770      	bx	lr
 8008854:	200000d8 	.word	0x200000d8

08008858 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008858:	b480      	push	{r7}
 800885a:	b083      	sub	sp, #12
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	220a      	movs	r2, #10
 8008864:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8008866:	4b03      	ldr	r3, [pc, #12]	; (8008874 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008868:	4618      	mov	r0, r3
 800886a:	370c      	adds	r7, #12
 800886c:	46bd      	mov	sp, r7
 800886e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008872:	4770      	bx	lr
 8008874:	2000000c 	.word	0x2000000c

08008878 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8008878:	b480      	push	{r7}
 800887a:	b085      	sub	sp, #20
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
 8008880:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008882:	2302      	movs	r3, #2
 8008884:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d005      	beq.n	8008898 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	683a      	ldr	r2, [r7, #0]
 8008890:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8008894:	2300      	movs	r3, #0
 8008896:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008898:	7bfb      	ldrb	r3, [r7, #15]
}
 800889a:	4618      	mov	r0, r3
 800889c:	3714      	adds	r7, #20
 800889e:	46bd      	mov	sp, r7
 80088a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a4:	4770      	bx	lr

080088a6 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80088a6:	b480      	push	{r7}
 80088a8:	b087      	sub	sp, #28
 80088aa:	af00      	add	r7, sp, #0
 80088ac:	60f8      	str	r0, [r7, #12]
 80088ae:	60b9      	str	r1, [r7, #8]
 80088b0:	4613      	mov	r3, r2
 80088b2:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088ba:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80088bc:	697b      	ldr	r3, [r7, #20]
 80088be:	68ba      	ldr	r2, [r7, #8]
 80088c0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80088c4:	88fa      	ldrh	r2, [r7, #6]
 80088c6:	697b      	ldr	r3, [r7, #20]
 80088c8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80088cc:	2300      	movs	r3, #0
}
 80088ce:	4618      	mov	r0, r3
 80088d0:	371c      	adds	r7, #28
 80088d2:	46bd      	mov	sp, r7
 80088d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d8:	4770      	bx	lr

080088da <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80088da:	b480      	push	{r7}
 80088dc:	b085      	sub	sp, #20
 80088de:	af00      	add	r7, sp, #0
 80088e0:	6078      	str	r0, [r7, #4]
 80088e2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088ea:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	683a      	ldr	r2, [r7, #0]
 80088f0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80088f4:	2300      	movs	r3, #0
}
 80088f6:	4618      	mov	r0, r3
 80088f8:	3714      	adds	r7, #20
 80088fa:	46bd      	mov	sp, r7
 80088fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008900:	4770      	bx	lr

08008902 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008902:	b580      	push	{r7, lr}
 8008904:	b084      	sub	sp, #16
 8008906:	af00      	add	r7, sp, #0
 8008908:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008910:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008918:	2b00      	cmp	r3, #0
 800891a:	d01c      	beq.n	8008956 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008922:	2b00      	cmp	r3, #0
 8008924:	d115      	bne.n	8008952 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	2201      	movs	r2, #1
 800892a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008944:	b29b      	uxth	r3, r3
 8008946:	2181      	movs	r1, #129	; 0x81
 8008948:	6878      	ldr	r0, [r7, #4]
 800894a:	f001 fcf5 	bl	800a338 <USBD_LL_Transmit>

      return USBD_OK;
 800894e:	2300      	movs	r3, #0
 8008950:	e002      	b.n	8008958 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8008952:	2301      	movs	r3, #1
 8008954:	e000      	b.n	8008958 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8008956:	2302      	movs	r3, #2
  }
}
 8008958:	4618      	mov	r0, r3
 800895a:	3710      	adds	r7, #16
 800895c:	46bd      	mov	sp, r7
 800895e:	bd80      	pop	{r7, pc}

08008960 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b084      	sub	sp, #16
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800896e:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008976:	2b00      	cmp	r3, #0
 8008978:	d017      	beq.n	80089aa <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	7c1b      	ldrb	r3, [r3, #16]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d109      	bne.n	8008996 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008988:	f44f 7300 	mov.w	r3, #512	; 0x200
 800898c:	2101      	movs	r1, #1
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f001 fcf5 	bl	800a37e <USBD_LL_PrepareReceive>
 8008994:	e007      	b.n	80089a6 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800899c:	2340      	movs	r3, #64	; 0x40
 800899e:	2101      	movs	r1, #1
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	f001 fcec 	bl	800a37e <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80089a6:	2300      	movs	r3, #0
 80089a8:	e000      	b.n	80089ac <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80089aa:	2302      	movs	r3, #2
  }
}
 80089ac:	4618      	mov	r0, r3
 80089ae:	3710      	adds	r7, #16
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}

080089b4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b084      	sub	sp, #16
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	60f8      	str	r0, [r7, #12]
 80089bc:	60b9      	str	r1, [r7, #8]
 80089be:	4613      	mov	r3, r2
 80089c0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d101      	bne.n	80089cc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80089c8:	2302      	movs	r3, #2
 80089ca:	e01a      	b.n	8008a02 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d003      	beq.n	80089de <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	2200      	movs	r2, #0
 80089da:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80089de:	68bb      	ldr	r3, [r7, #8]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d003      	beq.n	80089ec <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	68ba      	ldr	r2, [r7, #8]
 80089e8:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	2201      	movs	r2, #1
 80089f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	79fa      	ldrb	r2, [r7, #7]
 80089f8:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80089fa:	68f8      	ldr	r0, [r7, #12]
 80089fc:	f001 fb58 	bl	800a0b0 <USBD_LL_Init>

  return USBD_OK;
 8008a00:	2300      	movs	r3, #0
}
 8008a02:	4618      	mov	r0, r3
 8008a04:	3710      	adds	r7, #16
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}

08008a0a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008a0a:	b480      	push	{r7}
 8008a0c:	b085      	sub	sp, #20
 8008a0e:	af00      	add	r7, sp, #0
 8008a10:	6078      	str	r0, [r7, #4]
 8008a12:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008a14:	2300      	movs	r3, #0
 8008a16:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d006      	beq.n	8008a2c <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	683a      	ldr	r2, [r7, #0]
 8008a22:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8008a26:	2300      	movs	r3, #0
 8008a28:	73fb      	strb	r3, [r7, #15]
 8008a2a:	e001      	b.n	8008a30 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008a2c:	2302      	movs	r3, #2
 8008a2e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a32:	4618      	mov	r0, r3
 8008a34:	3714      	adds	r7, #20
 8008a36:	46bd      	mov	sp, r7
 8008a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3c:	4770      	bx	lr

08008a3e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008a3e:	b580      	push	{r7, lr}
 8008a40:	b082      	sub	sp, #8
 8008a42:	af00      	add	r7, sp, #0
 8008a44:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f001 fb8c 	bl	800a164 <USBD_LL_Start>

  return USBD_OK;
 8008a4c:	2300      	movs	r3, #0
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3708      	adds	r7, #8
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}

08008a56 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008a56:	b480      	push	{r7}
 8008a58:	b083      	sub	sp, #12
 8008a5a:	af00      	add	r7, sp, #0
 8008a5c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008a5e:	2300      	movs	r3, #0
}
 8008a60:	4618      	mov	r0, r3
 8008a62:	370c      	adds	r7, #12
 8008a64:	46bd      	mov	sp, r7
 8008a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6a:	4770      	bx	lr

08008a6c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b084      	sub	sp, #16
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
 8008a74:	460b      	mov	r3, r1
 8008a76:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008a78:	2302      	movs	r3, #2
 8008a7a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d00c      	beq.n	8008aa0 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	78fa      	ldrb	r2, [r7, #3]
 8008a90:	4611      	mov	r1, r2
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	4798      	blx	r3
 8008a96:	4603      	mov	r3, r0
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d101      	bne.n	8008aa0 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	3710      	adds	r7, #16
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	bd80      	pop	{r7, pc}

08008aaa <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008aaa:	b580      	push	{r7, lr}
 8008aac:	b082      	sub	sp, #8
 8008aae:	af00      	add	r7, sp, #0
 8008ab0:	6078      	str	r0, [r7, #4]
 8008ab2:	460b      	mov	r3, r1
 8008ab4:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008abc:	685b      	ldr	r3, [r3, #4]
 8008abe:	78fa      	ldrb	r2, [r7, #3]
 8008ac0:	4611      	mov	r1, r2
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	4798      	blx	r3

  return USBD_OK;
 8008ac6:	2300      	movs	r3, #0
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	3708      	adds	r7, #8
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bd80      	pop	{r7, pc}

08008ad0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b082      	sub	sp, #8
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
 8008ad8:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008ae0:	6839      	ldr	r1, [r7, #0]
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	f000 fedb 	bl	800989e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2201      	movs	r2, #1
 8008aec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008af6:	461a      	mov	r2, r3
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008b04:	f003 031f 	and.w	r3, r3, #31
 8008b08:	2b02      	cmp	r3, #2
 8008b0a:	d016      	beq.n	8008b3a <USBD_LL_SetupStage+0x6a>
 8008b0c:	2b02      	cmp	r3, #2
 8008b0e:	d81c      	bhi.n	8008b4a <USBD_LL_SetupStage+0x7a>
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d002      	beq.n	8008b1a <USBD_LL_SetupStage+0x4a>
 8008b14:	2b01      	cmp	r3, #1
 8008b16:	d008      	beq.n	8008b2a <USBD_LL_SetupStage+0x5a>
 8008b18:	e017      	b.n	8008b4a <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008b20:	4619      	mov	r1, r3
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f000 f9ce 	bl	8008ec4 <USBD_StdDevReq>
      break;
 8008b28:	e01a      	b.n	8008b60 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008b30:	4619      	mov	r1, r3
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	f000 fa30 	bl	8008f98 <USBD_StdItfReq>
      break;
 8008b38:	e012      	b.n	8008b60 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008b40:	4619      	mov	r1, r3
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	f000 fa70 	bl	8009028 <USBD_StdEPReq>
      break;
 8008b48:	e00a      	b.n	8008b60 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008b50:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008b54:	b2db      	uxtb	r3, r3
 8008b56:	4619      	mov	r1, r3
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	f001 fb63 	bl	800a224 <USBD_LL_StallEP>
      break;
 8008b5e:	bf00      	nop
  }

  return USBD_OK;
 8008b60:	2300      	movs	r3, #0
}
 8008b62:	4618      	mov	r0, r3
 8008b64:	3708      	adds	r7, #8
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bd80      	pop	{r7, pc}

08008b6a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008b6a:	b580      	push	{r7, lr}
 8008b6c:	b086      	sub	sp, #24
 8008b6e:	af00      	add	r7, sp, #0
 8008b70:	60f8      	str	r0, [r7, #12]
 8008b72:	460b      	mov	r3, r1
 8008b74:	607a      	str	r2, [r7, #4]
 8008b76:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008b78:	7afb      	ldrb	r3, [r7, #11]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d14b      	bne.n	8008c16 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008b84:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008b8c:	2b03      	cmp	r3, #3
 8008b8e:	d134      	bne.n	8008bfa <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008b90:	697b      	ldr	r3, [r7, #20]
 8008b92:	68da      	ldr	r2, [r3, #12]
 8008b94:	697b      	ldr	r3, [r7, #20]
 8008b96:	691b      	ldr	r3, [r3, #16]
 8008b98:	429a      	cmp	r2, r3
 8008b9a:	d919      	bls.n	8008bd0 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008b9c:	697b      	ldr	r3, [r7, #20]
 8008b9e:	68da      	ldr	r2, [r3, #12]
 8008ba0:	697b      	ldr	r3, [r7, #20]
 8008ba2:	691b      	ldr	r3, [r3, #16]
 8008ba4:	1ad2      	subs	r2, r2, r3
 8008ba6:	697b      	ldr	r3, [r7, #20]
 8008ba8:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008baa:	697b      	ldr	r3, [r7, #20]
 8008bac:	68da      	ldr	r2, [r3, #12]
 8008bae:	697b      	ldr	r3, [r7, #20]
 8008bb0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008bb2:	429a      	cmp	r2, r3
 8008bb4:	d203      	bcs.n	8008bbe <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008bb6:	697b      	ldr	r3, [r7, #20]
 8008bb8:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008bba:	b29b      	uxth	r3, r3
 8008bbc:	e002      	b.n	8008bc4 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008bbe:	697b      	ldr	r3, [r7, #20]
 8008bc0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008bc2:	b29b      	uxth	r3, r3
 8008bc4:	461a      	mov	r2, r3
 8008bc6:	6879      	ldr	r1, [r7, #4]
 8008bc8:	68f8      	ldr	r0, [r7, #12]
 8008bca:	f000 ff5c 	bl	8009a86 <USBD_CtlContinueRx>
 8008bce:	e038      	b.n	8008c42 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bd6:	691b      	ldr	r3, [r3, #16]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d00a      	beq.n	8008bf2 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008be2:	2b03      	cmp	r3, #3
 8008be4:	d105      	bne.n	8008bf2 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bec:	691b      	ldr	r3, [r3, #16]
 8008bee:	68f8      	ldr	r0, [r7, #12]
 8008bf0:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008bf2:	68f8      	ldr	r0, [r7, #12]
 8008bf4:	f000 ff59 	bl	8009aaa <USBD_CtlSendStatus>
 8008bf8:	e023      	b.n	8008c42 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008c00:	2b05      	cmp	r3, #5
 8008c02:	d11e      	bne.n	8008c42 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	2200      	movs	r2, #0
 8008c08:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008c0c:	2100      	movs	r1, #0
 8008c0e:	68f8      	ldr	r0, [r7, #12]
 8008c10:	f001 fb08 	bl	800a224 <USBD_LL_StallEP>
 8008c14:	e015      	b.n	8008c42 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c1c:	699b      	ldr	r3, [r3, #24]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d00d      	beq.n	8008c3e <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008c28:	2b03      	cmp	r3, #3
 8008c2a:	d108      	bne.n	8008c3e <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c32:	699b      	ldr	r3, [r3, #24]
 8008c34:	7afa      	ldrb	r2, [r7, #11]
 8008c36:	4611      	mov	r1, r2
 8008c38:	68f8      	ldr	r0, [r7, #12]
 8008c3a:	4798      	blx	r3
 8008c3c:	e001      	b.n	8008c42 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008c3e:	2302      	movs	r3, #2
 8008c40:	e000      	b.n	8008c44 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008c42:	2300      	movs	r3, #0
}
 8008c44:	4618      	mov	r0, r3
 8008c46:	3718      	adds	r7, #24
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	bd80      	pop	{r7, pc}

08008c4c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b086      	sub	sp, #24
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	60f8      	str	r0, [r7, #12]
 8008c54:	460b      	mov	r3, r1
 8008c56:	607a      	str	r2, [r7, #4]
 8008c58:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008c5a:	7afb      	ldrb	r3, [r7, #11]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d17f      	bne.n	8008d60 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	3314      	adds	r3, #20
 8008c64:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008c6c:	2b02      	cmp	r3, #2
 8008c6e:	d15c      	bne.n	8008d2a <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8008c70:	697b      	ldr	r3, [r7, #20]
 8008c72:	68da      	ldr	r2, [r3, #12]
 8008c74:	697b      	ldr	r3, [r7, #20]
 8008c76:	691b      	ldr	r3, [r3, #16]
 8008c78:	429a      	cmp	r2, r3
 8008c7a:	d915      	bls.n	8008ca8 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008c7c:	697b      	ldr	r3, [r7, #20]
 8008c7e:	68da      	ldr	r2, [r3, #12]
 8008c80:	697b      	ldr	r3, [r7, #20]
 8008c82:	691b      	ldr	r3, [r3, #16]
 8008c84:	1ad2      	subs	r2, r2, r3
 8008c86:	697b      	ldr	r3, [r7, #20]
 8008c88:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008c8a:	697b      	ldr	r3, [r7, #20]
 8008c8c:	68db      	ldr	r3, [r3, #12]
 8008c8e:	b29b      	uxth	r3, r3
 8008c90:	461a      	mov	r2, r3
 8008c92:	6879      	ldr	r1, [r7, #4]
 8008c94:	68f8      	ldr	r0, [r7, #12]
 8008c96:	f000 fec6 	bl	8009a26 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	2100      	movs	r1, #0
 8008ca0:	68f8      	ldr	r0, [r7, #12]
 8008ca2:	f001 fb6c 	bl	800a37e <USBD_LL_PrepareReceive>
 8008ca6:	e04e      	b.n	8008d46 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008ca8:	697b      	ldr	r3, [r7, #20]
 8008caa:	689b      	ldr	r3, [r3, #8]
 8008cac:	697a      	ldr	r2, [r7, #20]
 8008cae:	6912      	ldr	r2, [r2, #16]
 8008cb0:	fbb3 f1f2 	udiv	r1, r3, r2
 8008cb4:	fb02 f201 	mul.w	r2, r2, r1
 8008cb8:	1a9b      	subs	r3, r3, r2
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d11c      	bne.n	8008cf8 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008cbe:	697b      	ldr	r3, [r7, #20]
 8008cc0:	689a      	ldr	r2, [r3, #8]
 8008cc2:	697b      	ldr	r3, [r7, #20]
 8008cc4:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008cc6:	429a      	cmp	r2, r3
 8008cc8:	d316      	bcc.n	8008cf8 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8008cca:	697b      	ldr	r3, [r7, #20]
 8008ccc:	689a      	ldr	r2, [r3, #8]
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008cd4:	429a      	cmp	r2, r3
 8008cd6:	d20f      	bcs.n	8008cf8 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008cd8:	2200      	movs	r2, #0
 8008cda:	2100      	movs	r1, #0
 8008cdc:	68f8      	ldr	r0, [r7, #12]
 8008cde:	f000 fea2 	bl	8009a26 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008cea:	2300      	movs	r3, #0
 8008cec:	2200      	movs	r2, #0
 8008cee:	2100      	movs	r1, #0
 8008cf0:	68f8      	ldr	r0, [r7, #12]
 8008cf2:	f001 fb44 	bl	800a37e <USBD_LL_PrepareReceive>
 8008cf6:	e026      	b.n	8008d46 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cfe:	68db      	ldr	r3, [r3, #12]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d00a      	beq.n	8008d1a <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008d0a:	2b03      	cmp	r3, #3
 8008d0c:	d105      	bne.n	8008d1a <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d14:	68db      	ldr	r3, [r3, #12]
 8008d16:	68f8      	ldr	r0, [r7, #12]
 8008d18:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008d1a:	2180      	movs	r1, #128	; 0x80
 8008d1c:	68f8      	ldr	r0, [r7, #12]
 8008d1e:	f001 fa81 	bl	800a224 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008d22:	68f8      	ldr	r0, [r7, #12]
 8008d24:	f000 fed4 	bl	8009ad0 <USBD_CtlReceiveStatus>
 8008d28:	e00d      	b.n	8008d46 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008d30:	2b04      	cmp	r3, #4
 8008d32:	d004      	beq.n	8008d3e <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d103      	bne.n	8008d46 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008d3e:	2180      	movs	r1, #128	; 0x80
 8008d40:	68f8      	ldr	r0, [r7, #12]
 8008d42:	f001 fa6f 	bl	800a224 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008d4c:	2b01      	cmp	r3, #1
 8008d4e:	d11d      	bne.n	8008d8c <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008d50:	68f8      	ldr	r0, [r7, #12]
 8008d52:	f7ff fe80 	bl	8008a56 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	2200      	movs	r2, #0
 8008d5a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008d5e:	e015      	b.n	8008d8c <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d66:	695b      	ldr	r3, [r3, #20]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d00d      	beq.n	8008d88 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008d72:	2b03      	cmp	r3, #3
 8008d74:	d108      	bne.n	8008d88 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d7c:	695b      	ldr	r3, [r3, #20]
 8008d7e:	7afa      	ldrb	r2, [r7, #11]
 8008d80:	4611      	mov	r1, r2
 8008d82:	68f8      	ldr	r0, [r7, #12]
 8008d84:	4798      	blx	r3
 8008d86:	e001      	b.n	8008d8c <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008d88:	2302      	movs	r3, #2
 8008d8a:	e000      	b.n	8008d8e <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008d8c:	2300      	movs	r3, #0
}
 8008d8e:	4618      	mov	r0, r3
 8008d90:	3718      	adds	r7, #24
 8008d92:	46bd      	mov	sp, r7
 8008d94:	bd80      	pop	{r7, pc}

08008d96 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008d96:	b580      	push	{r7, lr}
 8008d98:	b082      	sub	sp, #8
 8008d9a:	af00      	add	r7, sp, #0
 8008d9c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008d9e:	2340      	movs	r3, #64	; 0x40
 8008da0:	2200      	movs	r2, #0
 8008da2:	2100      	movs	r1, #0
 8008da4:	6878      	ldr	r0, [r7, #4]
 8008da6:	f001 f9f8 	bl	800a19a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2201      	movs	r2, #1
 8008dae:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2240      	movs	r2, #64	; 0x40
 8008db6:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008dba:	2340      	movs	r3, #64	; 0x40
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	2180      	movs	r1, #128	; 0x80
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f001 f9ea 	bl	800a19a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2201      	movs	r2, #1
 8008dca:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2240      	movs	r2, #64	; 0x40
 8008dd0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2201      	movs	r2, #1
 8008dd6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2200      	movs	r2, #0
 8008dde:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2200      	movs	r2, #0
 8008de6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2200      	movs	r2, #0
 8008dec:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d009      	beq.n	8008e0e <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e00:	685b      	ldr	r3, [r3, #4]
 8008e02:	687a      	ldr	r2, [r7, #4]
 8008e04:	6852      	ldr	r2, [r2, #4]
 8008e06:	b2d2      	uxtb	r2, r2
 8008e08:	4611      	mov	r1, r2
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	4798      	blx	r3
  }

  return USBD_OK;
 8008e0e:	2300      	movs	r3, #0
}
 8008e10:	4618      	mov	r0, r3
 8008e12:	3708      	adds	r7, #8
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bd80      	pop	{r7, pc}

08008e18 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008e18:	b480      	push	{r7}
 8008e1a:	b083      	sub	sp, #12
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
 8008e20:	460b      	mov	r3, r1
 8008e22:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	78fa      	ldrb	r2, [r7, #3]
 8008e28:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008e2a:	2300      	movs	r3, #0
}
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	370c      	adds	r7, #12
 8008e30:	46bd      	mov	sp, r7
 8008e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e36:	4770      	bx	lr

08008e38 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008e38:	b480      	push	{r7}
 8008e3a:	b083      	sub	sp, #12
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2204      	movs	r2, #4
 8008e50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008e54:	2300      	movs	r3, #0
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	370c      	adds	r7, #12
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e60:	4770      	bx	lr

08008e62 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008e62:	b480      	push	{r7}
 8008e64:	b083      	sub	sp, #12
 8008e66:	af00      	add	r7, sp, #0
 8008e68:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e70:	2b04      	cmp	r3, #4
 8008e72:	d105      	bne.n	8008e80 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008e80:	2300      	movs	r3, #0
}
 8008e82:	4618      	mov	r0, r3
 8008e84:	370c      	adds	r7, #12
 8008e86:	46bd      	mov	sp, r7
 8008e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8c:	4770      	bx	lr

08008e8e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008e8e:	b580      	push	{r7, lr}
 8008e90:	b082      	sub	sp, #8
 8008e92:	af00      	add	r7, sp, #0
 8008e94:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e9c:	2b03      	cmp	r3, #3
 8008e9e:	d10b      	bne.n	8008eb8 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ea6:	69db      	ldr	r3, [r3, #28]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d005      	beq.n	8008eb8 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008eb2:	69db      	ldr	r3, [r3, #28]
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008eb8:	2300      	movs	r3, #0
}
 8008eba:	4618      	mov	r0, r3
 8008ebc:	3708      	adds	r7, #8
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bd80      	pop	{r7, pc}
	...

08008ec4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b084      	sub	sp, #16
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
 8008ecc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008ece:	2300      	movs	r3, #0
 8008ed0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	781b      	ldrb	r3, [r3, #0]
 8008ed6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008eda:	2b40      	cmp	r3, #64	; 0x40
 8008edc:	d005      	beq.n	8008eea <USBD_StdDevReq+0x26>
 8008ede:	2b40      	cmp	r3, #64	; 0x40
 8008ee0:	d84f      	bhi.n	8008f82 <USBD_StdDevReq+0xbe>
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d009      	beq.n	8008efa <USBD_StdDevReq+0x36>
 8008ee6:	2b20      	cmp	r3, #32
 8008ee8:	d14b      	bne.n	8008f82 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ef0:	689b      	ldr	r3, [r3, #8]
 8008ef2:	6839      	ldr	r1, [r7, #0]
 8008ef4:	6878      	ldr	r0, [r7, #4]
 8008ef6:	4798      	blx	r3
      break;
 8008ef8:	e048      	b.n	8008f8c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	785b      	ldrb	r3, [r3, #1]
 8008efe:	2b09      	cmp	r3, #9
 8008f00:	d839      	bhi.n	8008f76 <USBD_StdDevReq+0xb2>
 8008f02:	a201      	add	r2, pc, #4	; (adr r2, 8008f08 <USBD_StdDevReq+0x44>)
 8008f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f08:	08008f59 	.word	0x08008f59
 8008f0c:	08008f6d 	.word	0x08008f6d
 8008f10:	08008f77 	.word	0x08008f77
 8008f14:	08008f63 	.word	0x08008f63
 8008f18:	08008f77 	.word	0x08008f77
 8008f1c:	08008f3b 	.word	0x08008f3b
 8008f20:	08008f31 	.word	0x08008f31
 8008f24:	08008f77 	.word	0x08008f77
 8008f28:	08008f4f 	.word	0x08008f4f
 8008f2c:	08008f45 	.word	0x08008f45
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008f30:	6839      	ldr	r1, [r7, #0]
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f000 f9dc 	bl	80092f0 <USBD_GetDescriptor>
          break;
 8008f38:	e022      	b.n	8008f80 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008f3a:	6839      	ldr	r1, [r7, #0]
 8008f3c:	6878      	ldr	r0, [r7, #4]
 8008f3e:	f000 fb3f 	bl	80095c0 <USBD_SetAddress>
          break;
 8008f42:	e01d      	b.n	8008f80 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008f44:	6839      	ldr	r1, [r7, #0]
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f000 fb7e 	bl	8009648 <USBD_SetConfig>
          break;
 8008f4c:	e018      	b.n	8008f80 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008f4e:	6839      	ldr	r1, [r7, #0]
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	f000 fc07 	bl	8009764 <USBD_GetConfig>
          break;
 8008f56:	e013      	b.n	8008f80 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008f58:	6839      	ldr	r1, [r7, #0]
 8008f5a:	6878      	ldr	r0, [r7, #4]
 8008f5c:	f000 fc37 	bl	80097ce <USBD_GetStatus>
          break;
 8008f60:	e00e      	b.n	8008f80 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008f62:	6839      	ldr	r1, [r7, #0]
 8008f64:	6878      	ldr	r0, [r7, #4]
 8008f66:	f000 fc65 	bl	8009834 <USBD_SetFeature>
          break;
 8008f6a:	e009      	b.n	8008f80 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008f6c:	6839      	ldr	r1, [r7, #0]
 8008f6e:	6878      	ldr	r0, [r7, #4]
 8008f70:	f000 fc74 	bl	800985c <USBD_ClrFeature>
          break;
 8008f74:	e004      	b.n	8008f80 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008f76:	6839      	ldr	r1, [r7, #0]
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	f000 fccd 	bl	8009918 <USBD_CtlError>
          break;
 8008f7e:	bf00      	nop
      }
      break;
 8008f80:	e004      	b.n	8008f8c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8008f82:	6839      	ldr	r1, [r7, #0]
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	f000 fcc7 	bl	8009918 <USBD_CtlError>
      break;
 8008f8a:	bf00      	nop
  }

  return ret;
 8008f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f8e:	4618      	mov	r0, r3
 8008f90:	3710      	adds	r7, #16
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bd80      	pop	{r7, pc}
 8008f96:	bf00      	nop

08008f98 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b084      	sub	sp, #16
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
 8008fa0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	781b      	ldrb	r3, [r3, #0]
 8008faa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008fae:	2b40      	cmp	r3, #64	; 0x40
 8008fb0:	d005      	beq.n	8008fbe <USBD_StdItfReq+0x26>
 8008fb2:	2b40      	cmp	r3, #64	; 0x40
 8008fb4:	d82e      	bhi.n	8009014 <USBD_StdItfReq+0x7c>
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d001      	beq.n	8008fbe <USBD_StdItfReq+0x26>
 8008fba:	2b20      	cmp	r3, #32
 8008fbc:	d12a      	bne.n	8009014 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fc4:	3b01      	subs	r3, #1
 8008fc6:	2b02      	cmp	r3, #2
 8008fc8:	d81d      	bhi.n	8009006 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	889b      	ldrh	r3, [r3, #4]
 8008fce:	b2db      	uxtb	r3, r3
 8008fd0:	2b01      	cmp	r3, #1
 8008fd2:	d813      	bhi.n	8008ffc <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fda:	689b      	ldr	r3, [r3, #8]
 8008fdc:	6839      	ldr	r1, [r7, #0]
 8008fde:	6878      	ldr	r0, [r7, #4]
 8008fe0:	4798      	blx	r3
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	88db      	ldrh	r3, [r3, #6]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d110      	bne.n	8009010 <USBD_StdItfReq+0x78>
 8008fee:	7bfb      	ldrb	r3, [r7, #15]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d10d      	bne.n	8009010 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8008ff4:	6878      	ldr	r0, [r7, #4]
 8008ff6:	f000 fd58 	bl	8009aaa <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008ffa:	e009      	b.n	8009010 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8008ffc:	6839      	ldr	r1, [r7, #0]
 8008ffe:	6878      	ldr	r0, [r7, #4]
 8009000:	f000 fc8a 	bl	8009918 <USBD_CtlError>
          break;
 8009004:	e004      	b.n	8009010 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8009006:	6839      	ldr	r1, [r7, #0]
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	f000 fc85 	bl	8009918 <USBD_CtlError>
          break;
 800900e:	e000      	b.n	8009012 <USBD_StdItfReq+0x7a>
          break;
 8009010:	bf00      	nop
      }
      break;
 8009012:	e004      	b.n	800901e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8009014:	6839      	ldr	r1, [r7, #0]
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	f000 fc7e 	bl	8009918 <USBD_CtlError>
      break;
 800901c:	bf00      	nop
  }

  return USBD_OK;
 800901e:	2300      	movs	r3, #0
}
 8009020:	4618      	mov	r0, r3
 8009022:	3710      	adds	r7, #16
 8009024:	46bd      	mov	sp, r7
 8009026:	bd80      	pop	{r7, pc}

08009028 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b084      	sub	sp, #16
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
 8009030:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009032:	2300      	movs	r3, #0
 8009034:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	889b      	ldrh	r3, [r3, #4]
 800903a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	781b      	ldrb	r3, [r3, #0]
 8009040:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009044:	2b40      	cmp	r3, #64	; 0x40
 8009046:	d007      	beq.n	8009058 <USBD_StdEPReq+0x30>
 8009048:	2b40      	cmp	r3, #64	; 0x40
 800904a:	f200 8146 	bhi.w	80092da <USBD_StdEPReq+0x2b2>
 800904e:	2b00      	cmp	r3, #0
 8009050:	d00a      	beq.n	8009068 <USBD_StdEPReq+0x40>
 8009052:	2b20      	cmp	r3, #32
 8009054:	f040 8141 	bne.w	80092da <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800905e:	689b      	ldr	r3, [r3, #8]
 8009060:	6839      	ldr	r1, [r7, #0]
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	4798      	blx	r3
      break;
 8009066:	e13d      	b.n	80092e4 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	781b      	ldrb	r3, [r3, #0]
 800906c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009070:	2b20      	cmp	r3, #32
 8009072:	d10a      	bne.n	800908a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800907a:	689b      	ldr	r3, [r3, #8]
 800907c:	6839      	ldr	r1, [r7, #0]
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	4798      	blx	r3
 8009082:	4603      	mov	r3, r0
 8009084:	73fb      	strb	r3, [r7, #15]

        return ret;
 8009086:	7bfb      	ldrb	r3, [r7, #15]
 8009088:	e12d      	b.n	80092e6 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	785b      	ldrb	r3, [r3, #1]
 800908e:	2b03      	cmp	r3, #3
 8009090:	d007      	beq.n	80090a2 <USBD_StdEPReq+0x7a>
 8009092:	2b03      	cmp	r3, #3
 8009094:	f300 811b 	bgt.w	80092ce <USBD_StdEPReq+0x2a6>
 8009098:	2b00      	cmp	r3, #0
 800909a:	d072      	beq.n	8009182 <USBD_StdEPReq+0x15a>
 800909c:	2b01      	cmp	r3, #1
 800909e:	d03a      	beq.n	8009116 <USBD_StdEPReq+0xee>
 80090a0:	e115      	b.n	80092ce <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090a8:	2b02      	cmp	r3, #2
 80090aa:	d002      	beq.n	80090b2 <USBD_StdEPReq+0x8a>
 80090ac:	2b03      	cmp	r3, #3
 80090ae:	d015      	beq.n	80090dc <USBD_StdEPReq+0xb4>
 80090b0:	e02b      	b.n	800910a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80090b2:	7bbb      	ldrb	r3, [r7, #14]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d00c      	beq.n	80090d2 <USBD_StdEPReq+0xaa>
 80090b8:	7bbb      	ldrb	r3, [r7, #14]
 80090ba:	2b80      	cmp	r3, #128	; 0x80
 80090bc:	d009      	beq.n	80090d2 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80090be:	7bbb      	ldrb	r3, [r7, #14]
 80090c0:	4619      	mov	r1, r3
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f001 f8ae 	bl	800a224 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80090c8:	2180      	movs	r1, #128	; 0x80
 80090ca:	6878      	ldr	r0, [r7, #4]
 80090cc:	f001 f8aa 	bl	800a224 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80090d0:	e020      	b.n	8009114 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80090d2:	6839      	ldr	r1, [r7, #0]
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	f000 fc1f 	bl	8009918 <USBD_CtlError>
              break;
 80090da:	e01b      	b.n	8009114 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	885b      	ldrh	r3, [r3, #2]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d10e      	bne.n	8009102 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80090e4:	7bbb      	ldrb	r3, [r7, #14]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d00b      	beq.n	8009102 <USBD_StdEPReq+0xda>
 80090ea:	7bbb      	ldrb	r3, [r7, #14]
 80090ec:	2b80      	cmp	r3, #128	; 0x80
 80090ee:	d008      	beq.n	8009102 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	88db      	ldrh	r3, [r3, #6]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d104      	bne.n	8009102 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80090f8:	7bbb      	ldrb	r3, [r7, #14]
 80090fa:	4619      	mov	r1, r3
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f001 f891 	bl	800a224 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f000 fcd1 	bl	8009aaa <USBD_CtlSendStatus>

              break;
 8009108:	e004      	b.n	8009114 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800910a:	6839      	ldr	r1, [r7, #0]
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	f000 fc03 	bl	8009918 <USBD_CtlError>
              break;
 8009112:	bf00      	nop
          }
          break;
 8009114:	e0e0      	b.n	80092d8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800911c:	2b02      	cmp	r3, #2
 800911e:	d002      	beq.n	8009126 <USBD_StdEPReq+0xfe>
 8009120:	2b03      	cmp	r3, #3
 8009122:	d015      	beq.n	8009150 <USBD_StdEPReq+0x128>
 8009124:	e026      	b.n	8009174 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009126:	7bbb      	ldrb	r3, [r7, #14]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d00c      	beq.n	8009146 <USBD_StdEPReq+0x11e>
 800912c:	7bbb      	ldrb	r3, [r7, #14]
 800912e:	2b80      	cmp	r3, #128	; 0x80
 8009130:	d009      	beq.n	8009146 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009132:	7bbb      	ldrb	r3, [r7, #14]
 8009134:	4619      	mov	r1, r3
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f001 f874 	bl	800a224 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800913c:	2180      	movs	r1, #128	; 0x80
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f001 f870 	bl	800a224 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009144:	e01c      	b.n	8009180 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8009146:	6839      	ldr	r1, [r7, #0]
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f000 fbe5 	bl	8009918 <USBD_CtlError>
              break;
 800914e:	e017      	b.n	8009180 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	885b      	ldrh	r3, [r3, #2]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d112      	bne.n	800917e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009158:	7bbb      	ldrb	r3, [r7, #14]
 800915a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800915e:	2b00      	cmp	r3, #0
 8009160:	d004      	beq.n	800916c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8009162:	7bbb      	ldrb	r3, [r7, #14]
 8009164:	4619      	mov	r1, r3
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	f001 f87b 	bl	800a262 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800916c:	6878      	ldr	r0, [r7, #4]
 800916e:	f000 fc9c 	bl	8009aaa <USBD_CtlSendStatus>
              }
              break;
 8009172:	e004      	b.n	800917e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8009174:	6839      	ldr	r1, [r7, #0]
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	f000 fbce 	bl	8009918 <USBD_CtlError>
              break;
 800917c:	e000      	b.n	8009180 <USBD_StdEPReq+0x158>
              break;
 800917e:	bf00      	nop
          }
          break;
 8009180:	e0aa      	b.n	80092d8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009188:	2b02      	cmp	r3, #2
 800918a:	d002      	beq.n	8009192 <USBD_StdEPReq+0x16a>
 800918c:	2b03      	cmp	r3, #3
 800918e:	d032      	beq.n	80091f6 <USBD_StdEPReq+0x1ce>
 8009190:	e097      	b.n	80092c2 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009192:	7bbb      	ldrb	r3, [r7, #14]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d007      	beq.n	80091a8 <USBD_StdEPReq+0x180>
 8009198:	7bbb      	ldrb	r3, [r7, #14]
 800919a:	2b80      	cmp	r3, #128	; 0x80
 800919c:	d004      	beq.n	80091a8 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800919e:	6839      	ldr	r1, [r7, #0]
 80091a0:	6878      	ldr	r0, [r7, #4]
 80091a2:	f000 fbb9 	bl	8009918 <USBD_CtlError>
                break;
 80091a6:	e091      	b.n	80092cc <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80091a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	da0b      	bge.n	80091c8 <USBD_StdEPReq+0x1a0>
 80091b0:	7bbb      	ldrb	r3, [r7, #14]
 80091b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80091b6:	4613      	mov	r3, r2
 80091b8:	009b      	lsls	r3, r3, #2
 80091ba:	4413      	add	r3, r2
 80091bc:	009b      	lsls	r3, r3, #2
 80091be:	3310      	adds	r3, #16
 80091c0:	687a      	ldr	r2, [r7, #4]
 80091c2:	4413      	add	r3, r2
 80091c4:	3304      	adds	r3, #4
 80091c6:	e00b      	b.n	80091e0 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80091c8:	7bbb      	ldrb	r3, [r7, #14]
 80091ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80091ce:	4613      	mov	r3, r2
 80091d0:	009b      	lsls	r3, r3, #2
 80091d2:	4413      	add	r3, r2
 80091d4:	009b      	lsls	r3, r3, #2
 80091d6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80091da:	687a      	ldr	r2, [r7, #4]
 80091dc:	4413      	add	r3, r2
 80091de:	3304      	adds	r3, #4
 80091e0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	2200      	movs	r2, #0
 80091e6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	2202      	movs	r2, #2
 80091ec:	4619      	mov	r1, r3
 80091ee:	6878      	ldr	r0, [r7, #4]
 80091f0:	f000 fbfd 	bl	80099ee <USBD_CtlSendData>
              break;
 80091f4:	e06a      	b.n	80092cc <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80091f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	da11      	bge.n	8009222 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80091fe:	7bbb      	ldrb	r3, [r7, #14]
 8009200:	f003 020f 	and.w	r2, r3, #15
 8009204:	6879      	ldr	r1, [r7, #4]
 8009206:	4613      	mov	r3, r2
 8009208:	009b      	lsls	r3, r3, #2
 800920a:	4413      	add	r3, r2
 800920c:	009b      	lsls	r3, r3, #2
 800920e:	440b      	add	r3, r1
 8009210:	3318      	adds	r3, #24
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d117      	bne.n	8009248 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009218:	6839      	ldr	r1, [r7, #0]
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	f000 fb7c 	bl	8009918 <USBD_CtlError>
                  break;
 8009220:	e054      	b.n	80092cc <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009222:	7bbb      	ldrb	r3, [r7, #14]
 8009224:	f003 020f 	and.w	r2, r3, #15
 8009228:	6879      	ldr	r1, [r7, #4]
 800922a:	4613      	mov	r3, r2
 800922c:	009b      	lsls	r3, r3, #2
 800922e:	4413      	add	r3, r2
 8009230:	009b      	lsls	r3, r3, #2
 8009232:	440b      	add	r3, r1
 8009234:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d104      	bne.n	8009248 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800923e:	6839      	ldr	r1, [r7, #0]
 8009240:	6878      	ldr	r0, [r7, #4]
 8009242:	f000 fb69 	bl	8009918 <USBD_CtlError>
                  break;
 8009246:	e041      	b.n	80092cc <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009248:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800924c:	2b00      	cmp	r3, #0
 800924e:	da0b      	bge.n	8009268 <USBD_StdEPReq+0x240>
 8009250:	7bbb      	ldrb	r3, [r7, #14]
 8009252:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009256:	4613      	mov	r3, r2
 8009258:	009b      	lsls	r3, r3, #2
 800925a:	4413      	add	r3, r2
 800925c:	009b      	lsls	r3, r3, #2
 800925e:	3310      	adds	r3, #16
 8009260:	687a      	ldr	r2, [r7, #4]
 8009262:	4413      	add	r3, r2
 8009264:	3304      	adds	r3, #4
 8009266:	e00b      	b.n	8009280 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009268:	7bbb      	ldrb	r3, [r7, #14]
 800926a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800926e:	4613      	mov	r3, r2
 8009270:	009b      	lsls	r3, r3, #2
 8009272:	4413      	add	r3, r2
 8009274:	009b      	lsls	r3, r3, #2
 8009276:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800927a:	687a      	ldr	r2, [r7, #4]
 800927c:	4413      	add	r3, r2
 800927e:	3304      	adds	r3, #4
 8009280:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009282:	7bbb      	ldrb	r3, [r7, #14]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d002      	beq.n	800928e <USBD_StdEPReq+0x266>
 8009288:	7bbb      	ldrb	r3, [r7, #14]
 800928a:	2b80      	cmp	r3, #128	; 0x80
 800928c:	d103      	bne.n	8009296 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800928e:	68bb      	ldr	r3, [r7, #8]
 8009290:	2200      	movs	r2, #0
 8009292:	601a      	str	r2, [r3, #0]
 8009294:	e00e      	b.n	80092b4 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009296:	7bbb      	ldrb	r3, [r7, #14]
 8009298:	4619      	mov	r1, r3
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	f001 f800 	bl	800a2a0 <USBD_LL_IsStallEP>
 80092a0:	4603      	mov	r3, r0
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d003      	beq.n	80092ae <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80092a6:	68bb      	ldr	r3, [r7, #8]
 80092a8:	2201      	movs	r2, #1
 80092aa:	601a      	str	r2, [r3, #0]
 80092ac:	e002      	b.n	80092b4 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80092ae:	68bb      	ldr	r3, [r7, #8]
 80092b0:	2200      	movs	r2, #0
 80092b2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80092b4:	68bb      	ldr	r3, [r7, #8]
 80092b6:	2202      	movs	r2, #2
 80092b8:	4619      	mov	r1, r3
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	f000 fb97 	bl	80099ee <USBD_CtlSendData>
              break;
 80092c0:	e004      	b.n	80092cc <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80092c2:	6839      	ldr	r1, [r7, #0]
 80092c4:	6878      	ldr	r0, [r7, #4]
 80092c6:	f000 fb27 	bl	8009918 <USBD_CtlError>
              break;
 80092ca:	bf00      	nop
          }
          break;
 80092cc:	e004      	b.n	80092d8 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80092ce:	6839      	ldr	r1, [r7, #0]
 80092d0:	6878      	ldr	r0, [r7, #4]
 80092d2:	f000 fb21 	bl	8009918 <USBD_CtlError>
          break;
 80092d6:	bf00      	nop
      }
      break;
 80092d8:	e004      	b.n	80092e4 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80092da:	6839      	ldr	r1, [r7, #0]
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f000 fb1b 	bl	8009918 <USBD_CtlError>
      break;
 80092e2:	bf00      	nop
  }

  return ret;
 80092e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80092e6:	4618      	mov	r0, r3
 80092e8:	3710      	adds	r7, #16
 80092ea:	46bd      	mov	sp, r7
 80092ec:	bd80      	pop	{r7, pc}
	...

080092f0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b084      	sub	sp, #16
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
 80092f8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80092fa:	2300      	movs	r3, #0
 80092fc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80092fe:	2300      	movs	r3, #0
 8009300:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009302:	2300      	movs	r3, #0
 8009304:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	885b      	ldrh	r3, [r3, #2]
 800930a:	0a1b      	lsrs	r3, r3, #8
 800930c:	b29b      	uxth	r3, r3
 800930e:	3b01      	subs	r3, #1
 8009310:	2b06      	cmp	r3, #6
 8009312:	f200 8128 	bhi.w	8009566 <USBD_GetDescriptor+0x276>
 8009316:	a201      	add	r2, pc, #4	; (adr r2, 800931c <USBD_GetDescriptor+0x2c>)
 8009318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800931c:	08009339 	.word	0x08009339
 8009320:	08009351 	.word	0x08009351
 8009324:	08009391 	.word	0x08009391
 8009328:	08009567 	.word	0x08009567
 800932c:	08009567 	.word	0x08009567
 8009330:	08009507 	.word	0x08009507
 8009334:	08009533 	.word	0x08009533
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	687a      	ldr	r2, [r7, #4]
 8009342:	7c12      	ldrb	r2, [r2, #16]
 8009344:	f107 0108 	add.w	r1, r7, #8
 8009348:	4610      	mov	r0, r2
 800934a:	4798      	blx	r3
 800934c:	60f8      	str	r0, [r7, #12]
      break;
 800934e:	e112      	b.n	8009576 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	7c1b      	ldrb	r3, [r3, #16]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d10d      	bne.n	8009374 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800935e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009360:	f107 0208 	add.w	r2, r7, #8
 8009364:	4610      	mov	r0, r2
 8009366:	4798      	blx	r3
 8009368:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	3301      	adds	r3, #1
 800936e:	2202      	movs	r2, #2
 8009370:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009372:	e100      	b.n	8009576 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800937a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800937c:	f107 0208 	add.w	r2, r7, #8
 8009380:	4610      	mov	r0, r2
 8009382:	4798      	blx	r3
 8009384:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	3301      	adds	r3, #1
 800938a:	2202      	movs	r2, #2
 800938c:	701a      	strb	r2, [r3, #0]
      break;
 800938e:	e0f2      	b.n	8009576 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	885b      	ldrh	r3, [r3, #2]
 8009394:	b2db      	uxtb	r3, r3
 8009396:	2b05      	cmp	r3, #5
 8009398:	f200 80ac 	bhi.w	80094f4 <USBD_GetDescriptor+0x204>
 800939c:	a201      	add	r2, pc, #4	; (adr r2, 80093a4 <USBD_GetDescriptor+0xb4>)
 800939e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093a2:	bf00      	nop
 80093a4:	080093bd 	.word	0x080093bd
 80093a8:	080093f1 	.word	0x080093f1
 80093ac:	08009425 	.word	0x08009425
 80093b0:	08009459 	.word	0x08009459
 80093b4:	0800948d 	.word	0x0800948d
 80093b8:	080094c1 	.word	0x080094c1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80093c2:	685b      	ldr	r3, [r3, #4]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d00b      	beq.n	80093e0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80093ce:	685b      	ldr	r3, [r3, #4]
 80093d0:	687a      	ldr	r2, [r7, #4]
 80093d2:	7c12      	ldrb	r2, [r2, #16]
 80093d4:	f107 0108 	add.w	r1, r7, #8
 80093d8:	4610      	mov	r0, r2
 80093da:	4798      	blx	r3
 80093dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80093de:	e091      	b.n	8009504 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80093e0:	6839      	ldr	r1, [r7, #0]
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f000 fa98 	bl	8009918 <USBD_CtlError>
            err++;
 80093e8:	7afb      	ldrb	r3, [r7, #11]
 80093ea:	3301      	adds	r3, #1
 80093ec:	72fb      	strb	r3, [r7, #11]
          break;
 80093ee:	e089      	b.n	8009504 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80093f6:	689b      	ldr	r3, [r3, #8]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d00b      	beq.n	8009414 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009402:	689b      	ldr	r3, [r3, #8]
 8009404:	687a      	ldr	r2, [r7, #4]
 8009406:	7c12      	ldrb	r2, [r2, #16]
 8009408:	f107 0108 	add.w	r1, r7, #8
 800940c:	4610      	mov	r0, r2
 800940e:	4798      	blx	r3
 8009410:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009412:	e077      	b.n	8009504 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009414:	6839      	ldr	r1, [r7, #0]
 8009416:	6878      	ldr	r0, [r7, #4]
 8009418:	f000 fa7e 	bl	8009918 <USBD_CtlError>
            err++;
 800941c:	7afb      	ldrb	r3, [r7, #11]
 800941e:	3301      	adds	r3, #1
 8009420:	72fb      	strb	r3, [r7, #11]
          break;
 8009422:	e06f      	b.n	8009504 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800942a:	68db      	ldr	r3, [r3, #12]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d00b      	beq.n	8009448 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009436:	68db      	ldr	r3, [r3, #12]
 8009438:	687a      	ldr	r2, [r7, #4]
 800943a:	7c12      	ldrb	r2, [r2, #16]
 800943c:	f107 0108 	add.w	r1, r7, #8
 8009440:	4610      	mov	r0, r2
 8009442:	4798      	blx	r3
 8009444:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009446:	e05d      	b.n	8009504 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009448:	6839      	ldr	r1, [r7, #0]
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	f000 fa64 	bl	8009918 <USBD_CtlError>
            err++;
 8009450:	7afb      	ldrb	r3, [r7, #11]
 8009452:	3301      	adds	r3, #1
 8009454:	72fb      	strb	r3, [r7, #11]
          break;
 8009456:	e055      	b.n	8009504 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800945e:	691b      	ldr	r3, [r3, #16]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d00b      	beq.n	800947c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800946a:	691b      	ldr	r3, [r3, #16]
 800946c:	687a      	ldr	r2, [r7, #4]
 800946e:	7c12      	ldrb	r2, [r2, #16]
 8009470:	f107 0108 	add.w	r1, r7, #8
 8009474:	4610      	mov	r0, r2
 8009476:	4798      	blx	r3
 8009478:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800947a:	e043      	b.n	8009504 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800947c:	6839      	ldr	r1, [r7, #0]
 800947e:	6878      	ldr	r0, [r7, #4]
 8009480:	f000 fa4a 	bl	8009918 <USBD_CtlError>
            err++;
 8009484:	7afb      	ldrb	r3, [r7, #11]
 8009486:	3301      	adds	r3, #1
 8009488:	72fb      	strb	r3, [r7, #11]
          break;
 800948a:	e03b      	b.n	8009504 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009492:	695b      	ldr	r3, [r3, #20]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d00b      	beq.n	80094b0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800949e:	695b      	ldr	r3, [r3, #20]
 80094a0:	687a      	ldr	r2, [r7, #4]
 80094a2:	7c12      	ldrb	r2, [r2, #16]
 80094a4:	f107 0108 	add.w	r1, r7, #8
 80094a8:	4610      	mov	r0, r2
 80094aa:	4798      	blx	r3
 80094ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80094ae:	e029      	b.n	8009504 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80094b0:	6839      	ldr	r1, [r7, #0]
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f000 fa30 	bl	8009918 <USBD_CtlError>
            err++;
 80094b8:	7afb      	ldrb	r3, [r7, #11]
 80094ba:	3301      	adds	r3, #1
 80094bc:	72fb      	strb	r3, [r7, #11]
          break;
 80094be:	e021      	b.n	8009504 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80094c6:	699b      	ldr	r3, [r3, #24]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d00b      	beq.n	80094e4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80094d2:	699b      	ldr	r3, [r3, #24]
 80094d4:	687a      	ldr	r2, [r7, #4]
 80094d6:	7c12      	ldrb	r2, [r2, #16]
 80094d8:	f107 0108 	add.w	r1, r7, #8
 80094dc:	4610      	mov	r0, r2
 80094de:	4798      	blx	r3
 80094e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80094e2:	e00f      	b.n	8009504 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80094e4:	6839      	ldr	r1, [r7, #0]
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	f000 fa16 	bl	8009918 <USBD_CtlError>
            err++;
 80094ec:	7afb      	ldrb	r3, [r7, #11]
 80094ee:	3301      	adds	r3, #1
 80094f0:	72fb      	strb	r3, [r7, #11]
          break;
 80094f2:	e007      	b.n	8009504 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80094f4:	6839      	ldr	r1, [r7, #0]
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	f000 fa0e 	bl	8009918 <USBD_CtlError>
          err++;
 80094fc:	7afb      	ldrb	r3, [r7, #11]
 80094fe:	3301      	adds	r3, #1
 8009500:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8009502:	e038      	b.n	8009576 <USBD_GetDescriptor+0x286>
 8009504:	e037      	b.n	8009576 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	7c1b      	ldrb	r3, [r3, #16]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d109      	bne.n	8009522 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009514:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009516:	f107 0208 	add.w	r2, r7, #8
 800951a:	4610      	mov	r0, r2
 800951c:	4798      	blx	r3
 800951e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009520:	e029      	b.n	8009576 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009522:	6839      	ldr	r1, [r7, #0]
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	f000 f9f7 	bl	8009918 <USBD_CtlError>
        err++;
 800952a:	7afb      	ldrb	r3, [r7, #11]
 800952c:	3301      	adds	r3, #1
 800952e:	72fb      	strb	r3, [r7, #11]
      break;
 8009530:	e021      	b.n	8009576 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	7c1b      	ldrb	r3, [r3, #16]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d10d      	bne.n	8009556 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009542:	f107 0208 	add.w	r2, r7, #8
 8009546:	4610      	mov	r0, r2
 8009548:	4798      	blx	r3
 800954a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	3301      	adds	r3, #1
 8009550:	2207      	movs	r2, #7
 8009552:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009554:	e00f      	b.n	8009576 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009556:	6839      	ldr	r1, [r7, #0]
 8009558:	6878      	ldr	r0, [r7, #4]
 800955a:	f000 f9dd 	bl	8009918 <USBD_CtlError>
        err++;
 800955e:	7afb      	ldrb	r3, [r7, #11]
 8009560:	3301      	adds	r3, #1
 8009562:	72fb      	strb	r3, [r7, #11]
      break;
 8009564:	e007      	b.n	8009576 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009566:	6839      	ldr	r1, [r7, #0]
 8009568:	6878      	ldr	r0, [r7, #4]
 800956a:	f000 f9d5 	bl	8009918 <USBD_CtlError>
      err++;
 800956e:	7afb      	ldrb	r3, [r7, #11]
 8009570:	3301      	adds	r3, #1
 8009572:	72fb      	strb	r3, [r7, #11]
      break;
 8009574:	bf00      	nop
  }

  if (err != 0U)
 8009576:	7afb      	ldrb	r3, [r7, #11]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d11c      	bne.n	80095b6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800957c:	893b      	ldrh	r3, [r7, #8]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d011      	beq.n	80095a6 <USBD_GetDescriptor+0x2b6>
 8009582:	683b      	ldr	r3, [r7, #0]
 8009584:	88db      	ldrh	r3, [r3, #6]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d00d      	beq.n	80095a6 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800958a:	683b      	ldr	r3, [r7, #0]
 800958c:	88da      	ldrh	r2, [r3, #6]
 800958e:	893b      	ldrh	r3, [r7, #8]
 8009590:	4293      	cmp	r3, r2
 8009592:	bf28      	it	cs
 8009594:	4613      	movcs	r3, r2
 8009596:	b29b      	uxth	r3, r3
 8009598:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800959a:	893b      	ldrh	r3, [r7, #8]
 800959c:	461a      	mov	r2, r3
 800959e:	68f9      	ldr	r1, [r7, #12]
 80095a0:	6878      	ldr	r0, [r7, #4]
 80095a2:	f000 fa24 	bl	80099ee <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	88db      	ldrh	r3, [r3, #6]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d104      	bne.n	80095b8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80095ae:	6878      	ldr	r0, [r7, #4]
 80095b0:	f000 fa7b 	bl	8009aaa <USBD_CtlSendStatus>
 80095b4:	e000      	b.n	80095b8 <USBD_GetDescriptor+0x2c8>
    return;
 80095b6:	bf00      	nop
    }
  }
}
 80095b8:	3710      	adds	r7, #16
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bd80      	pop	{r7, pc}
 80095be:	bf00      	nop

080095c0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b084      	sub	sp, #16
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
 80095c8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80095ca:	683b      	ldr	r3, [r7, #0]
 80095cc:	889b      	ldrh	r3, [r3, #4]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d130      	bne.n	8009634 <USBD_SetAddress+0x74>
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	88db      	ldrh	r3, [r3, #6]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d12c      	bne.n	8009634 <USBD_SetAddress+0x74>
 80095da:	683b      	ldr	r3, [r7, #0]
 80095dc:	885b      	ldrh	r3, [r3, #2]
 80095de:	2b7f      	cmp	r3, #127	; 0x7f
 80095e0:	d828      	bhi.n	8009634 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	885b      	ldrh	r3, [r3, #2]
 80095e6:	b2db      	uxtb	r3, r3
 80095e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80095ec:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095f4:	2b03      	cmp	r3, #3
 80095f6:	d104      	bne.n	8009602 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80095f8:	6839      	ldr	r1, [r7, #0]
 80095fa:	6878      	ldr	r0, [r7, #4]
 80095fc:	f000 f98c 	bl	8009918 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009600:	e01d      	b.n	800963e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	7bfa      	ldrb	r2, [r7, #15]
 8009606:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800960a:	7bfb      	ldrb	r3, [r7, #15]
 800960c:	4619      	mov	r1, r3
 800960e:	6878      	ldr	r0, [r7, #4]
 8009610:	f000 fe73 	bl	800a2fa <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009614:	6878      	ldr	r0, [r7, #4]
 8009616:	f000 fa48 	bl	8009aaa <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800961a:	7bfb      	ldrb	r3, [r7, #15]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d004      	beq.n	800962a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2202      	movs	r2, #2
 8009624:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009628:	e009      	b.n	800963e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	2201      	movs	r2, #1
 800962e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009632:	e004      	b.n	800963e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009634:	6839      	ldr	r1, [r7, #0]
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	f000 f96e 	bl	8009918 <USBD_CtlError>
  }
}
 800963c:	bf00      	nop
 800963e:	bf00      	nop
 8009640:	3710      	adds	r7, #16
 8009642:	46bd      	mov	sp, r7
 8009644:	bd80      	pop	{r7, pc}
	...

08009648 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b082      	sub	sp, #8
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
 8009650:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	885b      	ldrh	r3, [r3, #2]
 8009656:	b2da      	uxtb	r2, r3
 8009658:	4b41      	ldr	r3, [pc, #260]	; (8009760 <USBD_SetConfig+0x118>)
 800965a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800965c:	4b40      	ldr	r3, [pc, #256]	; (8009760 <USBD_SetConfig+0x118>)
 800965e:	781b      	ldrb	r3, [r3, #0]
 8009660:	2b01      	cmp	r3, #1
 8009662:	d904      	bls.n	800966e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009664:	6839      	ldr	r1, [r7, #0]
 8009666:	6878      	ldr	r0, [r7, #4]
 8009668:	f000 f956 	bl	8009918 <USBD_CtlError>
 800966c:	e075      	b.n	800975a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009674:	2b02      	cmp	r3, #2
 8009676:	d002      	beq.n	800967e <USBD_SetConfig+0x36>
 8009678:	2b03      	cmp	r3, #3
 800967a:	d023      	beq.n	80096c4 <USBD_SetConfig+0x7c>
 800967c:	e062      	b.n	8009744 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800967e:	4b38      	ldr	r3, [pc, #224]	; (8009760 <USBD_SetConfig+0x118>)
 8009680:	781b      	ldrb	r3, [r3, #0]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d01a      	beq.n	80096bc <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009686:	4b36      	ldr	r3, [pc, #216]	; (8009760 <USBD_SetConfig+0x118>)
 8009688:	781b      	ldrb	r3, [r3, #0]
 800968a:	461a      	mov	r2, r3
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2203      	movs	r2, #3
 8009694:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009698:	4b31      	ldr	r3, [pc, #196]	; (8009760 <USBD_SetConfig+0x118>)
 800969a:	781b      	ldrb	r3, [r3, #0]
 800969c:	4619      	mov	r1, r3
 800969e:	6878      	ldr	r0, [r7, #4]
 80096a0:	f7ff f9e4 	bl	8008a6c <USBD_SetClassConfig>
 80096a4:	4603      	mov	r3, r0
 80096a6:	2b02      	cmp	r3, #2
 80096a8:	d104      	bne.n	80096b4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80096aa:	6839      	ldr	r1, [r7, #0]
 80096ac:	6878      	ldr	r0, [r7, #4]
 80096ae:	f000 f933 	bl	8009918 <USBD_CtlError>
            return;
 80096b2:	e052      	b.n	800975a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80096b4:	6878      	ldr	r0, [r7, #4]
 80096b6:	f000 f9f8 	bl	8009aaa <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80096ba:	e04e      	b.n	800975a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80096bc:	6878      	ldr	r0, [r7, #4]
 80096be:	f000 f9f4 	bl	8009aaa <USBD_CtlSendStatus>
        break;
 80096c2:	e04a      	b.n	800975a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80096c4:	4b26      	ldr	r3, [pc, #152]	; (8009760 <USBD_SetConfig+0x118>)
 80096c6:	781b      	ldrb	r3, [r3, #0]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d112      	bne.n	80096f2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2202      	movs	r2, #2
 80096d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80096d4:	4b22      	ldr	r3, [pc, #136]	; (8009760 <USBD_SetConfig+0x118>)
 80096d6:	781b      	ldrb	r3, [r3, #0]
 80096d8:	461a      	mov	r2, r3
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80096de:	4b20      	ldr	r3, [pc, #128]	; (8009760 <USBD_SetConfig+0x118>)
 80096e0:	781b      	ldrb	r3, [r3, #0]
 80096e2:	4619      	mov	r1, r3
 80096e4:	6878      	ldr	r0, [r7, #4]
 80096e6:	f7ff f9e0 	bl	8008aaa <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80096ea:	6878      	ldr	r0, [r7, #4]
 80096ec:	f000 f9dd 	bl	8009aaa <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80096f0:	e033      	b.n	800975a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80096f2:	4b1b      	ldr	r3, [pc, #108]	; (8009760 <USBD_SetConfig+0x118>)
 80096f4:	781b      	ldrb	r3, [r3, #0]
 80096f6:	461a      	mov	r2, r3
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	685b      	ldr	r3, [r3, #4]
 80096fc:	429a      	cmp	r2, r3
 80096fe:	d01d      	beq.n	800973c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	685b      	ldr	r3, [r3, #4]
 8009704:	b2db      	uxtb	r3, r3
 8009706:	4619      	mov	r1, r3
 8009708:	6878      	ldr	r0, [r7, #4]
 800970a:	f7ff f9ce 	bl	8008aaa <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800970e:	4b14      	ldr	r3, [pc, #80]	; (8009760 <USBD_SetConfig+0x118>)
 8009710:	781b      	ldrb	r3, [r3, #0]
 8009712:	461a      	mov	r2, r3
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009718:	4b11      	ldr	r3, [pc, #68]	; (8009760 <USBD_SetConfig+0x118>)
 800971a:	781b      	ldrb	r3, [r3, #0]
 800971c:	4619      	mov	r1, r3
 800971e:	6878      	ldr	r0, [r7, #4]
 8009720:	f7ff f9a4 	bl	8008a6c <USBD_SetClassConfig>
 8009724:	4603      	mov	r3, r0
 8009726:	2b02      	cmp	r3, #2
 8009728:	d104      	bne.n	8009734 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800972a:	6839      	ldr	r1, [r7, #0]
 800972c:	6878      	ldr	r0, [r7, #4]
 800972e:	f000 f8f3 	bl	8009918 <USBD_CtlError>
            return;
 8009732:	e012      	b.n	800975a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009734:	6878      	ldr	r0, [r7, #4]
 8009736:	f000 f9b8 	bl	8009aaa <USBD_CtlSendStatus>
        break;
 800973a:	e00e      	b.n	800975a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800973c:	6878      	ldr	r0, [r7, #4]
 800973e:	f000 f9b4 	bl	8009aaa <USBD_CtlSendStatus>
        break;
 8009742:	e00a      	b.n	800975a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009744:	6839      	ldr	r1, [r7, #0]
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	f000 f8e6 	bl	8009918 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800974c:	4b04      	ldr	r3, [pc, #16]	; (8009760 <USBD_SetConfig+0x118>)
 800974e:	781b      	ldrb	r3, [r3, #0]
 8009750:	4619      	mov	r1, r3
 8009752:	6878      	ldr	r0, [r7, #4]
 8009754:	f7ff f9a9 	bl	8008aaa <USBD_ClrClassConfig>
        break;
 8009758:	bf00      	nop
    }
  }
}
 800975a:	3708      	adds	r7, #8
 800975c:	46bd      	mov	sp, r7
 800975e:	bd80      	pop	{r7, pc}
 8009760:	20000370 	.word	0x20000370

08009764 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b082      	sub	sp, #8
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
 800976c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	88db      	ldrh	r3, [r3, #6]
 8009772:	2b01      	cmp	r3, #1
 8009774:	d004      	beq.n	8009780 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009776:	6839      	ldr	r1, [r7, #0]
 8009778:	6878      	ldr	r0, [r7, #4]
 800977a:	f000 f8cd 	bl	8009918 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800977e:	e022      	b.n	80097c6 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009786:	2b02      	cmp	r3, #2
 8009788:	dc02      	bgt.n	8009790 <USBD_GetConfig+0x2c>
 800978a:	2b00      	cmp	r3, #0
 800978c:	dc03      	bgt.n	8009796 <USBD_GetConfig+0x32>
 800978e:	e015      	b.n	80097bc <USBD_GetConfig+0x58>
 8009790:	2b03      	cmp	r3, #3
 8009792:	d00b      	beq.n	80097ac <USBD_GetConfig+0x48>
 8009794:	e012      	b.n	80097bc <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	2200      	movs	r2, #0
 800979a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	3308      	adds	r3, #8
 80097a0:	2201      	movs	r2, #1
 80097a2:	4619      	mov	r1, r3
 80097a4:	6878      	ldr	r0, [r7, #4]
 80097a6:	f000 f922 	bl	80099ee <USBD_CtlSendData>
        break;
 80097aa:	e00c      	b.n	80097c6 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	3304      	adds	r3, #4
 80097b0:	2201      	movs	r2, #1
 80097b2:	4619      	mov	r1, r3
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	f000 f91a 	bl	80099ee <USBD_CtlSendData>
        break;
 80097ba:	e004      	b.n	80097c6 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80097bc:	6839      	ldr	r1, [r7, #0]
 80097be:	6878      	ldr	r0, [r7, #4]
 80097c0:	f000 f8aa 	bl	8009918 <USBD_CtlError>
        break;
 80097c4:	bf00      	nop
}
 80097c6:	bf00      	nop
 80097c8:	3708      	adds	r7, #8
 80097ca:	46bd      	mov	sp, r7
 80097cc:	bd80      	pop	{r7, pc}

080097ce <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097ce:	b580      	push	{r7, lr}
 80097d0:	b082      	sub	sp, #8
 80097d2:	af00      	add	r7, sp, #0
 80097d4:	6078      	str	r0, [r7, #4]
 80097d6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097de:	3b01      	subs	r3, #1
 80097e0:	2b02      	cmp	r3, #2
 80097e2:	d81e      	bhi.n	8009822 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80097e4:	683b      	ldr	r3, [r7, #0]
 80097e6:	88db      	ldrh	r3, [r3, #6]
 80097e8:	2b02      	cmp	r3, #2
 80097ea:	d004      	beq.n	80097f6 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80097ec:	6839      	ldr	r1, [r7, #0]
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	f000 f892 	bl	8009918 <USBD_CtlError>
        break;
 80097f4:	e01a      	b.n	800982c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	2201      	movs	r2, #1
 80097fa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009802:	2b00      	cmp	r3, #0
 8009804:	d005      	beq.n	8009812 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	68db      	ldr	r3, [r3, #12]
 800980a:	f043 0202 	orr.w	r2, r3, #2
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	330c      	adds	r3, #12
 8009816:	2202      	movs	r2, #2
 8009818:	4619      	mov	r1, r3
 800981a:	6878      	ldr	r0, [r7, #4]
 800981c:	f000 f8e7 	bl	80099ee <USBD_CtlSendData>
      break;
 8009820:	e004      	b.n	800982c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009822:	6839      	ldr	r1, [r7, #0]
 8009824:	6878      	ldr	r0, [r7, #4]
 8009826:	f000 f877 	bl	8009918 <USBD_CtlError>
      break;
 800982a:	bf00      	nop
  }
}
 800982c:	bf00      	nop
 800982e:	3708      	adds	r7, #8
 8009830:	46bd      	mov	sp, r7
 8009832:	bd80      	pop	{r7, pc}

08009834 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b082      	sub	sp, #8
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
 800983c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	885b      	ldrh	r3, [r3, #2]
 8009842:	2b01      	cmp	r3, #1
 8009844:	d106      	bne.n	8009854 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	2201      	movs	r2, #1
 800984a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800984e:	6878      	ldr	r0, [r7, #4]
 8009850:	f000 f92b 	bl	8009aaa <USBD_CtlSendStatus>
  }
}
 8009854:	bf00      	nop
 8009856:	3708      	adds	r7, #8
 8009858:	46bd      	mov	sp, r7
 800985a:	bd80      	pop	{r7, pc}

0800985c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800985c:	b580      	push	{r7, lr}
 800985e:	b082      	sub	sp, #8
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
 8009864:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800986c:	3b01      	subs	r3, #1
 800986e:	2b02      	cmp	r3, #2
 8009870:	d80b      	bhi.n	800988a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	885b      	ldrh	r3, [r3, #2]
 8009876:	2b01      	cmp	r3, #1
 8009878:	d10c      	bne.n	8009894 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	2200      	movs	r2, #0
 800987e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8009882:	6878      	ldr	r0, [r7, #4]
 8009884:	f000 f911 	bl	8009aaa <USBD_CtlSendStatus>
      }
      break;
 8009888:	e004      	b.n	8009894 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800988a:	6839      	ldr	r1, [r7, #0]
 800988c:	6878      	ldr	r0, [r7, #4]
 800988e:	f000 f843 	bl	8009918 <USBD_CtlError>
      break;
 8009892:	e000      	b.n	8009896 <USBD_ClrFeature+0x3a>
      break;
 8009894:	bf00      	nop
  }
}
 8009896:	bf00      	nop
 8009898:	3708      	adds	r7, #8
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}

0800989e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800989e:	b480      	push	{r7}
 80098a0:	b083      	sub	sp, #12
 80098a2:	af00      	add	r7, sp, #0
 80098a4:	6078      	str	r0, [r7, #4]
 80098a6:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	781a      	ldrb	r2, [r3, #0]
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80098b0:	683b      	ldr	r3, [r7, #0]
 80098b2:	785a      	ldrb	r2, [r3, #1]
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	3302      	adds	r3, #2
 80098bc:	781b      	ldrb	r3, [r3, #0]
 80098be:	b29a      	uxth	r2, r3
 80098c0:	683b      	ldr	r3, [r7, #0]
 80098c2:	3303      	adds	r3, #3
 80098c4:	781b      	ldrb	r3, [r3, #0]
 80098c6:	b29b      	uxth	r3, r3
 80098c8:	021b      	lsls	r3, r3, #8
 80098ca:	b29b      	uxth	r3, r3
 80098cc:	4413      	add	r3, r2
 80098ce:	b29a      	uxth	r2, r3
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	3304      	adds	r3, #4
 80098d8:	781b      	ldrb	r3, [r3, #0]
 80098da:	b29a      	uxth	r2, r3
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	3305      	adds	r3, #5
 80098e0:	781b      	ldrb	r3, [r3, #0]
 80098e2:	b29b      	uxth	r3, r3
 80098e4:	021b      	lsls	r3, r3, #8
 80098e6:	b29b      	uxth	r3, r3
 80098e8:	4413      	add	r3, r2
 80098ea:	b29a      	uxth	r2, r3
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	3306      	adds	r3, #6
 80098f4:	781b      	ldrb	r3, [r3, #0]
 80098f6:	b29a      	uxth	r2, r3
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	3307      	adds	r3, #7
 80098fc:	781b      	ldrb	r3, [r3, #0]
 80098fe:	b29b      	uxth	r3, r3
 8009900:	021b      	lsls	r3, r3, #8
 8009902:	b29b      	uxth	r3, r3
 8009904:	4413      	add	r3, r2
 8009906:	b29a      	uxth	r2, r3
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	80da      	strh	r2, [r3, #6]

}
 800990c:	bf00      	nop
 800990e:	370c      	adds	r7, #12
 8009910:	46bd      	mov	sp, r7
 8009912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009916:	4770      	bx	lr

08009918 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b082      	sub	sp, #8
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
 8009920:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009922:	2180      	movs	r1, #128	; 0x80
 8009924:	6878      	ldr	r0, [r7, #4]
 8009926:	f000 fc7d 	bl	800a224 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800992a:	2100      	movs	r1, #0
 800992c:	6878      	ldr	r0, [r7, #4]
 800992e:	f000 fc79 	bl	800a224 <USBD_LL_StallEP>
}
 8009932:	bf00      	nop
 8009934:	3708      	adds	r7, #8
 8009936:	46bd      	mov	sp, r7
 8009938:	bd80      	pop	{r7, pc}

0800993a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800993a:	b580      	push	{r7, lr}
 800993c:	b086      	sub	sp, #24
 800993e:	af00      	add	r7, sp, #0
 8009940:	60f8      	str	r0, [r7, #12]
 8009942:	60b9      	str	r1, [r7, #8]
 8009944:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009946:	2300      	movs	r3, #0
 8009948:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d032      	beq.n	80099b6 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009950:	68f8      	ldr	r0, [r7, #12]
 8009952:	f000 f834 	bl	80099be <USBD_GetLen>
 8009956:	4603      	mov	r3, r0
 8009958:	3301      	adds	r3, #1
 800995a:	b29b      	uxth	r3, r3
 800995c:	005b      	lsls	r3, r3, #1
 800995e:	b29a      	uxth	r2, r3
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009964:	7dfb      	ldrb	r3, [r7, #23]
 8009966:	1c5a      	adds	r2, r3, #1
 8009968:	75fa      	strb	r2, [r7, #23]
 800996a:	461a      	mov	r2, r3
 800996c:	68bb      	ldr	r3, [r7, #8]
 800996e:	4413      	add	r3, r2
 8009970:	687a      	ldr	r2, [r7, #4]
 8009972:	7812      	ldrb	r2, [r2, #0]
 8009974:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009976:	7dfb      	ldrb	r3, [r7, #23]
 8009978:	1c5a      	adds	r2, r3, #1
 800997a:	75fa      	strb	r2, [r7, #23]
 800997c:	461a      	mov	r2, r3
 800997e:	68bb      	ldr	r3, [r7, #8]
 8009980:	4413      	add	r3, r2
 8009982:	2203      	movs	r2, #3
 8009984:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009986:	e012      	b.n	80099ae <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	1c5a      	adds	r2, r3, #1
 800998c:	60fa      	str	r2, [r7, #12]
 800998e:	7dfa      	ldrb	r2, [r7, #23]
 8009990:	1c51      	adds	r1, r2, #1
 8009992:	75f9      	strb	r1, [r7, #23]
 8009994:	4611      	mov	r1, r2
 8009996:	68ba      	ldr	r2, [r7, #8]
 8009998:	440a      	add	r2, r1
 800999a:	781b      	ldrb	r3, [r3, #0]
 800999c:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800999e:	7dfb      	ldrb	r3, [r7, #23]
 80099a0:	1c5a      	adds	r2, r3, #1
 80099a2:	75fa      	strb	r2, [r7, #23]
 80099a4:	461a      	mov	r2, r3
 80099a6:	68bb      	ldr	r3, [r7, #8]
 80099a8:	4413      	add	r3, r2
 80099aa:	2200      	movs	r2, #0
 80099ac:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	781b      	ldrb	r3, [r3, #0]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d1e8      	bne.n	8009988 <USBD_GetString+0x4e>
    }
  }
}
 80099b6:	bf00      	nop
 80099b8:	3718      	adds	r7, #24
 80099ba:	46bd      	mov	sp, r7
 80099bc:	bd80      	pop	{r7, pc}

080099be <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80099be:	b480      	push	{r7}
 80099c0:	b085      	sub	sp, #20
 80099c2:	af00      	add	r7, sp, #0
 80099c4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80099c6:	2300      	movs	r3, #0
 80099c8:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80099ca:	e005      	b.n	80099d8 <USBD_GetLen+0x1a>
  {
    len++;
 80099cc:	7bfb      	ldrb	r3, [r7, #15]
 80099ce:	3301      	adds	r3, #1
 80099d0:	73fb      	strb	r3, [r7, #15]
    buf++;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	3301      	adds	r3, #1
 80099d6:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	781b      	ldrb	r3, [r3, #0]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d1f5      	bne.n	80099cc <USBD_GetLen+0xe>
  }

  return len;
 80099e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80099e2:	4618      	mov	r0, r3
 80099e4:	3714      	adds	r7, #20
 80099e6:	46bd      	mov	sp, r7
 80099e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ec:	4770      	bx	lr

080099ee <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80099ee:	b580      	push	{r7, lr}
 80099f0:	b084      	sub	sp, #16
 80099f2:	af00      	add	r7, sp, #0
 80099f4:	60f8      	str	r0, [r7, #12]
 80099f6:	60b9      	str	r1, [r7, #8]
 80099f8:	4613      	mov	r3, r2
 80099fa:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	2202      	movs	r2, #2
 8009a00:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009a04:	88fa      	ldrh	r2, [r7, #6]
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009a0a:	88fa      	ldrh	r2, [r7, #6]
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009a10:	88fb      	ldrh	r3, [r7, #6]
 8009a12:	68ba      	ldr	r2, [r7, #8]
 8009a14:	2100      	movs	r1, #0
 8009a16:	68f8      	ldr	r0, [r7, #12]
 8009a18:	f000 fc8e 	bl	800a338 <USBD_LL_Transmit>

  return USBD_OK;
 8009a1c:	2300      	movs	r3, #0
}
 8009a1e:	4618      	mov	r0, r3
 8009a20:	3710      	adds	r7, #16
 8009a22:	46bd      	mov	sp, r7
 8009a24:	bd80      	pop	{r7, pc}

08009a26 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009a26:	b580      	push	{r7, lr}
 8009a28:	b084      	sub	sp, #16
 8009a2a:	af00      	add	r7, sp, #0
 8009a2c:	60f8      	str	r0, [r7, #12]
 8009a2e:	60b9      	str	r1, [r7, #8]
 8009a30:	4613      	mov	r3, r2
 8009a32:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009a34:	88fb      	ldrh	r3, [r7, #6]
 8009a36:	68ba      	ldr	r2, [r7, #8]
 8009a38:	2100      	movs	r1, #0
 8009a3a:	68f8      	ldr	r0, [r7, #12]
 8009a3c:	f000 fc7c 	bl	800a338 <USBD_LL_Transmit>

  return USBD_OK;
 8009a40:	2300      	movs	r3, #0
}
 8009a42:	4618      	mov	r0, r3
 8009a44:	3710      	adds	r7, #16
 8009a46:	46bd      	mov	sp, r7
 8009a48:	bd80      	pop	{r7, pc}

08009a4a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009a4a:	b580      	push	{r7, lr}
 8009a4c:	b084      	sub	sp, #16
 8009a4e:	af00      	add	r7, sp, #0
 8009a50:	60f8      	str	r0, [r7, #12]
 8009a52:	60b9      	str	r1, [r7, #8]
 8009a54:	4613      	mov	r3, r2
 8009a56:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	2203      	movs	r2, #3
 8009a5c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009a60:	88fa      	ldrh	r2, [r7, #6]
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8009a68:	88fa      	ldrh	r2, [r7, #6]
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009a70:	88fb      	ldrh	r3, [r7, #6]
 8009a72:	68ba      	ldr	r2, [r7, #8]
 8009a74:	2100      	movs	r1, #0
 8009a76:	68f8      	ldr	r0, [r7, #12]
 8009a78:	f000 fc81 	bl	800a37e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009a7c:	2300      	movs	r3, #0
}
 8009a7e:	4618      	mov	r0, r3
 8009a80:	3710      	adds	r7, #16
 8009a82:	46bd      	mov	sp, r7
 8009a84:	bd80      	pop	{r7, pc}

08009a86 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009a86:	b580      	push	{r7, lr}
 8009a88:	b084      	sub	sp, #16
 8009a8a:	af00      	add	r7, sp, #0
 8009a8c:	60f8      	str	r0, [r7, #12]
 8009a8e:	60b9      	str	r1, [r7, #8]
 8009a90:	4613      	mov	r3, r2
 8009a92:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009a94:	88fb      	ldrh	r3, [r7, #6]
 8009a96:	68ba      	ldr	r2, [r7, #8]
 8009a98:	2100      	movs	r1, #0
 8009a9a:	68f8      	ldr	r0, [r7, #12]
 8009a9c:	f000 fc6f 	bl	800a37e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009aa0:	2300      	movs	r3, #0
}
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	3710      	adds	r7, #16
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	bd80      	pop	{r7, pc}

08009aaa <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009aaa:	b580      	push	{r7, lr}
 8009aac:	b082      	sub	sp, #8
 8009aae:	af00      	add	r7, sp, #0
 8009ab0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	2204      	movs	r2, #4
 8009ab6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009aba:	2300      	movs	r3, #0
 8009abc:	2200      	movs	r2, #0
 8009abe:	2100      	movs	r1, #0
 8009ac0:	6878      	ldr	r0, [r7, #4]
 8009ac2:	f000 fc39 	bl	800a338 <USBD_LL_Transmit>

  return USBD_OK;
 8009ac6:	2300      	movs	r3, #0
}
 8009ac8:	4618      	mov	r0, r3
 8009aca:	3708      	adds	r7, #8
 8009acc:	46bd      	mov	sp, r7
 8009ace:	bd80      	pop	{r7, pc}

08009ad0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b082      	sub	sp, #8
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2205      	movs	r2, #5
 8009adc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	2100      	movs	r1, #0
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	f000 fc49 	bl	800a37e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009aec:	2300      	movs	r3, #0
}
 8009aee:	4618      	mov	r0, r3
 8009af0:	3708      	adds	r7, #8
 8009af2:	46bd      	mov	sp, r7
 8009af4:	bd80      	pop	{r7, pc}
	...

08009af8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009afc:	2200      	movs	r2, #0
 8009afe:	4912      	ldr	r1, [pc, #72]	; (8009b48 <MX_USB_DEVICE_Init+0x50>)
 8009b00:	4812      	ldr	r0, [pc, #72]	; (8009b4c <MX_USB_DEVICE_Init+0x54>)
 8009b02:	f7fe ff57 	bl	80089b4 <USBD_Init>
 8009b06:	4603      	mov	r3, r0
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d001      	beq.n	8009b10 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009b0c:	f7f7 fde0 	bl	80016d0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009b10:	490f      	ldr	r1, [pc, #60]	; (8009b50 <MX_USB_DEVICE_Init+0x58>)
 8009b12:	480e      	ldr	r0, [pc, #56]	; (8009b4c <MX_USB_DEVICE_Init+0x54>)
 8009b14:	f7fe ff79 	bl	8008a0a <USBD_RegisterClass>
 8009b18:	4603      	mov	r3, r0
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d001      	beq.n	8009b22 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009b1e:	f7f7 fdd7 	bl	80016d0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009b22:	490c      	ldr	r1, [pc, #48]	; (8009b54 <MX_USB_DEVICE_Init+0x5c>)
 8009b24:	4809      	ldr	r0, [pc, #36]	; (8009b4c <MX_USB_DEVICE_Init+0x54>)
 8009b26:	f7fe fea7 	bl	8008878 <USBD_CDC_RegisterInterface>
 8009b2a:	4603      	mov	r3, r0
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d001      	beq.n	8009b34 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009b30:	f7f7 fdce 	bl	80016d0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009b34:	4805      	ldr	r0, [pc, #20]	; (8009b4c <MX_USB_DEVICE_Init+0x54>)
 8009b36:	f7fe ff82 	bl	8008a3e <USBD_Start>
 8009b3a:	4603      	mov	r3, r0
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d001      	beq.n	8009b44 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009b40:	f7f7 fdc6 	bl	80016d0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009b44:	bf00      	nop
 8009b46:	bd80      	pop	{r7, pc}
 8009b48:	2000012c 	.word	0x2000012c
 8009b4c:	2000069c 	.word	0x2000069c
 8009b50:	20000018 	.word	0x20000018
 8009b54:	2000011c 	.word	0x2000011c

08009b58 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	4905      	ldr	r1, [pc, #20]	; (8009b74 <CDC_Init_FS+0x1c>)
 8009b60:	4805      	ldr	r0, [pc, #20]	; (8009b78 <CDC_Init_FS+0x20>)
 8009b62:	f7fe fea0 	bl	80088a6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009b66:	4905      	ldr	r1, [pc, #20]	; (8009b7c <CDC_Init_FS+0x24>)
 8009b68:	4803      	ldr	r0, [pc, #12]	; (8009b78 <CDC_Init_FS+0x20>)
 8009b6a:	f7fe feb6 	bl	80088da <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009b6e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009b70:	4618      	mov	r0, r3
 8009b72:	bd80      	pop	{r7, pc}
 8009b74:	20000d48 	.word	0x20000d48
 8009b78:	2000069c 	.word	0x2000069c
 8009b7c:	20000960 	.word	0x20000960

08009b80 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009b80:	b480      	push	{r7}
 8009b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009b84:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009b86:	4618      	mov	r0, r3
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8e:	4770      	bx	lr

08009b90 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009b90:	b480      	push	{r7}
 8009b92:	b083      	sub	sp, #12
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	4603      	mov	r3, r0
 8009b98:	6039      	str	r1, [r7, #0]
 8009b9a:	71fb      	strb	r3, [r7, #7]
 8009b9c:	4613      	mov	r3, r2
 8009b9e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009ba0:	79fb      	ldrb	r3, [r7, #7]
 8009ba2:	2b23      	cmp	r3, #35	; 0x23
 8009ba4:	d84a      	bhi.n	8009c3c <CDC_Control_FS+0xac>
 8009ba6:	a201      	add	r2, pc, #4	; (adr r2, 8009bac <CDC_Control_FS+0x1c>)
 8009ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bac:	08009c3d 	.word	0x08009c3d
 8009bb0:	08009c3d 	.word	0x08009c3d
 8009bb4:	08009c3d 	.word	0x08009c3d
 8009bb8:	08009c3d 	.word	0x08009c3d
 8009bbc:	08009c3d 	.word	0x08009c3d
 8009bc0:	08009c3d 	.word	0x08009c3d
 8009bc4:	08009c3d 	.word	0x08009c3d
 8009bc8:	08009c3d 	.word	0x08009c3d
 8009bcc:	08009c3d 	.word	0x08009c3d
 8009bd0:	08009c3d 	.word	0x08009c3d
 8009bd4:	08009c3d 	.word	0x08009c3d
 8009bd8:	08009c3d 	.word	0x08009c3d
 8009bdc:	08009c3d 	.word	0x08009c3d
 8009be0:	08009c3d 	.word	0x08009c3d
 8009be4:	08009c3d 	.word	0x08009c3d
 8009be8:	08009c3d 	.word	0x08009c3d
 8009bec:	08009c3d 	.word	0x08009c3d
 8009bf0:	08009c3d 	.word	0x08009c3d
 8009bf4:	08009c3d 	.word	0x08009c3d
 8009bf8:	08009c3d 	.word	0x08009c3d
 8009bfc:	08009c3d 	.word	0x08009c3d
 8009c00:	08009c3d 	.word	0x08009c3d
 8009c04:	08009c3d 	.word	0x08009c3d
 8009c08:	08009c3d 	.word	0x08009c3d
 8009c0c:	08009c3d 	.word	0x08009c3d
 8009c10:	08009c3d 	.word	0x08009c3d
 8009c14:	08009c3d 	.word	0x08009c3d
 8009c18:	08009c3d 	.word	0x08009c3d
 8009c1c:	08009c3d 	.word	0x08009c3d
 8009c20:	08009c3d 	.word	0x08009c3d
 8009c24:	08009c3d 	.word	0x08009c3d
 8009c28:	08009c3d 	.word	0x08009c3d
 8009c2c:	08009c3d 	.word	0x08009c3d
 8009c30:	08009c3d 	.word	0x08009c3d
 8009c34:	08009c3d 	.word	0x08009c3d
 8009c38:	08009c3d 	.word	0x08009c3d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009c3c:	bf00      	nop
  }

  return (USBD_OK);
 8009c3e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009c40:	4618      	mov	r0, r3
 8009c42:	370c      	adds	r7, #12
 8009c44:	46bd      	mov	sp, r7
 8009c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4a:	4770      	bx	lr

08009c4c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b082      	sub	sp, #8
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
 8009c54:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009c56:	6879      	ldr	r1, [r7, #4]
 8009c58:	4805      	ldr	r0, [pc, #20]	; (8009c70 <CDC_Receive_FS+0x24>)
 8009c5a:	f7fe fe3e 	bl	80088da <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009c5e:	4804      	ldr	r0, [pc, #16]	; (8009c70 <CDC_Receive_FS+0x24>)
 8009c60:	f7fe fe7e 	bl	8008960 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009c64:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009c66:	4618      	mov	r0, r3
 8009c68:	3708      	adds	r7, #8
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	bd80      	pop	{r7, pc}
 8009c6e:	bf00      	nop
 8009c70:	2000069c 	.word	0x2000069c

08009c74 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b084      	sub	sp, #16
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
 8009c7c:	460b      	mov	r3, r1
 8009c7e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009c80:	2300      	movs	r3, #0
 8009c82:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009c84:	4b0d      	ldr	r3, [pc, #52]	; (8009cbc <CDC_Transmit_FS+0x48>)
 8009c86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c8a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009c8c:	68bb      	ldr	r3, [r7, #8]
 8009c8e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d001      	beq.n	8009c9a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009c96:	2301      	movs	r3, #1
 8009c98:	e00b      	b.n	8009cb2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009c9a:	887b      	ldrh	r3, [r7, #2]
 8009c9c:	461a      	mov	r2, r3
 8009c9e:	6879      	ldr	r1, [r7, #4]
 8009ca0:	4806      	ldr	r0, [pc, #24]	; (8009cbc <CDC_Transmit_FS+0x48>)
 8009ca2:	f7fe fe00 	bl	80088a6 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009ca6:	4805      	ldr	r0, [pc, #20]	; (8009cbc <CDC_Transmit_FS+0x48>)
 8009ca8:	f7fe fe2b 	bl	8008902 <USBD_CDC_TransmitPacket>
 8009cac:	4603      	mov	r3, r0
 8009cae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	3710      	adds	r7, #16
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	bd80      	pop	{r7, pc}
 8009cba:	bf00      	nop
 8009cbc:	2000069c 	.word	0x2000069c

08009cc0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009cc0:	b480      	push	{r7}
 8009cc2:	b083      	sub	sp, #12
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	4603      	mov	r3, r0
 8009cc8:	6039      	str	r1, [r7, #0]
 8009cca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	2212      	movs	r2, #18
 8009cd0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009cd2:	4b03      	ldr	r3, [pc, #12]	; (8009ce0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	370c      	adds	r7, #12
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cde:	4770      	bx	lr
 8009ce0:	20000148 	.word	0x20000148

08009ce4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ce4:	b480      	push	{r7}
 8009ce6:	b083      	sub	sp, #12
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	4603      	mov	r3, r0
 8009cec:	6039      	str	r1, [r7, #0]
 8009cee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009cf0:	683b      	ldr	r3, [r7, #0]
 8009cf2:	2204      	movs	r2, #4
 8009cf4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009cf6:	4b03      	ldr	r3, [pc, #12]	; (8009d04 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	370c      	adds	r7, #12
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d02:	4770      	bx	lr
 8009d04:	2000015c 	.word	0x2000015c

08009d08 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b082      	sub	sp, #8
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	4603      	mov	r3, r0
 8009d10:	6039      	str	r1, [r7, #0]
 8009d12:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009d14:	79fb      	ldrb	r3, [r7, #7]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d105      	bne.n	8009d26 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009d1a:	683a      	ldr	r2, [r7, #0]
 8009d1c:	4907      	ldr	r1, [pc, #28]	; (8009d3c <USBD_FS_ProductStrDescriptor+0x34>)
 8009d1e:	4808      	ldr	r0, [pc, #32]	; (8009d40 <USBD_FS_ProductStrDescriptor+0x38>)
 8009d20:	f7ff fe0b 	bl	800993a <USBD_GetString>
 8009d24:	e004      	b.n	8009d30 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009d26:	683a      	ldr	r2, [r7, #0]
 8009d28:	4904      	ldr	r1, [pc, #16]	; (8009d3c <USBD_FS_ProductStrDescriptor+0x34>)
 8009d2a:	4805      	ldr	r0, [pc, #20]	; (8009d40 <USBD_FS_ProductStrDescriptor+0x38>)
 8009d2c:	f7ff fe05 	bl	800993a <USBD_GetString>
  }
  return USBD_StrDesc;
 8009d30:	4b02      	ldr	r3, [pc, #8]	; (8009d3c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009d32:	4618      	mov	r0, r3
 8009d34:	3708      	adds	r7, #8
 8009d36:	46bd      	mov	sp, r7
 8009d38:	bd80      	pop	{r7, pc}
 8009d3a:	bf00      	nop
 8009d3c:	20001130 	.word	0x20001130
 8009d40:	0800e290 	.word	0x0800e290

08009d44 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b082      	sub	sp, #8
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	6039      	str	r1, [r7, #0]
 8009d4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009d50:	683a      	ldr	r2, [r7, #0]
 8009d52:	4904      	ldr	r1, [pc, #16]	; (8009d64 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009d54:	4804      	ldr	r0, [pc, #16]	; (8009d68 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009d56:	f7ff fdf0 	bl	800993a <USBD_GetString>
  return USBD_StrDesc;
 8009d5a:	4b02      	ldr	r3, [pc, #8]	; (8009d64 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	3708      	adds	r7, #8
 8009d60:	46bd      	mov	sp, r7
 8009d62:	bd80      	pop	{r7, pc}
 8009d64:	20001130 	.word	0x20001130
 8009d68:	0800e2a0 	.word	0x0800e2a0

08009d6c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b082      	sub	sp, #8
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	4603      	mov	r3, r0
 8009d74:	6039      	str	r1, [r7, #0]
 8009d76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	221a      	movs	r2, #26
 8009d7c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009d7e:	f000 f843 	bl	8009e08 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009d82:	4b02      	ldr	r3, [pc, #8]	; (8009d8c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009d84:	4618      	mov	r0, r3
 8009d86:	3708      	adds	r7, #8
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	bd80      	pop	{r7, pc}
 8009d8c:	20000160 	.word	0x20000160

08009d90 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b082      	sub	sp, #8
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	4603      	mov	r3, r0
 8009d98:	6039      	str	r1, [r7, #0]
 8009d9a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009d9c:	79fb      	ldrb	r3, [r7, #7]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d105      	bne.n	8009dae <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009da2:	683a      	ldr	r2, [r7, #0]
 8009da4:	4907      	ldr	r1, [pc, #28]	; (8009dc4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009da6:	4808      	ldr	r0, [pc, #32]	; (8009dc8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009da8:	f7ff fdc7 	bl	800993a <USBD_GetString>
 8009dac:	e004      	b.n	8009db8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009dae:	683a      	ldr	r2, [r7, #0]
 8009db0:	4904      	ldr	r1, [pc, #16]	; (8009dc4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009db2:	4805      	ldr	r0, [pc, #20]	; (8009dc8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009db4:	f7ff fdc1 	bl	800993a <USBD_GetString>
  }
  return USBD_StrDesc;
 8009db8:	4b02      	ldr	r3, [pc, #8]	; (8009dc4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009dba:	4618      	mov	r0, r3
 8009dbc:	3708      	adds	r7, #8
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	bd80      	pop	{r7, pc}
 8009dc2:	bf00      	nop
 8009dc4:	20001130 	.word	0x20001130
 8009dc8:	0800e2ac 	.word	0x0800e2ac

08009dcc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b082      	sub	sp, #8
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	4603      	mov	r3, r0
 8009dd4:	6039      	str	r1, [r7, #0]
 8009dd6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009dd8:	79fb      	ldrb	r3, [r7, #7]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d105      	bne.n	8009dea <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009dde:	683a      	ldr	r2, [r7, #0]
 8009de0:	4907      	ldr	r1, [pc, #28]	; (8009e00 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009de2:	4808      	ldr	r0, [pc, #32]	; (8009e04 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009de4:	f7ff fda9 	bl	800993a <USBD_GetString>
 8009de8:	e004      	b.n	8009df4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009dea:	683a      	ldr	r2, [r7, #0]
 8009dec:	4904      	ldr	r1, [pc, #16]	; (8009e00 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009dee:	4805      	ldr	r0, [pc, #20]	; (8009e04 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009df0:	f7ff fda3 	bl	800993a <USBD_GetString>
  }
  return USBD_StrDesc;
 8009df4:	4b02      	ldr	r3, [pc, #8]	; (8009e00 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009df6:	4618      	mov	r0, r3
 8009df8:	3708      	adds	r7, #8
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	bd80      	pop	{r7, pc}
 8009dfe:	bf00      	nop
 8009e00:	20001130 	.word	0x20001130
 8009e04:	0800e2b8 	.word	0x0800e2b8

08009e08 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b084      	sub	sp, #16
 8009e0c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009e0e:	4b0f      	ldr	r3, [pc, #60]	; (8009e4c <Get_SerialNum+0x44>)
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009e14:	4b0e      	ldr	r3, [pc, #56]	; (8009e50 <Get_SerialNum+0x48>)
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009e1a:	4b0e      	ldr	r3, [pc, #56]	; (8009e54 <Get_SerialNum+0x4c>)
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009e20:	68fa      	ldr	r2, [r7, #12]
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	4413      	add	r3, r2
 8009e26:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d009      	beq.n	8009e42 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009e2e:	2208      	movs	r2, #8
 8009e30:	4909      	ldr	r1, [pc, #36]	; (8009e58 <Get_SerialNum+0x50>)
 8009e32:	68f8      	ldr	r0, [r7, #12]
 8009e34:	f000 f814 	bl	8009e60 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009e38:	2204      	movs	r2, #4
 8009e3a:	4908      	ldr	r1, [pc, #32]	; (8009e5c <Get_SerialNum+0x54>)
 8009e3c:	68b8      	ldr	r0, [r7, #8]
 8009e3e:	f000 f80f 	bl	8009e60 <IntToUnicode>
  }
}
 8009e42:	bf00      	nop
 8009e44:	3710      	adds	r7, #16
 8009e46:	46bd      	mov	sp, r7
 8009e48:	bd80      	pop	{r7, pc}
 8009e4a:	bf00      	nop
 8009e4c:	1ffff7ac 	.word	0x1ffff7ac
 8009e50:	1ffff7b0 	.word	0x1ffff7b0
 8009e54:	1ffff7b4 	.word	0x1ffff7b4
 8009e58:	20000162 	.word	0x20000162
 8009e5c:	20000172 	.word	0x20000172

08009e60 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009e60:	b480      	push	{r7}
 8009e62:	b087      	sub	sp, #28
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	60f8      	str	r0, [r7, #12]
 8009e68:	60b9      	str	r1, [r7, #8]
 8009e6a:	4613      	mov	r3, r2
 8009e6c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009e6e:	2300      	movs	r3, #0
 8009e70:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009e72:	2300      	movs	r3, #0
 8009e74:	75fb      	strb	r3, [r7, #23]
 8009e76:	e027      	b.n	8009ec8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	0f1b      	lsrs	r3, r3, #28
 8009e7c:	2b09      	cmp	r3, #9
 8009e7e:	d80b      	bhi.n	8009e98 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	0f1b      	lsrs	r3, r3, #28
 8009e84:	b2da      	uxtb	r2, r3
 8009e86:	7dfb      	ldrb	r3, [r7, #23]
 8009e88:	005b      	lsls	r3, r3, #1
 8009e8a:	4619      	mov	r1, r3
 8009e8c:	68bb      	ldr	r3, [r7, #8]
 8009e8e:	440b      	add	r3, r1
 8009e90:	3230      	adds	r2, #48	; 0x30
 8009e92:	b2d2      	uxtb	r2, r2
 8009e94:	701a      	strb	r2, [r3, #0]
 8009e96:	e00a      	b.n	8009eae <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	0f1b      	lsrs	r3, r3, #28
 8009e9c:	b2da      	uxtb	r2, r3
 8009e9e:	7dfb      	ldrb	r3, [r7, #23]
 8009ea0:	005b      	lsls	r3, r3, #1
 8009ea2:	4619      	mov	r1, r3
 8009ea4:	68bb      	ldr	r3, [r7, #8]
 8009ea6:	440b      	add	r3, r1
 8009ea8:	3237      	adds	r2, #55	; 0x37
 8009eaa:	b2d2      	uxtb	r2, r2
 8009eac:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	011b      	lsls	r3, r3, #4
 8009eb2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009eb4:	7dfb      	ldrb	r3, [r7, #23]
 8009eb6:	005b      	lsls	r3, r3, #1
 8009eb8:	3301      	adds	r3, #1
 8009eba:	68ba      	ldr	r2, [r7, #8]
 8009ebc:	4413      	add	r3, r2
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009ec2:	7dfb      	ldrb	r3, [r7, #23]
 8009ec4:	3301      	adds	r3, #1
 8009ec6:	75fb      	strb	r3, [r7, #23]
 8009ec8:	7dfa      	ldrb	r2, [r7, #23]
 8009eca:	79fb      	ldrb	r3, [r7, #7]
 8009ecc:	429a      	cmp	r2, r3
 8009ece:	d3d3      	bcc.n	8009e78 <IntToUnicode+0x18>
  }
}
 8009ed0:	bf00      	nop
 8009ed2:	bf00      	nop
 8009ed4:	371c      	adds	r7, #28
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009edc:	4770      	bx	lr
	...

08009ee0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b08a      	sub	sp, #40	; 0x28
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009ee8:	f107 0314 	add.w	r3, r7, #20
 8009eec:	2200      	movs	r2, #0
 8009eee:	601a      	str	r2, [r3, #0]
 8009ef0:	605a      	str	r2, [r3, #4]
 8009ef2:	609a      	str	r2, [r3, #8]
 8009ef4:	60da      	str	r2, [r3, #12]
 8009ef6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	4a1c      	ldr	r2, [pc, #112]	; (8009f70 <HAL_PCD_MspInit+0x90>)
 8009efe:	4293      	cmp	r3, r2
 8009f00:	d131      	bne.n	8009f66 <HAL_PCD_MspInit+0x86>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009f02:	4b1c      	ldr	r3, [pc, #112]	; (8009f74 <HAL_PCD_MspInit+0x94>)
 8009f04:	695b      	ldr	r3, [r3, #20]
 8009f06:	4a1b      	ldr	r2, [pc, #108]	; (8009f74 <HAL_PCD_MspInit+0x94>)
 8009f08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f0c:	6153      	str	r3, [r2, #20]
 8009f0e:	4b19      	ldr	r3, [pc, #100]	; (8009f74 <HAL_PCD_MspInit+0x94>)
 8009f10:	695b      	ldr	r3, [r3, #20]
 8009f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f16:	613b      	str	r3, [r7, #16]
 8009f18:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8009f1a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009f1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009f20:	2302      	movs	r3, #2
 8009f22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f24:	2300      	movs	r3, #0
 8009f26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009f28:	2303      	movs	r3, #3
 8009f2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8009f2c:	230e      	movs	r3, #14
 8009f2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009f30:	f107 0314 	add.w	r3, r7, #20
 8009f34:	4619      	mov	r1, r3
 8009f36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009f3a:	f7f7 ff6b 	bl	8001e14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009f3e:	4b0d      	ldr	r3, [pc, #52]	; (8009f74 <HAL_PCD_MspInit+0x94>)
 8009f40:	69db      	ldr	r3, [r3, #28]
 8009f42:	4a0c      	ldr	r2, [pc, #48]	; (8009f74 <HAL_PCD_MspInit+0x94>)
 8009f44:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009f48:	61d3      	str	r3, [r2, #28]
 8009f4a:	4b0a      	ldr	r3, [pc, #40]	; (8009f74 <HAL_PCD_MspInit+0x94>)
 8009f4c:	69db      	ldr	r3, [r3, #28]
 8009f4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009f52:	60fb      	str	r3, [r7, #12]
 8009f54:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 8009f56:	2200      	movs	r2, #0
 8009f58:	2100      	movs	r1, #0
 8009f5a:	2014      	movs	r0, #20
 8009f5c:	f7f7 ff23 	bl	8001da6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8009f60:	2014      	movs	r0, #20
 8009f62:	f7f7 ff3c 	bl	8001dde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009f66:	bf00      	nop
 8009f68:	3728      	adds	r7, #40	; 0x28
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	bd80      	pop	{r7, pc}
 8009f6e:	bf00      	nop
 8009f70:	40005c00 	.word	0x40005c00
 8009f74:	40021000 	.word	0x40021000

08009f78 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b082      	sub	sp, #8
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009f8c:	4619      	mov	r1, r3
 8009f8e:	4610      	mov	r0, r2
 8009f90:	f7fe fd9e 	bl	8008ad0 <USBD_LL_SetupStage>
}
 8009f94:	bf00      	nop
 8009f96:	3708      	adds	r7, #8
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	bd80      	pop	{r7, pc}

08009f9c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b082      	sub	sp, #8
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
 8009fa4:	460b      	mov	r3, r1
 8009fa6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009fae:	78fa      	ldrb	r2, [r7, #3]
 8009fb0:	6879      	ldr	r1, [r7, #4]
 8009fb2:	4613      	mov	r3, r2
 8009fb4:	009b      	lsls	r3, r3, #2
 8009fb6:	4413      	add	r3, r2
 8009fb8:	00db      	lsls	r3, r3, #3
 8009fba:	440b      	add	r3, r1
 8009fbc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009fc0:	681a      	ldr	r2, [r3, #0]
 8009fc2:	78fb      	ldrb	r3, [r7, #3]
 8009fc4:	4619      	mov	r1, r3
 8009fc6:	f7fe fdd0 	bl	8008b6a <USBD_LL_DataOutStage>
}
 8009fca:	bf00      	nop
 8009fcc:	3708      	adds	r7, #8
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	bd80      	pop	{r7, pc}

08009fd2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fd2:	b580      	push	{r7, lr}
 8009fd4:	b082      	sub	sp, #8
 8009fd6:	af00      	add	r7, sp, #0
 8009fd8:	6078      	str	r0, [r7, #4]
 8009fda:	460b      	mov	r3, r1
 8009fdc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009fe4:	78fa      	ldrb	r2, [r7, #3]
 8009fe6:	6879      	ldr	r1, [r7, #4]
 8009fe8:	4613      	mov	r3, r2
 8009fea:	009b      	lsls	r3, r3, #2
 8009fec:	4413      	add	r3, r2
 8009fee:	00db      	lsls	r3, r3, #3
 8009ff0:	440b      	add	r3, r1
 8009ff2:	333c      	adds	r3, #60	; 0x3c
 8009ff4:	681a      	ldr	r2, [r3, #0]
 8009ff6:	78fb      	ldrb	r3, [r7, #3]
 8009ff8:	4619      	mov	r1, r3
 8009ffa:	f7fe fe27 	bl	8008c4c <USBD_LL_DataInStage>
}
 8009ffe:	bf00      	nop
 800a000:	3708      	adds	r7, #8
 800a002:	46bd      	mov	sp, r7
 800a004:	bd80      	pop	{r7, pc}

0800a006 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a006:	b580      	push	{r7, lr}
 800a008:	b082      	sub	sp, #8
 800a00a:	af00      	add	r7, sp, #0
 800a00c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a014:	4618      	mov	r0, r3
 800a016:	f7fe ff3a 	bl	8008e8e <USBD_LL_SOF>
}
 800a01a:	bf00      	nop
 800a01c:	3708      	adds	r7, #8
 800a01e:	46bd      	mov	sp, r7
 800a020:	bd80      	pop	{r7, pc}

0800a022 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a022:	b580      	push	{r7, lr}
 800a024:	b084      	sub	sp, #16
 800a026:	af00      	add	r7, sp, #0
 800a028:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a02a:	2301      	movs	r3, #1
 800a02c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	689b      	ldr	r3, [r3, #8]
 800a032:	2b02      	cmp	r3, #2
 800a034:	d001      	beq.n	800a03a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a036:	f7f7 fb4b 	bl	80016d0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a040:	7bfa      	ldrb	r2, [r7, #15]
 800a042:	4611      	mov	r1, r2
 800a044:	4618      	mov	r0, r3
 800a046:	f7fe fee7 	bl	8008e18 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a050:	4618      	mov	r0, r3
 800a052:	f7fe fea0 	bl	8008d96 <USBD_LL_Reset>
}
 800a056:	bf00      	nop
 800a058:	3710      	adds	r7, #16
 800a05a:	46bd      	mov	sp, r7
 800a05c:	bd80      	pop	{r7, pc}
	...

0800a060 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a060:	b580      	push	{r7, lr}
 800a062:	b082      	sub	sp, #8
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a06e:	4618      	mov	r0, r3
 800a070:	f7fe fee2 	bl	8008e38 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	699b      	ldr	r3, [r3, #24]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d005      	beq.n	800a088 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a07c:	4b04      	ldr	r3, [pc, #16]	; (800a090 <HAL_PCD_SuspendCallback+0x30>)
 800a07e:	691b      	ldr	r3, [r3, #16]
 800a080:	4a03      	ldr	r2, [pc, #12]	; (800a090 <HAL_PCD_SuspendCallback+0x30>)
 800a082:	f043 0306 	orr.w	r3, r3, #6
 800a086:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a088:	bf00      	nop
 800a08a:	3708      	adds	r7, #8
 800a08c:	46bd      	mov	sp, r7
 800a08e:	bd80      	pop	{r7, pc}
 800a090:	e000ed00 	.word	0xe000ed00

0800a094 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b082      	sub	sp, #8
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	f7fe fedd 	bl	8008e62 <USBD_LL_Resume>
}
 800a0a8:	bf00      	nop
 800a0aa:	3708      	adds	r7, #8
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	bd80      	pop	{r7, pc}

0800a0b0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b082      	sub	sp, #8
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a0b8:	4a28      	ldr	r2, [pc, #160]	; (800a15c <USBD_LL_Init+0xac>)
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	4a26      	ldr	r2, [pc, #152]	; (800a15c <USBD_LL_Init+0xac>)
 800a0c4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800a0c8:	4b24      	ldr	r3, [pc, #144]	; (800a15c <USBD_LL_Init+0xac>)
 800a0ca:	4a25      	ldr	r2, [pc, #148]	; (800a160 <USBD_LL_Init+0xb0>)
 800a0cc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a0ce:	4b23      	ldr	r3, [pc, #140]	; (800a15c <USBD_LL_Init+0xac>)
 800a0d0:	2208      	movs	r2, #8
 800a0d2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a0d4:	4b21      	ldr	r3, [pc, #132]	; (800a15c <USBD_LL_Init+0xac>)
 800a0d6:	2202      	movs	r2, #2
 800a0d8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a0da:	4b20      	ldr	r3, [pc, #128]	; (800a15c <USBD_LL_Init+0xac>)
 800a0dc:	2202      	movs	r2, #2
 800a0de:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a0e0:	4b1e      	ldr	r3, [pc, #120]	; (800a15c <USBD_LL_Init+0xac>)
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a0e6:	4b1d      	ldr	r3, [pc, #116]	; (800a15c <USBD_LL_Init+0xac>)
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a0ec:	481b      	ldr	r0, [pc, #108]	; (800a15c <USBD_LL_Init+0xac>)
 800a0ee:	f7f8 fdbc 	bl	8002c6a <HAL_PCD_Init>
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d001      	beq.n	800a0fc <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800a0f8:	f7f7 faea 	bl	80016d0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a102:	2318      	movs	r3, #24
 800a104:	2200      	movs	r2, #0
 800a106:	2100      	movs	r1, #0
 800a108:	f7fa fa57 	bl	80045ba <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a112:	2358      	movs	r3, #88	; 0x58
 800a114:	2200      	movs	r2, #0
 800a116:	2180      	movs	r1, #128	; 0x80
 800a118:	f7fa fa4f 	bl	80045ba <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a122:	23c0      	movs	r3, #192	; 0xc0
 800a124:	2200      	movs	r2, #0
 800a126:	2181      	movs	r1, #129	; 0x81
 800a128:	f7fa fa47 	bl	80045ba <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a132:	f44f 7388 	mov.w	r3, #272	; 0x110
 800a136:	2200      	movs	r2, #0
 800a138:	2101      	movs	r1, #1
 800a13a:	f7fa fa3e 	bl	80045ba <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a144:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a148:	2200      	movs	r2, #0
 800a14a:	2182      	movs	r1, #130	; 0x82
 800a14c:	f7fa fa35 	bl	80045ba <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a150:	2300      	movs	r3, #0
}
 800a152:	4618      	mov	r0, r3
 800a154:	3708      	adds	r7, #8
 800a156:	46bd      	mov	sp, r7
 800a158:	bd80      	pop	{r7, pc}
 800a15a:	bf00      	nop
 800a15c:	20001330 	.word	0x20001330
 800a160:	40005c00 	.word	0x40005c00

0800a164 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a164:	b580      	push	{r7, lr}
 800a166:	b084      	sub	sp, #16
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a16c:	2300      	movs	r3, #0
 800a16e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a170:	2300      	movs	r3, #0
 800a172:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a17a:	4618      	mov	r0, r3
 800a17c:	f7f8 fe53 	bl	8002e26 <HAL_PCD_Start>
 800a180:	4603      	mov	r3, r0
 800a182:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a184:	7bfb      	ldrb	r3, [r7, #15]
 800a186:	4618      	mov	r0, r3
 800a188:	f000 f954 	bl	800a434 <USBD_Get_USB_Status>
 800a18c:	4603      	mov	r3, r0
 800a18e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a190:	7bbb      	ldrb	r3, [r7, #14]
}
 800a192:	4618      	mov	r0, r3
 800a194:	3710      	adds	r7, #16
 800a196:	46bd      	mov	sp, r7
 800a198:	bd80      	pop	{r7, pc}

0800a19a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a19a:	b580      	push	{r7, lr}
 800a19c:	b084      	sub	sp, #16
 800a19e:	af00      	add	r7, sp, #0
 800a1a0:	6078      	str	r0, [r7, #4]
 800a1a2:	4608      	mov	r0, r1
 800a1a4:	4611      	mov	r1, r2
 800a1a6:	461a      	mov	r2, r3
 800a1a8:	4603      	mov	r3, r0
 800a1aa:	70fb      	strb	r3, [r7, #3]
 800a1ac:	460b      	mov	r3, r1
 800a1ae:	70bb      	strb	r3, [r7, #2]
 800a1b0:	4613      	mov	r3, r2
 800a1b2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a1c2:	78bb      	ldrb	r3, [r7, #2]
 800a1c4:	883a      	ldrh	r2, [r7, #0]
 800a1c6:	78f9      	ldrb	r1, [r7, #3]
 800a1c8:	f7f8 ff6f 	bl	80030aa <HAL_PCD_EP_Open>
 800a1cc:	4603      	mov	r3, r0
 800a1ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a1d0:	7bfb      	ldrb	r3, [r7, #15]
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	f000 f92e 	bl	800a434 <USBD_Get_USB_Status>
 800a1d8:	4603      	mov	r3, r0
 800a1da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a1dc:	7bbb      	ldrb	r3, [r7, #14]
}
 800a1de:	4618      	mov	r0, r3
 800a1e0:	3710      	adds	r7, #16
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	bd80      	pop	{r7, pc}

0800a1e6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a1e6:	b580      	push	{r7, lr}
 800a1e8:	b084      	sub	sp, #16
 800a1ea:	af00      	add	r7, sp, #0
 800a1ec:	6078      	str	r0, [r7, #4]
 800a1ee:	460b      	mov	r3, r1
 800a1f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a200:	78fa      	ldrb	r2, [r7, #3]
 800a202:	4611      	mov	r1, r2
 800a204:	4618      	mov	r0, r3
 800a206:	f7f8 ffb6 	bl	8003176 <HAL_PCD_EP_Close>
 800a20a:	4603      	mov	r3, r0
 800a20c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a20e:	7bfb      	ldrb	r3, [r7, #15]
 800a210:	4618      	mov	r0, r3
 800a212:	f000 f90f 	bl	800a434 <USBD_Get_USB_Status>
 800a216:	4603      	mov	r3, r0
 800a218:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a21a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a21c:	4618      	mov	r0, r3
 800a21e:	3710      	adds	r7, #16
 800a220:	46bd      	mov	sp, r7
 800a222:	bd80      	pop	{r7, pc}

0800a224 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b084      	sub	sp, #16
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
 800a22c:	460b      	mov	r3, r1
 800a22e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a230:	2300      	movs	r3, #0
 800a232:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a234:	2300      	movs	r3, #0
 800a236:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a23e:	78fa      	ldrb	r2, [r7, #3]
 800a240:	4611      	mov	r1, r2
 800a242:	4618      	mov	r0, r3
 800a244:	f7f9 f877 	bl	8003336 <HAL_PCD_EP_SetStall>
 800a248:	4603      	mov	r3, r0
 800a24a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a24c:	7bfb      	ldrb	r3, [r7, #15]
 800a24e:	4618      	mov	r0, r3
 800a250:	f000 f8f0 	bl	800a434 <USBD_Get_USB_Status>
 800a254:	4603      	mov	r3, r0
 800a256:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a258:	7bbb      	ldrb	r3, [r7, #14]
}
 800a25a:	4618      	mov	r0, r3
 800a25c:	3710      	adds	r7, #16
 800a25e:	46bd      	mov	sp, r7
 800a260:	bd80      	pop	{r7, pc}

0800a262 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a262:	b580      	push	{r7, lr}
 800a264:	b084      	sub	sp, #16
 800a266:	af00      	add	r7, sp, #0
 800a268:	6078      	str	r0, [r7, #4]
 800a26a:	460b      	mov	r3, r1
 800a26c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a26e:	2300      	movs	r3, #0
 800a270:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a272:	2300      	movs	r3, #0
 800a274:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a27c:	78fa      	ldrb	r2, [r7, #3]
 800a27e:	4611      	mov	r1, r2
 800a280:	4618      	mov	r0, r3
 800a282:	f7f9 f8aa 	bl	80033da <HAL_PCD_EP_ClrStall>
 800a286:	4603      	mov	r3, r0
 800a288:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a28a:	7bfb      	ldrb	r3, [r7, #15]
 800a28c:	4618      	mov	r0, r3
 800a28e:	f000 f8d1 	bl	800a434 <USBD_Get_USB_Status>
 800a292:	4603      	mov	r3, r0
 800a294:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a296:	7bbb      	ldrb	r3, [r7, #14]
}
 800a298:	4618      	mov	r0, r3
 800a29a:	3710      	adds	r7, #16
 800a29c:	46bd      	mov	sp, r7
 800a29e:	bd80      	pop	{r7, pc}

0800a2a0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a2a0:	b480      	push	{r7}
 800a2a2:	b085      	sub	sp, #20
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
 800a2a8:	460b      	mov	r3, r1
 800a2aa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a2b2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a2b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	da0c      	bge.n	800a2d6 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a2bc:	78fb      	ldrb	r3, [r7, #3]
 800a2be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a2c2:	68f9      	ldr	r1, [r7, #12]
 800a2c4:	1c5a      	adds	r2, r3, #1
 800a2c6:	4613      	mov	r3, r2
 800a2c8:	009b      	lsls	r3, r3, #2
 800a2ca:	4413      	add	r3, r2
 800a2cc:	00db      	lsls	r3, r3, #3
 800a2ce:	440b      	add	r3, r1
 800a2d0:	3302      	adds	r3, #2
 800a2d2:	781b      	ldrb	r3, [r3, #0]
 800a2d4:	e00b      	b.n	800a2ee <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a2d6:	78fb      	ldrb	r3, [r7, #3]
 800a2d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a2dc:	68f9      	ldr	r1, [r7, #12]
 800a2de:	4613      	mov	r3, r2
 800a2e0:	009b      	lsls	r3, r3, #2
 800a2e2:	4413      	add	r3, r2
 800a2e4:	00db      	lsls	r3, r3, #3
 800a2e6:	440b      	add	r3, r1
 800a2e8:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800a2ec:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	3714      	adds	r7, #20
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f8:	4770      	bx	lr

0800a2fa <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a2fa:	b580      	push	{r7, lr}
 800a2fc:	b084      	sub	sp, #16
 800a2fe:	af00      	add	r7, sp, #0
 800a300:	6078      	str	r0, [r7, #4]
 800a302:	460b      	mov	r3, r1
 800a304:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a306:	2300      	movs	r3, #0
 800a308:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a30a:	2300      	movs	r3, #0
 800a30c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a314:	78fa      	ldrb	r2, [r7, #3]
 800a316:	4611      	mov	r1, r2
 800a318:	4618      	mov	r0, r3
 800a31a:	f7f8 fea1 	bl	8003060 <HAL_PCD_SetAddress>
 800a31e:	4603      	mov	r3, r0
 800a320:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a322:	7bfb      	ldrb	r3, [r7, #15]
 800a324:	4618      	mov	r0, r3
 800a326:	f000 f885 	bl	800a434 <USBD_Get_USB_Status>
 800a32a:	4603      	mov	r3, r0
 800a32c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a32e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a330:	4618      	mov	r0, r3
 800a332:	3710      	adds	r7, #16
 800a334:	46bd      	mov	sp, r7
 800a336:	bd80      	pop	{r7, pc}

0800a338 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b086      	sub	sp, #24
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	60f8      	str	r0, [r7, #12]
 800a340:	607a      	str	r2, [r7, #4]
 800a342:	461a      	mov	r2, r3
 800a344:	460b      	mov	r3, r1
 800a346:	72fb      	strb	r3, [r7, #11]
 800a348:	4613      	mov	r3, r2
 800a34a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a34c:	2300      	movs	r3, #0
 800a34e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a350:	2300      	movs	r3, #0
 800a352:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a35a:	893b      	ldrh	r3, [r7, #8]
 800a35c:	7af9      	ldrb	r1, [r7, #11]
 800a35e:	687a      	ldr	r2, [r7, #4]
 800a360:	f7f8 ffa6 	bl	80032b0 <HAL_PCD_EP_Transmit>
 800a364:	4603      	mov	r3, r0
 800a366:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a368:	7dfb      	ldrb	r3, [r7, #23]
 800a36a:	4618      	mov	r0, r3
 800a36c:	f000 f862 	bl	800a434 <USBD_Get_USB_Status>
 800a370:	4603      	mov	r3, r0
 800a372:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a374:	7dbb      	ldrb	r3, [r7, #22]
}
 800a376:	4618      	mov	r0, r3
 800a378:	3718      	adds	r7, #24
 800a37a:	46bd      	mov	sp, r7
 800a37c:	bd80      	pop	{r7, pc}

0800a37e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a37e:	b580      	push	{r7, lr}
 800a380:	b086      	sub	sp, #24
 800a382:	af00      	add	r7, sp, #0
 800a384:	60f8      	str	r0, [r7, #12]
 800a386:	607a      	str	r2, [r7, #4]
 800a388:	461a      	mov	r2, r3
 800a38a:	460b      	mov	r3, r1
 800a38c:	72fb      	strb	r3, [r7, #11]
 800a38e:	4613      	mov	r3, r2
 800a390:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a392:	2300      	movs	r3, #0
 800a394:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a396:	2300      	movs	r3, #0
 800a398:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a3a0:	893b      	ldrh	r3, [r7, #8]
 800a3a2:	7af9      	ldrb	r1, [r7, #11]
 800a3a4:	687a      	ldr	r2, [r7, #4]
 800a3a6:	f7f8 ff2e 	bl	8003206 <HAL_PCD_EP_Receive>
 800a3aa:	4603      	mov	r3, r0
 800a3ac:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a3ae:	7dfb      	ldrb	r3, [r7, #23]
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	f000 f83f 	bl	800a434 <USBD_Get_USB_Status>
 800a3b6:	4603      	mov	r3, r0
 800a3b8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a3ba:	7dbb      	ldrb	r3, [r7, #22]
}
 800a3bc:	4618      	mov	r0, r3
 800a3be:	3718      	adds	r7, #24
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	bd80      	pop	{r7, pc}

0800a3c4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b082      	sub	sp, #8
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
 800a3cc:	460b      	mov	r3, r1
 800a3ce:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a3d6:	78fa      	ldrb	r2, [r7, #3]
 800a3d8:	4611      	mov	r1, r2
 800a3da:	4618      	mov	r0, r3
 800a3dc:	f7f8 ff50 	bl	8003280 <HAL_PCD_EP_GetRxCount>
 800a3e0:	4603      	mov	r3, r0
}
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	3708      	adds	r7, #8
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	bd80      	pop	{r7, pc}
	...

0800a3ec <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a3ec:	b480      	push	{r7}
 800a3ee:	b083      	sub	sp, #12
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a3f4:	4b03      	ldr	r3, [pc, #12]	; (800a404 <USBD_static_malloc+0x18>)
}
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	370c      	adds	r7, #12
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a400:	4770      	bx	lr
 800a402:	bf00      	nop
 800a404:	20000374 	.word	0x20000374

0800a408 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a408:	b480      	push	{r7}
 800a40a:	b083      	sub	sp, #12
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]

}
 800a410:	bf00      	nop
 800a412:	370c      	adds	r7, #12
 800a414:	46bd      	mov	sp, r7
 800a416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41a:	4770      	bx	lr

0800a41c <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a41c:	b480      	push	{r7}
 800a41e:	b083      	sub	sp, #12
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
 800a424:	460b      	mov	r3, r1
 800a426:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800a428:	bf00      	nop
 800a42a:	370c      	adds	r7, #12
 800a42c:	46bd      	mov	sp, r7
 800a42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a432:	4770      	bx	lr

0800a434 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a434:	b480      	push	{r7}
 800a436:	b085      	sub	sp, #20
 800a438:	af00      	add	r7, sp, #0
 800a43a:	4603      	mov	r3, r0
 800a43c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a43e:	2300      	movs	r3, #0
 800a440:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a442:	79fb      	ldrb	r3, [r7, #7]
 800a444:	2b03      	cmp	r3, #3
 800a446:	d817      	bhi.n	800a478 <USBD_Get_USB_Status+0x44>
 800a448:	a201      	add	r2, pc, #4	; (adr r2, 800a450 <USBD_Get_USB_Status+0x1c>)
 800a44a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a44e:	bf00      	nop
 800a450:	0800a461 	.word	0x0800a461
 800a454:	0800a467 	.word	0x0800a467
 800a458:	0800a46d 	.word	0x0800a46d
 800a45c:	0800a473 	.word	0x0800a473
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a460:	2300      	movs	r3, #0
 800a462:	73fb      	strb	r3, [r7, #15]
    break;
 800a464:	e00b      	b.n	800a47e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a466:	2302      	movs	r3, #2
 800a468:	73fb      	strb	r3, [r7, #15]
    break;
 800a46a:	e008      	b.n	800a47e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a46c:	2301      	movs	r3, #1
 800a46e:	73fb      	strb	r3, [r7, #15]
    break;
 800a470:	e005      	b.n	800a47e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a472:	2302      	movs	r3, #2
 800a474:	73fb      	strb	r3, [r7, #15]
    break;
 800a476:	e002      	b.n	800a47e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a478:	2302      	movs	r3, #2
 800a47a:	73fb      	strb	r3, [r7, #15]
    break;
 800a47c:	bf00      	nop
  }
  return usb_status;
 800a47e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a480:	4618      	mov	r0, r3
 800a482:	3714      	adds	r7, #20
 800a484:	46bd      	mov	sp, r7
 800a486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48a:	4770      	bx	lr

0800a48c <__errno>:
 800a48c:	4b01      	ldr	r3, [pc, #4]	; (800a494 <__errno+0x8>)
 800a48e:	6818      	ldr	r0, [r3, #0]
 800a490:	4770      	bx	lr
 800a492:	bf00      	nop
 800a494:	2000017c 	.word	0x2000017c

0800a498 <__libc_init_array>:
 800a498:	b570      	push	{r4, r5, r6, lr}
 800a49a:	4d0d      	ldr	r5, [pc, #52]	; (800a4d0 <__libc_init_array+0x38>)
 800a49c:	4c0d      	ldr	r4, [pc, #52]	; (800a4d4 <__libc_init_array+0x3c>)
 800a49e:	1b64      	subs	r4, r4, r5
 800a4a0:	10a4      	asrs	r4, r4, #2
 800a4a2:	2600      	movs	r6, #0
 800a4a4:	42a6      	cmp	r6, r4
 800a4a6:	d109      	bne.n	800a4bc <__libc_init_array+0x24>
 800a4a8:	4d0b      	ldr	r5, [pc, #44]	; (800a4d8 <__libc_init_array+0x40>)
 800a4aa:	4c0c      	ldr	r4, [pc, #48]	; (800a4dc <__libc_init_array+0x44>)
 800a4ac:	f003 fe9e 	bl	800e1ec <_init>
 800a4b0:	1b64      	subs	r4, r4, r5
 800a4b2:	10a4      	asrs	r4, r4, #2
 800a4b4:	2600      	movs	r6, #0
 800a4b6:	42a6      	cmp	r6, r4
 800a4b8:	d105      	bne.n	800a4c6 <__libc_init_array+0x2e>
 800a4ba:	bd70      	pop	{r4, r5, r6, pc}
 800a4bc:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4c0:	4798      	blx	r3
 800a4c2:	3601      	adds	r6, #1
 800a4c4:	e7ee      	b.n	800a4a4 <__libc_init_array+0xc>
 800a4c6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4ca:	4798      	blx	r3
 800a4cc:	3601      	adds	r6, #1
 800a4ce:	e7f2      	b.n	800a4b6 <__libc_init_array+0x1e>
 800a4d0:	0800e720 	.word	0x0800e720
 800a4d4:	0800e720 	.word	0x0800e720
 800a4d8:	0800e720 	.word	0x0800e720
 800a4dc:	0800e724 	.word	0x0800e724

0800a4e0 <memset>:
 800a4e0:	4402      	add	r2, r0
 800a4e2:	4603      	mov	r3, r0
 800a4e4:	4293      	cmp	r3, r2
 800a4e6:	d100      	bne.n	800a4ea <memset+0xa>
 800a4e8:	4770      	bx	lr
 800a4ea:	f803 1b01 	strb.w	r1, [r3], #1
 800a4ee:	e7f9      	b.n	800a4e4 <memset+0x4>

0800a4f0 <__cvt>:
 800a4f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a4f4:	ec55 4b10 	vmov	r4, r5, d0
 800a4f8:	2d00      	cmp	r5, #0
 800a4fa:	460e      	mov	r6, r1
 800a4fc:	4619      	mov	r1, r3
 800a4fe:	462b      	mov	r3, r5
 800a500:	bfbb      	ittet	lt
 800a502:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a506:	461d      	movlt	r5, r3
 800a508:	2300      	movge	r3, #0
 800a50a:	232d      	movlt	r3, #45	; 0x2d
 800a50c:	700b      	strb	r3, [r1, #0]
 800a50e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a510:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a514:	4691      	mov	r9, r2
 800a516:	f023 0820 	bic.w	r8, r3, #32
 800a51a:	bfbc      	itt	lt
 800a51c:	4622      	movlt	r2, r4
 800a51e:	4614      	movlt	r4, r2
 800a520:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a524:	d005      	beq.n	800a532 <__cvt+0x42>
 800a526:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a52a:	d100      	bne.n	800a52e <__cvt+0x3e>
 800a52c:	3601      	adds	r6, #1
 800a52e:	2102      	movs	r1, #2
 800a530:	e000      	b.n	800a534 <__cvt+0x44>
 800a532:	2103      	movs	r1, #3
 800a534:	ab03      	add	r3, sp, #12
 800a536:	9301      	str	r3, [sp, #4]
 800a538:	ab02      	add	r3, sp, #8
 800a53a:	9300      	str	r3, [sp, #0]
 800a53c:	ec45 4b10 	vmov	d0, r4, r5
 800a540:	4653      	mov	r3, sl
 800a542:	4632      	mov	r2, r6
 800a544:	f000 fcec 	bl	800af20 <_dtoa_r>
 800a548:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a54c:	4607      	mov	r7, r0
 800a54e:	d102      	bne.n	800a556 <__cvt+0x66>
 800a550:	f019 0f01 	tst.w	r9, #1
 800a554:	d022      	beq.n	800a59c <__cvt+0xac>
 800a556:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a55a:	eb07 0906 	add.w	r9, r7, r6
 800a55e:	d110      	bne.n	800a582 <__cvt+0x92>
 800a560:	783b      	ldrb	r3, [r7, #0]
 800a562:	2b30      	cmp	r3, #48	; 0x30
 800a564:	d10a      	bne.n	800a57c <__cvt+0x8c>
 800a566:	2200      	movs	r2, #0
 800a568:	2300      	movs	r3, #0
 800a56a:	4620      	mov	r0, r4
 800a56c:	4629      	mov	r1, r5
 800a56e:	f7f6 faab 	bl	8000ac8 <__aeabi_dcmpeq>
 800a572:	b918      	cbnz	r0, 800a57c <__cvt+0x8c>
 800a574:	f1c6 0601 	rsb	r6, r6, #1
 800a578:	f8ca 6000 	str.w	r6, [sl]
 800a57c:	f8da 3000 	ldr.w	r3, [sl]
 800a580:	4499      	add	r9, r3
 800a582:	2200      	movs	r2, #0
 800a584:	2300      	movs	r3, #0
 800a586:	4620      	mov	r0, r4
 800a588:	4629      	mov	r1, r5
 800a58a:	f7f6 fa9d 	bl	8000ac8 <__aeabi_dcmpeq>
 800a58e:	b108      	cbz	r0, 800a594 <__cvt+0xa4>
 800a590:	f8cd 900c 	str.w	r9, [sp, #12]
 800a594:	2230      	movs	r2, #48	; 0x30
 800a596:	9b03      	ldr	r3, [sp, #12]
 800a598:	454b      	cmp	r3, r9
 800a59a:	d307      	bcc.n	800a5ac <__cvt+0xbc>
 800a59c:	9b03      	ldr	r3, [sp, #12]
 800a59e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a5a0:	1bdb      	subs	r3, r3, r7
 800a5a2:	4638      	mov	r0, r7
 800a5a4:	6013      	str	r3, [r2, #0]
 800a5a6:	b004      	add	sp, #16
 800a5a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5ac:	1c59      	adds	r1, r3, #1
 800a5ae:	9103      	str	r1, [sp, #12]
 800a5b0:	701a      	strb	r2, [r3, #0]
 800a5b2:	e7f0      	b.n	800a596 <__cvt+0xa6>

0800a5b4 <__exponent>:
 800a5b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	2900      	cmp	r1, #0
 800a5ba:	bfb8      	it	lt
 800a5bc:	4249      	neglt	r1, r1
 800a5be:	f803 2b02 	strb.w	r2, [r3], #2
 800a5c2:	bfb4      	ite	lt
 800a5c4:	222d      	movlt	r2, #45	; 0x2d
 800a5c6:	222b      	movge	r2, #43	; 0x2b
 800a5c8:	2909      	cmp	r1, #9
 800a5ca:	7042      	strb	r2, [r0, #1]
 800a5cc:	dd2a      	ble.n	800a624 <__exponent+0x70>
 800a5ce:	f10d 0407 	add.w	r4, sp, #7
 800a5d2:	46a4      	mov	ip, r4
 800a5d4:	270a      	movs	r7, #10
 800a5d6:	46a6      	mov	lr, r4
 800a5d8:	460a      	mov	r2, r1
 800a5da:	fb91 f6f7 	sdiv	r6, r1, r7
 800a5de:	fb07 1516 	mls	r5, r7, r6, r1
 800a5e2:	3530      	adds	r5, #48	; 0x30
 800a5e4:	2a63      	cmp	r2, #99	; 0x63
 800a5e6:	f104 34ff 	add.w	r4, r4, #4294967295
 800a5ea:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a5ee:	4631      	mov	r1, r6
 800a5f0:	dcf1      	bgt.n	800a5d6 <__exponent+0x22>
 800a5f2:	3130      	adds	r1, #48	; 0x30
 800a5f4:	f1ae 0502 	sub.w	r5, lr, #2
 800a5f8:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a5fc:	1c44      	adds	r4, r0, #1
 800a5fe:	4629      	mov	r1, r5
 800a600:	4561      	cmp	r1, ip
 800a602:	d30a      	bcc.n	800a61a <__exponent+0x66>
 800a604:	f10d 0209 	add.w	r2, sp, #9
 800a608:	eba2 020e 	sub.w	r2, r2, lr
 800a60c:	4565      	cmp	r5, ip
 800a60e:	bf88      	it	hi
 800a610:	2200      	movhi	r2, #0
 800a612:	4413      	add	r3, r2
 800a614:	1a18      	subs	r0, r3, r0
 800a616:	b003      	add	sp, #12
 800a618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a61a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a61e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a622:	e7ed      	b.n	800a600 <__exponent+0x4c>
 800a624:	2330      	movs	r3, #48	; 0x30
 800a626:	3130      	adds	r1, #48	; 0x30
 800a628:	7083      	strb	r3, [r0, #2]
 800a62a:	70c1      	strb	r1, [r0, #3]
 800a62c:	1d03      	adds	r3, r0, #4
 800a62e:	e7f1      	b.n	800a614 <__exponent+0x60>

0800a630 <_printf_float>:
 800a630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a634:	ed2d 8b02 	vpush	{d8}
 800a638:	b08d      	sub	sp, #52	; 0x34
 800a63a:	460c      	mov	r4, r1
 800a63c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a640:	4616      	mov	r6, r2
 800a642:	461f      	mov	r7, r3
 800a644:	4605      	mov	r5, r0
 800a646:	f001 fa57 	bl	800baf8 <_localeconv_r>
 800a64a:	f8d0 a000 	ldr.w	sl, [r0]
 800a64e:	4650      	mov	r0, sl
 800a650:	f7f5 fdbe 	bl	80001d0 <strlen>
 800a654:	2300      	movs	r3, #0
 800a656:	930a      	str	r3, [sp, #40]	; 0x28
 800a658:	6823      	ldr	r3, [r4, #0]
 800a65a:	9305      	str	r3, [sp, #20]
 800a65c:	f8d8 3000 	ldr.w	r3, [r8]
 800a660:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a664:	3307      	adds	r3, #7
 800a666:	f023 0307 	bic.w	r3, r3, #7
 800a66a:	f103 0208 	add.w	r2, r3, #8
 800a66e:	f8c8 2000 	str.w	r2, [r8]
 800a672:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a676:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a67a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a67e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a682:	9307      	str	r3, [sp, #28]
 800a684:	f8cd 8018 	str.w	r8, [sp, #24]
 800a688:	ee08 0a10 	vmov	s16, r0
 800a68c:	4b9f      	ldr	r3, [pc, #636]	; (800a90c <_printf_float+0x2dc>)
 800a68e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a692:	f04f 32ff 	mov.w	r2, #4294967295
 800a696:	f7f6 fa49 	bl	8000b2c <__aeabi_dcmpun>
 800a69a:	bb88      	cbnz	r0, 800a700 <_printf_float+0xd0>
 800a69c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a6a0:	4b9a      	ldr	r3, [pc, #616]	; (800a90c <_printf_float+0x2dc>)
 800a6a2:	f04f 32ff 	mov.w	r2, #4294967295
 800a6a6:	f7f6 fa23 	bl	8000af0 <__aeabi_dcmple>
 800a6aa:	bb48      	cbnz	r0, 800a700 <_printf_float+0xd0>
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	4640      	mov	r0, r8
 800a6b2:	4649      	mov	r1, r9
 800a6b4:	f7f6 fa12 	bl	8000adc <__aeabi_dcmplt>
 800a6b8:	b110      	cbz	r0, 800a6c0 <_printf_float+0x90>
 800a6ba:	232d      	movs	r3, #45	; 0x2d
 800a6bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a6c0:	4b93      	ldr	r3, [pc, #588]	; (800a910 <_printf_float+0x2e0>)
 800a6c2:	4894      	ldr	r0, [pc, #592]	; (800a914 <_printf_float+0x2e4>)
 800a6c4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a6c8:	bf94      	ite	ls
 800a6ca:	4698      	movls	r8, r3
 800a6cc:	4680      	movhi	r8, r0
 800a6ce:	2303      	movs	r3, #3
 800a6d0:	6123      	str	r3, [r4, #16]
 800a6d2:	9b05      	ldr	r3, [sp, #20]
 800a6d4:	f023 0204 	bic.w	r2, r3, #4
 800a6d8:	6022      	str	r2, [r4, #0]
 800a6da:	f04f 0900 	mov.w	r9, #0
 800a6de:	9700      	str	r7, [sp, #0]
 800a6e0:	4633      	mov	r3, r6
 800a6e2:	aa0b      	add	r2, sp, #44	; 0x2c
 800a6e4:	4621      	mov	r1, r4
 800a6e6:	4628      	mov	r0, r5
 800a6e8:	f000 f9d8 	bl	800aa9c <_printf_common>
 800a6ec:	3001      	adds	r0, #1
 800a6ee:	f040 8090 	bne.w	800a812 <_printf_float+0x1e2>
 800a6f2:	f04f 30ff 	mov.w	r0, #4294967295
 800a6f6:	b00d      	add	sp, #52	; 0x34
 800a6f8:	ecbd 8b02 	vpop	{d8}
 800a6fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a700:	4642      	mov	r2, r8
 800a702:	464b      	mov	r3, r9
 800a704:	4640      	mov	r0, r8
 800a706:	4649      	mov	r1, r9
 800a708:	f7f6 fa10 	bl	8000b2c <__aeabi_dcmpun>
 800a70c:	b140      	cbz	r0, 800a720 <_printf_float+0xf0>
 800a70e:	464b      	mov	r3, r9
 800a710:	2b00      	cmp	r3, #0
 800a712:	bfbc      	itt	lt
 800a714:	232d      	movlt	r3, #45	; 0x2d
 800a716:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a71a:	487f      	ldr	r0, [pc, #508]	; (800a918 <_printf_float+0x2e8>)
 800a71c:	4b7f      	ldr	r3, [pc, #508]	; (800a91c <_printf_float+0x2ec>)
 800a71e:	e7d1      	b.n	800a6c4 <_printf_float+0x94>
 800a720:	6863      	ldr	r3, [r4, #4]
 800a722:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a726:	9206      	str	r2, [sp, #24]
 800a728:	1c5a      	adds	r2, r3, #1
 800a72a:	d13f      	bne.n	800a7ac <_printf_float+0x17c>
 800a72c:	2306      	movs	r3, #6
 800a72e:	6063      	str	r3, [r4, #4]
 800a730:	9b05      	ldr	r3, [sp, #20]
 800a732:	6861      	ldr	r1, [r4, #4]
 800a734:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a738:	2300      	movs	r3, #0
 800a73a:	9303      	str	r3, [sp, #12]
 800a73c:	ab0a      	add	r3, sp, #40	; 0x28
 800a73e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a742:	ab09      	add	r3, sp, #36	; 0x24
 800a744:	ec49 8b10 	vmov	d0, r8, r9
 800a748:	9300      	str	r3, [sp, #0]
 800a74a:	6022      	str	r2, [r4, #0]
 800a74c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a750:	4628      	mov	r0, r5
 800a752:	f7ff fecd 	bl	800a4f0 <__cvt>
 800a756:	9b06      	ldr	r3, [sp, #24]
 800a758:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a75a:	2b47      	cmp	r3, #71	; 0x47
 800a75c:	4680      	mov	r8, r0
 800a75e:	d108      	bne.n	800a772 <_printf_float+0x142>
 800a760:	1cc8      	adds	r0, r1, #3
 800a762:	db02      	blt.n	800a76a <_printf_float+0x13a>
 800a764:	6863      	ldr	r3, [r4, #4]
 800a766:	4299      	cmp	r1, r3
 800a768:	dd41      	ble.n	800a7ee <_printf_float+0x1be>
 800a76a:	f1ab 0b02 	sub.w	fp, fp, #2
 800a76e:	fa5f fb8b 	uxtb.w	fp, fp
 800a772:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a776:	d820      	bhi.n	800a7ba <_printf_float+0x18a>
 800a778:	3901      	subs	r1, #1
 800a77a:	465a      	mov	r2, fp
 800a77c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a780:	9109      	str	r1, [sp, #36]	; 0x24
 800a782:	f7ff ff17 	bl	800a5b4 <__exponent>
 800a786:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a788:	1813      	adds	r3, r2, r0
 800a78a:	2a01      	cmp	r2, #1
 800a78c:	4681      	mov	r9, r0
 800a78e:	6123      	str	r3, [r4, #16]
 800a790:	dc02      	bgt.n	800a798 <_printf_float+0x168>
 800a792:	6822      	ldr	r2, [r4, #0]
 800a794:	07d2      	lsls	r2, r2, #31
 800a796:	d501      	bpl.n	800a79c <_printf_float+0x16c>
 800a798:	3301      	adds	r3, #1
 800a79a:	6123      	str	r3, [r4, #16]
 800a79c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d09c      	beq.n	800a6de <_printf_float+0xae>
 800a7a4:	232d      	movs	r3, #45	; 0x2d
 800a7a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a7aa:	e798      	b.n	800a6de <_printf_float+0xae>
 800a7ac:	9a06      	ldr	r2, [sp, #24]
 800a7ae:	2a47      	cmp	r2, #71	; 0x47
 800a7b0:	d1be      	bne.n	800a730 <_printf_float+0x100>
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d1bc      	bne.n	800a730 <_printf_float+0x100>
 800a7b6:	2301      	movs	r3, #1
 800a7b8:	e7b9      	b.n	800a72e <_printf_float+0xfe>
 800a7ba:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a7be:	d118      	bne.n	800a7f2 <_printf_float+0x1c2>
 800a7c0:	2900      	cmp	r1, #0
 800a7c2:	6863      	ldr	r3, [r4, #4]
 800a7c4:	dd0b      	ble.n	800a7de <_printf_float+0x1ae>
 800a7c6:	6121      	str	r1, [r4, #16]
 800a7c8:	b913      	cbnz	r3, 800a7d0 <_printf_float+0x1a0>
 800a7ca:	6822      	ldr	r2, [r4, #0]
 800a7cc:	07d0      	lsls	r0, r2, #31
 800a7ce:	d502      	bpl.n	800a7d6 <_printf_float+0x1a6>
 800a7d0:	3301      	adds	r3, #1
 800a7d2:	440b      	add	r3, r1
 800a7d4:	6123      	str	r3, [r4, #16]
 800a7d6:	65a1      	str	r1, [r4, #88]	; 0x58
 800a7d8:	f04f 0900 	mov.w	r9, #0
 800a7dc:	e7de      	b.n	800a79c <_printf_float+0x16c>
 800a7de:	b913      	cbnz	r3, 800a7e6 <_printf_float+0x1b6>
 800a7e0:	6822      	ldr	r2, [r4, #0]
 800a7e2:	07d2      	lsls	r2, r2, #31
 800a7e4:	d501      	bpl.n	800a7ea <_printf_float+0x1ba>
 800a7e6:	3302      	adds	r3, #2
 800a7e8:	e7f4      	b.n	800a7d4 <_printf_float+0x1a4>
 800a7ea:	2301      	movs	r3, #1
 800a7ec:	e7f2      	b.n	800a7d4 <_printf_float+0x1a4>
 800a7ee:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a7f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7f4:	4299      	cmp	r1, r3
 800a7f6:	db05      	blt.n	800a804 <_printf_float+0x1d4>
 800a7f8:	6823      	ldr	r3, [r4, #0]
 800a7fa:	6121      	str	r1, [r4, #16]
 800a7fc:	07d8      	lsls	r0, r3, #31
 800a7fe:	d5ea      	bpl.n	800a7d6 <_printf_float+0x1a6>
 800a800:	1c4b      	adds	r3, r1, #1
 800a802:	e7e7      	b.n	800a7d4 <_printf_float+0x1a4>
 800a804:	2900      	cmp	r1, #0
 800a806:	bfd4      	ite	le
 800a808:	f1c1 0202 	rsble	r2, r1, #2
 800a80c:	2201      	movgt	r2, #1
 800a80e:	4413      	add	r3, r2
 800a810:	e7e0      	b.n	800a7d4 <_printf_float+0x1a4>
 800a812:	6823      	ldr	r3, [r4, #0]
 800a814:	055a      	lsls	r2, r3, #21
 800a816:	d407      	bmi.n	800a828 <_printf_float+0x1f8>
 800a818:	6923      	ldr	r3, [r4, #16]
 800a81a:	4642      	mov	r2, r8
 800a81c:	4631      	mov	r1, r6
 800a81e:	4628      	mov	r0, r5
 800a820:	47b8      	blx	r7
 800a822:	3001      	adds	r0, #1
 800a824:	d12c      	bne.n	800a880 <_printf_float+0x250>
 800a826:	e764      	b.n	800a6f2 <_printf_float+0xc2>
 800a828:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a82c:	f240 80e0 	bls.w	800a9f0 <_printf_float+0x3c0>
 800a830:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a834:	2200      	movs	r2, #0
 800a836:	2300      	movs	r3, #0
 800a838:	f7f6 f946 	bl	8000ac8 <__aeabi_dcmpeq>
 800a83c:	2800      	cmp	r0, #0
 800a83e:	d034      	beq.n	800a8aa <_printf_float+0x27a>
 800a840:	4a37      	ldr	r2, [pc, #220]	; (800a920 <_printf_float+0x2f0>)
 800a842:	2301      	movs	r3, #1
 800a844:	4631      	mov	r1, r6
 800a846:	4628      	mov	r0, r5
 800a848:	47b8      	blx	r7
 800a84a:	3001      	adds	r0, #1
 800a84c:	f43f af51 	beq.w	800a6f2 <_printf_float+0xc2>
 800a850:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a854:	429a      	cmp	r2, r3
 800a856:	db02      	blt.n	800a85e <_printf_float+0x22e>
 800a858:	6823      	ldr	r3, [r4, #0]
 800a85a:	07d8      	lsls	r0, r3, #31
 800a85c:	d510      	bpl.n	800a880 <_printf_float+0x250>
 800a85e:	ee18 3a10 	vmov	r3, s16
 800a862:	4652      	mov	r2, sl
 800a864:	4631      	mov	r1, r6
 800a866:	4628      	mov	r0, r5
 800a868:	47b8      	blx	r7
 800a86a:	3001      	adds	r0, #1
 800a86c:	f43f af41 	beq.w	800a6f2 <_printf_float+0xc2>
 800a870:	f04f 0800 	mov.w	r8, #0
 800a874:	f104 091a 	add.w	r9, r4, #26
 800a878:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a87a:	3b01      	subs	r3, #1
 800a87c:	4543      	cmp	r3, r8
 800a87e:	dc09      	bgt.n	800a894 <_printf_float+0x264>
 800a880:	6823      	ldr	r3, [r4, #0]
 800a882:	079b      	lsls	r3, r3, #30
 800a884:	f100 8105 	bmi.w	800aa92 <_printf_float+0x462>
 800a888:	68e0      	ldr	r0, [r4, #12]
 800a88a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a88c:	4298      	cmp	r0, r3
 800a88e:	bfb8      	it	lt
 800a890:	4618      	movlt	r0, r3
 800a892:	e730      	b.n	800a6f6 <_printf_float+0xc6>
 800a894:	2301      	movs	r3, #1
 800a896:	464a      	mov	r2, r9
 800a898:	4631      	mov	r1, r6
 800a89a:	4628      	mov	r0, r5
 800a89c:	47b8      	blx	r7
 800a89e:	3001      	adds	r0, #1
 800a8a0:	f43f af27 	beq.w	800a6f2 <_printf_float+0xc2>
 800a8a4:	f108 0801 	add.w	r8, r8, #1
 800a8a8:	e7e6      	b.n	800a878 <_printf_float+0x248>
 800a8aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	dc39      	bgt.n	800a924 <_printf_float+0x2f4>
 800a8b0:	4a1b      	ldr	r2, [pc, #108]	; (800a920 <_printf_float+0x2f0>)
 800a8b2:	2301      	movs	r3, #1
 800a8b4:	4631      	mov	r1, r6
 800a8b6:	4628      	mov	r0, r5
 800a8b8:	47b8      	blx	r7
 800a8ba:	3001      	adds	r0, #1
 800a8bc:	f43f af19 	beq.w	800a6f2 <_printf_float+0xc2>
 800a8c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a8c4:	4313      	orrs	r3, r2
 800a8c6:	d102      	bne.n	800a8ce <_printf_float+0x29e>
 800a8c8:	6823      	ldr	r3, [r4, #0]
 800a8ca:	07d9      	lsls	r1, r3, #31
 800a8cc:	d5d8      	bpl.n	800a880 <_printf_float+0x250>
 800a8ce:	ee18 3a10 	vmov	r3, s16
 800a8d2:	4652      	mov	r2, sl
 800a8d4:	4631      	mov	r1, r6
 800a8d6:	4628      	mov	r0, r5
 800a8d8:	47b8      	blx	r7
 800a8da:	3001      	adds	r0, #1
 800a8dc:	f43f af09 	beq.w	800a6f2 <_printf_float+0xc2>
 800a8e0:	f04f 0900 	mov.w	r9, #0
 800a8e4:	f104 0a1a 	add.w	sl, r4, #26
 800a8e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8ea:	425b      	negs	r3, r3
 800a8ec:	454b      	cmp	r3, r9
 800a8ee:	dc01      	bgt.n	800a8f4 <_printf_float+0x2c4>
 800a8f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8f2:	e792      	b.n	800a81a <_printf_float+0x1ea>
 800a8f4:	2301      	movs	r3, #1
 800a8f6:	4652      	mov	r2, sl
 800a8f8:	4631      	mov	r1, r6
 800a8fa:	4628      	mov	r0, r5
 800a8fc:	47b8      	blx	r7
 800a8fe:	3001      	adds	r0, #1
 800a900:	f43f aef7 	beq.w	800a6f2 <_printf_float+0xc2>
 800a904:	f109 0901 	add.w	r9, r9, #1
 800a908:	e7ee      	b.n	800a8e8 <_printf_float+0x2b8>
 800a90a:	bf00      	nop
 800a90c:	7fefffff 	.word	0x7fefffff
 800a910:	0800e2fc 	.word	0x0800e2fc
 800a914:	0800e300 	.word	0x0800e300
 800a918:	0800e308 	.word	0x0800e308
 800a91c:	0800e304 	.word	0x0800e304
 800a920:	0800e30c 	.word	0x0800e30c
 800a924:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a926:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a928:	429a      	cmp	r2, r3
 800a92a:	bfa8      	it	ge
 800a92c:	461a      	movge	r2, r3
 800a92e:	2a00      	cmp	r2, #0
 800a930:	4691      	mov	r9, r2
 800a932:	dc37      	bgt.n	800a9a4 <_printf_float+0x374>
 800a934:	f04f 0b00 	mov.w	fp, #0
 800a938:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a93c:	f104 021a 	add.w	r2, r4, #26
 800a940:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a942:	9305      	str	r3, [sp, #20]
 800a944:	eba3 0309 	sub.w	r3, r3, r9
 800a948:	455b      	cmp	r3, fp
 800a94a:	dc33      	bgt.n	800a9b4 <_printf_float+0x384>
 800a94c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a950:	429a      	cmp	r2, r3
 800a952:	db3b      	blt.n	800a9cc <_printf_float+0x39c>
 800a954:	6823      	ldr	r3, [r4, #0]
 800a956:	07da      	lsls	r2, r3, #31
 800a958:	d438      	bmi.n	800a9cc <_printf_float+0x39c>
 800a95a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a95c:	9b05      	ldr	r3, [sp, #20]
 800a95e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a960:	1ad3      	subs	r3, r2, r3
 800a962:	eba2 0901 	sub.w	r9, r2, r1
 800a966:	4599      	cmp	r9, r3
 800a968:	bfa8      	it	ge
 800a96a:	4699      	movge	r9, r3
 800a96c:	f1b9 0f00 	cmp.w	r9, #0
 800a970:	dc35      	bgt.n	800a9de <_printf_float+0x3ae>
 800a972:	f04f 0800 	mov.w	r8, #0
 800a976:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a97a:	f104 0a1a 	add.w	sl, r4, #26
 800a97e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a982:	1a9b      	subs	r3, r3, r2
 800a984:	eba3 0309 	sub.w	r3, r3, r9
 800a988:	4543      	cmp	r3, r8
 800a98a:	f77f af79 	ble.w	800a880 <_printf_float+0x250>
 800a98e:	2301      	movs	r3, #1
 800a990:	4652      	mov	r2, sl
 800a992:	4631      	mov	r1, r6
 800a994:	4628      	mov	r0, r5
 800a996:	47b8      	blx	r7
 800a998:	3001      	adds	r0, #1
 800a99a:	f43f aeaa 	beq.w	800a6f2 <_printf_float+0xc2>
 800a99e:	f108 0801 	add.w	r8, r8, #1
 800a9a2:	e7ec      	b.n	800a97e <_printf_float+0x34e>
 800a9a4:	4613      	mov	r3, r2
 800a9a6:	4631      	mov	r1, r6
 800a9a8:	4642      	mov	r2, r8
 800a9aa:	4628      	mov	r0, r5
 800a9ac:	47b8      	blx	r7
 800a9ae:	3001      	adds	r0, #1
 800a9b0:	d1c0      	bne.n	800a934 <_printf_float+0x304>
 800a9b2:	e69e      	b.n	800a6f2 <_printf_float+0xc2>
 800a9b4:	2301      	movs	r3, #1
 800a9b6:	4631      	mov	r1, r6
 800a9b8:	4628      	mov	r0, r5
 800a9ba:	9205      	str	r2, [sp, #20]
 800a9bc:	47b8      	blx	r7
 800a9be:	3001      	adds	r0, #1
 800a9c0:	f43f ae97 	beq.w	800a6f2 <_printf_float+0xc2>
 800a9c4:	9a05      	ldr	r2, [sp, #20]
 800a9c6:	f10b 0b01 	add.w	fp, fp, #1
 800a9ca:	e7b9      	b.n	800a940 <_printf_float+0x310>
 800a9cc:	ee18 3a10 	vmov	r3, s16
 800a9d0:	4652      	mov	r2, sl
 800a9d2:	4631      	mov	r1, r6
 800a9d4:	4628      	mov	r0, r5
 800a9d6:	47b8      	blx	r7
 800a9d8:	3001      	adds	r0, #1
 800a9da:	d1be      	bne.n	800a95a <_printf_float+0x32a>
 800a9dc:	e689      	b.n	800a6f2 <_printf_float+0xc2>
 800a9de:	9a05      	ldr	r2, [sp, #20]
 800a9e0:	464b      	mov	r3, r9
 800a9e2:	4442      	add	r2, r8
 800a9e4:	4631      	mov	r1, r6
 800a9e6:	4628      	mov	r0, r5
 800a9e8:	47b8      	blx	r7
 800a9ea:	3001      	adds	r0, #1
 800a9ec:	d1c1      	bne.n	800a972 <_printf_float+0x342>
 800a9ee:	e680      	b.n	800a6f2 <_printf_float+0xc2>
 800a9f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a9f2:	2a01      	cmp	r2, #1
 800a9f4:	dc01      	bgt.n	800a9fa <_printf_float+0x3ca>
 800a9f6:	07db      	lsls	r3, r3, #31
 800a9f8:	d538      	bpl.n	800aa6c <_printf_float+0x43c>
 800a9fa:	2301      	movs	r3, #1
 800a9fc:	4642      	mov	r2, r8
 800a9fe:	4631      	mov	r1, r6
 800aa00:	4628      	mov	r0, r5
 800aa02:	47b8      	blx	r7
 800aa04:	3001      	adds	r0, #1
 800aa06:	f43f ae74 	beq.w	800a6f2 <_printf_float+0xc2>
 800aa0a:	ee18 3a10 	vmov	r3, s16
 800aa0e:	4652      	mov	r2, sl
 800aa10:	4631      	mov	r1, r6
 800aa12:	4628      	mov	r0, r5
 800aa14:	47b8      	blx	r7
 800aa16:	3001      	adds	r0, #1
 800aa18:	f43f ae6b 	beq.w	800a6f2 <_printf_float+0xc2>
 800aa1c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800aa20:	2200      	movs	r2, #0
 800aa22:	2300      	movs	r3, #0
 800aa24:	f7f6 f850 	bl	8000ac8 <__aeabi_dcmpeq>
 800aa28:	b9d8      	cbnz	r0, 800aa62 <_printf_float+0x432>
 800aa2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa2c:	f108 0201 	add.w	r2, r8, #1
 800aa30:	3b01      	subs	r3, #1
 800aa32:	4631      	mov	r1, r6
 800aa34:	4628      	mov	r0, r5
 800aa36:	47b8      	blx	r7
 800aa38:	3001      	adds	r0, #1
 800aa3a:	d10e      	bne.n	800aa5a <_printf_float+0x42a>
 800aa3c:	e659      	b.n	800a6f2 <_printf_float+0xc2>
 800aa3e:	2301      	movs	r3, #1
 800aa40:	4652      	mov	r2, sl
 800aa42:	4631      	mov	r1, r6
 800aa44:	4628      	mov	r0, r5
 800aa46:	47b8      	blx	r7
 800aa48:	3001      	adds	r0, #1
 800aa4a:	f43f ae52 	beq.w	800a6f2 <_printf_float+0xc2>
 800aa4e:	f108 0801 	add.w	r8, r8, #1
 800aa52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa54:	3b01      	subs	r3, #1
 800aa56:	4543      	cmp	r3, r8
 800aa58:	dcf1      	bgt.n	800aa3e <_printf_float+0x40e>
 800aa5a:	464b      	mov	r3, r9
 800aa5c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800aa60:	e6dc      	b.n	800a81c <_printf_float+0x1ec>
 800aa62:	f04f 0800 	mov.w	r8, #0
 800aa66:	f104 0a1a 	add.w	sl, r4, #26
 800aa6a:	e7f2      	b.n	800aa52 <_printf_float+0x422>
 800aa6c:	2301      	movs	r3, #1
 800aa6e:	4642      	mov	r2, r8
 800aa70:	e7df      	b.n	800aa32 <_printf_float+0x402>
 800aa72:	2301      	movs	r3, #1
 800aa74:	464a      	mov	r2, r9
 800aa76:	4631      	mov	r1, r6
 800aa78:	4628      	mov	r0, r5
 800aa7a:	47b8      	blx	r7
 800aa7c:	3001      	adds	r0, #1
 800aa7e:	f43f ae38 	beq.w	800a6f2 <_printf_float+0xc2>
 800aa82:	f108 0801 	add.w	r8, r8, #1
 800aa86:	68e3      	ldr	r3, [r4, #12]
 800aa88:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aa8a:	1a5b      	subs	r3, r3, r1
 800aa8c:	4543      	cmp	r3, r8
 800aa8e:	dcf0      	bgt.n	800aa72 <_printf_float+0x442>
 800aa90:	e6fa      	b.n	800a888 <_printf_float+0x258>
 800aa92:	f04f 0800 	mov.w	r8, #0
 800aa96:	f104 0919 	add.w	r9, r4, #25
 800aa9a:	e7f4      	b.n	800aa86 <_printf_float+0x456>

0800aa9c <_printf_common>:
 800aa9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aaa0:	4616      	mov	r6, r2
 800aaa2:	4699      	mov	r9, r3
 800aaa4:	688a      	ldr	r2, [r1, #8]
 800aaa6:	690b      	ldr	r3, [r1, #16]
 800aaa8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800aaac:	4293      	cmp	r3, r2
 800aaae:	bfb8      	it	lt
 800aab0:	4613      	movlt	r3, r2
 800aab2:	6033      	str	r3, [r6, #0]
 800aab4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aab8:	4607      	mov	r7, r0
 800aaba:	460c      	mov	r4, r1
 800aabc:	b10a      	cbz	r2, 800aac2 <_printf_common+0x26>
 800aabe:	3301      	adds	r3, #1
 800aac0:	6033      	str	r3, [r6, #0]
 800aac2:	6823      	ldr	r3, [r4, #0]
 800aac4:	0699      	lsls	r1, r3, #26
 800aac6:	bf42      	ittt	mi
 800aac8:	6833      	ldrmi	r3, [r6, #0]
 800aaca:	3302      	addmi	r3, #2
 800aacc:	6033      	strmi	r3, [r6, #0]
 800aace:	6825      	ldr	r5, [r4, #0]
 800aad0:	f015 0506 	ands.w	r5, r5, #6
 800aad4:	d106      	bne.n	800aae4 <_printf_common+0x48>
 800aad6:	f104 0a19 	add.w	sl, r4, #25
 800aada:	68e3      	ldr	r3, [r4, #12]
 800aadc:	6832      	ldr	r2, [r6, #0]
 800aade:	1a9b      	subs	r3, r3, r2
 800aae0:	42ab      	cmp	r3, r5
 800aae2:	dc26      	bgt.n	800ab32 <_printf_common+0x96>
 800aae4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800aae8:	1e13      	subs	r3, r2, #0
 800aaea:	6822      	ldr	r2, [r4, #0]
 800aaec:	bf18      	it	ne
 800aaee:	2301      	movne	r3, #1
 800aaf0:	0692      	lsls	r2, r2, #26
 800aaf2:	d42b      	bmi.n	800ab4c <_printf_common+0xb0>
 800aaf4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aaf8:	4649      	mov	r1, r9
 800aafa:	4638      	mov	r0, r7
 800aafc:	47c0      	blx	r8
 800aafe:	3001      	adds	r0, #1
 800ab00:	d01e      	beq.n	800ab40 <_printf_common+0xa4>
 800ab02:	6823      	ldr	r3, [r4, #0]
 800ab04:	68e5      	ldr	r5, [r4, #12]
 800ab06:	6832      	ldr	r2, [r6, #0]
 800ab08:	f003 0306 	and.w	r3, r3, #6
 800ab0c:	2b04      	cmp	r3, #4
 800ab0e:	bf08      	it	eq
 800ab10:	1aad      	subeq	r5, r5, r2
 800ab12:	68a3      	ldr	r3, [r4, #8]
 800ab14:	6922      	ldr	r2, [r4, #16]
 800ab16:	bf0c      	ite	eq
 800ab18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ab1c:	2500      	movne	r5, #0
 800ab1e:	4293      	cmp	r3, r2
 800ab20:	bfc4      	itt	gt
 800ab22:	1a9b      	subgt	r3, r3, r2
 800ab24:	18ed      	addgt	r5, r5, r3
 800ab26:	2600      	movs	r6, #0
 800ab28:	341a      	adds	r4, #26
 800ab2a:	42b5      	cmp	r5, r6
 800ab2c:	d11a      	bne.n	800ab64 <_printf_common+0xc8>
 800ab2e:	2000      	movs	r0, #0
 800ab30:	e008      	b.n	800ab44 <_printf_common+0xa8>
 800ab32:	2301      	movs	r3, #1
 800ab34:	4652      	mov	r2, sl
 800ab36:	4649      	mov	r1, r9
 800ab38:	4638      	mov	r0, r7
 800ab3a:	47c0      	blx	r8
 800ab3c:	3001      	adds	r0, #1
 800ab3e:	d103      	bne.n	800ab48 <_printf_common+0xac>
 800ab40:	f04f 30ff 	mov.w	r0, #4294967295
 800ab44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab48:	3501      	adds	r5, #1
 800ab4a:	e7c6      	b.n	800aada <_printf_common+0x3e>
 800ab4c:	18e1      	adds	r1, r4, r3
 800ab4e:	1c5a      	adds	r2, r3, #1
 800ab50:	2030      	movs	r0, #48	; 0x30
 800ab52:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ab56:	4422      	add	r2, r4
 800ab58:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ab5c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ab60:	3302      	adds	r3, #2
 800ab62:	e7c7      	b.n	800aaf4 <_printf_common+0x58>
 800ab64:	2301      	movs	r3, #1
 800ab66:	4622      	mov	r2, r4
 800ab68:	4649      	mov	r1, r9
 800ab6a:	4638      	mov	r0, r7
 800ab6c:	47c0      	blx	r8
 800ab6e:	3001      	adds	r0, #1
 800ab70:	d0e6      	beq.n	800ab40 <_printf_common+0xa4>
 800ab72:	3601      	adds	r6, #1
 800ab74:	e7d9      	b.n	800ab2a <_printf_common+0x8e>
	...

0800ab78 <_printf_i>:
 800ab78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ab7c:	460c      	mov	r4, r1
 800ab7e:	4691      	mov	r9, r2
 800ab80:	7e27      	ldrb	r7, [r4, #24]
 800ab82:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ab84:	2f78      	cmp	r7, #120	; 0x78
 800ab86:	4680      	mov	r8, r0
 800ab88:	469a      	mov	sl, r3
 800ab8a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ab8e:	d807      	bhi.n	800aba0 <_printf_i+0x28>
 800ab90:	2f62      	cmp	r7, #98	; 0x62
 800ab92:	d80a      	bhi.n	800abaa <_printf_i+0x32>
 800ab94:	2f00      	cmp	r7, #0
 800ab96:	f000 80d8 	beq.w	800ad4a <_printf_i+0x1d2>
 800ab9a:	2f58      	cmp	r7, #88	; 0x58
 800ab9c:	f000 80a3 	beq.w	800ace6 <_printf_i+0x16e>
 800aba0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800aba4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800aba8:	e03a      	b.n	800ac20 <_printf_i+0xa8>
 800abaa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800abae:	2b15      	cmp	r3, #21
 800abb0:	d8f6      	bhi.n	800aba0 <_printf_i+0x28>
 800abb2:	a001      	add	r0, pc, #4	; (adr r0, 800abb8 <_printf_i+0x40>)
 800abb4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800abb8:	0800ac11 	.word	0x0800ac11
 800abbc:	0800ac25 	.word	0x0800ac25
 800abc0:	0800aba1 	.word	0x0800aba1
 800abc4:	0800aba1 	.word	0x0800aba1
 800abc8:	0800aba1 	.word	0x0800aba1
 800abcc:	0800aba1 	.word	0x0800aba1
 800abd0:	0800ac25 	.word	0x0800ac25
 800abd4:	0800aba1 	.word	0x0800aba1
 800abd8:	0800aba1 	.word	0x0800aba1
 800abdc:	0800aba1 	.word	0x0800aba1
 800abe0:	0800aba1 	.word	0x0800aba1
 800abe4:	0800ad31 	.word	0x0800ad31
 800abe8:	0800ac55 	.word	0x0800ac55
 800abec:	0800ad13 	.word	0x0800ad13
 800abf0:	0800aba1 	.word	0x0800aba1
 800abf4:	0800aba1 	.word	0x0800aba1
 800abf8:	0800ad53 	.word	0x0800ad53
 800abfc:	0800aba1 	.word	0x0800aba1
 800ac00:	0800ac55 	.word	0x0800ac55
 800ac04:	0800aba1 	.word	0x0800aba1
 800ac08:	0800aba1 	.word	0x0800aba1
 800ac0c:	0800ad1b 	.word	0x0800ad1b
 800ac10:	680b      	ldr	r3, [r1, #0]
 800ac12:	1d1a      	adds	r2, r3, #4
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	600a      	str	r2, [r1, #0]
 800ac18:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ac1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ac20:	2301      	movs	r3, #1
 800ac22:	e0a3      	b.n	800ad6c <_printf_i+0x1f4>
 800ac24:	6825      	ldr	r5, [r4, #0]
 800ac26:	6808      	ldr	r0, [r1, #0]
 800ac28:	062e      	lsls	r6, r5, #24
 800ac2a:	f100 0304 	add.w	r3, r0, #4
 800ac2e:	d50a      	bpl.n	800ac46 <_printf_i+0xce>
 800ac30:	6805      	ldr	r5, [r0, #0]
 800ac32:	600b      	str	r3, [r1, #0]
 800ac34:	2d00      	cmp	r5, #0
 800ac36:	da03      	bge.n	800ac40 <_printf_i+0xc8>
 800ac38:	232d      	movs	r3, #45	; 0x2d
 800ac3a:	426d      	negs	r5, r5
 800ac3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac40:	485e      	ldr	r0, [pc, #376]	; (800adbc <_printf_i+0x244>)
 800ac42:	230a      	movs	r3, #10
 800ac44:	e019      	b.n	800ac7a <_printf_i+0x102>
 800ac46:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ac4a:	6805      	ldr	r5, [r0, #0]
 800ac4c:	600b      	str	r3, [r1, #0]
 800ac4e:	bf18      	it	ne
 800ac50:	b22d      	sxthne	r5, r5
 800ac52:	e7ef      	b.n	800ac34 <_printf_i+0xbc>
 800ac54:	680b      	ldr	r3, [r1, #0]
 800ac56:	6825      	ldr	r5, [r4, #0]
 800ac58:	1d18      	adds	r0, r3, #4
 800ac5a:	6008      	str	r0, [r1, #0]
 800ac5c:	0628      	lsls	r0, r5, #24
 800ac5e:	d501      	bpl.n	800ac64 <_printf_i+0xec>
 800ac60:	681d      	ldr	r5, [r3, #0]
 800ac62:	e002      	b.n	800ac6a <_printf_i+0xf2>
 800ac64:	0669      	lsls	r1, r5, #25
 800ac66:	d5fb      	bpl.n	800ac60 <_printf_i+0xe8>
 800ac68:	881d      	ldrh	r5, [r3, #0]
 800ac6a:	4854      	ldr	r0, [pc, #336]	; (800adbc <_printf_i+0x244>)
 800ac6c:	2f6f      	cmp	r7, #111	; 0x6f
 800ac6e:	bf0c      	ite	eq
 800ac70:	2308      	moveq	r3, #8
 800ac72:	230a      	movne	r3, #10
 800ac74:	2100      	movs	r1, #0
 800ac76:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ac7a:	6866      	ldr	r6, [r4, #4]
 800ac7c:	60a6      	str	r6, [r4, #8]
 800ac7e:	2e00      	cmp	r6, #0
 800ac80:	bfa2      	ittt	ge
 800ac82:	6821      	ldrge	r1, [r4, #0]
 800ac84:	f021 0104 	bicge.w	r1, r1, #4
 800ac88:	6021      	strge	r1, [r4, #0]
 800ac8a:	b90d      	cbnz	r5, 800ac90 <_printf_i+0x118>
 800ac8c:	2e00      	cmp	r6, #0
 800ac8e:	d04d      	beq.n	800ad2c <_printf_i+0x1b4>
 800ac90:	4616      	mov	r6, r2
 800ac92:	fbb5 f1f3 	udiv	r1, r5, r3
 800ac96:	fb03 5711 	mls	r7, r3, r1, r5
 800ac9a:	5dc7      	ldrb	r7, [r0, r7]
 800ac9c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800aca0:	462f      	mov	r7, r5
 800aca2:	42bb      	cmp	r3, r7
 800aca4:	460d      	mov	r5, r1
 800aca6:	d9f4      	bls.n	800ac92 <_printf_i+0x11a>
 800aca8:	2b08      	cmp	r3, #8
 800acaa:	d10b      	bne.n	800acc4 <_printf_i+0x14c>
 800acac:	6823      	ldr	r3, [r4, #0]
 800acae:	07df      	lsls	r7, r3, #31
 800acb0:	d508      	bpl.n	800acc4 <_printf_i+0x14c>
 800acb2:	6923      	ldr	r3, [r4, #16]
 800acb4:	6861      	ldr	r1, [r4, #4]
 800acb6:	4299      	cmp	r1, r3
 800acb8:	bfde      	ittt	le
 800acba:	2330      	movle	r3, #48	; 0x30
 800acbc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800acc0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800acc4:	1b92      	subs	r2, r2, r6
 800acc6:	6122      	str	r2, [r4, #16]
 800acc8:	f8cd a000 	str.w	sl, [sp]
 800accc:	464b      	mov	r3, r9
 800acce:	aa03      	add	r2, sp, #12
 800acd0:	4621      	mov	r1, r4
 800acd2:	4640      	mov	r0, r8
 800acd4:	f7ff fee2 	bl	800aa9c <_printf_common>
 800acd8:	3001      	adds	r0, #1
 800acda:	d14c      	bne.n	800ad76 <_printf_i+0x1fe>
 800acdc:	f04f 30ff 	mov.w	r0, #4294967295
 800ace0:	b004      	add	sp, #16
 800ace2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ace6:	4835      	ldr	r0, [pc, #212]	; (800adbc <_printf_i+0x244>)
 800ace8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800acec:	6823      	ldr	r3, [r4, #0]
 800acee:	680e      	ldr	r6, [r1, #0]
 800acf0:	061f      	lsls	r7, r3, #24
 800acf2:	f856 5b04 	ldr.w	r5, [r6], #4
 800acf6:	600e      	str	r6, [r1, #0]
 800acf8:	d514      	bpl.n	800ad24 <_printf_i+0x1ac>
 800acfa:	07d9      	lsls	r1, r3, #31
 800acfc:	bf44      	itt	mi
 800acfe:	f043 0320 	orrmi.w	r3, r3, #32
 800ad02:	6023      	strmi	r3, [r4, #0]
 800ad04:	b91d      	cbnz	r5, 800ad0e <_printf_i+0x196>
 800ad06:	6823      	ldr	r3, [r4, #0]
 800ad08:	f023 0320 	bic.w	r3, r3, #32
 800ad0c:	6023      	str	r3, [r4, #0]
 800ad0e:	2310      	movs	r3, #16
 800ad10:	e7b0      	b.n	800ac74 <_printf_i+0xfc>
 800ad12:	6823      	ldr	r3, [r4, #0]
 800ad14:	f043 0320 	orr.w	r3, r3, #32
 800ad18:	6023      	str	r3, [r4, #0]
 800ad1a:	2378      	movs	r3, #120	; 0x78
 800ad1c:	4828      	ldr	r0, [pc, #160]	; (800adc0 <_printf_i+0x248>)
 800ad1e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ad22:	e7e3      	b.n	800acec <_printf_i+0x174>
 800ad24:	065e      	lsls	r6, r3, #25
 800ad26:	bf48      	it	mi
 800ad28:	b2ad      	uxthmi	r5, r5
 800ad2a:	e7e6      	b.n	800acfa <_printf_i+0x182>
 800ad2c:	4616      	mov	r6, r2
 800ad2e:	e7bb      	b.n	800aca8 <_printf_i+0x130>
 800ad30:	680b      	ldr	r3, [r1, #0]
 800ad32:	6826      	ldr	r6, [r4, #0]
 800ad34:	6960      	ldr	r0, [r4, #20]
 800ad36:	1d1d      	adds	r5, r3, #4
 800ad38:	600d      	str	r5, [r1, #0]
 800ad3a:	0635      	lsls	r5, r6, #24
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	d501      	bpl.n	800ad44 <_printf_i+0x1cc>
 800ad40:	6018      	str	r0, [r3, #0]
 800ad42:	e002      	b.n	800ad4a <_printf_i+0x1d2>
 800ad44:	0671      	lsls	r1, r6, #25
 800ad46:	d5fb      	bpl.n	800ad40 <_printf_i+0x1c8>
 800ad48:	8018      	strh	r0, [r3, #0]
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	6123      	str	r3, [r4, #16]
 800ad4e:	4616      	mov	r6, r2
 800ad50:	e7ba      	b.n	800acc8 <_printf_i+0x150>
 800ad52:	680b      	ldr	r3, [r1, #0]
 800ad54:	1d1a      	adds	r2, r3, #4
 800ad56:	600a      	str	r2, [r1, #0]
 800ad58:	681e      	ldr	r6, [r3, #0]
 800ad5a:	6862      	ldr	r2, [r4, #4]
 800ad5c:	2100      	movs	r1, #0
 800ad5e:	4630      	mov	r0, r6
 800ad60:	f7f5 fa3e 	bl	80001e0 <memchr>
 800ad64:	b108      	cbz	r0, 800ad6a <_printf_i+0x1f2>
 800ad66:	1b80      	subs	r0, r0, r6
 800ad68:	6060      	str	r0, [r4, #4]
 800ad6a:	6863      	ldr	r3, [r4, #4]
 800ad6c:	6123      	str	r3, [r4, #16]
 800ad6e:	2300      	movs	r3, #0
 800ad70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad74:	e7a8      	b.n	800acc8 <_printf_i+0x150>
 800ad76:	6923      	ldr	r3, [r4, #16]
 800ad78:	4632      	mov	r2, r6
 800ad7a:	4649      	mov	r1, r9
 800ad7c:	4640      	mov	r0, r8
 800ad7e:	47d0      	blx	sl
 800ad80:	3001      	adds	r0, #1
 800ad82:	d0ab      	beq.n	800acdc <_printf_i+0x164>
 800ad84:	6823      	ldr	r3, [r4, #0]
 800ad86:	079b      	lsls	r3, r3, #30
 800ad88:	d413      	bmi.n	800adb2 <_printf_i+0x23a>
 800ad8a:	68e0      	ldr	r0, [r4, #12]
 800ad8c:	9b03      	ldr	r3, [sp, #12]
 800ad8e:	4298      	cmp	r0, r3
 800ad90:	bfb8      	it	lt
 800ad92:	4618      	movlt	r0, r3
 800ad94:	e7a4      	b.n	800ace0 <_printf_i+0x168>
 800ad96:	2301      	movs	r3, #1
 800ad98:	4632      	mov	r2, r6
 800ad9a:	4649      	mov	r1, r9
 800ad9c:	4640      	mov	r0, r8
 800ad9e:	47d0      	blx	sl
 800ada0:	3001      	adds	r0, #1
 800ada2:	d09b      	beq.n	800acdc <_printf_i+0x164>
 800ada4:	3501      	adds	r5, #1
 800ada6:	68e3      	ldr	r3, [r4, #12]
 800ada8:	9903      	ldr	r1, [sp, #12]
 800adaa:	1a5b      	subs	r3, r3, r1
 800adac:	42ab      	cmp	r3, r5
 800adae:	dcf2      	bgt.n	800ad96 <_printf_i+0x21e>
 800adb0:	e7eb      	b.n	800ad8a <_printf_i+0x212>
 800adb2:	2500      	movs	r5, #0
 800adb4:	f104 0619 	add.w	r6, r4, #25
 800adb8:	e7f5      	b.n	800ada6 <_printf_i+0x22e>
 800adba:	bf00      	nop
 800adbc:	0800e30e 	.word	0x0800e30e
 800adc0:	0800e31f 	.word	0x0800e31f

0800adc4 <siprintf>:
 800adc4:	b40e      	push	{r1, r2, r3}
 800adc6:	b500      	push	{lr}
 800adc8:	b09c      	sub	sp, #112	; 0x70
 800adca:	ab1d      	add	r3, sp, #116	; 0x74
 800adcc:	9002      	str	r0, [sp, #8]
 800adce:	9006      	str	r0, [sp, #24]
 800add0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800add4:	4809      	ldr	r0, [pc, #36]	; (800adfc <siprintf+0x38>)
 800add6:	9107      	str	r1, [sp, #28]
 800add8:	9104      	str	r1, [sp, #16]
 800adda:	4909      	ldr	r1, [pc, #36]	; (800ae00 <siprintf+0x3c>)
 800addc:	f853 2b04 	ldr.w	r2, [r3], #4
 800ade0:	9105      	str	r1, [sp, #20]
 800ade2:	6800      	ldr	r0, [r0, #0]
 800ade4:	9301      	str	r3, [sp, #4]
 800ade6:	a902      	add	r1, sp, #8
 800ade8:	f001 fb34 	bl	800c454 <_svfiprintf_r>
 800adec:	9b02      	ldr	r3, [sp, #8]
 800adee:	2200      	movs	r2, #0
 800adf0:	701a      	strb	r2, [r3, #0]
 800adf2:	b01c      	add	sp, #112	; 0x70
 800adf4:	f85d eb04 	ldr.w	lr, [sp], #4
 800adf8:	b003      	add	sp, #12
 800adfa:	4770      	bx	lr
 800adfc:	2000017c 	.word	0x2000017c
 800ae00:	ffff0208 	.word	0xffff0208

0800ae04 <quorem>:
 800ae04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae08:	6903      	ldr	r3, [r0, #16]
 800ae0a:	690c      	ldr	r4, [r1, #16]
 800ae0c:	42a3      	cmp	r3, r4
 800ae0e:	4607      	mov	r7, r0
 800ae10:	f2c0 8081 	blt.w	800af16 <quorem+0x112>
 800ae14:	3c01      	subs	r4, #1
 800ae16:	f101 0814 	add.w	r8, r1, #20
 800ae1a:	f100 0514 	add.w	r5, r0, #20
 800ae1e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ae22:	9301      	str	r3, [sp, #4]
 800ae24:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ae28:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ae2c:	3301      	adds	r3, #1
 800ae2e:	429a      	cmp	r2, r3
 800ae30:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ae34:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ae38:	fbb2 f6f3 	udiv	r6, r2, r3
 800ae3c:	d331      	bcc.n	800aea2 <quorem+0x9e>
 800ae3e:	f04f 0e00 	mov.w	lr, #0
 800ae42:	4640      	mov	r0, r8
 800ae44:	46ac      	mov	ip, r5
 800ae46:	46f2      	mov	sl, lr
 800ae48:	f850 2b04 	ldr.w	r2, [r0], #4
 800ae4c:	b293      	uxth	r3, r2
 800ae4e:	fb06 e303 	mla	r3, r6, r3, lr
 800ae52:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ae56:	b29b      	uxth	r3, r3
 800ae58:	ebaa 0303 	sub.w	r3, sl, r3
 800ae5c:	0c12      	lsrs	r2, r2, #16
 800ae5e:	f8dc a000 	ldr.w	sl, [ip]
 800ae62:	fb06 e202 	mla	r2, r6, r2, lr
 800ae66:	fa13 f38a 	uxtah	r3, r3, sl
 800ae6a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ae6e:	fa1f fa82 	uxth.w	sl, r2
 800ae72:	f8dc 2000 	ldr.w	r2, [ip]
 800ae76:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800ae7a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ae7e:	b29b      	uxth	r3, r3
 800ae80:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ae84:	4581      	cmp	r9, r0
 800ae86:	f84c 3b04 	str.w	r3, [ip], #4
 800ae8a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ae8e:	d2db      	bcs.n	800ae48 <quorem+0x44>
 800ae90:	f855 300b 	ldr.w	r3, [r5, fp]
 800ae94:	b92b      	cbnz	r3, 800aea2 <quorem+0x9e>
 800ae96:	9b01      	ldr	r3, [sp, #4]
 800ae98:	3b04      	subs	r3, #4
 800ae9a:	429d      	cmp	r5, r3
 800ae9c:	461a      	mov	r2, r3
 800ae9e:	d32e      	bcc.n	800aefe <quorem+0xfa>
 800aea0:	613c      	str	r4, [r7, #16]
 800aea2:	4638      	mov	r0, r7
 800aea4:	f001 f8c0 	bl	800c028 <__mcmp>
 800aea8:	2800      	cmp	r0, #0
 800aeaa:	db24      	blt.n	800aef6 <quorem+0xf2>
 800aeac:	3601      	adds	r6, #1
 800aeae:	4628      	mov	r0, r5
 800aeb0:	f04f 0c00 	mov.w	ip, #0
 800aeb4:	f858 2b04 	ldr.w	r2, [r8], #4
 800aeb8:	f8d0 e000 	ldr.w	lr, [r0]
 800aebc:	b293      	uxth	r3, r2
 800aebe:	ebac 0303 	sub.w	r3, ip, r3
 800aec2:	0c12      	lsrs	r2, r2, #16
 800aec4:	fa13 f38e 	uxtah	r3, r3, lr
 800aec8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800aecc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800aed0:	b29b      	uxth	r3, r3
 800aed2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aed6:	45c1      	cmp	r9, r8
 800aed8:	f840 3b04 	str.w	r3, [r0], #4
 800aedc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800aee0:	d2e8      	bcs.n	800aeb4 <quorem+0xb0>
 800aee2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aee6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aeea:	b922      	cbnz	r2, 800aef6 <quorem+0xf2>
 800aeec:	3b04      	subs	r3, #4
 800aeee:	429d      	cmp	r5, r3
 800aef0:	461a      	mov	r2, r3
 800aef2:	d30a      	bcc.n	800af0a <quorem+0x106>
 800aef4:	613c      	str	r4, [r7, #16]
 800aef6:	4630      	mov	r0, r6
 800aef8:	b003      	add	sp, #12
 800aefa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aefe:	6812      	ldr	r2, [r2, #0]
 800af00:	3b04      	subs	r3, #4
 800af02:	2a00      	cmp	r2, #0
 800af04:	d1cc      	bne.n	800aea0 <quorem+0x9c>
 800af06:	3c01      	subs	r4, #1
 800af08:	e7c7      	b.n	800ae9a <quorem+0x96>
 800af0a:	6812      	ldr	r2, [r2, #0]
 800af0c:	3b04      	subs	r3, #4
 800af0e:	2a00      	cmp	r2, #0
 800af10:	d1f0      	bne.n	800aef4 <quorem+0xf0>
 800af12:	3c01      	subs	r4, #1
 800af14:	e7eb      	b.n	800aeee <quorem+0xea>
 800af16:	2000      	movs	r0, #0
 800af18:	e7ee      	b.n	800aef8 <quorem+0xf4>
 800af1a:	0000      	movs	r0, r0
 800af1c:	0000      	movs	r0, r0
	...

0800af20 <_dtoa_r>:
 800af20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af24:	ed2d 8b02 	vpush	{d8}
 800af28:	ec57 6b10 	vmov	r6, r7, d0
 800af2c:	b095      	sub	sp, #84	; 0x54
 800af2e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800af30:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800af34:	9105      	str	r1, [sp, #20]
 800af36:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800af3a:	4604      	mov	r4, r0
 800af3c:	9209      	str	r2, [sp, #36]	; 0x24
 800af3e:	930f      	str	r3, [sp, #60]	; 0x3c
 800af40:	b975      	cbnz	r5, 800af60 <_dtoa_r+0x40>
 800af42:	2010      	movs	r0, #16
 800af44:	f000 fddc 	bl	800bb00 <malloc>
 800af48:	4602      	mov	r2, r0
 800af4a:	6260      	str	r0, [r4, #36]	; 0x24
 800af4c:	b920      	cbnz	r0, 800af58 <_dtoa_r+0x38>
 800af4e:	4bb2      	ldr	r3, [pc, #712]	; (800b218 <_dtoa_r+0x2f8>)
 800af50:	21ea      	movs	r1, #234	; 0xea
 800af52:	48b2      	ldr	r0, [pc, #712]	; (800b21c <_dtoa_r+0x2fc>)
 800af54:	f001 fb8e 	bl	800c674 <__assert_func>
 800af58:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800af5c:	6005      	str	r5, [r0, #0]
 800af5e:	60c5      	str	r5, [r0, #12]
 800af60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af62:	6819      	ldr	r1, [r3, #0]
 800af64:	b151      	cbz	r1, 800af7c <_dtoa_r+0x5c>
 800af66:	685a      	ldr	r2, [r3, #4]
 800af68:	604a      	str	r2, [r1, #4]
 800af6a:	2301      	movs	r3, #1
 800af6c:	4093      	lsls	r3, r2
 800af6e:	608b      	str	r3, [r1, #8]
 800af70:	4620      	mov	r0, r4
 800af72:	f000 fe1b 	bl	800bbac <_Bfree>
 800af76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af78:	2200      	movs	r2, #0
 800af7a:	601a      	str	r2, [r3, #0]
 800af7c:	1e3b      	subs	r3, r7, #0
 800af7e:	bfb9      	ittee	lt
 800af80:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800af84:	9303      	strlt	r3, [sp, #12]
 800af86:	2300      	movge	r3, #0
 800af88:	f8c8 3000 	strge.w	r3, [r8]
 800af8c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800af90:	4ba3      	ldr	r3, [pc, #652]	; (800b220 <_dtoa_r+0x300>)
 800af92:	bfbc      	itt	lt
 800af94:	2201      	movlt	r2, #1
 800af96:	f8c8 2000 	strlt.w	r2, [r8]
 800af9a:	ea33 0309 	bics.w	r3, r3, r9
 800af9e:	d11b      	bne.n	800afd8 <_dtoa_r+0xb8>
 800afa0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800afa2:	f242 730f 	movw	r3, #9999	; 0x270f
 800afa6:	6013      	str	r3, [r2, #0]
 800afa8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800afac:	4333      	orrs	r3, r6
 800afae:	f000 857a 	beq.w	800baa6 <_dtoa_r+0xb86>
 800afb2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800afb4:	b963      	cbnz	r3, 800afd0 <_dtoa_r+0xb0>
 800afb6:	4b9b      	ldr	r3, [pc, #620]	; (800b224 <_dtoa_r+0x304>)
 800afb8:	e024      	b.n	800b004 <_dtoa_r+0xe4>
 800afba:	4b9b      	ldr	r3, [pc, #620]	; (800b228 <_dtoa_r+0x308>)
 800afbc:	9300      	str	r3, [sp, #0]
 800afbe:	3308      	adds	r3, #8
 800afc0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800afc2:	6013      	str	r3, [r2, #0]
 800afc4:	9800      	ldr	r0, [sp, #0]
 800afc6:	b015      	add	sp, #84	; 0x54
 800afc8:	ecbd 8b02 	vpop	{d8}
 800afcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afd0:	4b94      	ldr	r3, [pc, #592]	; (800b224 <_dtoa_r+0x304>)
 800afd2:	9300      	str	r3, [sp, #0]
 800afd4:	3303      	adds	r3, #3
 800afd6:	e7f3      	b.n	800afc0 <_dtoa_r+0xa0>
 800afd8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800afdc:	2200      	movs	r2, #0
 800afde:	ec51 0b17 	vmov	r0, r1, d7
 800afe2:	2300      	movs	r3, #0
 800afe4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800afe8:	f7f5 fd6e 	bl	8000ac8 <__aeabi_dcmpeq>
 800afec:	4680      	mov	r8, r0
 800afee:	b158      	cbz	r0, 800b008 <_dtoa_r+0xe8>
 800aff0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800aff2:	2301      	movs	r3, #1
 800aff4:	6013      	str	r3, [r2, #0]
 800aff6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aff8:	2b00      	cmp	r3, #0
 800affa:	f000 8551 	beq.w	800baa0 <_dtoa_r+0xb80>
 800affe:	488b      	ldr	r0, [pc, #556]	; (800b22c <_dtoa_r+0x30c>)
 800b000:	6018      	str	r0, [r3, #0]
 800b002:	1e43      	subs	r3, r0, #1
 800b004:	9300      	str	r3, [sp, #0]
 800b006:	e7dd      	b.n	800afc4 <_dtoa_r+0xa4>
 800b008:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800b00c:	aa12      	add	r2, sp, #72	; 0x48
 800b00e:	a913      	add	r1, sp, #76	; 0x4c
 800b010:	4620      	mov	r0, r4
 800b012:	f001 f8ad 	bl	800c170 <__d2b>
 800b016:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b01a:	4683      	mov	fp, r0
 800b01c:	2d00      	cmp	r5, #0
 800b01e:	d07c      	beq.n	800b11a <_dtoa_r+0x1fa>
 800b020:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b022:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800b026:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b02a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800b02e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b032:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b036:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b03a:	4b7d      	ldr	r3, [pc, #500]	; (800b230 <_dtoa_r+0x310>)
 800b03c:	2200      	movs	r2, #0
 800b03e:	4630      	mov	r0, r6
 800b040:	4639      	mov	r1, r7
 800b042:	f7f5 f921 	bl	8000288 <__aeabi_dsub>
 800b046:	a36e      	add	r3, pc, #440	; (adr r3, 800b200 <_dtoa_r+0x2e0>)
 800b048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b04c:	f7f5 fad4 	bl	80005f8 <__aeabi_dmul>
 800b050:	a36d      	add	r3, pc, #436	; (adr r3, 800b208 <_dtoa_r+0x2e8>)
 800b052:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b056:	f7f5 f919 	bl	800028c <__adddf3>
 800b05a:	4606      	mov	r6, r0
 800b05c:	4628      	mov	r0, r5
 800b05e:	460f      	mov	r7, r1
 800b060:	f7f5 fa60 	bl	8000524 <__aeabi_i2d>
 800b064:	a36a      	add	r3, pc, #424	; (adr r3, 800b210 <_dtoa_r+0x2f0>)
 800b066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b06a:	f7f5 fac5 	bl	80005f8 <__aeabi_dmul>
 800b06e:	4602      	mov	r2, r0
 800b070:	460b      	mov	r3, r1
 800b072:	4630      	mov	r0, r6
 800b074:	4639      	mov	r1, r7
 800b076:	f7f5 f909 	bl	800028c <__adddf3>
 800b07a:	4606      	mov	r6, r0
 800b07c:	460f      	mov	r7, r1
 800b07e:	f7f5 fd6b 	bl	8000b58 <__aeabi_d2iz>
 800b082:	2200      	movs	r2, #0
 800b084:	4682      	mov	sl, r0
 800b086:	2300      	movs	r3, #0
 800b088:	4630      	mov	r0, r6
 800b08a:	4639      	mov	r1, r7
 800b08c:	f7f5 fd26 	bl	8000adc <__aeabi_dcmplt>
 800b090:	b148      	cbz	r0, 800b0a6 <_dtoa_r+0x186>
 800b092:	4650      	mov	r0, sl
 800b094:	f7f5 fa46 	bl	8000524 <__aeabi_i2d>
 800b098:	4632      	mov	r2, r6
 800b09a:	463b      	mov	r3, r7
 800b09c:	f7f5 fd14 	bl	8000ac8 <__aeabi_dcmpeq>
 800b0a0:	b908      	cbnz	r0, 800b0a6 <_dtoa_r+0x186>
 800b0a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b0a6:	f1ba 0f16 	cmp.w	sl, #22
 800b0aa:	d854      	bhi.n	800b156 <_dtoa_r+0x236>
 800b0ac:	4b61      	ldr	r3, [pc, #388]	; (800b234 <_dtoa_r+0x314>)
 800b0ae:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b0b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0b6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b0ba:	f7f5 fd0f 	bl	8000adc <__aeabi_dcmplt>
 800b0be:	2800      	cmp	r0, #0
 800b0c0:	d04b      	beq.n	800b15a <_dtoa_r+0x23a>
 800b0c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	930e      	str	r3, [sp, #56]	; 0x38
 800b0ca:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b0cc:	1b5d      	subs	r5, r3, r5
 800b0ce:	1e6b      	subs	r3, r5, #1
 800b0d0:	9304      	str	r3, [sp, #16]
 800b0d2:	bf43      	ittte	mi
 800b0d4:	2300      	movmi	r3, #0
 800b0d6:	f1c5 0801 	rsbmi	r8, r5, #1
 800b0da:	9304      	strmi	r3, [sp, #16]
 800b0dc:	f04f 0800 	movpl.w	r8, #0
 800b0e0:	f1ba 0f00 	cmp.w	sl, #0
 800b0e4:	db3b      	blt.n	800b15e <_dtoa_r+0x23e>
 800b0e6:	9b04      	ldr	r3, [sp, #16]
 800b0e8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800b0ec:	4453      	add	r3, sl
 800b0ee:	9304      	str	r3, [sp, #16]
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	9306      	str	r3, [sp, #24]
 800b0f4:	9b05      	ldr	r3, [sp, #20]
 800b0f6:	2b09      	cmp	r3, #9
 800b0f8:	d869      	bhi.n	800b1ce <_dtoa_r+0x2ae>
 800b0fa:	2b05      	cmp	r3, #5
 800b0fc:	bfc4      	itt	gt
 800b0fe:	3b04      	subgt	r3, #4
 800b100:	9305      	strgt	r3, [sp, #20]
 800b102:	9b05      	ldr	r3, [sp, #20]
 800b104:	f1a3 0302 	sub.w	r3, r3, #2
 800b108:	bfcc      	ite	gt
 800b10a:	2500      	movgt	r5, #0
 800b10c:	2501      	movle	r5, #1
 800b10e:	2b03      	cmp	r3, #3
 800b110:	d869      	bhi.n	800b1e6 <_dtoa_r+0x2c6>
 800b112:	e8df f003 	tbb	[pc, r3]
 800b116:	4e2c      	.short	0x4e2c
 800b118:	5a4c      	.short	0x5a4c
 800b11a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800b11e:	441d      	add	r5, r3
 800b120:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b124:	2b20      	cmp	r3, #32
 800b126:	bfc1      	itttt	gt
 800b128:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b12c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b130:	fa09 f303 	lslgt.w	r3, r9, r3
 800b134:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b138:	bfda      	itte	le
 800b13a:	f1c3 0320 	rsble	r3, r3, #32
 800b13e:	fa06 f003 	lslle.w	r0, r6, r3
 800b142:	4318      	orrgt	r0, r3
 800b144:	f7f5 f9de 	bl	8000504 <__aeabi_ui2d>
 800b148:	2301      	movs	r3, #1
 800b14a:	4606      	mov	r6, r0
 800b14c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b150:	3d01      	subs	r5, #1
 800b152:	9310      	str	r3, [sp, #64]	; 0x40
 800b154:	e771      	b.n	800b03a <_dtoa_r+0x11a>
 800b156:	2301      	movs	r3, #1
 800b158:	e7b6      	b.n	800b0c8 <_dtoa_r+0x1a8>
 800b15a:	900e      	str	r0, [sp, #56]	; 0x38
 800b15c:	e7b5      	b.n	800b0ca <_dtoa_r+0x1aa>
 800b15e:	f1ca 0300 	rsb	r3, sl, #0
 800b162:	9306      	str	r3, [sp, #24]
 800b164:	2300      	movs	r3, #0
 800b166:	eba8 080a 	sub.w	r8, r8, sl
 800b16a:	930d      	str	r3, [sp, #52]	; 0x34
 800b16c:	e7c2      	b.n	800b0f4 <_dtoa_r+0x1d4>
 800b16e:	2300      	movs	r3, #0
 800b170:	9308      	str	r3, [sp, #32]
 800b172:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b174:	2b00      	cmp	r3, #0
 800b176:	dc39      	bgt.n	800b1ec <_dtoa_r+0x2cc>
 800b178:	f04f 0901 	mov.w	r9, #1
 800b17c:	f8cd 9004 	str.w	r9, [sp, #4]
 800b180:	464b      	mov	r3, r9
 800b182:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800b186:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b188:	2200      	movs	r2, #0
 800b18a:	6042      	str	r2, [r0, #4]
 800b18c:	2204      	movs	r2, #4
 800b18e:	f102 0614 	add.w	r6, r2, #20
 800b192:	429e      	cmp	r6, r3
 800b194:	6841      	ldr	r1, [r0, #4]
 800b196:	d92f      	bls.n	800b1f8 <_dtoa_r+0x2d8>
 800b198:	4620      	mov	r0, r4
 800b19a:	f000 fcc7 	bl	800bb2c <_Balloc>
 800b19e:	9000      	str	r0, [sp, #0]
 800b1a0:	2800      	cmp	r0, #0
 800b1a2:	d14b      	bne.n	800b23c <_dtoa_r+0x31c>
 800b1a4:	4b24      	ldr	r3, [pc, #144]	; (800b238 <_dtoa_r+0x318>)
 800b1a6:	4602      	mov	r2, r0
 800b1a8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b1ac:	e6d1      	b.n	800af52 <_dtoa_r+0x32>
 800b1ae:	2301      	movs	r3, #1
 800b1b0:	e7de      	b.n	800b170 <_dtoa_r+0x250>
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	9308      	str	r3, [sp, #32]
 800b1b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1b8:	eb0a 0903 	add.w	r9, sl, r3
 800b1bc:	f109 0301 	add.w	r3, r9, #1
 800b1c0:	2b01      	cmp	r3, #1
 800b1c2:	9301      	str	r3, [sp, #4]
 800b1c4:	bfb8      	it	lt
 800b1c6:	2301      	movlt	r3, #1
 800b1c8:	e7dd      	b.n	800b186 <_dtoa_r+0x266>
 800b1ca:	2301      	movs	r3, #1
 800b1cc:	e7f2      	b.n	800b1b4 <_dtoa_r+0x294>
 800b1ce:	2501      	movs	r5, #1
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	9305      	str	r3, [sp, #20]
 800b1d4:	9508      	str	r5, [sp, #32]
 800b1d6:	f04f 39ff 	mov.w	r9, #4294967295
 800b1da:	2200      	movs	r2, #0
 800b1dc:	f8cd 9004 	str.w	r9, [sp, #4]
 800b1e0:	2312      	movs	r3, #18
 800b1e2:	9209      	str	r2, [sp, #36]	; 0x24
 800b1e4:	e7cf      	b.n	800b186 <_dtoa_r+0x266>
 800b1e6:	2301      	movs	r3, #1
 800b1e8:	9308      	str	r3, [sp, #32]
 800b1ea:	e7f4      	b.n	800b1d6 <_dtoa_r+0x2b6>
 800b1ec:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800b1f0:	f8cd 9004 	str.w	r9, [sp, #4]
 800b1f4:	464b      	mov	r3, r9
 800b1f6:	e7c6      	b.n	800b186 <_dtoa_r+0x266>
 800b1f8:	3101      	adds	r1, #1
 800b1fa:	6041      	str	r1, [r0, #4]
 800b1fc:	0052      	lsls	r2, r2, #1
 800b1fe:	e7c6      	b.n	800b18e <_dtoa_r+0x26e>
 800b200:	636f4361 	.word	0x636f4361
 800b204:	3fd287a7 	.word	0x3fd287a7
 800b208:	8b60c8b3 	.word	0x8b60c8b3
 800b20c:	3fc68a28 	.word	0x3fc68a28
 800b210:	509f79fb 	.word	0x509f79fb
 800b214:	3fd34413 	.word	0x3fd34413
 800b218:	0800e33d 	.word	0x0800e33d
 800b21c:	0800e354 	.word	0x0800e354
 800b220:	7ff00000 	.word	0x7ff00000
 800b224:	0800e339 	.word	0x0800e339
 800b228:	0800e330 	.word	0x0800e330
 800b22c:	0800e30d 	.word	0x0800e30d
 800b230:	3ff80000 	.word	0x3ff80000
 800b234:	0800e450 	.word	0x0800e450
 800b238:	0800e3b3 	.word	0x0800e3b3
 800b23c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b23e:	9a00      	ldr	r2, [sp, #0]
 800b240:	601a      	str	r2, [r3, #0]
 800b242:	9b01      	ldr	r3, [sp, #4]
 800b244:	2b0e      	cmp	r3, #14
 800b246:	f200 80ad 	bhi.w	800b3a4 <_dtoa_r+0x484>
 800b24a:	2d00      	cmp	r5, #0
 800b24c:	f000 80aa 	beq.w	800b3a4 <_dtoa_r+0x484>
 800b250:	f1ba 0f00 	cmp.w	sl, #0
 800b254:	dd36      	ble.n	800b2c4 <_dtoa_r+0x3a4>
 800b256:	4ac3      	ldr	r2, [pc, #780]	; (800b564 <_dtoa_r+0x644>)
 800b258:	f00a 030f 	and.w	r3, sl, #15
 800b25c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b260:	ed93 7b00 	vldr	d7, [r3]
 800b264:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800b268:	ea4f 172a 	mov.w	r7, sl, asr #4
 800b26c:	eeb0 8a47 	vmov.f32	s16, s14
 800b270:	eef0 8a67 	vmov.f32	s17, s15
 800b274:	d016      	beq.n	800b2a4 <_dtoa_r+0x384>
 800b276:	4bbc      	ldr	r3, [pc, #752]	; (800b568 <_dtoa_r+0x648>)
 800b278:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b27c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b280:	f7f5 fae4 	bl	800084c <__aeabi_ddiv>
 800b284:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b288:	f007 070f 	and.w	r7, r7, #15
 800b28c:	2503      	movs	r5, #3
 800b28e:	4eb6      	ldr	r6, [pc, #728]	; (800b568 <_dtoa_r+0x648>)
 800b290:	b957      	cbnz	r7, 800b2a8 <_dtoa_r+0x388>
 800b292:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b296:	ec53 2b18 	vmov	r2, r3, d8
 800b29a:	f7f5 fad7 	bl	800084c <__aeabi_ddiv>
 800b29e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b2a2:	e029      	b.n	800b2f8 <_dtoa_r+0x3d8>
 800b2a4:	2502      	movs	r5, #2
 800b2a6:	e7f2      	b.n	800b28e <_dtoa_r+0x36e>
 800b2a8:	07f9      	lsls	r1, r7, #31
 800b2aa:	d508      	bpl.n	800b2be <_dtoa_r+0x39e>
 800b2ac:	ec51 0b18 	vmov	r0, r1, d8
 800b2b0:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b2b4:	f7f5 f9a0 	bl	80005f8 <__aeabi_dmul>
 800b2b8:	ec41 0b18 	vmov	d8, r0, r1
 800b2bc:	3501      	adds	r5, #1
 800b2be:	107f      	asrs	r7, r7, #1
 800b2c0:	3608      	adds	r6, #8
 800b2c2:	e7e5      	b.n	800b290 <_dtoa_r+0x370>
 800b2c4:	f000 80a6 	beq.w	800b414 <_dtoa_r+0x4f4>
 800b2c8:	f1ca 0600 	rsb	r6, sl, #0
 800b2cc:	4ba5      	ldr	r3, [pc, #660]	; (800b564 <_dtoa_r+0x644>)
 800b2ce:	4fa6      	ldr	r7, [pc, #664]	; (800b568 <_dtoa_r+0x648>)
 800b2d0:	f006 020f 	and.w	r2, r6, #15
 800b2d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b2d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2dc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b2e0:	f7f5 f98a 	bl	80005f8 <__aeabi_dmul>
 800b2e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b2e8:	1136      	asrs	r6, r6, #4
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	2502      	movs	r5, #2
 800b2ee:	2e00      	cmp	r6, #0
 800b2f0:	f040 8085 	bne.w	800b3fe <_dtoa_r+0x4de>
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d1d2      	bne.n	800b29e <_dtoa_r+0x37e>
 800b2f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	f000 808c 	beq.w	800b418 <_dtoa_r+0x4f8>
 800b300:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b304:	4b99      	ldr	r3, [pc, #612]	; (800b56c <_dtoa_r+0x64c>)
 800b306:	2200      	movs	r2, #0
 800b308:	4630      	mov	r0, r6
 800b30a:	4639      	mov	r1, r7
 800b30c:	f7f5 fbe6 	bl	8000adc <__aeabi_dcmplt>
 800b310:	2800      	cmp	r0, #0
 800b312:	f000 8081 	beq.w	800b418 <_dtoa_r+0x4f8>
 800b316:	9b01      	ldr	r3, [sp, #4]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d07d      	beq.n	800b418 <_dtoa_r+0x4f8>
 800b31c:	f1b9 0f00 	cmp.w	r9, #0
 800b320:	dd3c      	ble.n	800b39c <_dtoa_r+0x47c>
 800b322:	f10a 33ff 	add.w	r3, sl, #4294967295
 800b326:	9307      	str	r3, [sp, #28]
 800b328:	2200      	movs	r2, #0
 800b32a:	4b91      	ldr	r3, [pc, #580]	; (800b570 <_dtoa_r+0x650>)
 800b32c:	4630      	mov	r0, r6
 800b32e:	4639      	mov	r1, r7
 800b330:	f7f5 f962 	bl	80005f8 <__aeabi_dmul>
 800b334:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b338:	3501      	adds	r5, #1
 800b33a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800b33e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b342:	4628      	mov	r0, r5
 800b344:	f7f5 f8ee 	bl	8000524 <__aeabi_i2d>
 800b348:	4632      	mov	r2, r6
 800b34a:	463b      	mov	r3, r7
 800b34c:	f7f5 f954 	bl	80005f8 <__aeabi_dmul>
 800b350:	4b88      	ldr	r3, [pc, #544]	; (800b574 <_dtoa_r+0x654>)
 800b352:	2200      	movs	r2, #0
 800b354:	f7f4 ff9a 	bl	800028c <__adddf3>
 800b358:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800b35c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b360:	9303      	str	r3, [sp, #12]
 800b362:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b364:	2b00      	cmp	r3, #0
 800b366:	d15c      	bne.n	800b422 <_dtoa_r+0x502>
 800b368:	4b83      	ldr	r3, [pc, #524]	; (800b578 <_dtoa_r+0x658>)
 800b36a:	2200      	movs	r2, #0
 800b36c:	4630      	mov	r0, r6
 800b36e:	4639      	mov	r1, r7
 800b370:	f7f4 ff8a 	bl	8000288 <__aeabi_dsub>
 800b374:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b378:	4606      	mov	r6, r0
 800b37a:	460f      	mov	r7, r1
 800b37c:	f7f5 fbcc 	bl	8000b18 <__aeabi_dcmpgt>
 800b380:	2800      	cmp	r0, #0
 800b382:	f040 8296 	bne.w	800b8b2 <_dtoa_r+0x992>
 800b386:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b38a:	4630      	mov	r0, r6
 800b38c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b390:	4639      	mov	r1, r7
 800b392:	f7f5 fba3 	bl	8000adc <__aeabi_dcmplt>
 800b396:	2800      	cmp	r0, #0
 800b398:	f040 8288 	bne.w	800b8ac <_dtoa_r+0x98c>
 800b39c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b3a0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b3a4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	f2c0 8158 	blt.w	800b65c <_dtoa_r+0x73c>
 800b3ac:	f1ba 0f0e 	cmp.w	sl, #14
 800b3b0:	f300 8154 	bgt.w	800b65c <_dtoa_r+0x73c>
 800b3b4:	4b6b      	ldr	r3, [pc, #428]	; (800b564 <_dtoa_r+0x644>)
 800b3b6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b3ba:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b3be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	f280 80e3 	bge.w	800b58c <_dtoa_r+0x66c>
 800b3c6:	9b01      	ldr	r3, [sp, #4]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	f300 80df 	bgt.w	800b58c <_dtoa_r+0x66c>
 800b3ce:	f040 826d 	bne.w	800b8ac <_dtoa_r+0x98c>
 800b3d2:	4b69      	ldr	r3, [pc, #420]	; (800b578 <_dtoa_r+0x658>)
 800b3d4:	2200      	movs	r2, #0
 800b3d6:	4640      	mov	r0, r8
 800b3d8:	4649      	mov	r1, r9
 800b3da:	f7f5 f90d 	bl	80005f8 <__aeabi_dmul>
 800b3de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b3e2:	f7f5 fb8f 	bl	8000b04 <__aeabi_dcmpge>
 800b3e6:	9e01      	ldr	r6, [sp, #4]
 800b3e8:	4637      	mov	r7, r6
 800b3ea:	2800      	cmp	r0, #0
 800b3ec:	f040 8243 	bne.w	800b876 <_dtoa_r+0x956>
 800b3f0:	9d00      	ldr	r5, [sp, #0]
 800b3f2:	2331      	movs	r3, #49	; 0x31
 800b3f4:	f805 3b01 	strb.w	r3, [r5], #1
 800b3f8:	f10a 0a01 	add.w	sl, sl, #1
 800b3fc:	e23f      	b.n	800b87e <_dtoa_r+0x95e>
 800b3fe:	07f2      	lsls	r2, r6, #31
 800b400:	d505      	bpl.n	800b40e <_dtoa_r+0x4ee>
 800b402:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b406:	f7f5 f8f7 	bl	80005f8 <__aeabi_dmul>
 800b40a:	3501      	adds	r5, #1
 800b40c:	2301      	movs	r3, #1
 800b40e:	1076      	asrs	r6, r6, #1
 800b410:	3708      	adds	r7, #8
 800b412:	e76c      	b.n	800b2ee <_dtoa_r+0x3ce>
 800b414:	2502      	movs	r5, #2
 800b416:	e76f      	b.n	800b2f8 <_dtoa_r+0x3d8>
 800b418:	9b01      	ldr	r3, [sp, #4]
 800b41a:	f8cd a01c 	str.w	sl, [sp, #28]
 800b41e:	930c      	str	r3, [sp, #48]	; 0x30
 800b420:	e78d      	b.n	800b33e <_dtoa_r+0x41e>
 800b422:	9900      	ldr	r1, [sp, #0]
 800b424:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b426:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b428:	4b4e      	ldr	r3, [pc, #312]	; (800b564 <_dtoa_r+0x644>)
 800b42a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b42e:	4401      	add	r1, r0
 800b430:	9102      	str	r1, [sp, #8]
 800b432:	9908      	ldr	r1, [sp, #32]
 800b434:	eeb0 8a47 	vmov.f32	s16, s14
 800b438:	eef0 8a67 	vmov.f32	s17, s15
 800b43c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b440:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b444:	2900      	cmp	r1, #0
 800b446:	d045      	beq.n	800b4d4 <_dtoa_r+0x5b4>
 800b448:	494c      	ldr	r1, [pc, #304]	; (800b57c <_dtoa_r+0x65c>)
 800b44a:	2000      	movs	r0, #0
 800b44c:	f7f5 f9fe 	bl	800084c <__aeabi_ddiv>
 800b450:	ec53 2b18 	vmov	r2, r3, d8
 800b454:	f7f4 ff18 	bl	8000288 <__aeabi_dsub>
 800b458:	9d00      	ldr	r5, [sp, #0]
 800b45a:	ec41 0b18 	vmov	d8, r0, r1
 800b45e:	4639      	mov	r1, r7
 800b460:	4630      	mov	r0, r6
 800b462:	f7f5 fb79 	bl	8000b58 <__aeabi_d2iz>
 800b466:	900c      	str	r0, [sp, #48]	; 0x30
 800b468:	f7f5 f85c 	bl	8000524 <__aeabi_i2d>
 800b46c:	4602      	mov	r2, r0
 800b46e:	460b      	mov	r3, r1
 800b470:	4630      	mov	r0, r6
 800b472:	4639      	mov	r1, r7
 800b474:	f7f4 ff08 	bl	8000288 <__aeabi_dsub>
 800b478:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b47a:	3330      	adds	r3, #48	; 0x30
 800b47c:	f805 3b01 	strb.w	r3, [r5], #1
 800b480:	ec53 2b18 	vmov	r2, r3, d8
 800b484:	4606      	mov	r6, r0
 800b486:	460f      	mov	r7, r1
 800b488:	f7f5 fb28 	bl	8000adc <__aeabi_dcmplt>
 800b48c:	2800      	cmp	r0, #0
 800b48e:	d165      	bne.n	800b55c <_dtoa_r+0x63c>
 800b490:	4632      	mov	r2, r6
 800b492:	463b      	mov	r3, r7
 800b494:	4935      	ldr	r1, [pc, #212]	; (800b56c <_dtoa_r+0x64c>)
 800b496:	2000      	movs	r0, #0
 800b498:	f7f4 fef6 	bl	8000288 <__aeabi_dsub>
 800b49c:	ec53 2b18 	vmov	r2, r3, d8
 800b4a0:	f7f5 fb1c 	bl	8000adc <__aeabi_dcmplt>
 800b4a4:	2800      	cmp	r0, #0
 800b4a6:	f040 80b9 	bne.w	800b61c <_dtoa_r+0x6fc>
 800b4aa:	9b02      	ldr	r3, [sp, #8]
 800b4ac:	429d      	cmp	r5, r3
 800b4ae:	f43f af75 	beq.w	800b39c <_dtoa_r+0x47c>
 800b4b2:	4b2f      	ldr	r3, [pc, #188]	; (800b570 <_dtoa_r+0x650>)
 800b4b4:	ec51 0b18 	vmov	r0, r1, d8
 800b4b8:	2200      	movs	r2, #0
 800b4ba:	f7f5 f89d 	bl	80005f8 <__aeabi_dmul>
 800b4be:	4b2c      	ldr	r3, [pc, #176]	; (800b570 <_dtoa_r+0x650>)
 800b4c0:	ec41 0b18 	vmov	d8, r0, r1
 800b4c4:	2200      	movs	r2, #0
 800b4c6:	4630      	mov	r0, r6
 800b4c8:	4639      	mov	r1, r7
 800b4ca:	f7f5 f895 	bl	80005f8 <__aeabi_dmul>
 800b4ce:	4606      	mov	r6, r0
 800b4d0:	460f      	mov	r7, r1
 800b4d2:	e7c4      	b.n	800b45e <_dtoa_r+0x53e>
 800b4d4:	ec51 0b17 	vmov	r0, r1, d7
 800b4d8:	f7f5 f88e 	bl	80005f8 <__aeabi_dmul>
 800b4dc:	9b02      	ldr	r3, [sp, #8]
 800b4de:	9d00      	ldr	r5, [sp, #0]
 800b4e0:	930c      	str	r3, [sp, #48]	; 0x30
 800b4e2:	ec41 0b18 	vmov	d8, r0, r1
 800b4e6:	4639      	mov	r1, r7
 800b4e8:	4630      	mov	r0, r6
 800b4ea:	f7f5 fb35 	bl	8000b58 <__aeabi_d2iz>
 800b4ee:	9011      	str	r0, [sp, #68]	; 0x44
 800b4f0:	f7f5 f818 	bl	8000524 <__aeabi_i2d>
 800b4f4:	4602      	mov	r2, r0
 800b4f6:	460b      	mov	r3, r1
 800b4f8:	4630      	mov	r0, r6
 800b4fa:	4639      	mov	r1, r7
 800b4fc:	f7f4 fec4 	bl	8000288 <__aeabi_dsub>
 800b500:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b502:	3330      	adds	r3, #48	; 0x30
 800b504:	f805 3b01 	strb.w	r3, [r5], #1
 800b508:	9b02      	ldr	r3, [sp, #8]
 800b50a:	429d      	cmp	r5, r3
 800b50c:	4606      	mov	r6, r0
 800b50e:	460f      	mov	r7, r1
 800b510:	f04f 0200 	mov.w	r2, #0
 800b514:	d134      	bne.n	800b580 <_dtoa_r+0x660>
 800b516:	4b19      	ldr	r3, [pc, #100]	; (800b57c <_dtoa_r+0x65c>)
 800b518:	ec51 0b18 	vmov	r0, r1, d8
 800b51c:	f7f4 feb6 	bl	800028c <__adddf3>
 800b520:	4602      	mov	r2, r0
 800b522:	460b      	mov	r3, r1
 800b524:	4630      	mov	r0, r6
 800b526:	4639      	mov	r1, r7
 800b528:	f7f5 faf6 	bl	8000b18 <__aeabi_dcmpgt>
 800b52c:	2800      	cmp	r0, #0
 800b52e:	d175      	bne.n	800b61c <_dtoa_r+0x6fc>
 800b530:	ec53 2b18 	vmov	r2, r3, d8
 800b534:	4911      	ldr	r1, [pc, #68]	; (800b57c <_dtoa_r+0x65c>)
 800b536:	2000      	movs	r0, #0
 800b538:	f7f4 fea6 	bl	8000288 <__aeabi_dsub>
 800b53c:	4602      	mov	r2, r0
 800b53e:	460b      	mov	r3, r1
 800b540:	4630      	mov	r0, r6
 800b542:	4639      	mov	r1, r7
 800b544:	f7f5 faca 	bl	8000adc <__aeabi_dcmplt>
 800b548:	2800      	cmp	r0, #0
 800b54a:	f43f af27 	beq.w	800b39c <_dtoa_r+0x47c>
 800b54e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b550:	1e6b      	subs	r3, r5, #1
 800b552:	930c      	str	r3, [sp, #48]	; 0x30
 800b554:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b558:	2b30      	cmp	r3, #48	; 0x30
 800b55a:	d0f8      	beq.n	800b54e <_dtoa_r+0x62e>
 800b55c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800b560:	e04a      	b.n	800b5f8 <_dtoa_r+0x6d8>
 800b562:	bf00      	nop
 800b564:	0800e450 	.word	0x0800e450
 800b568:	0800e428 	.word	0x0800e428
 800b56c:	3ff00000 	.word	0x3ff00000
 800b570:	40240000 	.word	0x40240000
 800b574:	401c0000 	.word	0x401c0000
 800b578:	40140000 	.word	0x40140000
 800b57c:	3fe00000 	.word	0x3fe00000
 800b580:	4baf      	ldr	r3, [pc, #700]	; (800b840 <_dtoa_r+0x920>)
 800b582:	f7f5 f839 	bl	80005f8 <__aeabi_dmul>
 800b586:	4606      	mov	r6, r0
 800b588:	460f      	mov	r7, r1
 800b58a:	e7ac      	b.n	800b4e6 <_dtoa_r+0x5c6>
 800b58c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b590:	9d00      	ldr	r5, [sp, #0]
 800b592:	4642      	mov	r2, r8
 800b594:	464b      	mov	r3, r9
 800b596:	4630      	mov	r0, r6
 800b598:	4639      	mov	r1, r7
 800b59a:	f7f5 f957 	bl	800084c <__aeabi_ddiv>
 800b59e:	f7f5 fadb 	bl	8000b58 <__aeabi_d2iz>
 800b5a2:	9002      	str	r0, [sp, #8]
 800b5a4:	f7f4 ffbe 	bl	8000524 <__aeabi_i2d>
 800b5a8:	4642      	mov	r2, r8
 800b5aa:	464b      	mov	r3, r9
 800b5ac:	f7f5 f824 	bl	80005f8 <__aeabi_dmul>
 800b5b0:	4602      	mov	r2, r0
 800b5b2:	460b      	mov	r3, r1
 800b5b4:	4630      	mov	r0, r6
 800b5b6:	4639      	mov	r1, r7
 800b5b8:	f7f4 fe66 	bl	8000288 <__aeabi_dsub>
 800b5bc:	9e02      	ldr	r6, [sp, #8]
 800b5be:	9f01      	ldr	r7, [sp, #4]
 800b5c0:	3630      	adds	r6, #48	; 0x30
 800b5c2:	f805 6b01 	strb.w	r6, [r5], #1
 800b5c6:	9e00      	ldr	r6, [sp, #0]
 800b5c8:	1bae      	subs	r6, r5, r6
 800b5ca:	42b7      	cmp	r7, r6
 800b5cc:	4602      	mov	r2, r0
 800b5ce:	460b      	mov	r3, r1
 800b5d0:	d137      	bne.n	800b642 <_dtoa_r+0x722>
 800b5d2:	f7f4 fe5b 	bl	800028c <__adddf3>
 800b5d6:	4642      	mov	r2, r8
 800b5d8:	464b      	mov	r3, r9
 800b5da:	4606      	mov	r6, r0
 800b5dc:	460f      	mov	r7, r1
 800b5de:	f7f5 fa9b 	bl	8000b18 <__aeabi_dcmpgt>
 800b5e2:	b9c8      	cbnz	r0, 800b618 <_dtoa_r+0x6f8>
 800b5e4:	4642      	mov	r2, r8
 800b5e6:	464b      	mov	r3, r9
 800b5e8:	4630      	mov	r0, r6
 800b5ea:	4639      	mov	r1, r7
 800b5ec:	f7f5 fa6c 	bl	8000ac8 <__aeabi_dcmpeq>
 800b5f0:	b110      	cbz	r0, 800b5f8 <_dtoa_r+0x6d8>
 800b5f2:	9b02      	ldr	r3, [sp, #8]
 800b5f4:	07d9      	lsls	r1, r3, #31
 800b5f6:	d40f      	bmi.n	800b618 <_dtoa_r+0x6f8>
 800b5f8:	4620      	mov	r0, r4
 800b5fa:	4659      	mov	r1, fp
 800b5fc:	f000 fad6 	bl	800bbac <_Bfree>
 800b600:	2300      	movs	r3, #0
 800b602:	702b      	strb	r3, [r5, #0]
 800b604:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b606:	f10a 0001 	add.w	r0, sl, #1
 800b60a:	6018      	str	r0, [r3, #0]
 800b60c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b60e:	2b00      	cmp	r3, #0
 800b610:	f43f acd8 	beq.w	800afc4 <_dtoa_r+0xa4>
 800b614:	601d      	str	r5, [r3, #0]
 800b616:	e4d5      	b.n	800afc4 <_dtoa_r+0xa4>
 800b618:	f8cd a01c 	str.w	sl, [sp, #28]
 800b61c:	462b      	mov	r3, r5
 800b61e:	461d      	mov	r5, r3
 800b620:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b624:	2a39      	cmp	r2, #57	; 0x39
 800b626:	d108      	bne.n	800b63a <_dtoa_r+0x71a>
 800b628:	9a00      	ldr	r2, [sp, #0]
 800b62a:	429a      	cmp	r2, r3
 800b62c:	d1f7      	bne.n	800b61e <_dtoa_r+0x6fe>
 800b62e:	9a07      	ldr	r2, [sp, #28]
 800b630:	9900      	ldr	r1, [sp, #0]
 800b632:	3201      	adds	r2, #1
 800b634:	9207      	str	r2, [sp, #28]
 800b636:	2230      	movs	r2, #48	; 0x30
 800b638:	700a      	strb	r2, [r1, #0]
 800b63a:	781a      	ldrb	r2, [r3, #0]
 800b63c:	3201      	adds	r2, #1
 800b63e:	701a      	strb	r2, [r3, #0]
 800b640:	e78c      	b.n	800b55c <_dtoa_r+0x63c>
 800b642:	4b7f      	ldr	r3, [pc, #508]	; (800b840 <_dtoa_r+0x920>)
 800b644:	2200      	movs	r2, #0
 800b646:	f7f4 ffd7 	bl	80005f8 <__aeabi_dmul>
 800b64a:	2200      	movs	r2, #0
 800b64c:	2300      	movs	r3, #0
 800b64e:	4606      	mov	r6, r0
 800b650:	460f      	mov	r7, r1
 800b652:	f7f5 fa39 	bl	8000ac8 <__aeabi_dcmpeq>
 800b656:	2800      	cmp	r0, #0
 800b658:	d09b      	beq.n	800b592 <_dtoa_r+0x672>
 800b65a:	e7cd      	b.n	800b5f8 <_dtoa_r+0x6d8>
 800b65c:	9a08      	ldr	r2, [sp, #32]
 800b65e:	2a00      	cmp	r2, #0
 800b660:	f000 80c4 	beq.w	800b7ec <_dtoa_r+0x8cc>
 800b664:	9a05      	ldr	r2, [sp, #20]
 800b666:	2a01      	cmp	r2, #1
 800b668:	f300 80a8 	bgt.w	800b7bc <_dtoa_r+0x89c>
 800b66c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b66e:	2a00      	cmp	r2, #0
 800b670:	f000 80a0 	beq.w	800b7b4 <_dtoa_r+0x894>
 800b674:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b678:	9e06      	ldr	r6, [sp, #24]
 800b67a:	4645      	mov	r5, r8
 800b67c:	9a04      	ldr	r2, [sp, #16]
 800b67e:	2101      	movs	r1, #1
 800b680:	441a      	add	r2, r3
 800b682:	4620      	mov	r0, r4
 800b684:	4498      	add	r8, r3
 800b686:	9204      	str	r2, [sp, #16]
 800b688:	f000 fb4c 	bl	800bd24 <__i2b>
 800b68c:	4607      	mov	r7, r0
 800b68e:	2d00      	cmp	r5, #0
 800b690:	dd0b      	ble.n	800b6aa <_dtoa_r+0x78a>
 800b692:	9b04      	ldr	r3, [sp, #16]
 800b694:	2b00      	cmp	r3, #0
 800b696:	dd08      	ble.n	800b6aa <_dtoa_r+0x78a>
 800b698:	42ab      	cmp	r3, r5
 800b69a:	9a04      	ldr	r2, [sp, #16]
 800b69c:	bfa8      	it	ge
 800b69e:	462b      	movge	r3, r5
 800b6a0:	eba8 0803 	sub.w	r8, r8, r3
 800b6a4:	1aed      	subs	r5, r5, r3
 800b6a6:	1ad3      	subs	r3, r2, r3
 800b6a8:	9304      	str	r3, [sp, #16]
 800b6aa:	9b06      	ldr	r3, [sp, #24]
 800b6ac:	b1fb      	cbz	r3, 800b6ee <_dtoa_r+0x7ce>
 800b6ae:	9b08      	ldr	r3, [sp, #32]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	f000 809f 	beq.w	800b7f4 <_dtoa_r+0x8d4>
 800b6b6:	2e00      	cmp	r6, #0
 800b6b8:	dd11      	ble.n	800b6de <_dtoa_r+0x7be>
 800b6ba:	4639      	mov	r1, r7
 800b6bc:	4632      	mov	r2, r6
 800b6be:	4620      	mov	r0, r4
 800b6c0:	f000 fbec 	bl	800be9c <__pow5mult>
 800b6c4:	465a      	mov	r2, fp
 800b6c6:	4601      	mov	r1, r0
 800b6c8:	4607      	mov	r7, r0
 800b6ca:	4620      	mov	r0, r4
 800b6cc:	f000 fb40 	bl	800bd50 <__multiply>
 800b6d0:	4659      	mov	r1, fp
 800b6d2:	9007      	str	r0, [sp, #28]
 800b6d4:	4620      	mov	r0, r4
 800b6d6:	f000 fa69 	bl	800bbac <_Bfree>
 800b6da:	9b07      	ldr	r3, [sp, #28]
 800b6dc:	469b      	mov	fp, r3
 800b6de:	9b06      	ldr	r3, [sp, #24]
 800b6e0:	1b9a      	subs	r2, r3, r6
 800b6e2:	d004      	beq.n	800b6ee <_dtoa_r+0x7ce>
 800b6e4:	4659      	mov	r1, fp
 800b6e6:	4620      	mov	r0, r4
 800b6e8:	f000 fbd8 	bl	800be9c <__pow5mult>
 800b6ec:	4683      	mov	fp, r0
 800b6ee:	2101      	movs	r1, #1
 800b6f0:	4620      	mov	r0, r4
 800b6f2:	f000 fb17 	bl	800bd24 <__i2b>
 800b6f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	4606      	mov	r6, r0
 800b6fc:	dd7c      	ble.n	800b7f8 <_dtoa_r+0x8d8>
 800b6fe:	461a      	mov	r2, r3
 800b700:	4601      	mov	r1, r0
 800b702:	4620      	mov	r0, r4
 800b704:	f000 fbca 	bl	800be9c <__pow5mult>
 800b708:	9b05      	ldr	r3, [sp, #20]
 800b70a:	2b01      	cmp	r3, #1
 800b70c:	4606      	mov	r6, r0
 800b70e:	dd76      	ble.n	800b7fe <_dtoa_r+0x8de>
 800b710:	2300      	movs	r3, #0
 800b712:	9306      	str	r3, [sp, #24]
 800b714:	6933      	ldr	r3, [r6, #16]
 800b716:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b71a:	6918      	ldr	r0, [r3, #16]
 800b71c:	f000 fab2 	bl	800bc84 <__hi0bits>
 800b720:	f1c0 0020 	rsb	r0, r0, #32
 800b724:	9b04      	ldr	r3, [sp, #16]
 800b726:	4418      	add	r0, r3
 800b728:	f010 001f 	ands.w	r0, r0, #31
 800b72c:	f000 8086 	beq.w	800b83c <_dtoa_r+0x91c>
 800b730:	f1c0 0320 	rsb	r3, r0, #32
 800b734:	2b04      	cmp	r3, #4
 800b736:	dd7f      	ble.n	800b838 <_dtoa_r+0x918>
 800b738:	f1c0 001c 	rsb	r0, r0, #28
 800b73c:	9b04      	ldr	r3, [sp, #16]
 800b73e:	4403      	add	r3, r0
 800b740:	4480      	add	r8, r0
 800b742:	4405      	add	r5, r0
 800b744:	9304      	str	r3, [sp, #16]
 800b746:	f1b8 0f00 	cmp.w	r8, #0
 800b74a:	dd05      	ble.n	800b758 <_dtoa_r+0x838>
 800b74c:	4659      	mov	r1, fp
 800b74e:	4642      	mov	r2, r8
 800b750:	4620      	mov	r0, r4
 800b752:	f000 fbfd 	bl	800bf50 <__lshift>
 800b756:	4683      	mov	fp, r0
 800b758:	9b04      	ldr	r3, [sp, #16]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	dd05      	ble.n	800b76a <_dtoa_r+0x84a>
 800b75e:	4631      	mov	r1, r6
 800b760:	461a      	mov	r2, r3
 800b762:	4620      	mov	r0, r4
 800b764:	f000 fbf4 	bl	800bf50 <__lshift>
 800b768:	4606      	mov	r6, r0
 800b76a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d069      	beq.n	800b844 <_dtoa_r+0x924>
 800b770:	4631      	mov	r1, r6
 800b772:	4658      	mov	r0, fp
 800b774:	f000 fc58 	bl	800c028 <__mcmp>
 800b778:	2800      	cmp	r0, #0
 800b77a:	da63      	bge.n	800b844 <_dtoa_r+0x924>
 800b77c:	2300      	movs	r3, #0
 800b77e:	4659      	mov	r1, fp
 800b780:	220a      	movs	r2, #10
 800b782:	4620      	mov	r0, r4
 800b784:	f000 fa34 	bl	800bbf0 <__multadd>
 800b788:	9b08      	ldr	r3, [sp, #32]
 800b78a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b78e:	4683      	mov	fp, r0
 800b790:	2b00      	cmp	r3, #0
 800b792:	f000 818f 	beq.w	800bab4 <_dtoa_r+0xb94>
 800b796:	4639      	mov	r1, r7
 800b798:	2300      	movs	r3, #0
 800b79a:	220a      	movs	r2, #10
 800b79c:	4620      	mov	r0, r4
 800b79e:	f000 fa27 	bl	800bbf0 <__multadd>
 800b7a2:	f1b9 0f00 	cmp.w	r9, #0
 800b7a6:	4607      	mov	r7, r0
 800b7a8:	f300 808e 	bgt.w	800b8c8 <_dtoa_r+0x9a8>
 800b7ac:	9b05      	ldr	r3, [sp, #20]
 800b7ae:	2b02      	cmp	r3, #2
 800b7b0:	dc50      	bgt.n	800b854 <_dtoa_r+0x934>
 800b7b2:	e089      	b.n	800b8c8 <_dtoa_r+0x9a8>
 800b7b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b7b6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b7ba:	e75d      	b.n	800b678 <_dtoa_r+0x758>
 800b7bc:	9b01      	ldr	r3, [sp, #4]
 800b7be:	1e5e      	subs	r6, r3, #1
 800b7c0:	9b06      	ldr	r3, [sp, #24]
 800b7c2:	42b3      	cmp	r3, r6
 800b7c4:	bfbf      	itttt	lt
 800b7c6:	9b06      	ldrlt	r3, [sp, #24]
 800b7c8:	9606      	strlt	r6, [sp, #24]
 800b7ca:	1af2      	sublt	r2, r6, r3
 800b7cc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800b7ce:	bfb6      	itet	lt
 800b7d0:	189b      	addlt	r3, r3, r2
 800b7d2:	1b9e      	subge	r6, r3, r6
 800b7d4:	930d      	strlt	r3, [sp, #52]	; 0x34
 800b7d6:	9b01      	ldr	r3, [sp, #4]
 800b7d8:	bfb8      	it	lt
 800b7da:	2600      	movlt	r6, #0
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	bfb5      	itete	lt
 800b7e0:	eba8 0503 	sublt.w	r5, r8, r3
 800b7e4:	9b01      	ldrge	r3, [sp, #4]
 800b7e6:	2300      	movlt	r3, #0
 800b7e8:	4645      	movge	r5, r8
 800b7ea:	e747      	b.n	800b67c <_dtoa_r+0x75c>
 800b7ec:	9e06      	ldr	r6, [sp, #24]
 800b7ee:	9f08      	ldr	r7, [sp, #32]
 800b7f0:	4645      	mov	r5, r8
 800b7f2:	e74c      	b.n	800b68e <_dtoa_r+0x76e>
 800b7f4:	9a06      	ldr	r2, [sp, #24]
 800b7f6:	e775      	b.n	800b6e4 <_dtoa_r+0x7c4>
 800b7f8:	9b05      	ldr	r3, [sp, #20]
 800b7fa:	2b01      	cmp	r3, #1
 800b7fc:	dc18      	bgt.n	800b830 <_dtoa_r+0x910>
 800b7fe:	9b02      	ldr	r3, [sp, #8]
 800b800:	b9b3      	cbnz	r3, 800b830 <_dtoa_r+0x910>
 800b802:	9b03      	ldr	r3, [sp, #12]
 800b804:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b808:	b9a3      	cbnz	r3, 800b834 <_dtoa_r+0x914>
 800b80a:	9b03      	ldr	r3, [sp, #12]
 800b80c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b810:	0d1b      	lsrs	r3, r3, #20
 800b812:	051b      	lsls	r3, r3, #20
 800b814:	b12b      	cbz	r3, 800b822 <_dtoa_r+0x902>
 800b816:	9b04      	ldr	r3, [sp, #16]
 800b818:	3301      	adds	r3, #1
 800b81a:	9304      	str	r3, [sp, #16]
 800b81c:	f108 0801 	add.w	r8, r8, #1
 800b820:	2301      	movs	r3, #1
 800b822:	9306      	str	r3, [sp, #24]
 800b824:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b826:	2b00      	cmp	r3, #0
 800b828:	f47f af74 	bne.w	800b714 <_dtoa_r+0x7f4>
 800b82c:	2001      	movs	r0, #1
 800b82e:	e779      	b.n	800b724 <_dtoa_r+0x804>
 800b830:	2300      	movs	r3, #0
 800b832:	e7f6      	b.n	800b822 <_dtoa_r+0x902>
 800b834:	9b02      	ldr	r3, [sp, #8]
 800b836:	e7f4      	b.n	800b822 <_dtoa_r+0x902>
 800b838:	d085      	beq.n	800b746 <_dtoa_r+0x826>
 800b83a:	4618      	mov	r0, r3
 800b83c:	301c      	adds	r0, #28
 800b83e:	e77d      	b.n	800b73c <_dtoa_r+0x81c>
 800b840:	40240000 	.word	0x40240000
 800b844:	9b01      	ldr	r3, [sp, #4]
 800b846:	2b00      	cmp	r3, #0
 800b848:	dc38      	bgt.n	800b8bc <_dtoa_r+0x99c>
 800b84a:	9b05      	ldr	r3, [sp, #20]
 800b84c:	2b02      	cmp	r3, #2
 800b84e:	dd35      	ble.n	800b8bc <_dtoa_r+0x99c>
 800b850:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b854:	f1b9 0f00 	cmp.w	r9, #0
 800b858:	d10d      	bne.n	800b876 <_dtoa_r+0x956>
 800b85a:	4631      	mov	r1, r6
 800b85c:	464b      	mov	r3, r9
 800b85e:	2205      	movs	r2, #5
 800b860:	4620      	mov	r0, r4
 800b862:	f000 f9c5 	bl	800bbf0 <__multadd>
 800b866:	4601      	mov	r1, r0
 800b868:	4606      	mov	r6, r0
 800b86a:	4658      	mov	r0, fp
 800b86c:	f000 fbdc 	bl	800c028 <__mcmp>
 800b870:	2800      	cmp	r0, #0
 800b872:	f73f adbd 	bgt.w	800b3f0 <_dtoa_r+0x4d0>
 800b876:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b878:	9d00      	ldr	r5, [sp, #0]
 800b87a:	ea6f 0a03 	mvn.w	sl, r3
 800b87e:	f04f 0800 	mov.w	r8, #0
 800b882:	4631      	mov	r1, r6
 800b884:	4620      	mov	r0, r4
 800b886:	f000 f991 	bl	800bbac <_Bfree>
 800b88a:	2f00      	cmp	r7, #0
 800b88c:	f43f aeb4 	beq.w	800b5f8 <_dtoa_r+0x6d8>
 800b890:	f1b8 0f00 	cmp.w	r8, #0
 800b894:	d005      	beq.n	800b8a2 <_dtoa_r+0x982>
 800b896:	45b8      	cmp	r8, r7
 800b898:	d003      	beq.n	800b8a2 <_dtoa_r+0x982>
 800b89a:	4641      	mov	r1, r8
 800b89c:	4620      	mov	r0, r4
 800b89e:	f000 f985 	bl	800bbac <_Bfree>
 800b8a2:	4639      	mov	r1, r7
 800b8a4:	4620      	mov	r0, r4
 800b8a6:	f000 f981 	bl	800bbac <_Bfree>
 800b8aa:	e6a5      	b.n	800b5f8 <_dtoa_r+0x6d8>
 800b8ac:	2600      	movs	r6, #0
 800b8ae:	4637      	mov	r7, r6
 800b8b0:	e7e1      	b.n	800b876 <_dtoa_r+0x956>
 800b8b2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800b8b4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800b8b8:	4637      	mov	r7, r6
 800b8ba:	e599      	b.n	800b3f0 <_dtoa_r+0x4d0>
 800b8bc:	9b08      	ldr	r3, [sp, #32]
 800b8be:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	f000 80fd 	beq.w	800bac2 <_dtoa_r+0xba2>
 800b8c8:	2d00      	cmp	r5, #0
 800b8ca:	dd05      	ble.n	800b8d8 <_dtoa_r+0x9b8>
 800b8cc:	4639      	mov	r1, r7
 800b8ce:	462a      	mov	r2, r5
 800b8d0:	4620      	mov	r0, r4
 800b8d2:	f000 fb3d 	bl	800bf50 <__lshift>
 800b8d6:	4607      	mov	r7, r0
 800b8d8:	9b06      	ldr	r3, [sp, #24]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d05c      	beq.n	800b998 <_dtoa_r+0xa78>
 800b8de:	6879      	ldr	r1, [r7, #4]
 800b8e0:	4620      	mov	r0, r4
 800b8e2:	f000 f923 	bl	800bb2c <_Balloc>
 800b8e6:	4605      	mov	r5, r0
 800b8e8:	b928      	cbnz	r0, 800b8f6 <_dtoa_r+0x9d6>
 800b8ea:	4b80      	ldr	r3, [pc, #512]	; (800baec <_dtoa_r+0xbcc>)
 800b8ec:	4602      	mov	r2, r0
 800b8ee:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b8f2:	f7ff bb2e 	b.w	800af52 <_dtoa_r+0x32>
 800b8f6:	693a      	ldr	r2, [r7, #16]
 800b8f8:	3202      	adds	r2, #2
 800b8fa:	0092      	lsls	r2, r2, #2
 800b8fc:	f107 010c 	add.w	r1, r7, #12
 800b900:	300c      	adds	r0, #12
 800b902:	f000 f905 	bl	800bb10 <memcpy>
 800b906:	2201      	movs	r2, #1
 800b908:	4629      	mov	r1, r5
 800b90a:	4620      	mov	r0, r4
 800b90c:	f000 fb20 	bl	800bf50 <__lshift>
 800b910:	9b00      	ldr	r3, [sp, #0]
 800b912:	3301      	adds	r3, #1
 800b914:	9301      	str	r3, [sp, #4]
 800b916:	9b00      	ldr	r3, [sp, #0]
 800b918:	444b      	add	r3, r9
 800b91a:	9307      	str	r3, [sp, #28]
 800b91c:	9b02      	ldr	r3, [sp, #8]
 800b91e:	f003 0301 	and.w	r3, r3, #1
 800b922:	46b8      	mov	r8, r7
 800b924:	9306      	str	r3, [sp, #24]
 800b926:	4607      	mov	r7, r0
 800b928:	9b01      	ldr	r3, [sp, #4]
 800b92a:	4631      	mov	r1, r6
 800b92c:	3b01      	subs	r3, #1
 800b92e:	4658      	mov	r0, fp
 800b930:	9302      	str	r3, [sp, #8]
 800b932:	f7ff fa67 	bl	800ae04 <quorem>
 800b936:	4603      	mov	r3, r0
 800b938:	3330      	adds	r3, #48	; 0x30
 800b93a:	9004      	str	r0, [sp, #16]
 800b93c:	4641      	mov	r1, r8
 800b93e:	4658      	mov	r0, fp
 800b940:	9308      	str	r3, [sp, #32]
 800b942:	f000 fb71 	bl	800c028 <__mcmp>
 800b946:	463a      	mov	r2, r7
 800b948:	4681      	mov	r9, r0
 800b94a:	4631      	mov	r1, r6
 800b94c:	4620      	mov	r0, r4
 800b94e:	f000 fb87 	bl	800c060 <__mdiff>
 800b952:	68c2      	ldr	r2, [r0, #12]
 800b954:	9b08      	ldr	r3, [sp, #32]
 800b956:	4605      	mov	r5, r0
 800b958:	bb02      	cbnz	r2, 800b99c <_dtoa_r+0xa7c>
 800b95a:	4601      	mov	r1, r0
 800b95c:	4658      	mov	r0, fp
 800b95e:	f000 fb63 	bl	800c028 <__mcmp>
 800b962:	9b08      	ldr	r3, [sp, #32]
 800b964:	4602      	mov	r2, r0
 800b966:	4629      	mov	r1, r5
 800b968:	4620      	mov	r0, r4
 800b96a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800b96e:	f000 f91d 	bl	800bbac <_Bfree>
 800b972:	9b05      	ldr	r3, [sp, #20]
 800b974:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b976:	9d01      	ldr	r5, [sp, #4]
 800b978:	ea43 0102 	orr.w	r1, r3, r2
 800b97c:	9b06      	ldr	r3, [sp, #24]
 800b97e:	430b      	orrs	r3, r1
 800b980:	9b08      	ldr	r3, [sp, #32]
 800b982:	d10d      	bne.n	800b9a0 <_dtoa_r+0xa80>
 800b984:	2b39      	cmp	r3, #57	; 0x39
 800b986:	d029      	beq.n	800b9dc <_dtoa_r+0xabc>
 800b988:	f1b9 0f00 	cmp.w	r9, #0
 800b98c:	dd01      	ble.n	800b992 <_dtoa_r+0xa72>
 800b98e:	9b04      	ldr	r3, [sp, #16]
 800b990:	3331      	adds	r3, #49	; 0x31
 800b992:	9a02      	ldr	r2, [sp, #8]
 800b994:	7013      	strb	r3, [r2, #0]
 800b996:	e774      	b.n	800b882 <_dtoa_r+0x962>
 800b998:	4638      	mov	r0, r7
 800b99a:	e7b9      	b.n	800b910 <_dtoa_r+0x9f0>
 800b99c:	2201      	movs	r2, #1
 800b99e:	e7e2      	b.n	800b966 <_dtoa_r+0xa46>
 800b9a0:	f1b9 0f00 	cmp.w	r9, #0
 800b9a4:	db06      	blt.n	800b9b4 <_dtoa_r+0xa94>
 800b9a6:	9905      	ldr	r1, [sp, #20]
 800b9a8:	ea41 0909 	orr.w	r9, r1, r9
 800b9ac:	9906      	ldr	r1, [sp, #24]
 800b9ae:	ea59 0101 	orrs.w	r1, r9, r1
 800b9b2:	d120      	bne.n	800b9f6 <_dtoa_r+0xad6>
 800b9b4:	2a00      	cmp	r2, #0
 800b9b6:	ddec      	ble.n	800b992 <_dtoa_r+0xa72>
 800b9b8:	4659      	mov	r1, fp
 800b9ba:	2201      	movs	r2, #1
 800b9bc:	4620      	mov	r0, r4
 800b9be:	9301      	str	r3, [sp, #4]
 800b9c0:	f000 fac6 	bl	800bf50 <__lshift>
 800b9c4:	4631      	mov	r1, r6
 800b9c6:	4683      	mov	fp, r0
 800b9c8:	f000 fb2e 	bl	800c028 <__mcmp>
 800b9cc:	2800      	cmp	r0, #0
 800b9ce:	9b01      	ldr	r3, [sp, #4]
 800b9d0:	dc02      	bgt.n	800b9d8 <_dtoa_r+0xab8>
 800b9d2:	d1de      	bne.n	800b992 <_dtoa_r+0xa72>
 800b9d4:	07da      	lsls	r2, r3, #31
 800b9d6:	d5dc      	bpl.n	800b992 <_dtoa_r+0xa72>
 800b9d8:	2b39      	cmp	r3, #57	; 0x39
 800b9da:	d1d8      	bne.n	800b98e <_dtoa_r+0xa6e>
 800b9dc:	9a02      	ldr	r2, [sp, #8]
 800b9de:	2339      	movs	r3, #57	; 0x39
 800b9e0:	7013      	strb	r3, [r2, #0]
 800b9e2:	462b      	mov	r3, r5
 800b9e4:	461d      	mov	r5, r3
 800b9e6:	3b01      	subs	r3, #1
 800b9e8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b9ec:	2a39      	cmp	r2, #57	; 0x39
 800b9ee:	d050      	beq.n	800ba92 <_dtoa_r+0xb72>
 800b9f0:	3201      	adds	r2, #1
 800b9f2:	701a      	strb	r2, [r3, #0]
 800b9f4:	e745      	b.n	800b882 <_dtoa_r+0x962>
 800b9f6:	2a00      	cmp	r2, #0
 800b9f8:	dd03      	ble.n	800ba02 <_dtoa_r+0xae2>
 800b9fa:	2b39      	cmp	r3, #57	; 0x39
 800b9fc:	d0ee      	beq.n	800b9dc <_dtoa_r+0xabc>
 800b9fe:	3301      	adds	r3, #1
 800ba00:	e7c7      	b.n	800b992 <_dtoa_r+0xa72>
 800ba02:	9a01      	ldr	r2, [sp, #4]
 800ba04:	9907      	ldr	r1, [sp, #28]
 800ba06:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ba0a:	428a      	cmp	r2, r1
 800ba0c:	d02a      	beq.n	800ba64 <_dtoa_r+0xb44>
 800ba0e:	4659      	mov	r1, fp
 800ba10:	2300      	movs	r3, #0
 800ba12:	220a      	movs	r2, #10
 800ba14:	4620      	mov	r0, r4
 800ba16:	f000 f8eb 	bl	800bbf0 <__multadd>
 800ba1a:	45b8      	cmp	r8, r7
 800ba1c:	4683      	mov	fp, r0
 800ba1e:	f04f 0300 	mov.w	r3, #0
 800ba22:	f04f 020a 	mov.w	r2, #10
 800ba26:	4641      	mov	r1, r8
 800ba28:	4620      	mov	r0, r4
 800ba2a:	d107      	bne.n	800ba3c <_dtoa_r+0xb1c>
 800ba2c:	f000 f8e0 	bl	800bbf0 <__multadd>
 800ba30:	4680      	mov	r8, r0
 800ba32:	4607      	mov	r7, r0
 800ba34:	9b01      	ldr	r3, [sp, #4]
 800ba36:	3301      	adds	r3, #1
 800ba38:	9301      	str	r3, [sp, #4]
 800ba3a:	e775      	b.n	800b928 <_dtoa_r+0xa08>
 800ba3c:	f000 f8d8 	bl	800bbf0 <__multadd>
 800ba40:	4639      	mov	r1, r7
 800ba42:	4680      	mov	r8, r0
 800ba44:	2300      	movs	r3, #0
 800ba46:	220a      	movs	r2, #10
 800ba48:	4620      	mov	r0, r4
 800ba4a:	f000 f8d1 	bl	800bbf0 <__multadd>
 800ba4e:	4607      	mov	r7, r0
 800ba50:	e7f0      	b.n	800ba34 <_dtoa_r+0xb14>
 800ba52:	f1b9 0f00 	cmp.w	r9, #0
 800ba56:	9a00      	ldr	r2, [sp, #0]
 800ba58:	bfcc      	ite	gt
 800ba5a:	464d      	movgt	r5, r9
 800ba5c:	2501      	movle	r5, #1
 800ba5e:	4415      	add	r5, r2
 800ba60:	f04f 0800 	mov.w	r8, #0
 800ba64:	4659      	mov	r1, fp
 800ba66:	2201      	movs	r2, #1
 800ba68:	4620      	mov	r0, r4
 800ba6a:	9301      	str	r3, [sp, #4]
 800ba6c:	f000 fa70 	bl	800bf50 <__lshift>
 800ba70:	4631      	mov	r1, r6
 800ba72:	4683      	mov	fp, r0
 800ba74:	f000 fad8 	bl	800c028 <__mcmp>
 800ba78:	2800      	cmp	r0, #0
 800ba7a:	dcb2      	bgt.n	800b9e2 <_dtoa_r+0xac2>
 800ba7c:	d102      	bne.n	800ba84 <_dtoa_r+0xb64>
 800ba7e:	9b01      	ldr	r3, [sp, #4]
 800ba80:	07db      	lsls	r3, r3, #31
 800ba82:	d4ae      	bmi.n	800b9e2 <_dtoa_r+0xac2>
 800ba84:	462b      	mov	r3, r5
 800ba86:	461d      	mov	r5, r3
 800ba88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ba8c:	2a30      	cmp	r2, #48	; 0x30
 800ba8e:	d0fa      	beq.n	800ba86 <_dtoa_r+0xb66>
 800ba90:	e6f7      	b.n	800b882 <_dtoa_r+0x962>
 800ba92:	9a00      	ldr	r2, [sp, #0]
 800ba94:	429a      	cmp	r2, r3
 800ba96:	d1a5      	bne.n	800b9e4 <_dtoa_r+0xac4>
 800ba98:	f10a 0a01 	add.w	sl, sl, #1
 800ba9c:	2331      	movs	r3, #49	; 0x31
 800ba9e:	e779      	b.n	800b994 <_dtoa_r+0xa74>
 800baa0:	4b13      	ldr	r3, [pc, #76]	; (800baf0 <_dtoa_r+0xbd0>)
 800baa2:	f7ff baaf 	b.w	800b004 <_dtoa_r+0xe4>
 800baa6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	f47f aa86 	bne.w	800afba <_dtoa_r+0x9a>
 800baae:	4b11      	ldr	r3, [pc, #68]	; (800baf4 <_dtoa_r+0xbd4>)
 800bab0:	f7ff baa8 	b.w	800b004 <_dtoa_r+0xe4>
 800bab4:	f1b9 0f00 	cmp.w	r9, #0
 800bab8:	dc03      	bgt.n	800bac2 <_dtoa_r+0xba2>
 800baba:	9b05      	ldr	r3, [sp, #20]
 800babc:	2b02      	cmp	r3, #2
 800babe:	f73f aec9 	bgt.w	800b854 <_dtoa_r+0x934>
 800bac2:	9d00      	ldr	r5, [sp, #0]
 800bac4:	4631      	mov	r1, r6
 800bac6:	4658      	mov	r0, fp
 800bac8:	f7ff f99c 	bl	800ae04 <quorem>
 800bacc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800bad0:	f805 3b01 	strb.w	r3, [r5], #1
 800bad4:	9a00      	ldr	r2, [sp, #0]
 800bad6:	1aaa      	subs	r2, r5, r2
 800bad8:	4591      	cmp	r9, r2
 800bada:	ddba      	ble.n	800ba52 <_dtoa_r+0xb32>
 800badc:	4659      	mov	r1, fp
 800bade:	2300      	movs	r3, #0
 800bae0:	220a      	movs	r2, #10
 800bae2:	4620      	mov	r0, r4
 800bae4:	f000 f884 	bl	800bbf0 <__multadd>
 800bae8:	4683      	mov	fp, r0
 800baea:	e7eb      	b.n	800bac4 <_dtoa_r+0xba4>
 800baec:	0800e3b3 	.word	0x0800e3b3
 800baf0:	0800e30c 	.word	0x0800e30c
 800baf4:	0800e330 	.word	0x0800e330

0800baf8 <_localeconv_r>:
 800baf8:	4800      	ldr	r0, [pc, #0]	; (800bafc <_localeconv_r+0x4>)
 800bafa:	4770      	bx	lr
 800bafc:	200002d0 	.word	0x200002d0

0800bb00 <malloc>:
 800bb00:	4b02      	ldr	r3, [pc, #8]	; (800bb0c <malloc+0xc>)
 800bb02:	4601      	mov	r1, r0
 800bb04:	6818      	ldr	r0, [r3, #0]
 800bb06:	f000 bbef 	b.w	800c2e8 <_malloc_r>
 800bb0a:	bf00      	nop
 800bb0c:	2000017c 	.word	0x2000017c

0800bb10 <memcpy>:
 800bb10:	440a      	add	r2, r1
 800bb12:	4291      	cmp	r1, r2
 800bb14:	f100 33ff 	add.w	r3, r0, #4294967295
 800bb18:	d100      	bne.n	800bb1c <memcpy+0xc>
 800bb1a:	4770      	bx	lr
 800bb1c:	b510      	push	{r4, lr}
 800bb1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bb22:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bb26:	4291      	cmp	r1, r2
 800bb28:	d1f9      	bne.n	800bb1e <memcpy+0xe>
 800bb2a:	bd10      	pop	{r4, pc}

0800bb2c <_Balloc>:
 800bb2c:	b570      	push	{r4, r5, r6, lr}
 800bb2e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bb30:	4604      	mov	r4, r0
 800bb32:	460d      	mov	r5, r1
 800bb34:	b976      	cbnz	r6, 800bb54 <_Balloc+0x28>
 800bb36:	2010      	movs	r0, #16
 800bb38:	f7ff ffe2 	bl	800bb00 <malloc>
 800bb3c:	4602      	mov	r2, r0
 800bb3e:	6260      	str	r0, [r4, #36]	; 0x24
 800bb40:	b920      	cbnz	r0, 800bb4c <_Balloc+0x20>
 800bb42:	4b18      	ldr	r3, [pc, #96]	; (800bba4 <_Balloc+0x78>)
 800bb44:	4818      	ldr	r0, [pc, #96]	; (800bba8 <_Balloc+0x7c>)
 800bb46:	2166      	movs	r1, #102	; 0x66
 800bb48:	f000 fd94 	bl	800c674 <__assert_func>
 800bb4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bb50:	6006      	str	r6, [r0, #0]
 800bb52:	60c6      	str	r6, [r0, #12]
 800bb54:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bb56:	68f3      	ldr	r3, [r6, #12]
 800bb58:	b183      	cbz	r3, 800bb7c <_Balloc+0x50>
 800bb5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bb5c:	68db      	ldr	r3, [r3, #12]
 800bb5e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bb62:	b9b8      	cbnz	r0, 800bb94 <_Balloc+0x68>
 800bb64:	2101      	movs	r1, #1
 800bb66:	fa01 f605 	lsl.w	r6, r1, r5
 800bb6a:	1d72      	adds	r2, r6, #5
 800bb6c:	0092      	lsls	r2, r2, #2
 800bb6e:	4620      	mov	r0, r4
 800bb70:	f000 fb5a 	bl	800c228 <_calloc_r>
 800bb74:	b160      	cbz	r0, 800bb90 <_Balloc+0x64>
 800bb76:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bb7a:	e00e      	b.n	800bb9a <_Balloc+0x6e>
 800bb7c:	2221      	movs	r2, #33	; 0x21
 800bb7e:	2104      	movs	r1, #4
 800bb80:	4620      	mov	r0, r4
 800bb82:	f000 fb51 	bl	800c228 <_calloc_r>
 800bb86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bb88:	60f0      	str	r0, [r6, #12]
 800bb8a:	68db      	ldr	r3, [r3, #12]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d1e4      	bne.n	800bb5a <_Balloc+0x2e>
 800bb90:	2000      	movs	r0, #0
 800bb92:	bd70      	pop	{r4, r5, r6, pc}
 800bb94:	6802      	ldr	r2, [r0, #0]
 800bb96:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bba0:	e7f7      	b.n	800bb92 <_Balloc+0x66>
 800bba2:	bf00      	nop
 800bba4:	0800e33d 	.word	0x0800e33d
 800bba8:	0800e3c4 	.word	0x0800e3c4

0800bbac <_Bfree>:
 800bbac:	b570      	push	{r4, r5, r6, lr}
 800bbae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bbb0:	4605      	mov	r5, r0
 800bbb2:	460c      	mov	r4, r1
 800bbb4:	b976      	cbnz	r6, 800bbd4 <_Bfree+0x28>
 800bbb6:	2010      	movs	r0, #16
 800bbb8:	f7ff ffa2 	bl	800bb00 <malloc>
 800bbbc:	4602      	mov	r2, r0
 800bbbe:	6268      	str	r0, [r5, #36]	; 0x24
 800bbc0:	b920      	cbnz	r0, 800bbcc <_Bfree+0x20>
 800bbc2:	4b09      	ldr	r3, [pc, #36]	; (800bbe8 <_Bfree+0x3c>)
 800bbc4:	4809      	ldr	r0, [pc, #36]	; (800bbec <_Bfree+0x40>)
 800bbc6:	218a      	movs	r1, #138	; 0x8a
 800bbc8:	f000 fd54 	bl	800c674 <__assert_func>
 800bbcc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bbd0:	6006      	str	r6, [r0, #0]
 800bbd2:	60c6      	str	r6, [r0, #12]
 800bbd4:	b13c      	cbz	r4, 800bbe6 <_Bfree+0x3a>
 800bbd6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bbd8:	6862      	ldr	r2, [r4, #4]
 800bbda:	68db      	ldr	r3, [r3, #12]
 800bbdc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bbe0:	6021      	str	r1, [r4, #0]
 800bbe2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bbe6:	bd70      	pop	{r4, r5, r6, pc}
 800bbe8:	0800e33d 	.word	0x0800e33d
 800bbec:	0800e3c4 	.word	0x0800e3c4

0800bbf0 <__multadd>:
 800bbf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbf4:	690e      	ldr	r6, [r1, #16]
 800bbf6:	4607      	mov	r7, r0
 800bbf8:	4698      	mov	r8, r3
 800bbfa:	460c      	mov	r4, r1
 800bbfc:	f101 0014 	add.w	r0, r1, #20
 800bc00:	2300      	movs	r3, #0
 800bc02:	6805      	ldr	r5, [r0, #0]
 800bc04:	b2a9      	uxth	r1, r5
 800bc06:	fb02 8101 	mla	r1, r2, r1, r8
 800bc0a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800bc0e:	0c2d      	lsrs	r5, r5, #16
 800bc10:	fb02 c505 	mla	r5, r2, r5, ip
 800bc14:	b289      	uxth	r1, r1
 800bc16:	3301      	adds	r3, #1
 800bc18:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800bc1c:	429e      	cmp	r6, r3
 800bc1e:	f840 1b04 	str.w	r1, [r0], #4
 800bc22:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800bc26:	dcec      	bgt.n	800bc02 <__multadd+0x12>
 800bc28:	f1b8 0f00 	cmp.w	r8, #0
 800bc2c:	d022      	beq.n	800bc74 <__multadd+0x84>
 800bc2e:	68a3      	ldr	r3, [r4, #8]
 800bc30:	42b3      	cmp	r3, r6
 800bc32:	dc19      	bgt.n	800bc68 <__multadd+0x78>
 800bc34:	6861      	ldr	r1, [r4, #4]
 800bc36:	4638      	mov	r0, r7
 800bc38:	3101      	adds	r1, #1
 800bc3a:	f7ff ff77 	bl	800bb2c <_Balloc>
 800bc3e:	4605      	mov	r5, r0
 800bc40:	b928      	cbnz	r0, 800bc4e <__multadd+0x5e>
 800bc42:	4602      	mov	r2, r0
 800bc44:	4b0d      	ldr	r3, [pc, #52]	; (800bc7c <__multadd+0x8c>)
 800bc46:	480e      	ldr	r0, [pc, #56]	; (800bc80 <__multadd+0x90>)
 800bc48:	21b5      	movs	r1, #181	; 0xb5
 800bc4a:	f000 fd13 	bl	800c674 <__assert_func>
 800bc4e:	6922      	ldr	r2, [r4, #16]
 800bc50:	3202      	adds	r2, #2
 800bc52:	f104 010c 	add.w	r1, r4, #12
 800bc56:	0092      	lsls	r2, r2, #2
 800bc58:	300c      	adds	r0, #12
 800bc5a:	f7ff ff59 	bl	800bb10 <memcpy>
 800bc5e:	4621      	mov	r1, r4
 800bc60:	4638      	mov	r0, r7
 800bc62:	f7ff ffa3 	bl	800bbac <_Bfree>
 800bc66:	462c      	mov	r4, r5
 800bc68:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800bc6c:	3601      	adds	r6, #1
 800bc6e:	f8c3 8014 	str.w	r8, [r3, #20]
 800bc72:	6126      	str	r6, [r4, #16]
 800bc74:	4620      	mov	r0, r4
 800bc76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc7a:	bf00      	nop
 800bc7c:	0800e3b3 	.word	0x0800e3b3
 800bc80:	0800e3c4 	.word	0x0800e3c4

0800bc84 <__hi0bits>:
 800bc84:	0c03      	lsrs	r3, r0, #16
 800bc86:	041b      	lsls	r3, r3, #16
 800bc88:	b9d3      	cbnz	r3, 800bcc0 <__hi0bits+0x3c>
 800bc8a:	0400      	lsls	r0, r0, #16
 800bc8c:	2310      	movs	r3, #16
 800bc8e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bc92:	bf04      	itt	eq
 800bc94:	0200      	lsleq	r0, r0, #8
 800bc96:	3308      	addeq	r3, #8
 800bc98:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bc9c:	bf04      	itt	eq
 800bc9e:	0100      	lsleq	r0, r0, #4
 800bca0:	3304      	addeq	r3, #4
 800bca2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bca6:	bf04      	itt	eq
 800bca8:	0080      	lsleq	r0, r0, #2
 800bcaa:	3302      	addeq	r3, #2
 800bcac:	2800      	cmp	r0, #0
 800bcae:	db05      	blt.n	800bcbc <__hi0bits+0x38>
 800bcb0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bcb4:	f103 0301 	add.w	r3, r3, #1
 800bcb8:	bf08      	it	eq
 800bcba:	2320      	moveq	r3, #32
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	4770      	bx	lr
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	e7e4      	b.n	800bc8e <__hi0bits+0xa>

0800bcc4 <__lo0bits>:
 800bcc4:	6803      	ldr	r3, [r0, #0]
 800bcc6:	f013 0207 	ands.w	r2, r3, #7
 800bcca:	4601      	mov	r1, r0
 800bccc:	d00b      	beq.n	800bce6 <__lo0bits+0x22>
 800bcce:	07da      	lsls	r2, r3, #31
 800bcd0:	d424      	bmi.n	800bd1c <__lo0bits+0x58>
 800bcd2:	0798      	lsls	r0, r3, #30
 800bcd4:	bf49      	itett	mi
 800bcd6:	085b      	lsrmi	r3, r3, #1
 800bcd8:	089b      	lsrpl	r3, r3, #2
 800bcda:	2001      	movmi	r0, #1
 800bcdc:	600b      	strmi	r3, [r1, #0]
 800bcde:	bf5c      	itt	pl
 800bce0:	600b      	strpl	r3, [r1, #0]
 800bce2:	2002      	movpl	r0, #2
 800bce4:	4770      	bx	lr
 800bce6:	b298      	uxth	r0, r3
 800bce8:	b9b0      	cbnz	r0, 800bd18 <__lo0bits+0x54>
 800bcea:	0c1b      	lsrs	r3, r3, #16
 800bcec:	2010      	movs	r0, #16
 800bcee:	f013 0fff 	tst.w	r3, #255	; 0xff
 800bcf2:	bf04      	itt	eq
 800bcf4:	0a1b      	lsreq	r3, r3, #8
 800bcf6:	3008      	addeq	r0, #8
 800bcf8:	071a      	lsls	r2, r3, #28
 800bcfa:	bf04      	itt	eq
 800bcfc:	091b      	lsreq	r3, r3, #4
 800bcfe:	3004      	addeq	r0, #4
 800bd00:	079a      	lsls	r2, r3, #30
 800bd02:	bf04      	itt	eq
 800bd04:	089b      	lsreq	r3, r3, #2
 800bd06:	3002      	addeq	r0, #2
 800bd08:	07da      	lsls	r2, r3, #31
 800bd0a:	d403      	bmi.n	800bd14 <__lo0bits+0x50>
 800bd0c:	085b      	lsrs	r3, r3, #1
 800bd0e:	f100 0001 	add.w	r0, r0, #1
 800bd12:	d005      	beq.n	800bd20 <__lo0bits+0x5c>
 800bd14:	600b      	str	r3, [r1, #0]
 800bd16:	4770      	bx	lr
 800bd18:	4610      	mov	r0, r2
 800bd1a:	e7e8      	b.n	800bcee <__lo0bits+0x2a>
 800bd1c:	2000      	movs	r0, #0
 800bd1e:	4770      	bx	lr
 800bd20:	2020      	movs	r0, #32
 800bd22:	4770      	bx	lr

0800bd24 <__i2b>:
 800bd24:	b510      	push	{r4, lr}
 800bd26:	460c      	mov	r4, r1
 800bd28:	2101      	movs	r1, #1
 800bd2a:	f7ff feff 	bl	800bb2c <_Balloc>
 800bd2e:	4602      	mov	r2, r0
 800bd30:	b928      	cbnz	r0, 800bd3e <__i2b+0x1a>
 800bd32:	4b05      	ldr	r3, [pc, #20]	; (800bd48 <__i2b+0x24>)
 800bd34:	4805      	ldr	r0, [pc, #20]	; (800bd4c <__i2b+0x28>)
 800bd36:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800bd3a:	f000 fc9b 	bl	800c674 <__assert_func>
 800bd3e:	2301      	movs	r3, #1
 800bd40:	6144      	str	r4, [r0, #20]
 800bd42:	6103      	str	r3, [r0, #16]
 800bd44:	bd10      	pop	{r4, pc}
 800bd46:	bf00      	nop
 800bd48:	0800e3b3 	.word	0x0800e3b3
 800bd4c:	0800e3c4 	.word	0x0800e3c4

0800bd50 <__multiply>:
 800bd50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd54:	4614      	mov	r4, r2
 800bd56:	690a      	ldr	r2, [r1, #16]
 800bd58:	6923      	ldr	r3, [r4, #16]
 800bd5a:	429a      	cmp	r2, r3
 800bd5c:	bfb8      	it	lt
 800bd5e:	460b      	movlt	r3, r1
 800bd60:	460d      	mov	r5, r1
 800bd62:	bfbc      	itt	lt
 800bd64:	4625      	movlt	r5, r4
 800bd66:	461c      	movlt	r4, r3
 800bd68:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800bd6c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800bd70:	68ab      	ldr	r3, [r5, #8]
 800bd72:	6869      	ldr	r1, [r5, #4]
 800bd74:	eb0a 0709 	add.w	r7, sl, r9
 800bd78:	42bb      	cmp	r3, r7
 800bd7a:	b085      	sub	sp, #20
 800bd7c:	bfb8      	it	lt
 800bd7e:	3101      	addlt	r1, #1
 800bd80:	f7ff fed4 	bl	800bb2c <_Balloc>
 800bd84:	b930      	cbnz	r0, 800bd94 <__multiply+0x44>
 800bd86:	4602      	mov	r2, r0
 800bd88:	4b42      	ldr	r3, [pc, #264]	; (800be94 <__multiply+0x144>)
 800bd8a:	4843      	ldr	r0, [pc, #268]	; (800be98 <__multiply+0x148>)
 800bd8c:	f240 115d 	movw	r1, #349	; 0x15d
 800bd90:	f000 fc70 	bl	800c674 <__assert_func>
 800bd94:	f100 0614 	add.w	r6, r0, #20
 800bd98:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800bd9c:	4633      	mov	r3, r6
 800bd9e:	2200      	movs	r2, #0
 800bda0:	4543      	cmp	r3, r8
 800bda2:	d31e      	bcc.n	800bde2 <__multiply+0x92>
 800bda4:	f105 0c14 	add.w	ip, r5, #20
 800bda8:	f104 0314 	add.w	r3, r4, #20
 800bdac:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800bdb0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800bdb4:	9202      	str	r2, [sp, #8]
 800bdb6:	ebac 0205 	sub.w	r2, ip, r5
 800bdba:	3a15      	subs	r2, #21
 800bdbc:	f022 0203 	bic.w	r2, r2, #3
 800bdc0:	3204      	adds	r2, #4
 800bdc2:	f105 0115 	add.w	r1, r5, #21
 800bdc6:	458c      	cmp	ip, r1
 800bdc8:	bf38      	it	cc
 800bdca:	2204      	movcc	r2, #4
 800bdcc:	9201      	str	r2, [sp, #4]
 800bdce:	9a02      	ldr	r2, [sp, #8]
 800bdd0:	9303      	str	r3, [sp, #12]
 800bdd2:	429a      	cmp	r2, r3
 800bdd4:	d808      	bhi.n	800bde8 <__multiply+0x98>
 800bdd6:	2f00      	cmp	r7, #0
 800bdd8:	dc55      	bgt.n	800be86 <__multiply+0x136>
 800bdda:	6107      	str	r7, [r0, #16]
 800bddc:	b005      	add	sp, #20
 800bdde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bde2:	f843 2b04 	str.w	r2, [r3], #4
 800bde6:	e7db      	b.n	800bda0 <__multiply+0x50>
 800bde8:	f8b3 a000 	ldrh.w	sl, [r3]
 800bdec:	f1ba 0f00 	cmp.w	sl, #0
 800bdf0:	d020      	beq.n	800be34 <__multiply+0xe4>
 800bdf2:	f105 0e14 	add.w	lr, r5, #20
 800bdf6:	46b1      	mov	r9, r6
 800bdf8:	2200      	movs	r2, #0
 800bdfa:	f85e 4b04 	ldr.w	r4, [lr], #4
 800bdfe:	f8d9 b000 	ldr.w	fp, [r9]
 800be02:	b2a1      	uxth	r1, r4
 800be04:	fa1f fb8b 	uxth.w	fp, fp
 800be08:	fb0a b101 	mla	r1, sl, r1, fp
 800be0c:	4411      	add	r1, r2
 800be0e:	f8d9 2000 	ldr.w	r2, [r9]
 800be12:	0c24      	lsrs	r4, r4, #16
 800be14:	0c12      	lsrs	r2, r2, #16
 800be16:	fb0a 2404 	mla	r4, sl, r4, r2
 800be1a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800be1e:	b289      	uxth	r1, r1
 800be20:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800be24:	45f4      	cmp	ip, lr
 800be26:	f849 1b04 	str.w	r1, [r9], #4
 800be2a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800be2e:	d8e4      	bhi.n	800bdfa <__multiply+0xaa>
 800be30:	9901      	ldr	r1, [sp, #4]
 800be32:	5072      	str	r2, [r6, r1]
 800be34:	9a03      	ldr	r2, [sp, #12]
 800be36:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800be3a:	3304      	adds	r3, #4
 800be3c:	f1b9 0f00 	cmp.w	r9, #0
 800be40:	d01f      	beq.n	800be82 <__multiply+0x132>
 800be42:	6834      	ldr	r4, [r6, #0]
 800be44:	f105 0114 	add.w	r1, r5, #20
 800be48:	46b6      	mov	lr, r6
 800be4a:	f04f 0a00 	mov.w	sl, #0
 800be4e:	880a      	ldrh	r2, [r1, #0]
 800be50:	f8be b002 	ldrh.w	fp, [lr, #2]
 800be54:	fb09 b202 	mla	r2, r9, r2, fp
 800be58:	4492      	add	sl, r2
 800be5a:	b2a4      	uxth	r4, r4
 800be5c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800be60:	f84e 4b04 	str.w	r4, [lr], #4
 800be64:	f851 4b04 	ldr.w	r4, [r1], #4
 800be68:	f8be 2000 	ldrh.w	r2, [lr]
 800be6c:	0c24      	lsrs	r4, r4, #16
 800be6e:	fb09 2404 	mla	r4, r9, r4, r2
 800be72:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800be76:	458c      	cmp	ip, r1
 800be78:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800be7c:	d8e7      	bhi.n	800be4e <__multiply+0xfe>
 800be7e:	9a01      	ldr	r2, [sp, #4]
 800be80:	50b4      	str	r4, [r6, r2]
 800be82:	3604      	adds	r6, #4
 800be84:	e7a3      	b.n	800bdce <__multiply+0x7e>
 800be86:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d1a5      	bne.n	800bdda <__multiply+0x8a>
 800be8e:	3f01      	subs	r7, #1
 800be90:	e7a1      	b.n	800bdd6 <__multiply+0x86>
 800be92:	bf00      	nop
 800be94:	0800e3b3 	.word	0x0800e3b3
 800be98:	0800e3c4 	.word	0x0800e3c4

0800be9c <__pow5mult>:
 800be9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bea0:	4615      	mov	r5, r2
 800bea2:	f012 0203 	ands.w	r2, r2, #3
 800bea6:	4606      	mov	r6, r0
 800bea8:	460f      	mov	r7, r1
 800beaa:	d007      	beq.n	800bebc <__pow5mult+0x20>
 800beac:	4c25      	ldr	r4, [pc, #148]	; (800bf44 <__pow5mult+0xa8>)
 800beae:	3a01      	subs	r2, #1
 800beb0:	2300      	movs	r3, #0
 800beb2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800beb6:	f7ff fe9b 	bl	800bbf0 <__multadd>
 800beba:	4607      	mov	r7, r0
 800bebc:	10ad      	asrs	r5, r5, #2
 800bebe:	d03d      	beq.n	800bf3c <__pow5mult+0xa0>
 800bec0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800bec2:	b97c      	cbnz	r4, 800bee4 <__pow5mult+0x48>
 800bec4:	2010      	movs	r0, #16
 800bec6:	f7ff fe1b 	bl	800bb00 <malloc>
 800beca:	4602      	mov	r2, r0
 800becc:	6270      	str	r0, [r6, #36]	; 0x24
 800bece:	b928      	cbnz	r0, 800bedc <__pow5mult+0x40>
 800bed0:	4b1d      	ldr	r3, [pc, #116]	; (800bf48 <__pow5mult+0xac>)
 800bed2:	481e      	ldr	r0, [pc, #120]	; (800bf4c <__pow5mult+0xb0>)
 800bed4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800bed8:	f000 fbcc 	bl	800c674 <__assert_func>
 800bedc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bee0:	6004      	str	r4, [r0, #0]
 800bee2:	60c4      	str	r4, [r0, #12]
 800bee4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800bee8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800beec:	b94c      	cbnz	r4, 800bf02 <__pow5mult+0x66>
 800beee:	f240 2171 	movw	r1, #625	; 0x271
 800bef2:	4630      	mov	r0, r6
 800bef4:	f7ff ff16 	bl	800bd24 <__i2b>
 800bef8:	2300      	movs	r3, #0
 800befa:	f8c8 0008 	str.w	r0, [r8, #8]
 800befe:	4604      	mov	r4, r0
 800bf00:	6003      	str	r3, [r0, #0]
 800bf02:	f04f 0900 	mov.w	r9, #0
 800bf06:	07eb      	lsls	r3, r5, #31
 800bf08:	d50a      	bpl.n	800bf20 <__pow5mult+0x84>
 800bf0a:	4639      	mov	r1, r7
 800bf0c:	4622      	mov	r2, r4
 800bf0e:	4630      	mov	r0, r6
 800bf10:	f7ff ff1e 	bl	800bd50 <__multiply>
 800bf14:	4639      	mov	r1, r7
 800bf16:	4680      	mov	r8, r0
 800bf18:	4630      	mov	r0, r6
 800bf1a:	f7ff fe47 	bl	800bbac <_Bfree>
 800bf1e:	4647      	mov	r7, r8
 800bf20:	106d      	asrs	r5, r5, #1
 800bf22:	d00b      	beq.n	800bf3c <__pow5mult+0xa0>
 800bf24:	6820      	ldr	r0, [r4, #0]
 800bf26:	b938      	cbnz	r0, 800bf38 <__pow5mult+0x9c>
 800bf28:	4622      	mov	r2, r4
 800bf2a:	4621      	mov	r1, r4
 800bf2c:	4630      	mov	r0, r6
 800bf2e:	f7ff ff0f 	bl	800bd50 <__multiply>
 800bf32:	6020      	str	r0, [r4, #0]
 800bf34:	f8c0 9000 	str.w	r9, [r0]
 800bf38:	4604      	mov	r4, r0
 800bf3a:	e7e4      	b.n	800bf06 <__pow5mult+0x6a>
 800bf3c:	4638      	mov	r0, r7
 800bf3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf42:	bf00      	nop
 800bf44:	0800e518 	.word	0x0800e518
 800bf48:	0800e33d 	.word	0x0800e33d
 800bf4c:	0800e3c4 	.word	0x0800e3c4

0800bf50 <__lshift>:
 800bf50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf54:	460c      	mov	r4, r1
 800bf56:	6849      	ldr	r1, [r1, #4]
 800bf58:	6923      	ldr	r3, [r4, #16]
 800bf5a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bf5e:	68a3      	ldr	r3, [r4, #8]
 800bf60:	4607      	mov	r7, r0
 800bf62:	4691      	mov	r9, r2
 800bf64:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bf68:	f108 0601 	add.w	r6, r8, #1
 800bf6c:	42b3      	cmp	r3, r6
 800bf6e:	db0b      	blt.n	800bf88 <__lshift+0x38>
 800bf70:	4638      	mov	r0, r7
 800bf72:	f7ff fddb 	bl	800bb2c <_Balloc>
 800bf76:	4605      	mov	r5, r0
 800bf78:	b948      	cbnz	r0, 800bf8e <__lshift+0x3e>
 800bf7a:	4602      	mov	r2, r0
 800bf7c:	4b28      	ldr	r3, [pc, #160]	; (800c020 <__lshift+0xd0>)
 800bf7e:	4829      	ldr	r0, [pc, #164]	; (800c024 <__lshift+0xd4>)
 800bf80:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bf84:	f000 fb76 	bl	800c674 <__assert_func>
 800bf88:	3101      	adds	r1, #1
 800bf8a:	005b      	lsls	r3, r3, #1
 800bf8c:	e7ee      	b.n	800bf6c <__lshift+0x1c>
 800bf8e:	2300      	movs	r3, #0
 800bf90:	f100 0114 	add.w	r1, r0, #20
 800bf94:	f100 0210 	add.w	r2, r0, #16
 800bf98:	4618      	mov	r0, r3
 800bf9a:	4553      	cmp	r3, sl
 800bf9c:	db33      	blt.n	800c006 <__lshift+0xb6>
 800bf9e:	6920      	ldr	r0, [r4, #16]
 800bfa0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bfa4:	f104 0314 	add.w	r3, r4, #20
 800bfa8:	f019 091f 	ands.w	r9, r9, #31
 800bfac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bfb0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bfb4:	d02b      	beq.n	800c00e <__lshift+0xbe>
 800bfb6:	f1c9 0e20 	rsb	lr, r9, #32
 800bfba:	468a      	mov	sl, r1
 800bfbc:	2200      	movs	r2, #0
 800bfbe:	6818      	ldr	r0, [r3, #0]
 800bfc0:	fa00 f009 	lsl.w	r0, r0, r9
 800bfc4:	4302      	orrs	r2, r0
 800bfc6:	f84a 2b04 	str.w	r2, [sl], #4
 800bfca:	f853 2b04 	ldr.w	r2, [r3], #4
 800bfce:	459c      	cmp	ip, r3
 800bfd0:	fa22 f20e 	lsr.w	r2, r2, lr
 800bfd4:	d8f3      	bhi.n	800bfbe <__lshift+0x6e>
 800bfd6:	ebac 0304 	sub.w	r3, ip, r4
 800bfda:	3b15      	subs	r3, #21
 800bfdc:	f023 0303 	bic.w	r3, r3, #3
 800bfe0:	3304      	adds	r3, #4
 800bfe2:	f104 0015 	add.w	r0, r4, #21
 800bfe6:	4584      	cmp	ip, r0
 800bfe8:	bf38      	it	cc
 800bfea:	2304      	movcc	r3, #4
 800bfec:	50ca      	str	r2, [r1, r3]
 800bfee:	b10a      	cbz	r2, 800bff4 <__lshift+0xa4>
 800bff0:	f108 0602 	add.w	r6, r8, #2
 800bff4:	3e01      	subs	r6, #1
 800bff6:	4638      	mov	r0, r7
 800bff8:	612e      	str	r6, [r5, #16]
 800bffa:	4621      	mov	r1, r4
 800bffc:	f7ff fdd6 	bl	800bbac <_Bfree>
 800c000:	4628      	mov	r0, r5
 800c002:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c006:	f842 0f04 	str.w	r0, [r2, #4]!
 800c00a:	3301      	adds	r3, #1
 800c00c:	e7c5      	b.n	800bf9a <__lshift+0x4a>
 800c00e:	3904      	subs	r1, #4
 800c010:	f853 2b04 	ldr.w	r2, [r3], #4
 800c014:	f841 2f04 	str.w	r2, [r1, #4]!
 800c018:	459c      	cmp	ip, r3
 800c01a:	d8f9      	bhi.n	800c010 <__lshift+0xc0>
 800c01c:	e7ea      	b.n	800bff4 <__lshift+0xa4>
 800c01e:	bf00      	nop
 800c020:	0800e3b3 	.word	0x0800e3b3
 800c024:	0800e3c4 	.word	0x0800e3c4

0800c028 <__mcmp>:
 800c028:	b530      	push	{r4, r5, lr}
 800c02a:	6902      	ldr	r2, [r0, #16]
 800c02c:	690c      	ldr	r4, [r1, #16]
 800c02e:	1b12      	subs	r2, r2, r4
 800c030:	d10e      	bne.n	800c050 <__mcmp+0x28>
 800c032:	f100 0314 	add.w	r3, r0, #20
 800c036:	3114      	adds	r1, #20
 800c038:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c03c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c040:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c044:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c048:	42a5      	cmp	r5, r4
 800c04a:	d003      	beq.n	800c054 <__mcmp+0x2c>
 800c04c:	d305      	bcc.n	800c05a <__mcmp+0x32>
 800c04e:	2201      	movs	r2, #1
 800c050:	4610      	mov	r0, r2
 800c052:	bd30      	pop	{r4, r5, pc}
 800c054:	4283      	cmp	r3, r0
 800c056:	d3f3      	bcc.n	800c040 <__mcmp+0x18>
 800c058:	e7fa      	b.n	800c050 <__mcmp+0x28>
 800c05a:	f04f 32ff 	mov.w	r2, #4294967295
 800c05e:	e7f7      	b.n	800c050 <__mcmp+0x28>

0800c060 <__mdiff>:
 800c060:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c064:	460c      	mov	r4, r1
 800c066:	4606      	mov	r6, r0
 800c068:	4611      	mov	r1, r2
 800c06a:	4620      	mov	r0, r4
 800c06c:	4617      	mov	r7, r2
 800c06e:	f7ff ffdb 	bl	800c028 <__mcmp>
 800c072:	1e05      	subs	r5, r0, #0
 800c074:	d110      	bne.n	800c098 <__mdiff+0x38>
 800c076:	4629      	mov	r1, r5
 800c078:	4630      	mov	r0, r6
 800c07a:	f7ff fd57 	bl	800bb2c <_Balloc>
 800c07e:	b930      	cbnz	r0, 800c08e <__mdiff+0x2e>
 800c080:	4b39      	ldr	r3, [pc, #228]	; (800c168 <__mdiff+0x108>)
 800c082:	4602      	mov	r2, r0
 800c084:	f240 2132 	movw	r1, #562	; 0x232
 800c088:	4838      	ldr	r0, [pc, #224]	; (800c16c <__mdiff+0x10c>)
 800c08a:	f000 faf3 	bl	800c674 <__assert_func>
 800c08e:	2301      	movs	r3, #1
 800c090:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c094:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c098:	bfa4      	itt	ge
 800c09a:	463b      	movge	r3, r7
 800c09c:	4627      	movge	r7, r4
 800c09e:	4630      	mov	r0, r6
 800c0a0:	6879      	ldr	r1, [r7, #4]
 800c0a2:	bfa6      	itte	ge
 800c0a4:	461c      	movge	r4, r3
 800c0a6:	2500      	movge	r5, #0
 800c0a8:	2501      	movlt	r5, #1
 800c0aa:	f7ff fd3f 	bl	800bb2c <_Balloc>
 800c0ae:	b920      	cbnz	r0, 800c0ba <__mdiff+0x5a>
 800c0b0:	4b2d      	ldr	r3, [pc, #180]	; (800c168 <__mdiff+0x108>)
 800c0b2:	4602      	mov	r2, r0
 800c0b4:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c0b8:	e7e6      	b.n	800c088 <__mdiff+0x28>
 800c0ba:	693e      	ldr	r6, [r7, #16]
 800c0bc:	60c5      	str	r5, [r0, #12]
 800c0be:	6925      	ldr	r5, [r4, #16]
 800c0c0:	f107 0114 	add.w	r1, r7, #20
 800c0c4:	f104 0914 	add.w	r9, r4, #20
 800c0c8:	f100 0e14 	add.w	lr, r0, #20
 800c0cc:	f107 0210 	add.w	r2, r7, #16
 800c0d0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800c0d4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800c0d8:	46f2      	mov	sl, lr
 800c0da:	2700      	movs	r7, #0
 800c0dc:	f859 3b04 	ldr.w	r3, [r9], #4
 800c0e0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c0e4:	fa1f f883 	uxth.w	r8, r3
 800c0e8:	fa17 f78b 	uxtah	r7, r7, fp
 800c0ec:	0c1b      	lsrs	r3, r3, #16
 800c0ee:	eba7 0808 	sub.w	r8, r7, r8
 800c0f2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c0f6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c0fa:	fa1f f888 	uxth.w	r8, r8
 800c0fe:	141f      	asrs	r7, r3, #16
 800c100:	454d      	cmp	r5, r9
 800c102:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c106:	f84a 3b04 	str.w	r3, [sl], #4
 800c10a:	d8e7      	bhi.n	800c0dc <__mdiff+0x7c>
 800c10c:	1b2b      	subs	r3, r5, r4
 800c10e:	3b15      	subs	r3, #21
 800c110:	f023 0303 	bic.w	r3, r3, #3
 800c114:	3304      	adds	r3, #4
 800c116:	3415      	adds	r4, #21
 800c118:	42a5      	cmp	r5, r4
 800c11a:	bf38      	it	cc
 800c11c:	2304      	movcc	r3, #4
 800c11e:	4419      	add	r1, r3
 800c120:	4473      	add	r3, lr
 800c122:	469e      	mov	lr, r3
 800c124:	460d      	mov	r5, r1
 800c126:	4565      	cmp	r5, ip
 800c128:	d30e      	bcc.n	800c148 <__mdiff+0xe8>
 800c12a:	f10c 0203 	add.w	r2, ip, #3
 800c12e:	1a52      	subs	r2, r2, r1
 800c130:	f022 0203 	bic.w	r2, r2, #3
 800c134:	3903      	subs	r1, #3
 800c136:	458c      	cmp	ip, r1
 800c138:	bf38      	it	cc
 800c13a:	2200      	movcc	r2, #0
 800c13c:	441a      	add	r2, r3
 800c13e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c142:	b17b      	cbz	r3, 800c164 <__mdiff+0x104>
 800c144:	6106      	str	r6, [r0, #16]
 800c146:	e7a5      	b.n	800c094 <__mdiff+0x34>
 800c148:	f855 8b04 	ldr.w	r8, [r5], #4
 800c14c:	fa17 f488 	uxtah	r4, r7, r8
 800c150:	1422      	asrs	r2, r4, #16
 800c152:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800c156:	b2a4      	uxth	r4, r4
 800c158:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800c15c:	f84e 4b04 	str.w	r4, [lr], #4
 800c160:	1417      	asrs	r7, r2, #16
 800c162:	e7e0      	b.n	800c126 <__mdiff+0xc6>
 800c164:	3e01      	subs	r6, #1
 800c166:	e7ea      	b.n	800c13e <__mdiff+0xde>
 800c168:	0800e3b3 	.word	0x0800e3b3
 800c16c:	0800e3c4 	.word	0x0800e3c4

0800c170 <__d2b>:
 800c170:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c174:	4689      	mov	r9, r1
 800c176:	2101      	movs	r1, #1
 800c178:	ec57 6b10 	vmov	r6, r7, d0
 800c17c:	4690      	mov	r8, r2
 800c17e:	f7ff fcd5 	bl	800bb2c <_Balloc>
 800c182:	4604      	mov	r4, r0
 800c184:	b930      	cbnz	r0, 800c194 <__d2b+0x24>
 800c186:	4602      	mov	r2, r0
 800c188:	4b25      	ldr	r3, [pc, #148]	; (800c220 <__d2b+0xb0>)
 800c18a:	4826      	ldr	r0, [pc, #152]	; (800c224 <__d2b+0xb4>)
 800c18c:	f240 310a 	movw	r1, #778	; 0x30a
 800c190:	f000 fa70 	bl	800c674 <__assert_func>
 800c194:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c198:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c19c:	bb35      	cbnz	r5, 800c1ec <__d2b+0x7c>
 800c19e:	2e00      	cmp	r6, #0
 800c1a0:	9301      	str	r3, [sp, #4]
 800c1a2:	d028      	beq.n	800c1f6 <__d2b+0x86>
 800c1a4:	4668      	mov	r0, sp
 800c1a6:	9600      	str	r6, [sp, #0]
 800c1a8:	f7ff fd8c 	bl	800bcc4 <__lo0bits>
 800c1ac:	9900      	ldr	r1, [sp, #0]
 800c1ae:	b300      	cbz	r0, 800c1f2 <__d2b+0x82>
 800c1b0:	9a01      	ldr	r2, [sp, #4]
 800c1b2:	f1c0 0320 	rsb	r3, r0, #32
 800c1b6:	fa02 f303 	lsl.w	r3, r2, r3
 800c1ba:	430b      	orrs	r3, r1
 800c1bc:	40c2      	lsrs	r2, r0
 800c1be:	6163      	str	r3, [r4, #20]
 800c1c0:	9201      	str	r2, [sp, #4]
 800c1c2:	9b01      	ldr	r3, [sp, #4]
 800c1c4:	61a3      	str	r3, [r4, #24]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	bf14      	ite	ne
 800c1ca:	2202      	movne	r2, #2
 800c1cc:	2201      	moveq	r2, #1
 800c1ce:	6122      	str	r2, [r4, #16]
 800c1d0:	b1d5      	cbz	r5, 800c208 <__d2b+0x98>
 800c1d2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c1d6:	4405      	add	r5, r0
 800c1d8:	f8c9 5000 	str.w	r5, [r9]
 800c1dc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c1e0:	f8c8 0000 	str.w	r0, [r8]
 800c1e4:	4620      	mov	r0, r4
 800c1e6:	b003      	add	sp, #12
 800c1e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c1ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c1f0:	e7d5      	b.n	800c19e <__d2b+0x2e>
 800c1f2:	6161      	str	r1, [r4, #20]
 800c1f4:	e7e5      	b.n	800c1c2 <__d2b+0x52>
 800c1f6:	a801      	add	r0, sp, #4
 800c1f8:	f7ff fd64 	bl	800bcc4 <__lo0bits>
 800c1fc:	9b01      	ldr	r3, [sp, #4]
 800c1fe:	6163      	str	r3, [r4, #20]
 800c200:	2201      	movs	r2, #1
 800c202:	6122      	str	r2, [r4, #16]
 800c204:	3020      	adds	r0, #32
 800c206:	e7e3      	b.n	800c1d0 <__d2b+0x60>
 800c208:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c20c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c210:	f8c9 0000 	str.w	r0, [r9]
 800c214:	6918      	ldr	r0, [r3, #16]
 800c216:	f7ff fd35 	bl	800bc84 <__hi0bits>
 800c21a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c21e:	e7df      	b.n	800c1e0 <__d2b+0x70>
 800c220:	0800e3b3 	.word	0x0800e3b3
 800c224:	0800e3c4 	.word	0x0800e3c4

0800c228 <_calloc_r>:
 800c228:	b513      	push	{r0, r1, r4, lr}
 800c22a:	434a      	muls	r2, r1
 800c22c:	4611      	mov	r1, r2
 800c22e:	9201      	str	r2, [sp, #4]
 800c230:	f000 f85a 	bl	800c2e8 <_malloc_r>
 800c234:	4604      	mov	r4, r0
 800c236:	b118      	cbz	r0, 800c240 <_calloc_r+0x18>
 800c238:	9a01      	ldr	r2, [sp, #4]
 800c23a:	2100      	movs	r1, #0
 800c23c:	f7fe f950 	bl	800a4e0 <memset>
 800c240:	4620      	mov	r0, r4
 800c242:	b002      	add	sp, #8
 800c244:	bd10      	pop	{r4, pc}
	...

0800c248 <_free_r>:
 800c248:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c24a:	2900      	cmp	r1, #0
 800c24c:	d048      	beq.n	800c2e0 <_free_r+0x98>
 800c24e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c252:	9001      	str	r0, [sp, #4]
 800c254:	2b00      	cmp	r3, #0
 800c256:	f1a1 0404 	sub.w	r4, r1, #4
 800c25a:	bfb8      	it	lt
 800c25c:	18e4      	addlt	r4, r4, r3
 800c25e:	f000 fa65 	bl	800c72c <__malloc_lock>
 800c262:	4a20      	ldr	r2, [pc, #128]	; (800c2e4 <_free_r+0x9c>)
 800c264:	9801      	ldr	r0, [sp, #4]
 800c266:	6813      	ldr	r3, [r2, #0]
 800c268:	4615      	mov	r5, r2
 800c26a:	b933      	cbnz	r3, 800c27a <_free_r+0x32>
 800c26c:	6063      	str	r3, [r4, #4]
 800c26e:	6014      	str	r4, [r2, #0]
 800c270:	b003      	add	sp, #12
 800c272:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c276:	f000 ba5f 	b.w	800c738 <__malloc_unlock>
 800c27a:	42a3      	cmp	r3, r4
 800c27c:	d90b      	bls.n	800c296 <_free_r+0x4e>
 800c27e:	6821      	ldr	r1, [r4, #0]
 800c280:	1862      	adds	r2, r4, r1
 800c282:	4293      	cmp	r3, r2
 800c284:	bf04      	itt	eq
 800c286:	681a      	ldreq	r2, [r3, #0]
 800c288:	685b      	ldreq	r3, [r3, #4]
 800c28a:	6063      	str	r3, [r4, #4]
 800c28c:	bf04      	itt	eq
 800c28e:	1852      	addeq	r2, r2, r1
 800c290:	6022      	streq	r2, [r4, #0]
 800c292:	602c      	str	r4, [r5, #0]
 800c294:	e7ec      	b.n	800c270 <_free_r+0x28>
 800c296:	461a      	mov	r2, r3
 800c298:	685b      	ldr	r3, [r3, #4]
 800c29a:	b10b      	cbz	r3, 800c2a0 <_free_r+0x58>
 800c29c:	42a3      	cmp	r3, r4
 800c29e:	d9fa      	bls.n	800c296 <_free_r+0x4e>
 800c2a0:	6811      	ldr	r1, [r2, #0]
 800c2a2:	1855      	adds	r5, r2, r1
 800c2a4:	42a5      	cmp	r5, r4
 800c2a6:	d10b      	bne.n	800c2c0 <_free_r+0x78>
 800c2a8:	6824      	ldr	r4, [r4, #0]
 800c2aa:	4421      	add	r1, r4
 800c2ac:	1854      	adds	r4, r2, r1
 800c2ae:	42a3      	cmp	r3, r4
 800c2b0:	6011      	str	r1, [r2, #0]
 800c2b2:	d1dd      	bne.n	800c270 <_free_r+0x28>
 800c2b4:	681c      	ldr	r4, [r3, #0]
 800c2b6:	685b      	ldr	r3, [r3, #4]
 800c2b8:	6053      	str	r3, [r2, #4]
 800c2ba:	4421      	add	r1, r4
 800c2bc:	6011      	str	r1, [r2, #0]
 800c2be:	e7d7      	b.n	800c270 <_free_r+0x28>
 800c2c0:	d902      	bls.n	800c2c8 <_free_r+0x80>
 800c2c2:	230c      	movs	r3, #12
 800c2c4:	6003      	str	r3, [r0, #0]
 800c2c6:	e7d3      	b.n	800c270 <_free_r+0x28>
 800c2c8:	6825      	ldr	r5, [r4, #0]
 800c2ca:	1961      	adds	r1, r4, r5
 800c2cc:	428b      	cmp	r3, r1
 800c2ce:	bf04      	itt	eq
 800c2d0:	6819      	ldreq	r1, [r3, #0]
 800c2d2:	685b      	ldreq	r3, [r3, #4]
 800c2d4:	6063      	str	r3, [r4, #4]
 800c2d6:	bf04      	itt	eq
 800c2d8:	1949      	addeq	r1, r1, r5
 800c2da:	6021      	streq	r1, [r4, #0]
 800c2dc:	6054      	str	r4, [r2, #4]
 800c2de:	e7c7      	b.n	800c270 <_free_r+0x28>
 800c2e0:	b003      	add	sp, #12
 800c2e2:	bd30      	pop	{r4, r5, pc}
 800c2e4:	20000594 	.word	0x20000594

0800c2e8 <_malloc_r>:
 800c2e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2ea:	1ccd      	adds	r5, r1, #3
 800c2ec:	f025 0503 	bic.w	r5, r5, #3
 800c2f0:	3508      	adds	r5, #8
 800c2f2:	2d0c      	cmp	r5, #12
 800c2f4:	bf38      	it	cc
 800c2f6:	250c      	movcc	r5, #12
 800c2f8:	2d00      	cmp	r5, #0
 800c2fa:	4606      	mov	r6, r0
 800c2fc:	db01      	blt.n	800c302 <_malloc_r+0x1a>
 800c2fe:	42a9      	cmp	r1, r5
 800c300:	d903      	bls.n	800c30a <_malloc_r+0x22>
 800c302:	230c      	movs	r3, #12
 800c304:	6033      	str	r3, [r6, #0]
 800c306:	2000      	movs	r0, #0
 800c308:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c30a:	f000 fa0f 	bl	800c72c <__malloc_lock>
 800c30e:	4921      	ldr	r1, [pc, #132]	; (800c394 <_malloc_r+0xac>)
 800c310:	680a      	ldr	r2, [r1, #0]
 800c312:	4614      	mov	r4, r2
 800c314:	b99c      	cbnz	r4, 800c33e <_malloc_r+0x56>
 800c316:	4f20      	ldr	r7, [pc, #128]	; (800c398 <_malloc_r+0xb0>)
 800c318:	683b      	ldr	r3, [r7, #0]
 800c31a:	b923      	cbnz	r3, 800c326 <_malloc_r+0x3e>
 800c31c:	4621      	mov	r1, r4
 800c31e:	4630      	mov	r0, r6
 800c320:	f000 f998 	bl	800c654 <_sbrk_r>
 800c324:	6038      	str	r0, [r7, #0]
 800c326:	4629      	mov	r1, r5
 800c328:	4630      	mov	r0, r6
 800c32a:	f000 f993 	bl	800c654 <_sbrk_r>
 800c32e:	1c43      	adds	r3, r0, #1
 800c330:	d123      	bne.n	800c37a <_malloc_r+0x92>
 800c332:	230c      	movs	r3, #12
 800c334:	6033      	str	r3, [r6, #0]
 800c336:	4630      	mov	r0, r6
 800c338:	f000 f9fe 	bl	800c738 <__malloc_unlock>
 800c33c:	e7e3      	b.n	800c306 <_malloc_r+0x1e>
 800c33e:	6823      	ldr	r3, [r4, #0]
 800c340:	1b5b      	subs	r3, r3, r5
 800c342:	d417      	bmi.n	800c374 <_malloc_r+0x8c>
 800c344:	2b0b      	cmp	r3, #11
 800c346:	d903      	bls.n	800c350 <_malloc_r+0x68>
 800c348:	6023      	str	r3, [r4, #0]
 800c34a:	441c      	add	r4, r3
 800c34c:	6025      	str	r5, [r4, #0]
 800c34e:	e004      	b.n	800c35a <_malloc_r+0x72>
 800c350:	6863      	ldr	r3, [r4, #4]
 800c352:	42a2      	cmp	r2, r4
 800c354:	bf0c      	ite	eq
 800c356:	600b      	streq	r3, [r1, #0]
 800c358:	6053      	strne	r3, [r2, #4]
 800c35a:	4630      	mov	r0, r6
 800c35c:	f000 f9ec 	bl	800c738 <__malloc_unlock>
 800c360:	f104 000b 	add.w	r0, r4, #11
 800c364:	1d23      	adds	r3, r4, #4
 800c366:	f020 0007 	bic.w	r0, r0, #7
 800c36a:	1ac2      	subs	r2, r0, r3
 800c36c:	d0cc      	beq.n	800c308 <_malloc_r+0x20>
 800c36e:	1a1b      	subs	r3, r3, r0
 800c370:	50a3      	str	r3, [r4, r2]
 800c372:	e7c9      	b.n	800c308 <_malloc_r+0x20>
 800c374:	4622      	mov	r2, r4
 800c376:	6864      	ldr	r4, [r4, #4]
 800c378:	e7cc      	b.n	800c314 <_malloc_r+0x2c>
 800c37a:	1cc4      	adds	r4, r0, #3
 800c37c:	f024 0403 	bic.w	r4, r4, #3
 800c380:	42a0      	cmp	r0, r4
 800c382:	d0e3      	beq.n	800c34c <_malloc_r+0x64>
 800c384:	1a21      	subs	r1, r4, r0
 800c386:	4630      	mov	r0, r6
 800c388:	f000 f964 	bl	800c654 <_sbrk_r>
 800c38c:	3001      	adds	r0, #1
 800c38e:	d1dd      	bne.n	800c34c <_malloc_r+0x64>
 800c390:	e7cf      	b.n	800c332 <_malloc_r+0x4a>
 800c392:	bf00      	nop
 800c394:	20000594 	.word	0x20000594
 800c398:	20000598 	.word	0x20000598

0800c39c <__ssputs_r>:
 800c39c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c3a0:	688e      	ldr	r6, [r1, #8]
 800c3a2:	429e      	cmp	r6, r3
 800c3a4:	4682      	mov	sl, r0
 800c3a6:	460c      	mov	r4, r1
 800c3a8:	4690      	mov	r8, r2
 800c3aa:	461f      	mov	r7, r3
 800c3ac:	d838      	bhi.n	800c420 <__ssputs_r+0x84>
 800c3ae:	898a      	ldrh	r2, [r1, #12]
 800c3b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c3b4:	d032      	beq.n	800c41c <__ssputs_r+0x80>
 800c3b6:	6825      	ldr	r5, [r4, #0]
 800c3b8:	6909      	ldr	r1, [r1, #16]
 800c3ba:	eba5 0901 	sub.w	r9, r5, r1
 800c3be:	6965      	ldr	r5, [r4, #20]
 800c3c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c3c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c3c8:	3301      	adds	r3, #1
 800c3ca:	444b      	add	r3, r9
 800c3cc:	106d      	asrs	r5, r5, #1
 800c3ce:	429d      	cmp	r5, r3
 800c3d0:	bf38      	it	cc
 800c3d2:	461d      	movcc	r5, r3
 800c3d4:	0553      	lsls	r3, r2, #21
 800c3d6:	d531      	bpl.n	800c43c <__ssputs_r+0xa0>
 800c3d8:	4629      	mov	r1, r5
 800c3da:	f7ff ff85 	bl	800c2e8 <_malloc_r>
 800c3de:	4606      	mov	r6, r0
 800c3e0:	b950      	cbnz	r0, 800c3f8 <__ssputs_r+0x5c>
 800c3e2:	230c      	movs	r3, #12
 800c3e4:	f8ca 3000 	str.w	r3, [sl]
 800c3e8:	89a3      	ldrh	r3, [r4, #12]
 800c3ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c3ee:	81a3      	strh	r3, [r4, #12]
 800c3f0:	f04f 30ff 	mov.w	r0, #4294967295
 800c3f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3f8:	6921      	ldr	r1, [r4, #16]
 800c3fa:	464a      	mov	r2, r9
 800c3fc:	f7ff fb88 	bl	800bb10 <memcpy>
 800c400:	89a3      	ldrh	r3, [r4, #12]
 800c402:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c406:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c40a:	81a3      	strh	r3, [r4, #12]
 800c40c:	6126      	str	r6, [r4, #16]
 800c40e:	6165      	str	r5, [r4, #20]
 800c410:	444e      	add	r6, r9
 800c412:	eba5 0509 	sub.w	r5, r5, r9
 800c416:	6026      	str	r6, [r4, #0]
 800c418:	60a5      	str	r5, [r4, #8]
 800c41a:	463e      	mov	r6, r7
 800c41c:	42be      	cmp	r6, r7
 800c41e:	d900      	bls.n	800c422 <__ssputs_r+0x86>
 800c420:	463e      	mov	r6, r7
 800c422:	4632      	mov	r2, r6
 800c424:	6820      	ldr	r0, [r4, #0]
 800c426:	4641      	mov	r1, r8
 800c428:	f000 f966 	bl	800c6f8 <memmove>
 800c42c:	68a3      	ldr	r3, [r4, #8]
 800c42e:	6822      	ldr	r2, [r4, #0]
 800c430:	1b9b      	subs	r3, r3, r6
 800c432:	4432      	add	r2, r6
 800c434:	60a3      	str	r3, [r4, #8]
 800c436:	6022      	str	r2, [r4, #0]
 800c438:	2000      	movs	r0, #0
 800c43a:	e7db      	b.n	800c3f4 <__ssputs_r+0x58>
 800c43c:	462a      	mov	r2, r5
 800c43e:	f000 f981 	bl	800c744 <_realloc_r>
 800c442:	4606      	mov	r6, r0
 800c444:	2800      	cmp	r0, #0
 800c446:	d1e1      	bne.n	800c40c <__ssputs_r+0x70>
 800c448:	6921      	ldr	r1, [r4, #16]
 800c44a:	4650      	mov	r0, sl
 800c44c:	f7ff fefc 	bl	800c248 <_free_r>
 800c450:	e7c7      	b.n	800c3e2 <__ssputs_r+0x46>
	...

0800c454 <_svfiprintf_r>:
 800c454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c458:	4698      	mov	r8, r3
 800c45a:	898b      	ldrh	r3, [r1, #12]
 800c45c:	061b      	lsls	r3, r3, #24
 800c45e:	b09d      	sub	sp, #116	; 0x74
 800c460:	4607      	mov	r7, r0
 800c462:	460d      	mov	r5, r1
 800c464:	4614      	mov	r4, r2
 800c466:	d50e      	bpl.n	800c486 <_svfiprintf_r+0x32>
 800c468:	690b      	ldr	r3, [r1, #16]
 800c46a:	b963      	cbnz	r3, 800c486 <_svfiprintf_r+0x32>
 800c46c:	2140      	movs	r1, #64	; 0x40
 800c46e:	f7ff ff3b 	bl	800c2e8 <_malloc_r>
 800c472:	6028      	str	r0, [r5, #0]
 800c474:	6128      	str	r0, [r5, #16]
 800c476:	b920      	cbnz	r0, 800c482 <_svfiprintf_r+0x2e>
 800c478:	230c      	movs	r3, #12
 800c47a:	603b      	str	r3, [r7, #0]
 800c47c:	f04f 30ff 	mov.w	r0, #4294967295
 800c480:	e0d1      	b.n	800c626 <_svfiprintf_r+0x1d2>
 800c482:	2340      	movs	r3, #64	; 0x40
 800c484:	616b      	str	r3, [r5, #20]
 800c486:	2300      	movs	r3, #0
 800c488:	9309      	str	r3, [sp, #36]	; 0x24
 800c48a:	2320      	movs	r3, #32
 800c48c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c490:	f8cd 800c 	str.w	r8, [sp, #12]
 800c494:	2330      	movs	r3, #48	; 0x30
 800c496:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c640 <_svfiprintf_r+0x1ec>
 800c49a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c49e:	f04f 0901 	mov.w	r9, #1
 800c4a2:	4623      	mov	r3, r4
 800c4a4:	469a      	mov	sl, r3
 800c4a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c4aa:	b10a      	cbz	r2, 800c4b0 <_svfiprintf_r+0x5c>
 800c4ac:	2a25      	cmp	r2, #37	; 0x25
 800c4ae:	d1f9      	bne.n	800c4a4 <_svfiprintf_r+0x50>
 800c4b0:	ebba 0b04 	subs.w	fp, sl, r4
 800c4b4:	d00b      	beq.n	800c4ce <_svfiprintf_r+0x7a>
 800c4b6:	465b      	mov	r3, fp
 800c4b8:	4622      	mov	r2, r4
 800c4ba:	4629      	mov	r1, r5
 800c4bc:	4638      	mov	r0, r7
 800c4be:	f7ff ff6d 	bl	800c39c <__ssputs_r>
 800c4c2:	3001      	adds	r0, #1
 800c4c4:	f000 80aa 	beq.w	800c61c <_svfiprintf_r+0x1c8>
 800c4c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c4ca:	445a      	add	r2, fp
 800c4cc:	9209      	str	r2, [sp, #36]	; 0x24
 800c4ce:	f89a 3000 	ldrb.w	r3, [sl]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	f000 80a2 	beq.w	800c61c <_svfiprintf_r+0x1c8>
 800c4d8:	2300      	movs	r3, #0
 800c4da:	f04f 32ff 	mov.w	r2, #4294967295
 800c4de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c4e2:	f10a 0a01 	add.w	sl, sl, #1
 800c4e6:	9304      	str	r3, [sp, #16]
 800c4e8:	9307      	str	r3, [sp, #28]
 800c4ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c4ee:	931a      	str	r3, [sp, #104]	; 0x68
 800c4f0:	4654      	mov	r4, sl
 800c4f2:	2205      	movs	r2, #5
 800c4f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4f8:	4851      	ldr	r0, [pc, #324]	; (800c640 <_svfiprintf_r+0x1ec>)
 800c4fa:	f7f3 fe71 	bl	80001e0 <memchr>
 800c4fe:	9a04      	ldr	r2, [sp, #16]
 800c500:	b9d8      	cbnz	r0, 800c53a <_svfiprintf_r+0xe6>
 800c502:	06d0      	lsls	r0, r2, #27
 800c504:	bf44      	itt	mi
 800c506:	2320      	movmi	r3, #32
 800c508:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c50c:	0711      	lsls	r1, r2, #28
 800c50e:	bf44      	itt	mi
 800c510:	232b      	movmi	r3, #43	; 0x2b
 800c512:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c516:	f89a 3000 	ldrb.w	r3, [sl]
 800c51a:	2b2a      	cmp	r3, #42	; 0x2a
 800c51c:	d015      	beq.n	800c54a <_svfiprintf_r+0xf6>
 800c51e:	9a07      	ldr	r2, [sp, #28]
 800c520:	4654      	mov	r4, sl
 800c522:	2000      	movs	r0, #0
 800c524:	f04f 0c0a 	mov.w	ip, #10
 800c528:	4621      	mov	r1, r4
 800c52a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c52e:	3b30      	subs	r3, #48	; 0x30
 800c530:	2b09      	cmp	r3, #9
 800c532:	d94e      	bls.n	800c5d2 <_svfiprintf_r+0x17e>
 800c534:	b1b0      	cbz	r0, 800c564 <_svfiprintf_r+0x110>
 800c536:	9207      	str	r2, [sp, #28]
 800c538:	e014      	b.n	800c564 <_svfiprintf_r+0x110>
 800c53a:	eba0 0308 	sub.w	r3, r0, r8
 800c53e:	fa09 f303 	lsl.w	r3, r9, r3
 800c542:	4313      	orrs	r3, r2
 800c544:	9304      	str	r3, [sp, #16]
 800c546:	46a2      	mov	sl, r4
 800c548:	e7d2      	b.n	800c4f0 <_svfiprintf_r+0x9c>
 800c54a:	9b03      	ldr	r3, [sp, #12]
 800c54c:	1d19      	adds	r1, r3, #4
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	9103      	str	r1, [sp, #12]
 800c552:	2b00      	cmp	r3, #0
 800c554:	bfbb      	ittet	lt
 800c556:	425b      	neglt	r3, r3
 800c558:	f042 0202 	orrlt.w	r2, r2, #2
 800c55c:	9307      	strge	r3, [sp, #28]
 800c55e:	9307      	strlt	r3, [sp, #28]
 800c560:	bfb8      	it	lt
 800c562:	9204      	strlt	r2, [sp, #16]
 800c564:	7823      	ldrb	r3, [r4, #0]
 800c566:	2b2e      	cmp	r3, #46	; 0x2e
 800c568:	d10c      	bne.n	800c584 <_svfiprintf_r+0x130>
 800c56a:	7863      	ldrb	r3, [r4, #1]
 800c56c:	2b2a      	cmp	r3, #42	; 0x2a
 800c56e:	d135      	bne.n	800c5dc <_svfiprintf_r+0x188>
 800c570:	9b03      	ldr	r3, [sp, #12]
 800c572:	1d1a      	adds	r2, r3, #4
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	9203      	str	r2, [sp, #12]
 800c578:	2b00      	cmp	r3, #0
 800c57a:	bfb8      	it	lt
 800c57c:	f04f 33ff 	movlt.w	r3, #4294967295
 800c580:	3402      	adds	r4, #2
 800c582:	9305      	str	r3, [sp, #20]
 800c584:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c650 <_svfiprintf_r+0x1fc>
 800c588:	7821      	ldrb	r1, [r4, #0]
 800c58a:	2203      	movs	r2, #3
 800c58c:	4650      	mov	r0, sl
 800c58e:	f7f3 fe27 	bl	80001e0 <memchr>
 800c592:	b140      	cbz	r0, 800c5a6 <_svfiprintf_r+0x152>
 800c594:	2340      	movs	r3, #64	; 0x40
 800c596:	eba0 000a 	sub.w	r0, r0, sl
 800c59a:	fa03 f000 	lsl.w	r0, r3, r0
 800c59e:	9b04      	ldr	r3, [sp, #16]
 800c5a0:	4303      	orrs	r3, r0
 800c5a2:	3401      	adds	r4, #1
 800c5a4:	9304      	str	r3, [sp, #16]
 800c5a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5aa:	4826      	ldr	r0, [pc, #152]	; (800c644 <_svfiprintf_r+0x1f0>)
 800c5ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c5b0:	2206      	movs	r2, #6
 800c5b2:	f7f3 fe15 	bl	80001e0 <memchr>
 800c5b6:	2800      	cmp	r0, #0
 800c5b8:	d038      	beq.n	800c62c <_svfiprintf_r+0x1d8>
 800c5ba:	4b23      	ldr	r3, [pc, #140]	; (800c648 <_svfiprintf_r+0x1f4>)
 800c5bc:	bb1b      	cbnz	r3, 800c606 <_svfiprintf_r+0x1b2>
 800c5be:	9b03      	ldr	r3, [sp, #12]
 800c5c0:	3307      	adds	r3, #7
 800c5c2:	f023 0307 	bic.w	r3, r3, #7
 800c5c6:	3308      	adds	r3, #8
 800c5c8:	9303      	str	r3, [sp, #12]
 800c5ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5cc:	4433      	add	r3, r6
 800c5ce:	9309      	str	r3, [sp, #36]	; 0x24
 800c5d0:	e767      	b.n	800c4a2 <_svfiprintf_r+0x4e>
 800c5d2:	fb0c 3202 	mla	r2, ip, r2, r3
 800c5d6:	460c      	mov	r4, r1
 800c5d8:	2001      	movs	r0, #1
 800c5da:	e7a5      	b.n	800c528 <_svfiprintf_r+0xd4>
 800c5dc:	2300      	movs	r3, #0
 800c5de:	3401      	adds	r4, #1
 800c5e0:	9305      	str	r3, [sp, #20]
 800c5e2:	4619      	mov	r1, r3
 800c5e4:	f04f 0c0a 	mov.w	ip, #10
 800c5e8:	4620      	mov	r0, r4
 800c5ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c5ee:	3a30      	subs	r2, #48	; 0x30
 800c5f0:	2a09      	cmp	r2, #9
 800c5f2:	d903      	bls.n	800c5fc <_svfiprintf_r+0x1a8>
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d0c5      	beq.n	800c584 <_svfiprintf_r+0x130>
 800c5f8:	9105      	str	r1, [sp, #20]
 800c5fa:	e7c3      	b.n	800c584 <_svfiprintf_r+0x130>
 800c5fc:	fb0c 2101 	mla	r1, ip, r1, r2
 800c600:	4604      	mov	r4, r0
 800c602:	2301      	movs	r3, #1
 800c604:	e7f0      	b.n	800c5e8 <_svfiprintf_r+0x194>
 800c606:	ab03      	add	r3, sp, #12
 800c608:	9300      	str	r3, [sp, #0]
 800c60a:	462a      	mov	r2, r5
 800c60c:	4b0f      	ldr	r3, [pc, #60]	; (800c64c <_svfiprintf_r+0x1f8>)
 800c60e:	a904      	add	r1, sp, #16
 800c610:	4638      	mov	r0, r7
 800c612:	f7fe f80d 	bl	800a630 <_printf_float>
 800c616:	1c42      	adds	r2, r0, #1
 800c618:	4606      	mov	r6, r0
 800c61a:	d1d6      	bne.n	800c5ca <_svfiprintf_r+0x176>
 800c61c:	89ab      	ldrh	r3, [r5, #12]
 800c61e:	065b      	lsls	r3, r3, #25
 800c620:	f53f af2c 	bmi.w	800c47c <_svfiprintf_r+0x28>
 800c624:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c626:	b01d      	add	sp, #116	; 0x74
 800c628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c62c:	ab03      	add	r3, sp, #12
 800c62e:	9300      	str	r3, [sp, #0]
 800c630:	462a      	mov	r2, r5
 800c632:	4b06      	ldr	r3, [pc, #24]	; (800c64c <_svfiprintf_r+0x1f8>)
 800c634:	a904      	add	r1, sp, #16
 800c636:	4638      	mov	r0, r7
 800c638:	f7fe fa9e 	bl	800ab78 <_printf_i>
 800c63c:	e7eb      	b.n	800c616 <_svfiprintf_r+0x1c2>
 800c63e:	bf00      	nop
 800c640:	0800e524 	.word	0x0800e524
 800c644:	0800e52e 	.word	0x0800e52e
 800c648:	0800a631 	.word	0x0800a631
 800c64c:	0800c39d 	.word	0x0800c39d
 800c650:	0800e52a 	.word	0x0800e52a

0800c654 <_sbrk_r>:
 800c654:	b538      	push	{r3, r4, r5, lr}
 800c656:	4d06      	ldr	r5, [pc, #24]	; (800c670 <_sbrk_r+0x1c>)
 800c658:	2300      	movs	r3, #0
 800c65a:	4604      	mov	r4, r0
 800c65c:	4608      	mov	r0, r1
 800c65e:	602b      	str	r3, [r5, #0]
 800c660:	f7f5 f9ca 	bl	80019f8 <_sbrk>
 800c664:	1c43      	adds	r3, r0, #1
 800c666:	d102      	bne.n	800c66e <_sbrk_r+0x1a>
 800c668:	682b      	ldr	r3, [r5, #0]
 800c66a:	b103      	cbz	r3, 800c66e <_sbrk_r+0x1a>
 800c66c:	6023      	str	r3, [r4, #0]
 800c66e:	bd38      	pop	{r3, r4, r5, pc}
 800c670:	2000161c 	.word	0x2000161c

0800c674 <__assert_func>:
 800c674:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c676:	4614      	mov	r4, r2
 800c678:	461a      	mov	r2, r3
 800c67a:	4b09      	ldr	r3, [pc, #36]	; (800c6a0 <__assert_func+0x2c>)
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	4605      	mov	r5, r0
 800c680:	68d8      	ldr	r0, [r3, #12]
 800c682:	b14c      	cbz	r4, 800c698 <__assert_func+0x24>
 800c684:	4b07      	ldr	r3, [pc, #28]	; (800c6a4 <__assert_func+0x30>)
 800c686:	9100      	str	r1, [sp, #0]
 800c688:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c68c:	4906      	ldr	r1, [pc, #24]	; (800c6a8 <__assert_func+0x34>)
 800c68e:	462b      	mov	r3, r5
 800c690:	f000 f80e 	bl	800c6b0 <fiprintf>
 800c694:	f000 faa4 	bl	800cbe0 <abort>
 800c698:	4b04      	ldr	r3, [pc, #16]	; (800c6ac <__assert_func+0x38>)
 800c69a:	461c      	mov	r4, r3
 800c69c:	e7f3      	b.n	800c686 <__assert_func+0x12>
 800c69e:	bf00      	nop
 800c6a0:	2000017c 	.word	0x2000017c
 800c6a4:	0800e535 	.word	0x0800e535
 800c6a8:	0800e542 	.word	0x0800e542
 800c6ac:	0800e570 	.word	0x0800e570

0800c6b0 <fiprintf>:
 800c6b0:	b40e      	push	{r1, r2, r3}
 800c6b2:	b503      	push	{r0, r1, lr}
 800c6b4:	4601      	mov	r1, r0
 800c6b6:	ab03      	add	r3, sp, #12
 800c6b8:	4805      	ldr	r0, [pc, #20]	; (800c6d0 <fiprintf+0x20>)
 800c6ba:	f853 2b04 	ldr.w	r2, [r3], #4
 800c6be:	6800      	ldr	r0, [r0, #0]
 800c6c0:	9301      	str	r3, [sp, #4]
 800c6c2:	f000 f88f 	bl	800c7e4 <_vfiprintf_r>
 800c6c6:	b002      	add	sp, #8
 800c6c8:	f85d eb04 	ldr.w	lr, [sp], #4
 800c6cc:	b003      	add	sp, #12
 800c6ce:	4770      	bx	lr
 800c6d0:	2000017c 	.word	0x2000017c

0800c6d4 <__ascii_mbtowc>:
 800c6d4:	b082      	sub	sp, #8
 800c6d6:	b901      	cbnz	r1, 800c6da <__ascii_mbtowc+0x6>
 800c6d8:	a901      	add	r1, sp, #4
 800c6da:	b142      	cbz	r2, 800c6ee <__ascii_mbtowc+0x1a>
 800c6dc:	b14b      	cbz	r3, 800c6f2 <__ascii_mbtowc+0x1e>
 800c6de:	7813      	ldrb	r3, [r2, #0]
 800c6e0:	600b      	str	r3, [r1, #0]
 800c6e2:	7812      	ldrb	r2, [r2, #0]
 800c6e4:	1e10      	subs	r0, r2, #0
 800c6e6:	bf18      	it	ne
 800c6e8:	2001      	movne	r0, #1
 800c6ea:	b002      	add	sp, #8
 800c6ec:	4770      	bx	lr
 800c6ee:	4610      	mov	r0, r2
 800c6f0:	e7fb      	b.n	800c6ea <__ascii_mbtowc+0x16>
 800c6f2:	f06f 0001 	mvn.w	r0, #1
 800c6f6:	e7f8      	b.n	800c6ea <__ascii_mbtowc+0x16>

0800c6f8 <memmove>:
 800c6f8:	4288      	cmp	r0, r1
 800c6fa:	b510      	push	{r4, lr}
 800c6fc:	eb01 0402 	add.w	r4, r1, r2
 800c700:	d902      	bls.n	800c708 <memmove+0x10>
 800c702:	4284      	cmp	r4, r0
 800c704:	4623      	mov	r3, r4
 800c706:	d807      	bhi.n	800c718 <memmove+0x20>
 800c708:	1e43      	subs	r3, r0, #1
 800c70a:	42a1      	cmp	r1, r4
 800c70c:	d008      	beq.n	800c720 <memmove+0x28>
 800c70e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c712:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c716:	e7f8      	b.n	800c70a <memmove+0x12>
 800c718:	4402      	add	r2, r0
 800c71a:	4601      	mov	r1, r0
 800c71c:	428a      	cmp	r2, r1
 800c71e:	d100      	bne.n	800c722 <memmove+0x2a>
 800c720:	bd10      	pop	{r4, pc}
 800c722:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c726:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c72a:	e7f7      	b.n	800c71c <memmove+0x24>

0800c72c <__malloc_lock>:
 800c72c:	4801      	ldr	r0, [pc, #4]	; (800c734 <__malloc_lock+0x8>)
 800c72e:	f000 bc17 	b.w	800cf60 <__retarget_lock_acquire_recursive>
 800c732:	bf00      	nop
 800c734:	20001624 	.word	0x20001624

0800c738 <__malloc_unlock>:
 800c738:	4801      	ldr	r0, [pc, #4]	; (800c740 <__malloc_unlock+0x8>)
 800c73a:	f000 bc12 	b.w	800cf62 <__retarget_lock_release_recursive>
 800c73e:	bf00      	nop
 800c740:	20001624 	.word	0x20001624

0800c744 <_realloc_r>:
 800c744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c746:	4607      	mov	r7, r0
 800c748:	4614      	mov	r4, r2
 800c74a:	460e      	mov	r6, r1
 800c74c:	b921      	cbnz	r1, 800c758 <_realloc_r+0x14>
 800c74e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c752:	4611      	mov	r1, r2
 800c754:	f7ff bdc8 	b.w	800c2e8 <_malloc_r>
 800c758:	b922      	cbnz	r2, 800c764 <_realloc_r+0x20>
 800c75a:	f7ff fd75 	bl	800c248 <_free_r>
 800c75e:	4625      	mov	r5, r4
 800c760:	4628      	mov	r0, r5
 800c762:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c764:	f000 fc62 	bl	800d02c <_malloc_usable_size_r>
 800c768:	42a0      	cmp	r0, r4
 800c76a:	d20f      	bcs.n	800c78c <_realloc_r+0x48>
 800c76c:	4621      	mov	r1, r4
 800c76e:	4638      	mov	r0, r7
 800c770:	f7ff fdba 	bl	800c2e8 <_malloc_r>
 800c774:	4605      	mov	r5, r0
 800c776:	2800      	cmp	r0, #0
 800c778:	d0f2      	beq.n	800c760 <_realloc_r+0x1c>
 800c77a:	4631      	mov	r1, r6
 800c77c:	4622      	mov	r2, r4
 800c77e:	f7ff f9c7 	bl	800bb10 <memcpy>
 800c782:	4631      	mov	r1, r6
 800c784:	4638      	mov	r0, r7
 800c786:	f7ff fd5f 	bl	800c248 <_free_r>
 800c78a:	e7e9      	b.n	800c760 <_realloc_r+0x1c>
 800c78c:	4635      	mov	r5, r6
 800c78e:	e7e7      	b.n	800c760 <_realloc_r+0x1c>

0800c790 <__sfputc_r>:
 800c790:	6893      	ldr	r3, [r2, #8]
 800c792:	3b01      	subs	r3, #1
 800c794:	2b00      	cmp	r3, #0
 800c796:	b410      	push	{r4}
 800c798:	6093      	str	r3, [r2, #8]
 800c79a:	da08      	bge.n	800c7ae <__sfputc_r+0x1e>
 800c79c:	6994      	ldr	r4, [r2, #24]
 800c79e:	42a3      	cmp	r3, r4
 800c7a0:	db01      	blt.n	800c7a6 <__sfputc_r+0x16>
 800c7a2:	290a      	cmp	r1, #10
 800c7a4:	d103      	bne.n	800c7ae <__sfputc_r+0x1e>
 800c7a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c7aa:	f000 b94b 	b.w	800ca44 <__swbuf_r>
 800c7ae:	6813      	ldr	r3, [r2, #0]
 800c7b0:	1c58      	adds	r0, r3, #1
 800c7b2:	6010      	str	r0, [r2, #0]
 800c7b4:	7019      	strb	r1, [r3, #0]
 800c7b6:	4608      	mov	r0, r1
 800c7b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c7bc:	4770      	bx	lr

0800c7be <__sfputs_r>:
 800c7be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7c0:	4606      	mov	r6, r0
 800c7c2:	460f      	mov	r7, r1
 800c7c4:	4614      	mov	r4, r2
 800c7c6:	18d5      	adds	r5, r2, r3
 800c7c8:	42ac      	cmp	r4, r5
 800c7ca:	d101      	bne.n	800c7d0 <__sfputs_r+0x12>
 800c7cc:	2000      	movs	r0, #0
 800c7ce:	e007      	b.n	800c7e0 <__sfputs_r+0x22>
 800c7d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7d4:	463a      	mov	r2, r7
 800c7d6:	4630      	mov	r0, r6
 800c7d8:	f7ff ffda 	bl	800c790 <__sfputc_r>
 800c7dc:	1c43      	adds	r3, r0, #1
 800c7de:	d1f3      	bne.n	800c7c8 <__sfputs_r+0xa>
 800c7e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c7e4 <_vfiprintf_r>:
 800c7e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7e8:	460d      	mov	r5, r1
 800c7ea:	b09d      	sub	sp, #116	; 0x74
 800c7ec:	4614      	mov	r4, r2
 800c7ee:	4698      	mov	r8, r3
 800c7f0:	4606      	mov	r6, r0
 800c7f2:	b118      	cbz	r0, 800c7fc <_vfiprintf_r+0x18>
 800c7f4:	6983      	ldr	r3, [r0, #24]
 800c7f6:	b90b      	cbnz	r3, 800c7fc <_vfiprintf_r+0x18>
 800c7f8:	f000 fb14 	bl	800ce24 <__sinit>
 800c7fc:	4b89      	ldr	r3, [pc, #548]	; (800ca24 <_vfiprintf_r+0x240>)
 800c7fe:	429d      	cmp	r5, r3
 800c800:	d11b      	bne.n	800c83a <_vfiprintf_r+0x56>
 800c802:	6875      	ldr	r5, [r6, #4]
 800c804:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c806:	07d9      	lsls	r1, r3, #31
 800c808:	d405      	bmi.n	800c816 <_vfiprintf_r+0x32>
 800c80a:	89ab      	ldrh	r3, [r5, #12]
 800c80c:	059a      	lsls	r2, r3, #22
 800c80e:	d402      	bmi.n	800c816 <_vfiprintf_r+0x32>
 800c810:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c812:	f000 fba5 	bl	800cf60 <__retarget_lock_acquire_recursive>
 800c816:	89ab      	ldrh	r3, [r5, #12]
 800c818:	071b      	lsls	r3, r3, #28
 800c81a:	d501      	bpl.n	800c820 <_vfiprintf_r+0x3c>
 800c81c:	692b      	ldr	r3, [r5, #16]
 800c81e:	b9eb      	cbnz	r3, 800c85c <_vfiprintf_r+0x78>
 800c820:	4629      	mov	r1, r5
 800c822:	4630      	mov	r0, r6
 800c824:	f000 f96e 	bl	800cb04 <__swsetup_r>
 800c828:	b1c0      	cbz	r0, 800c85c <_vfiprintf_r+0x78>
 800c82a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c82c:	07dc      	lsls	r4, r3, #31
 800c82e:	d50e      	bpl.n	800c84e <_vfiprintf_r+0x6a>
 800c830:	f04f 30ff 	mov.w	r0, #4294967295
 800c834:	b01d      	add	sp, #116	; 0x74
 800c836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c83a:	4b7b      	ldr	r3, [pc, #492]	; (800ca28 <_vfiprintf_r+0x244>)
 800c83c:	429d      	cmp	r5, r3
 800c83e:	d101      	bne.n	800c844 <_vfiprintf_r+0x60>
 800c840:	68b5      	ldr	r5, [r6, #8]
 800c842:	e7df      	b.n	800c804 <_vfiprintf_r+0x20>
 800c844:	4b79      	ldr	r3, [pc, #484]	; (800ca2c <_vfiprintf_r+0x248>)
 800c846:	429d      	cmp	r5, r3
 800c848:	bf08      	it	eq
 800c84a:	68f5      	ldreq	r5, [r6, #12]
 800c84c:	e7da      	b.n	800c804 <_vfiprintf_r+0x20>
 800c84e:	89ab      	ldrh	r3, [r5, #12]
 800c850:	0598      	lsls	r0, r3, #22
 800c852:	d4ed      	bmi.n	800c830 <_vfiprintf_r+0x4c>
 800c854:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c856:	f000 fb84 	bl	800cf62 <__retarget_lock_release_recursive>
 800c85a:	e7e9      	b.n	800c830 <_vfiprintf_r+0x4c>
 800c85c:	2300      	movs	r3, #0
 800c85e:	9309      	str	r3, [sp, #36]	; 0x24
 800c860:	2320      	movs	r3, #32
 800c862:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c866:	f8cd 800c 	str.w	r8, [sp, #12]
 800c86a:	2330      	movs	r3, #48	; 0x30
 800c86c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ca30 <_vfiprintf_r+0x24c>
 800c870:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c874:	f04f 0901 	mov.w	r9, #1
 800c878:	4623      	mov	r3, r4
 800c87a:	469a      	mov	sl, r3
 800c87c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c880:	b10a      	cbz	r2, 800c886 <_vfiprintf_r+0xa2>
 800c882:	2a25      	cmp	r2, #37	; 0x25
 800c884:	d1f9      	bne.n	800c87a <_vfiprintf_r+0x96>
 800c886:	ebba 0b04 	subs.w	fp, sl, r4
 800c88a:	d00b      	beq.n	800c8a4 <_vfiprintf_r+0xc0>
 800c88c:	465b      	mov	r3, fp
 800c88e:	4622      	mov	r2, r4
 800c890:	4629      	mov	r1, r5
 800c892:	4630      	mov	r0, r6
 800c894:	f7ff ff93 	bl	800c7be <__sfputs_r>
 800c898:	3001      	adds	r0, #1
 800c89a:	f000 80aa 	beq.w	800c9f2 <_vfiprintf_r+0x20e>
 800c89e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c8a0:	445a      	add	r2, fp
 800c8a2:	9209      	str	r2, [sp, #36]	; 0x24
 800c8a4:	f89a 3000 	ldrb.w	r3, [sl]
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	f000 80a2 	beq.w	800c9f2 <_vfiprintf_r+0x20e>
 800c8ae:	2300      	movs	r3, #0
 800c8b0:	f04f 32ff 	mov.w	r2, #4294967295
 800c8b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c8b8:	f10a 0a01 	add.w	sl, sl, #1
 800c8bc:	9304      	str	r3, [sp, #16]
 800c8be:	9307      	str	r3, [sp, #28]
 800c8c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c8c4:	931a      	str	r3, [sp, #104]	; 0x68
 800c8c6:	4654      	mov	r4, sl
 800c8c8:	2205      	movs	r2, #5
 800c8ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8ce:	4858      	ldr	r0, [pc, #352]	; (800ca30 <_vfiprintf_r+0x24c>)
 800c8d0:	f7f3 fc86 	bl	80001e0 <memchr>
 800c8d4:	9a04      	ldr	r2, [sp, #16]
 800c8d6:	b9d8      	cbnz	r0, 800c910 <_vfiprintf_r+0x12c>
 800c8d8:	06d1      	lsls	r1, r2, #27
 800c8da:	bf44      	itt	mi
 800c8dc:	2320      	movmi	r3, #32
 800c8de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c8e2:	0713      	lsls	r3, r2, #28
 800c8e4:	bf44      	itt	mi
 800c8e6:	232b      	movmi	r3, #43	; 0x2b
 800c8e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c8ec:	f89a 3000 	ldrb.w	r3, [sl]
 800c8f0:	2b2a      	cmp	r3, #42	; 0x2a
 800c8f2:	d015      	beq.n	800c920 <_vfiprintf_r+0x13c>
 800c8f4:	9a07      	ldr	r2, [sp, #28]
 800c8f6:	4654      	mov	r4, sl
 800c8f8:	2000      	movs	r0, #0
 800c8fa:	f04f 0c0a 	mov.w	ip, #10
 800c8fe:	4621      	mov	r1, r4
 800c900:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c904:	3b30      	subs	r3, #48	; 0x30
 800c906:	2b09      	cmp	r3, #9
 800c908:	d94e      	bls.n	800c9a8 <_vfiprintf_r+0x1c4>
 800c90a:	b1b0      	cbz	r0, 800c93a <_vfiprintf_r+0x156>
 800c90c:	9207      	str	r2, [sp, #28]
 800c90e:	e014      	b.n	800c93a <_vfiprintf_r+0x156>
 800c910:	eba0 0308 	sub.w	r3, r0, r8
 800c914:	fa09 f303 	lsl.w	r3, r9, r3
 800c918:	4313      	orrs	r3, r2
 800c91a:	9304      	str	r3, [sp, #16]
 800c91c:	46a2      	mov	sl, r4
 800c91e:	e7d2      	b.n	800c8c6 <_vfiprintf_r+0xe2>
 800c920:	9b03      	ldr	r3, [sp, #12]
 800c922:	1d19      	adds	r1, r3, #4
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	9103      	str	r1, [sp, #12]
 800c928:	2b00      	cmp	r3, #0
 800c92a:	bfbb      	ittet	lt
 800c92c:	425b      	neglt	r3, r3
 800c92e:	f042 0202 	orrlt.w	r2, r2, #2
 800c932:	9307      	strge	r3, [sp, #28]
 800c934:	9307      	strlt	r3, [sp, #28]
 800c936:	bfb8      	it	lt
 800c938:	9204      	strlt	r2, [sp, #16]
 800c93a:	7823      	ldrb	r3, [r4, #0]
 800c93c:	2b2e      	cmp	r3, #46	; 0x2e
 800c93e:	d10c      	bne.n	800c95a <_vfiprintf_r+0x176>
 800c940:	7863      	ldrb	r3, [r4, #1]
 800c942:	2b2a      	cmp	r3, #42	; 0x2a
 800c944:	d135      	bne.n	800c9b2 <_vfiprintf_r+0x1ce>
 800c946:	9b03      	ldr	r3, [sp, #12]
 800c948:	1d1a      	adds	r2, r3, #4
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	9203      	str	r2, [sp, #12]
 800c94e:	2b00      	cmp	r3, #0
 800c950:	bfb8      	it	lt
 800c952:	f04f 33ff 	movlt.w	r3, #4294967295
 800c956:	3402      	adds	r4, #2
 800c958:	9305      	str	r3, [sp, #20]
 800c95a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ca40 <_vfiprintf_r+0x25c>
 800c95e:	7821      	ldrb	r1, [r4, #0]
 800c960:	2203      	movs	r2, #3
 800c962:	4650      	mov	r0, sl
 800c964:	f7f3 fc3c 	bl	80001e0 <memchr>
 800c968:	b140      	cbz	r0, 800c97c <_vfiprintf_r+0x198>
 800c96a:	2340      	movs	r3, #64	; 0x40
 800c96c:	eba0 000a 	sub.w	r0, r0, sl
 800c970:	fa03 f000 	lsl.w	r0, r3, r0
 800c974:	9b04      	ldr	r3, [sp, #16]
 800c976:	4303      	orrs	r3, r0
 800c978:	3401      	adds	r4, #1
 800c97a:	9304      	str	r3, [sp, #16]
 800c97c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c980:	482c      	ldr	r0, [pc, #176]	; (800ca34 <_vfiprintf_r+0x250>)
 800c982:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c986:	2206      	movs	r2, #6
 800c988:	f7f3 fc2a 	bl	80001e0 <memchr>
 800c98c:	2800      	cmp	r0, #0
 800c98e:	d03f      	beq.n	800ca10 <_vfiprintf_r+0x22c>
 800c990:	4b29      	ldr	r3, [pc, #164]	; (800ca38 <_vfiprintf_r+0x254>)
 800c992:	bb1b      	cbnz	r3, 800c9dc <_vfiprintf_r+0x1f8>
 800c994:	9b03      	ldr	r3, [sp, #12]
 800c996:	3307      	adds	r3, #7
 800c998:	f023 0307 	bic.w	r3, r3, #7
 800c99c:	3308      	adds	r3, #8
 800c99e:	9303      	str	r3, [sp, #12]
 800c9a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9a2:	443b      	add	r3, r7
 800c9a4:	9309      	str	r3, [sp, #36]	; 0x24
 800c9a6:	e767      	b.n	800c878 <_vfiprintf_r+0x94>
 800c9a8:	fb0c 3202 	mla	r2, ip, r2, r3
 800c9ac:	460c      	mov	r4, r1
 800c9ae:	2001      	movs	r0, #1
 800c9b0:	e7a5      	b.n	800c8fe <_vfiprintf_r+0x11a>
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	3401      	adds	r4, #1
 800c9b6:	9305      	str	r3, [sp, #20]
 800c9b8:	4619      	mov	r1, r3
 800c9ba:	f04f 0c0a 	mov.w	ip, #10
 800c9be:	4620      	mov	r0, r4
 800c9c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c9c4:	3a30      	subs	r2, #48	; 0x30
 800c9c6:	2a09      	cmp	r2, #9
 800c9c8:	d903      	bls.n	800c9d2 <_vfiprintf_r+0x1ee>
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d0c5      	beq.n	800c95a <_vfiprintf_r+0x176>
 800c9ce:	9105      	str	r1, [sp, #20]
 800c9d0:	e7c3      	b.n	800c95a <_vfiprintf_r+0x176>
 800c9d2:	fb0c 2101 	mla	r1, ip, r1, r2
 800c9d6:	4604      	mov	r4, r0
 800c9d8:	2301      	movs	r3, #1
 800c9da:	e7f0      	b.n	800c9be <_vfiprintf_r+0x1da>
 800c9dc:	ab03      	add	r3, sp, #12
 800c9de:	9300      	str	r3, [sp, #0]
 800c9e0:	462a      	mov	r2, r5
 800c9e2:	4b16      	ldr	r3, [pc, #88]	; (800ca3c <_vfiprintf_r+0x258>)
 800c9e4:	a904      	add	r1, sp, #16
 800c9e6:	4630      	mov	r0, r6
 800c9e8:	f7fd fe22 	bl	800a630 <_printf_float>
 800c9ec:	4607      	mov	r7, r0
 800c9ee:	1c78      	adds	r0, r7, #1
 800c9f0:	d1d6      	bne.n	800c9a0 <_vfiprintf_r+0x1bc>
 800c9f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c9f4:	07d9      	lsls	r1, r3, #31
 800c9f6:	d405      	bmi.n	800ca04 <_vfiprintf_r+0x220>
 800c9f8:	89ab      	ldrh	r3, [r5, #12]
 800c9fa:	059a      	lsls	r2, r3, #22
 800c9fc:	d402      	bmi.n	800ca04 <_vfiprintf_r+0x220>
 800c9fe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ca00:	f000 faaf 	bl	800cf62 <__retarget_lock_release_recursive>
 800ca04:	89ab      	ldrh	r3, [r5, #12]
 800ca06:	065b      	lsls	r3, r3, #25
 800ca08:	f53f af12 	bmi.w	800c830 <_vfiprintf_r+0x4c>
 800ca0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ca0e:	e711      	b.n	800c834 <_vfiprintf_r+0x50>
 800ca10:	ab03      	add	r3, sp, #12
 800ca12:	9300      	str	r3, [sp, #0]
 800ca14:	462a      	mov	r2, r5
 800ca16:	4b09      	ldr	r3, [pc, #36]	; (800ca3c <_vfiprintf_r+0x258>)
 800ca18:	a904      	add	r1, sp, #16
 800ca1a:	4630      	mov	r0, r6
 800ca1c:	f7fe f8ac 	bl	800ab78 <_printf_i>
 800ca20:	e7e4      	b.n	800c9ec <_vfiprintf_r+0x208>
 800ca22:	bf00      	nop
 800ca24:	0800e69c 	.word	0x0800e69c
 800ca28:	0800e6bc 	.word	0x0800e6bc
 800ca2c:	0800e67c 	.word	0x0800e67c
 800ca30:	0800e524 	.word	0x0800e524
 800ca34:	0800e52e 	.word	0x0800e52e
 800ca38:	0800a631 	.word	0x0800a631
 800ca3c:	0800c7bf 	.word	0x0800c7bf
 800ca40:	0800e52a 	.word	0x0800e52a

0800ca44 <__swbuf_r>:
 800ca44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca46:	460e      	mov	r6, r1
 800ca48:	4614      	mov	r4, r2
 800ca4a:	4605      	mov	r5, r0
 800ca4c:	b118      	cbz	r0, 800ca56 <__swbuf_r+0x12>
 800ca4e:	6983      	ldr	r3, [r0, #24]
 800ca50:	b90b      	cbnz	r3, 800ca56 <__swbuf_r+0x12>
 800ca52:	f000 f9e7 	bl	800ce24 <__sinit>
 800ca56:	4b21      	ldr	r3, [pc, #132]	; (800cadc <__swbuf_r+0x98>)
 800ca58:	429c      	cmp	r4, r3
 800ca5a:	d12b      	bne.n	800cab4 <__swbuf_r+0x70>
 800ca5c:	686c      	ldr	r4, [r5, #4]
 800ca5e:	69a3      	ldr	r3, [r4, #24]
 800ca60:	60a3      	str	r3, [r4, #8]
 800ca62:	89a3      	ldrh	r3, [r4, #12]
 800ca64:	071a      	lsls	r2, r3, #28
 800ca66:	d52f      	bpl.n	800cac8 <__swbuf_r+0x84>
 800ca68:	6923      	ldr	r3, [r4, #16]
 800ca6a:	b36b      	cbz	r3, 800cac8 <__swbuf_r+0x84>
 800ca6c:	6923      	ldr	r3, [r4, #16]
 800ca6e:	6820      	ldr	r0, [r4, #0]
 800ca70:	1ac0      	subs	r0, r0, r3
 800ca72:	6963      	ldr	r3, [r4, #20]
 800ca74:	b2f6      	uxtb	r6, r6
 800ca76:	4283      	cmp	r3, r0
 800ca78:	4637      	mov	r7, r6
 800ca7a:	dc04      	bgt.n	800ca86 <__swbuf_r+0x42>
 800ca7c:	4621      	mov	r1, r4
 800ca7e:	4628      	mov	r0, r5
 800ca80:	f000 f93c 	bl	800ccfc <_fflush_r>
 800ca84:	bb30      	cbnz	r0, 800cad4 <__swbuf_r+0x90>
 800ca86:	68a3      	ldr	r3, [r4, #8]
 800ca88:	3b01      	subs	r3, #1
 800ca8a:	60a3      	str	r3, [r4, #8]
 800ca8c:	6823      	ldr	r3, [r4, #0]
 800ca8e:	1c5a      	adds	r2, r3, #1
 800ca90:	6022      	str	r2, [r4, #0]
 800ca92:	701e      	strb	r6, [r3, #0]
 800ca94:	6963      	ldr	r3, [r4, #20]
 800ca96:	3001      	adds	r0, #1
 800ca98:	4283      	cmp	r3, r0
 800ca9a:	d004      	beq.n	800caa6 <__swbuf_r+0x62>
 800ca9c:	89a3      	ldrh	r3, [r4, #12]
 800ca9e:	07db      	lsls	r3, r3, #31
 800caa0:	d506      	bpl.n	800cab0 <__swbuf_r+0x6c>
 800caa2:	2e0a      	cmp	r6, #10
 800caa4:	d104      	bne.n	800cab0 <__swbuf_r+0x6c>
 800caa6:	4621      	mov	r1, r4
 800caa8:	4628      	mov	r0, r5
 800caaa:	f000 f927 	bl	800ccfc <_fflush_r>
 800caae:	b988      	cbnz	r0, 800cad4 <__swbuf_r+0x90>
 800cab0:	4638      	mov	r0, r7
 800cab2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cab4:	4b0a      	ldr	r3, [pc, #40]	; (800cae0 <__swbuf_r+0x9c>)
 800cab6:	429c      	cmp	r4, r3
 800cab8:	d101      	bne.n	800cabe <__swbuf_r+0x7a>
 800caba:	68ac      	ldr	r4, [r5, #8]
 800cabc:	e7cf      	b.n	800ca5e <__swbuf_r+0x1a>
 800cabe:	4b09      	ldr	r3, [pc, #36]	; (800cae4 <__swbuf_r+0xa0>)
 800cac0:	429c      	cmp	r4, r3
 800cac2:	bf08      	it	eq
 800cac4:	68ec      	ldreq	r4, [r5, #12]
 800cac6:	e7ca      	b.n	800ca5e <__swbuf_r+0x1a>
 800cac8:	4621      	mov	r1, r4
 800caca:	4628      	mov	r0, r5
 800cacc:	f000 f81a 	bl	800cb04 <__swsetup_r>
 800cad0:	2800      	cmp	r0, #0
 800cad2:	d0cb      	beq.n	800ca6c <__swbuf_r+0x28>
 800cad4:	f04f 37ff 	mov.w	r7, #4294967295
 800cad8:	e7ea      	b.n	800cab0 <__swbuf_r+0x6c>
 800cada:	bf00      	nop
 800cadc:	0800e69c 	.word	0x0800e69c
 800cae0:	0800e6bc 	.word	0x0800e6bc
 800cae4:	0800e67c 	.word	0x0800e67c

0800cae8 <__ascii_wctomb>:
 800cae8:	b149      	cbz	r1, 800cafe <__ascii_wctomb+0x16>
 800caea:	2aff      	cmp	r2, #255	; 0xff
 800caec:	bf85      	ittet	hi
 800caee:	238a      	movhi	r3, #138	; 0x8a
 800caf0:	6003      	strhi	r3, [r0, #0]
 800caf2:	700a      	strbls	r2, [r1, #0]
 800caf4:	f04f 30ff 	movhi.w	r0, #4294967295
 800caf8:	bf98      	it	ls
 800cafa:	2001      	movls	r0, #1
 800cafc:	4770      	bx	lr
 800cafe:	4608      	mov	r0, r1
 800cb00:	4770      	bx	lr
	...

0800cb04 <__swsetup_r>:
 800cb04:	4b32      	ldr	r3, [pc, #200]	; (800cbd0 <__swsetup_r+0xcc>)
 800cb06:	b570      	push	{r4, r5, r6, lr}
 800cb08:	681d      	ldr	r5, [r3, #0]
 800cb0a:	4606      	mov	r6, r0
 800cb0c:	460c      	mov	r4, r1
 800cb0e:	b125      	cbz	r5, 800cb1a <__swsetup_r+0x16>
 800cb10:	69ab      	ldr	r3, [r5, #24]
 800cb12:	b913      	cbnz	r3, 800cb1a <__swsetup_r+0x16>
 800cb14:	4628      	mov	r0, r5
 800cb16:	f000 f985 	bl	800ce24 <__sinit>
 800cb1a:	4b2e      	ldr	r3, [pc, #184]	; (800cbd4 <__swsetup_r+0xd0>)
 800cb1c:	429c      	cmp	r4, r3
 800cb1e:	d10f      	bne.n	800cb40 <__swsetup_r+0x3c>
 800cb20:	686c      	ldr	r4, [r5, #4]
 800cb22:	89a3      	ldrh	r3, [r4, #12]
 800cb24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cb28:	0719      	lsls	r1, r3, #28
 800cb2a:	d42c      	bmi.n	800cb86 <__swsetup_r+0x82>
 800cb2c:	06dd      	lsls	r5, r3, #27
 800cb2e:	d411      	bmi.n	800cb54 <__swsetup_r+0x50>
 800cb30:	2309      	movs	r3, #9
 800cb32:	6033      	str	r3, [r6, #0]
 800cb34:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cb38:	81a3      	strh	r3, [r4, #12]
 800cb3a:	f04f 30ff 	mov.w	r0, #4294967295
 800cb3e:	e03e      	b.n	800cbbe <__swsetup_r+0xba>
 800cb40:	4b25      	ldr	r3, [pc, #148]	; (800cbd8 <__swsetup_r+0xd4>)
 800cb42:	429c      	cmp	r4, r3
 800cb44:	d101      	bne.n	800cb4a <__swsetup_r+0x46>
 800cb46:	68ac      	ldr	r4, [r5, #8]
 800cb48:	e7eb      	b.n	800cb22 <__swsetup_r+0x1e>
 800cb4a:	4b24      	ldr	r3, [pc, #144]	; (800cbdc <__swsetup_r+0xd8>)
 800cb4c:	429c      	cmp	r4, r3
 800cb4e:	bf08      	it	eq
 800cb50:	68ec      	ldreq	r4, [r5, #12]
 800cb52:	e7e6      	b.n	800cb22 <__swsetup_r+0x1e>
 800cb54:	0758      	lsls	r0, r3, #29
 800cb56:	d512      	bpl.n	800cb7e <__swsetup_r+0x7a>
 800cb58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cb5a:	b141      	cbz	r1, 800cb6e <__swsetup_r+0x6a>
 800cb5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cb60:	4299      	cmp	r1, r3
 800cb62:	d002      	beq.n	800cb6a <__swsetup_r+0x66>
 800cb64:	4630      	mov	r0, r6
 800cb66:	f7ff fb6f 	bl	800c248 <_free_r>
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	6363      	str	r3, [r4, #52]	; 0x34
 800cb6e:	89a3      	ldrh	r3, [r4, #12]
 800cb70:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cb74:	81a3      	strh	r3, [r4, #12]
 800cb76:	2300      	movs	r3, #0
 800cb78:	6063      	str	r3, [r4, #4]
 800cb7a:	6923      	ldr	r3, [r4, #16]
 800cb7c:	6023      	str	r3, [r4, #0]
 800cb7e:	89a3      	ldrh	r3, [r4, #12]
 800cb80:	f043 0308 	orr.w	r3, r3, #8
 800cb84:	81a3      	strh	r3, [r4, #12]
 800cb86:	6923      	ldr	r3, [r4, #16]
 800cb88:	b94b      	cbnz	r3, 800cb9e <__swsetup_r+0x9a>
 800cb8a:	89a3      	ldrh	r3, [r4, #12]
 800cb8c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cb90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cb94:	d003      	beq.n	800cb9e <__swsetup_r+0x9a>
 800cb96:	4621      	mov	r1, r4
 800cb98:	4630      	mov	r0, r6
 800cb9a:	f000 fa07 	bl	800cfac <__smakebuf_r>
 800cb9e:	89a0      	ldrh	r0, [r4, #12]
 800cba0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cba4:	f010 0301 	ands.w	r3, r0, #1
 800cba8:	d00a      	beq.n	800cbc0 <__swsetup_r+0xbc>
 800cbaa:	2300      	movs	r3, #0
 800cbac:	60a3      	str	r3, [r4, #8]
 800cbae:	6963      	ldr	r3, [r4, #20]
 800cbb0:	425b      	negs	r3, r3
 800cbb2:	61a3      	str	r3, [r4, #24]
 800cbb4:	6923      	ldr	r3, [r4, #16]
 800cbb6:	b943      	cbnz	r3, 800cbca <__swsetup_r+0xc6>
 800cbb8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cbbc:	d1ba      	bne.n	800cb34 <__swsetup_r+0x30>
 800cbbe:	bd70      	pop	{r4, r5, r6, pc}
 800cbc0:	0781      	lsls	r1, r0, #30
 800cbc2:	bf58      	it	pl
 800cbc4:	6963      	ldrpl	r3, [r4, #20]
 800cbc6:	60a3      	str	r3, [r4, #8]
 800cbc8:	e7f4      	b.n	800cbb4 <__swsetup_r+0xb0>
 800cbca:	2000      	movs	r0, #0
 800cbcc:	e7f7      	b.n	800cbbe <__swsetup_r+0xba>
 800cbce:	bf00      	nop
 800cbd0:	2000017c 	.word	0x2000017c
 800cbd4:	0800e69c 	.word	0x0800e69c
 800cbd8:	0800e6bc 	.word	0x0800e6bc
 800cbdc:	0800e67c 	.word	0x0800e67c

0800cbe0 <abort>:
 800cbe0:	b508      	push	{r3, lr}
 800cbe2:	2006      	movs	r0, #6
 800cbe4:	f000 fa52 	bl	800d08c <raise>
 800cbe8:	2001      	movs	r0, #1
 800cbea:	f7f4 fe8d 	bl	8001908 <_exit>
	...

0800cbf0 <__sflush_r>:
 800cbf0:	898a      	ldrh	r2, [r1, #12]
 800cbf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbf6:	4605      	mov	r5, r0
 800cbf8:	0710      	lsls	r0, r2, #28
 800cbfa:	460c      	mov	r4, r1
 800cbfc:	d458      	bmi.n	800ccb0 <__sflush_r+0xc0>
 800cbfe:	684b      	ldr	r3, [r1, #4]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	dc05      	bgt.n	800cc10 <__sflush_r+0x20>
 800cc04:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	dc02      	bgt.n	800cc10 <__sflush_r+0x20>
 800cc0a:	2000      	movs	r0, #0
 800cc0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cc12:	2e00      	cmp	r6, #0
 800cc14:	d0f9      	beq.n	800cc0a <__sflush_r+0x1a>
 800cc16:	2300      	movs	r3, #0
 800cc18:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cc1c:	682f      	ldr	r7, [r5, #0]
 800cc1e:	602b      	str	r3, [r5, #0]
 800cc20:	d032      	beq.n	800cc88 <__sflush_r+0x98>
 800cc22:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cc24:	89a3      	ldrh	r3, [r4, #12]
 800cc26:	075a      	lsls	r2, r3, #29
 800cc28:	d505      	bpl.n	800cc36 <__sflush_r+0x46>
 800cc2a:	6863      	ldr	r3, [r4, #4]
 800cc2c:	1ac0      	subs	r0, r0, r3
 800cc2e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cc30:	b10b      	cbz	r3, 800cc36 <__sflush_r+0x46>
 800cc32:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cc34:	1ac0      	subs	r0, r0, r3
 800cc36:	2300      	movs	r3, #0
 800cc38:	4602      	mov	r2, r0
 800cc3a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cc3c:	6a21      	ldr	r1, [r4, #32]
 800cc3e:	4628      	mov	r0, r5
 800cc40:	47b0      	blx	r6
 800cc42:	1c43      	adds	r3, r0, #1
 800cc44:	89a3      	ldrh	r3, [r4, #12]
 800cc46:	d106      	bne.n	800cc56 <__sflush_r+0x66>
 800cc48:	6829      	ldr	r1, [r5, #0]
 800cc4a:	291d      	cmp	r1, #29
 800cc4c:	d82c      	bhi.n	800cca8 <__sflush_r+0xb8>
 800cc4e:	4a2a      	ldr	r2, [pc, #168]	; (800ccf8 <__sflush_r+0x108>)
 800cc50:	40ca      	lsrs	r2, r1
 800cc52:	07d6      	lsls	r6, r2, #31
 800cc54:	d528      	bpl.n	800cca8 <__sflush_r+0xb8>
 800cc56:	2200      	movs	r2, #0
 800cc58:	6062      	str	r2, [r4, #4]
 800cc5a:	04d9      	lsls	r1, r3, #19
 800cc5c:	6922      	ldr	r2, [r4, #16]
 800cc5e:	6022      	str	r2, [r4, #0]
 800cc60:	d504      	bpl.n	800cc6c <__sflush_r+0x7c>
 800cc62:	1c42      	adds	r2, r0, #1
 800cc64:	d101      	bne.n	800cc6a <__sflush_r+0x7a>
 800cc66:	682b      	ldr	r3, [r5, #0]
 800cc68:	b903      	cbnz	r3, 800cc6c <__sflush_r+0x7c>
 800cc6a:	6560      	str	r0, [r4, #84]	; 0x54
 800cc6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cc6e:	602f      	str	r7, [r5, #0]
 800cc70:	2900      	cmp	r1, #0
 800cc72:	d0ca      	beq.n	800cc0a <__sflush_r+0x1a>
 800cc74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cc78:	4299      	cmp	r1, r3
 800cc7a:	d002      	beq.n	800cc82 <__sflush_r+0x92>
 800cc7c:	4628      	mov	r0, r5
 800cc7e:	f7ff fae3 	bl	800c248 <_free_r>
 800cc82:	2000      	movs	r0, #0
 800cc84:	6360      	str	r0, [r4, #52]	; 0x34
 800cc86:	e7c1      	b.n	800cc0c <__sflush_r+0x1c>
 800cc88:	6a21      	ldr	r1, [r4, #32]
 800cc8a:	2301      	movs	r3, #1
 800cc8c:	4628      	mov	r0, r5
 800cc8e:	47b0      	blx	r6
 800cc90:	1c41      	adds	r1, r0, #1
 800cc92:	d1c7      	bne.n	800cc24 <__sflush_r+0x34>
 800cc94:	682b      	ldr	r3, [r5, #0]
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d0c4      	beq.n	800cc24 <__sflush_r+0x34>
 800cc9a:	2b1d      	cmp	r3, #29
 800cc9c:	d001      	beq.n	800cca2 <__sflush_r+0xb2>
 800cc9e:	2b16      	cmp	r3, #22
 800cca0:	d101      	bne.n	800cca6 <__sflush_r+0xb6>
 800cca2:	602f      	str	r7, [r5, #0]
 800cca4:	e7b1      	b.n	800cc0a <__sflush_r+0x1a>
 800cca6:	89a3      	ldrh	r3, [r4, #12]
 800cca8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ccac:	81a3      	strh	r3, [r4, #12]
 800ccae:	e7ad      	b.n	800cc0c <__sflush_r+0x1c>
 800ccb0:	690f      	ldr	r7, [r1, #16]
 800ccb2:	2f00      	cmp	r7, #0
 800ccb4:	d0a9      	beq.n	800cc0a <__sflush_r+0x1a>
 800ccb6:	0793      	lsls	r3, r2, #30
 800ccb8:	680e      	ldr	r6, [r1, #0]
 800ccba:	bf08      	it	eq
 800ccbc:	694b      	ldreq	r3, [r1, #20]
 800ccbe:	600f      	str	r7, [r1, #0]
 800ccc0:	bf18      	it	ne
 800ccc2:	2300      	movne	r3, #0
 800ccc4:	eba6 0807 	sub.w	r8, r6, r7
 800ccc8:	608b      	str	r3, [r1, #8]
 800ccca:	f1b8 0f00 	cmp.w	r8, #0
 800ccce:	dd9c      	ble.n	800cc0a <__sflush_r+0x1a>
 800ccd0:	6a21      	ldr	r1, [r4, #32]
 800ccd2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ccd4:	4643      	mov	r3, r8
 800ccd6:	463a      	mov	r2, r7
 800ccd8:	4628      	mov	r0, r5
 800ccda:	47b0      	blx	r6
 800ccdc:	2800      	cmp	r0, #0
 800ccde:	dc06      	bgt.n	800ccee <__sflush_r+0xfe>
 800cce0:	89a3      	ldrh	r3, [r4, #12]
 800cce2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cce6:	81a3      	strh	r3, [r4, #12]
 800cce8:	f04f 30ff 	mov.w	r0, #4294967295
 800ccec:	e78e      	b.n	800cc0c <__sflush_r+0x1c>
 800ccee:	4407      	add	r7, r0
 800ccf0:	eba8 0800 	sub.w	r8, r8, r0
 800ccf4:	e7e9      	b.n	800ccca <__sflush_r+0xda>
 800ccf6:	bf00      	nop
 800ccf8:	20400001 	.word	0x20400001

0800ccfc <_fflush_r>:
 800ccfc:	b538      	push	{r3, r4, r5, lr}
 800ccfe:	690b      	ldr	r3, [r1, #16]
 800cd00:	4605      	mov	r5, r0
 800cd02:	460c      	mov	r4, r1
 800cd04:	b913      	cbnz	r3, 800cd0c <_fflush_r+0x10>
 800cd06:	2500      	movs	r5, #0
 800cd08:	4628      	mov	r0, r5
 800cd0a:	bd38      	pop	{r3, r4, r5, pc}
 800cd0c:	b118      	cbz	r0, 800cd16 <_fflush_r+0x1a>
 800cd0e:	6983      	ldr	r3, [r0, #24]
 800cd10:	b90b      	cbnz	r3, 800cd16 <_fflush_r+0x1a>
 800cd12:	f000 f887 	bl	800ce24 <__sinit>
 800cd16:	4b14      	ldr	r3, [pc, #80]	; (800cd68 <_fflush_r+0x6c>)
 800cd18:	429c      	cmp	r4, r3
 800cd1a:	d11b      	bne.n	800cd54 <_fflush_r+0x58>
 800cd1c:	686c      	ldr	r4, [r5, #4]
 800cd1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d0ef      	beq.n	800cd06 <_fflush_r+0xa>
 800cd26:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cd28:	07d0      	lsls	r0, r2, #31
 800cd2a:	d404      	bmi.n	800cd36 <_fflush_r+0x3a>
 800cd2c:	0599      	lsls	r1, r3, #22
 800cd2e:	d402      	bmi.n	800cd36 <_fflush_r+0x3a>
 800cd30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cd32:	f000 f915 	bl	800cf60 <__retarget_lock_acquire_recursive>
 800cd36:	4628      	mov	r0, r5
 800cd38:	4621      	mov	r1, r4
 800cd3a:	f7ff ff59 	bl	800cbf0 <__sflush_r>
 800cd3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cd40:	07da      	lsls	r2, r3, #31
 800cd42:	4605      	mov	r5, r0
 800cd44:	d4e0      	bmi.n	800cd08 <_fflush_r+0xc>
 800cd46:	89a3      	ldrh	r3, [r4, #12]
 800cd48:	059b      	lsls	r3, r3, #22
 800cd4a:	d4dd      	bmi.n	800cd08 <_fflush_r+0xc>
 800cd4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cd4e:	f000 f908 	bl	800cf62 <__retarget_lock_release_recursive>
 800cd52:	e7d9      	b.n	800cd08 <_fflush_r+0xc>
 800cd54:	4b05      	ldr	r3, [pc, #20]	; (800cd6c <_fflush_r+0x70>)
 800cd56:	429c      	cmp	r4, r3
 800cd58:	d101      	bne.n	800cd5e <_fflush_r+0x62>
 800cd5a:	68ac      	ldr	r4, [r5, #8]
 800cd5c:	e7df      	b.n	800cd1e <_fflush_r+0x22>
 800cd5e:	4b04      	ldr	r3, [pc, #16]	; (800cd70 <_fflush_r+0x74>)
 800cd60:	429c      	cmp	r4, r3
 800cd62:	bf08      	it	eq
 800cd64:	68ec      	ldreq	r4, [r5, #12]
 800cd66:	e7da      	b.n	800cd1e <_fflush_r+0x22>
 800cd68:	0800e69c 	.word	0x0800e69c
 800cd6c:	0800e6bc 	.word	0x0800e6bc
 800cd70:	0800e67c 	.word	0x0800e67c

0800cd74 <std>:
 800cd74:	2300      	movs	r3, #0
 800cd76:	b510      	push	{r4, lr}
 800cd78:	4604      	mov	r4, r0
 800cd7a:	e9c0 3300 	strd	r3, r3, [r0]
 800cd7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cd82:	6083      	str	r3, [r0, #8]
 800cd84:	8181      	strh	r1, [r0, #12]
 800cd86:	6643      	str	r3, [r0, #100]	; 0x64
 800cd88:	81c2      	strh	r2, [r0, #14]
 800cd8a:	6183      	str	r3, [r0, #24]
 800cd8c:	4619      	mov	r1, r3
 800cd8e:	2208      	movs	r2, #8
 800cd90:	305c      	adds	r0, #92	; 0x5c
 800cd92:	f7fd fba5 	bl	800a4e0 <memset>
 800cd96:	4b05      	ldr	r3, [pc, #20]	; (800cdac <std+0x38>)
 800cd98:	6263      	str	r3, [r4, #36]	; 0x24
 800cd9a:	4b05      	ldr	r3, [pc, #20]	; (800cdb0 <std+0x3c>)
 800cd9c:	62a3      	str	r3, [r4, #40]	; 0x28
 800cd9e:	4b05      	ldr	r3, [pc, #20]	; (800cdb4 <std+0x40>)
 800cda0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cda2:	4b05      	ldr	r3, [pc, #20]	; (800cdb8 <std+0x44>)
 800cda4:	6224      	str	r4, [r4, #32]
 800cda6:	6323      	str	r3, [r4, #48]	; 0x30
 800cda8:	bd10      	pop	{r4, pc}
 800cdaa:	bf00      	nop
 800cdac:	0800d0c5 	.word	0x0800d0c5
 800cdb0:	0800d0e7 	.word	0x0800d0e7
 800cdb4:	0800d11f 	.word	0x0800d11f
 800cdb8:	0800d143 	.word	0x0800d143

0800cdbc <_cleanup_r>:
 800cdbc:	4901      	ldr	r1, [pc, #4]	; (800cdc4 <_cleanup_r+0x8>)
 800cdbe:	f000 b8af 	b.w	800cf20 <_fwalk_reent>
 800cdc2:	bf00      	nop
 800cdc4:	0800ccfd 	.word	0x0800ccfd

0800cdc8 <__sfmoreglue>:
 800cdc8:	b570      	push	{r4, r5, r6, lr}
 800cdca:	1e4a      	subs	r2, r1, #1
 800cdcc:	2568      	movs	r5, #104	; 0x68
 800cdce:	4355      	muls	r5, r2
 800cdd0:	460e      	mov	r6, r1
 800cdd2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cdd6:	f7ff fa87 	bl	800c2e8 <_malloc_r>
 800cdda:	4604      	mov	r4, r0
 800cddc:	b140      	cbz	r0, 800cdf0 <__sfmoreglue+0x28>
 800cdde:	2100      	movs	r1, #0
 800cde0:	e9c0 1600 	strd	r1, r6, [r0]
 800cde4:	300c      	adds	r0, #12
 800cde6:	60a0      	str	r0, [r4, #8]
 800cde8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cdec:	f7fd fb78 	bl	800a4e0 <memset>
 800cdf0:	4620      	mov	r0, r4
 800cdf2:	bd70      	pop	{r4, r5, r6, pc}

0800cdf4 <__sfp_lock_acquire>:
 800cdf4:	4801      	ldr	r0, [pc, #4]	; (800cdfc <__sfp_lock_acquire+0x8>)
 800cdf6:	f000 b8b3 	b.w	800cf60 <__retarget_lock_acquire_recursive>
 800cdfa:	bf00      	nop
 800cdfc:	20001628 	.word	0x20001628

0800ce00 <__sfp_lock_release>:
 800ce00:	4801      	ldr	r0, [pc, #4]	; (800ce08 <__sfp_lock_release+0x8>)
 800ce02:	f000 b8ae 	b.w	800cf62 <__retarget_lock_release_recursive>
 800ce06:	bf00      	nop
 800ce08:	20001628 	.word	0x20001628

0800ce0c <__sinit_lock_acquire>:
 800ce0c:	4801      	ldr	r0, [pc, #4]	; (800ce14 <__sinit_lock_acquire+0x8>)
 800ce0e:	f000 b8a7 	b.w	800cf60 <__retarget_lock_acquire_recursive>
 800ce12:	bf00      	nop
 800ce14:	20001623 	.word	0x20001623

0800ce18 <__sinit_lock_release>:
 800ce18:	4801      	ldr	r0, [pc, #4]	; (800ce20 <__sinit_lock_release+0x8>)
 800ce1a:	f000 b8a2 	b.w	800cf62 <__retarget_lock_release_recursive>
 800ce1e:	bf00      	nop
 800ce20:	20001623 	.word	0x20001623

0800ce24 <__sinit>:
 800ce24:	b510      	push	{r4, lr}
 800ce26:	4604      	mov	r4, r0
 800ce28:	f7ff fff0 	bl	800ce0c <__sinit_lock_acquire>
 800ce2c:	69a3      	ldr	r3, [r4, #24]
 800ce2e:	b11b      	cbz	r3, 800ce38 <__sinit+0x14>
 800ce30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce34:	f7ff bff0 	b.w	800ce18 <__sinit_lock_release>
 800ce38:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ce3c:	6523      	str	r3, [r4, #80]	; 0x50
 800ce3e:	4b13      	ldr	r3, [pc, #76]	; (800ce8c <__sinit+0x68>)
 800ce40:	4a13      	ldr	r2, [pc, #76]	; (800ce90 <__sinit+0x6c>)
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	62a2      	str	r2, [r4, #40]	; 0x28
 800ce46:	42a3      	cmp	r3, r4
 800ce48:	bf04      	itt	eq
 800ce4a:	2301      	moveq	r3, #1
 800ce4c:	61a3      	streq	r3, [r4, #24]
 800ce4e:	4620      	mov	r0, r4
 800ce50:	f000 f820 	bl	800ce94 <__sfp>
 800ce54:	6060      	str	r0, [r4, #4]
 800ce56:	4620      	mov	r0, r4
 800ce58:	f000 f81c 	bl	800ce94 <__sfp>
 800ce5c:	60a0      	str	r0, [r4, #8]
 800ce5e:	4620      	mov	r0, r4
 800ce60:	f000 f818 	bl	800ce94 <__sfp>
 800ce64:	2200      	movs	r2, #0
 800ce66:	60e0      	str	r0, [r4, #12]
 800ce68:	2104      	movs	r1, #4
 800ce6a:	6860      	ldr	r0, [r4, #4]
 800ce6c:	f7ff ff82 	bl	800cd74 <std>
 800ce70:	68a0      	ldr	r0, [r4, #8]
 800ce72:	2201      	movs	r2, #1
 800ce74:	2109      	movs	r1, #9
 800ce76:	f7ff ff7d 	bl	800cd74 <std>
 800ce7a:	68e0      	ldr	r0, [r4, #12]
 800ce7c:	2202      	movs	r2, #2
 800ce7e:	2112      	movs	r1, #18
 800ce80:	f7ff ff78 	bl	800cd74 <std>
 800ce84:	2301      	movs	r3, #1
 800ce86:	61a3      	str	r3, [r4, #24]
 800ce88:	e7d2      	b.n	800ce30 <__sinit+0xc>
 800ce8a:	bf00      	nop
 800ce8c:	0800e2f8 	.word	0x0800e2f8
 800ce90:	0800cdbd 	.word	0x0800cdbd

0800ce94 <__sfp>:
 800ce94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce96:	4607      	mov	r7, r0
 800ce98:	f7ff ffac 	bl	800cdf4 <__sfp_lock_acquire>
 800ce9c:	4b1e      	ldr	r3, [pc, #120]	; (800cf18 <__sfp+0x84>)
 800ce9e:	681e      	ldr	r6, [r3, #0]
 800cea0:	69b3      	ldr	r3, [r6, #24]
 800cea2:	b913      	cbnz	r3, 800ceaa <__sfp+0x16>
 800cea4:	4630      	mov	r0, r6
 800cea6:	f7ff ffbd 	bl	800ce24 <__sinit>
 800ceaa:	3648      	adds	r6, #72	; 0x48
 800ceac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ceb0:	3b01      	subs	r3, #1
 800ceb2:	d503      	bpl.n	800cebc <__sfp+0x28>
 800ceb4:	6833      	ldr	r3, [r6, #0]
 800ceb6:	b30b      	cbz	r3, 800cefc <__sfp+0x68>
 800ceb8:	6836      	ldr	r6, [r6, #0]
 800ceba:	e7f7      	b.n	800ceac <__sfp+0x18>
 800cebc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cec0:	b9d5      	cbnz	r5, 800cef8 <__sfp+0x64>
 800cec2:	4b16      	ldr	r3, [pc, #88]	; (800cf1c <__sfp+0x88>)
 800cec4:	60e3      	str	r3, [r4, #12]
 800cec6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ceca:	6665      	str	r5, [r4, #100]	; 0x64
 800cecc:	f000 f847 	bl	800cf5e <__retarget_lock_init_recursive>
 800ced0:	f7ff ff96 	bl	800ce00 <__sfp_lock_release>
 800ced4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ced8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cedc:	6025      	str	r5, [r4, #0]
 800cede:	61a5      	str	r5, [r4, #24]
 800cee0:	2208      	movs	r2, #8
 800cee2:	4629      	mov	r1, r5
 800cee4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cee8:	f7fd fafa 	bl	800a4e0 <memset>
 800ceec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cef0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cef4:	4620      	mov	r0, r4
 800cef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cef8:	3468      	adds	r4, #104	; 0x68
 800cefa:	e7d9      	b.n	800ceb0 <__sfp+0x1c>
 800cefc:	2104      	movs	r1, #4
 800cefe:	4638      	mov	r0, r7
 800cf00:	f7ff ff62 	bl	800cdc8 <__sfmoreglue>
 800cf04:	4604      	mov	r4, r0
 800cf06:	6030      	str	r0, [r6, #0]
 800cf08:	2800      	cmp	r0, #0
 800cf0a:	d1d5      	bne.n	800ceb8 <__sfp+0x24>
 800cf0c:	f7ff ff78 	bl	800ce00 <__sfp_lock_release>
 800cf10:	230c      	movs	r3, #12
 800cf12:	603b      	str	r3, [r7, #0]
 800cf14:	e7ee      	b.n	800cef4 <__sfp+0x60>
 800cf16:	bf00      	nop
 800cf18:	0800e2f8 	.word	0x0800e2f8
 800cf1c:	ffff0001 	.word	0xffff0001

0800cf20 <_fwalk_reent>:
 800cf20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf24:	4606      	mov	r6, r0
 800cf26:	4688      	mov	r8, r1
 800cf28:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cf2c:	2700      	movs	r7, #0
 800cf2e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cf32:	f1b9 0901 	subs.w	r9, r9, #1
 800cf36:	d505      	bpl.n	800cf44 <_fwalk_reent+0x24>
 800cf38:	6824      	ldr	r4, [r4, #0]
 800cf3a:	2c00      	cmp	r4, #0
 800cf3c:	d1f7      	bne.n	800cf2e <_fwalk_reent+0xe>
 800cf3e:	4638      	mov	r0, r7
 800cf40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf44:	89ab      	ldrh	r3, [r5, #12]
 800cf46:	2b01      	cmp	r3, #1
 800cf48:	d907      	bls.n	800cf5a <_fwalk_reent+0x3a>
 800cf4a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cf4e:	3301      	adds	r3, #1
 800cf50:	d003      	beq.n	800cf5a <_fwalk_reent+0x3a>
 800cf52:	4629      	mov	r1, r5
 800cf54:	4630      	mov	r0, r6
 800cf56:	47c0      	blx	r8
 800cf58:	4307      	orrs	r7, r0
 800cf5a:	3568      	adds	r5, #104	; 0x68
 800cf5c:	e7e9      	b.n	800cf32 <_fwalk_reent+0x12>

0800cf5e <__retarget_lock_init_recursive>:
 800cf5e:	4770      	bx	lr

0800cf60 <__retarget_lock_acquire_recursive>:
 800cf60:	4770      	bx	lr

0800cf62 <__retarget_lock_release_recursive>:
 800cf62:	4770      	bx	lr

0800cf64 <__swhatbuf_r>:
 800cf64:	b570      	push	{r4, r5, r6, lr}
 800cf66:	460e      	mov	r6, r1
 800cf68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf6c:	2900      	cmp	r1, #0
 800cf6e:	b096      	sub	sp, #88	; 0x58
 800cf70:	4614      	mov	r4, r2
 800cf72:	461d      	mov	r5, r3
 800cf74:	da07      	bge.n	800cf86 <__swhatbuf_r+0x22>
 800cf76:	2300      	movs	r3, #0
 800cf78:	602b      	str	r3, [r5, #0]
 800cf7a:	89b3      	ldrh	r3, [r6, #12]
 800cf7c:	061a      	lsls	r2, r3, #24
 800cf7e:	d410      	bmi.n	800cfa2 <__swhatbuf_r+0x3e>
 800cf80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cf84:	e00e      	b.n	800cfa4 <__swhatbuf_r+0x40>
 800cf86:	466a      	mov	r2, sp
 800cf88:	f000 f902 	bl	800d190 <_fstat_r>
 800cf8c:	2800      	cmp	r0, #0
 800cf8e:	dbf2      	blt.n	800cf76 <__swhatbuf_r+0x12>
 800cf90:	9a01      	ldr	r2, [sp, #4]
 800cf92:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cf96:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cf9a:	425a      	negs	r2, r3
 800cf9c:	415a      	adcs	r2, r3
 800cf9e:	602a      	str	r2, [r5, #0]
 800cfa0:	e7ee      	b.n	800cf80 <__swhatbuf_r+0x1c>
 800cfa2:	2340      	movs	r3, #64	; 0x40
 800cfa4:	2000      	movs	r0, #0
 800cfa6:	6023      	str	r3, [r4, #0]
 800cfa8:	b016      	add	sp, #88	; 0x58
 800cfaa:	bd70      	pop	{r4, r5, r6, pc}

0800cfac <__smakebuf_r>:
 800cfac:	898b      	ldrh	r3, [r1, #12]
 800cfae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cfb0:	079d      	lsls	r5, r3, #30
 800cfb2:	4606      	mov	r6, r0
 800cfb4:	460c      	mov	r4, r1
 800cfb6:	d507      	bpl.n	800cfc8 <__smakebuf_r+0x1c>
 800cfb8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cfbc:	6023      	str	r3, [r4, #0]
 800cfbe:	6123      	str	r3, [r4, #16]
 800cfc0:	2301      	movs	r3, #1
 800cfc2:	6163      	str	r3, [r4, #20]
 800cfc4:	b002      	add	sp, #8
 800cfc6:	bd70      	pop	{r4, r5, r6, pc}
 800cfc8:	ab01      	add	r3, sp, #4
 800cfca:	466a      	mov	r2, sp
 800cfcc:	f7ff ffca 	bl	800cf64 <__swhatbuf_r>
 800cfd0:	9900      	ldr	r1, [sp, #0]
 800cfd2:	4605      	mov	r5, r0
 800cfd4:	4630      	mov	r0, r6
 800cfd6:	f7ff f987 	bl	800c2e8 <_malloc_r>
 800cfda:	b948      	cbnz	r0, 800cff0 <__smakebuf_r+0x44>
 800cfdc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cfe0:	059a      	lsls	r2, r3, #22
 800cfe2:	d4ef      	bmi.n	800cfc4 <__smakebuf_r+0x18>
 800cfe4:	f023 0303 	bic.w	r3, r3, #3
 800cfe8:	f043 0302 	orr.w	r3, r3, #2
 800cfec:	81a3      	strh	r3, [r4, #12]
 800cfee:	e7e3      	b.n	800cfb8 <__smakebuf_r+0xc>
 800cff0:	4b0d      	ldr	r3, [pc, #52]	; (800d028 <__smakebuf_r+0x7c>)
 800cff2:	62b3      	str	r3, [r6, #40]	; 0x28
 800cff4:	89a3      	ldrh	r3, [r4, #12]
 800cff6:	6020      	str	r0, [r4, #0]
 800cff8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cffc:	81a3      	strh	r3, [r4, #12]
 800cffe:	9b00      	ldr	r3, [sp, #0]
 800d000:	6163      	str	r3, [r4, #20]
 800d002:	9b01      	ldr	r3, [sp, #4]
 800d004:	6120      	str	r0, [r4, #16]
 800d006:	b15b      	cbz	r3, 800d020 <__smakebuf_r+0x74>
 800d008:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d00c:	4630      	mov	r0, r6
 800d00e:	f000 f8d1 	bl	800d1b4 <_isatty_r>
 800d012:	b128      	cbz	r0, 800d020 <__smakebuf_r+0x74>
 800d014:	89a3      	ldrh	r3, [r4, #12]
 800d016:	f023 0303 	bic.w	r3, r3, #3
 800d01a:	f043 0301 	orr.w	r3, r3, #1
 800d01e:	81a3      	strh	r3, [r4, #12]
 800d020:	89a0      	ldrh	r0, [r4, #12]
 800d022:	4305      	orrs	r5, r0
 800d024:	81a5      	strh	r5, [r4, #12]
 800d026:	e7cd      	b.n	800cfc4 <__smakebuf_r+0x18>
 800d028:	0800cdbd 	.word	0x0800cdbd

0800d02c <_malloc_usable_size_r>:
 800d02c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d030:	1f18      	subs	r0, r3, #4
 800d032:	2b00      	cmp	r3, #0
 800d034:	bfbc      	itt	lt
 800d036:	580b      	ldrlt	r3, [r1, r0]
 800d038:	18c0      	addlt	r0, r0, r3
 800d03a:	4770      	bx	lr

0800d03c <_raise_r>:
 800d03c:	291f      	cmp	r1, #31
 800d03e:	b538      	push	{r3, r4, r5, lr}
 800d040:	4604      	mov	r4, r0
 800d042:	460d      	mov	r5, r1
 800d044:	d904      	bls.n	800d050 <_raise_r+0x14>
 800d046:	2316      	movs	r3, #22
 800d048:	6003      	str	r3, [r0, #0]
 800d04a:	f04f 30ff 	mov.w	r0, #4294967295
 800d04e:	bd38      	pop	{r3, r4, r5, pc}
 800d050:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d052:	b112      	cbz	r2, 800d05a <_raise_r+0x1e>
 800d054:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d058:	b94b      	cbnz	r3, 800d06e <_raise_r+0x32>
 800d05a:	4620      	mov	r0, r4
 800d05c:	f000 f830 	bl	800d0c0 <_getpid_r>
 800d060:	462a      	mov	r2, r5
 800d062:	4601      	mov	r1, r0
 800d064:	4620      	mov	r0, r4
 800d066:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d06a:	f000 b817 	b.w	800d09c <_kill_r>
 800d06e:	2b01      	cmp	r3, #1
 800d070:	d00a      	beq.n	800d088 <_raise_r+0x4c>
 800d072:	1c59      	adds	r1, r3, #1
 800d074:	d103      	bne.n	800d07e <_raise_r+0x42>
 800d076:	2316      	movs	r3, #22
 800d078:	6003      	str	r3, [r0, #0]
 800d07a:	2001      	movs	r0, #1
 800d07c:	e7e7      	b.n	800d04e <_raise_r+0x12>
 800d07e:	2400      	movs	r4, #0
 800d080:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d084:	4628      	mov	r0, r5
 800d086:	4798      	blx	r3
 800d088:	2000      	movs	r0, #0
 800d08a:	e7e0      	b.n	800d04e <_raise_r+0x12>

0800d08c <raise>:
 800d08c:	4b02      	ldr	r3, [pc, #8]	; (800d098 <raise+0xc>)
 800d08e:	4601      	mov	r1, r0
 800d090:	6818      	ldr	r0, [r3, #0]
 800d092:	f7ff bfd3 	b.w	800d03c <_raise_r>
 800d096:	bf00      	nop
 800d098:	2000017c 	.word	0x2000017c

0800d09c <_kill_r>:
 800d09c:	b538      	push	{r3, r4, r5, lr}
 800d09e:	4d07      	ldr	r5, [pc, #28]	; (800d0bc <_kill_r+0x20>)
 800d0a0:	2300      	movs	r3, #0
 800d0a2:	4604      	mov	r4, r0
 800d0a4:	4608      	mov	r0, r1
 800d0a6:	4611      	mov	r1, r2
 800d0a8:	602b      	str	r3, [r5, #0]
 800d0aa:	f7f4 fc1d 	bl	80018e8 <_kill>
 800d0ae:	1c43      	adds	r3, r0, #1
 800d0b0:	d102      	bne.n	800d0b8 <_kill_r+0x1c>
 800d0b2:	682b      	ldr	r3, [r5, #0]
 800d0b4:	b103      	cbz	r3, 800d0b8 <_kill_r+0x1c>
 800d0b6:	6023      	str	r3, [r4, #0]
 800d0b8:	bd38      	pop	{r3, r4, r5, pc}
 800d0ba:	bf00      	nop
 800d0bc:	2000161c 	.word	0x2000161c

0800d0c0 <_getpid_r>:
 800d0c0:	f7f4 bc0a 	b.w	80018d8 <_getpid>

0800d0c4 <__sread>:
 800d0c4:	b510      	push	{r4, lr}
 800d0c6:	460c      	mov	r4, r1
 800d0c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0cc:	f000 f894 	bl	800d1f8 <_read_r>
 800d0d0:	2800      	cmp	r0, #0
 800d0d2:	bfab      	itete	ge
 800d0d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d0d6:	89a3      	ldrhlt	r3, [r4, #12]
 800d0d8:	181b      	addge	r3, r3, r0
 800d0da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d0de:	bfac      	ite	ge
 800d0e0:	6563      	strge	r3, [r4, #84]	; 0x54
 800d0e2:	81a3      	strhlt	r3, [r4, #12]
 800d0e4:	bd10      	pop	{r4, pc}

0800d0e6 <__swrite>:
 800d0e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0ea:	461f      	mov	r7, r3
 800d0ec:	898b      	ldrh	r3, [r1, #12]
 800d0ee:	05db      	lsls	r3, r3, #23
 800d0f0:	4605      	mov	r5, r0
 800d0f2:	460c      	mov	r4, r1
 800d0f4:	4616      	mov	r6, r2
 800d0f6:	d505      	bpl.n	800d104 <__swrite+0x1e>
 800d0f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0fc:	2302      	movs	r3, #2
 800d0fe:	2200      	movs	r2, #0
 800d100:	f000 f868 	bl	800d1d4 <_lseek_r>
 800d104:	89a3      	ldrh	r3, [r4, #12]
 800d106:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d10a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d10e:	81a3      	strh	r3, [r4, #12]
 800d110:	4632      	mov	r2, r6
 800d112:	463b      	mov	r3, r7
 800d114:	4628      	mov	r0, r5
 800d116:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d11a:	f000 b817 	b.w	800d14c <_write_r>

0800d11e <__sseek>:
 800d11e:	b510      	push	{r4, lr}
 800d120:	460c      	mov	r4, r1
 800d122:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d126:	f000 f855 	bl	800d1d4 <_lseek_r>
 800d12a:	1c43      	adds	r3, r0, #1
 800d12c:	89a3      	ldrh	r3, [r4, #12]
 800d12e:	bf15      	itete	ne
 800d130:	6560      	strne	r0, [r4, #84]	; 0x54
 800d132:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d136:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d13a:	81a3      	strheq	r3, [r4, #12]
 800d13c:	bf18      	it	ne
 800d13e:	81a3      	strhne	r3, [r4, #12]
 800d140:	bd10      	pop	{r4, pc}

0800d142 <__sclose>:
 800d142:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d146:	f000 b813 	b.w	800d170 <_close_r>
	...

0800d14c <_write_r>:
 800d14c:	b538      	push	{r3, r4, r5, lr}
 800d14e:	4d07      	ldr	r5, [pc, #28]	; (800d16c <_write_r+0x20>)
 800d150:	4604      	mov	r4, r0
 800d152:	4608      	mov	r0, r1
 800d154:	4611      	mov	r1, r2
 800d156:	2200      	movs	r2, #0
 800d158:	602a      	str	r2, [r5, #0]
 800d15a:	461a      	mov	r2, r3
 800d15c:	f7f4 fbfb 	bl	8001956 <_write>
 800d160:	1c43      	adds	r3, r0, #1
 800d162:	d102      	bne.n	800d16a <_write_r+0x1e>
 800d164:	682b      	ldr	r3, [r5, #0]
 800d166:	b103      	cbz	r3, 800d16a <_write_r+0x1e>
 800d168:	6023      	str	r3, [r4, #0]
 800d16a:	bd38      	pop	{r3, r4, r5, pc}
 800d16c:	2000161c 	.word	0x2000161c

0800d170 <_close_r>:
 800d170:	b538      	push	{r3, r4, r5, lr}
 800d172:	4d06      	ldr	r5, [pc, #24]	; (800d18c <_close_r+0x1c>)
 800d174:	2300      	movs	r3, #0
 800d176:	4604      	mov	r4, r0
 800d178:	4608      	mov	r0, r1
 800d17a:	602b      	str	r3, [r5, #0]
 800d17c:	f7f4 fc07 	bl	800198e <_close>
 800d180:	1c43      	adds	r3, r0, #1
 800d182:	d102      	bne.n	800d18a <_close_r+0x1a>
 800d184:	682b      	ldr	r3, [r5, #0]
 800d186:	b103      	cbz	r3, 800d18a <_close_r+0x1a>
 800d188:	6023      	str	r3, [r4, #0]
 800d18a:	bd38      	pop	{r3, r4, r5, pc}
 800d18c:	2000161c 	.word	0x2000161c

0800d190 <_fstat_r>:
 800d190:	b538      	push	{r3, r4, r5, lr}
 800d192:	4d07      	ldr	r5, [pc, #28]	; (800d1b0 <_fstat_r+0x20>)
 800d194:	2300      	movs	r3, #0
 800d196:	4604      	mov	r4, r0
 800d198:	4608      	mov	r0, r1
 800d19a:	4611      	mov	r1, r2
 800d19c:	602b      	str	r3, [r5, #0]
 800d19e:	f7f4 fc02 	bl	80019a6 <_fstat>
 800d1a2:	1c43      	adds	r3, r0, #1
 800d1a4:	d102      	bne.n	800d1ac <_fstat_r+0x1c>
 800d1a6:	682b      	ldr	r3, [r5, #0]
 800d1a8:	b103      	cbz	r3, 800d1ac <_fstat_r+0x1c>
 800d1aa:	6023      	str	r3, [r4, #0]
 800d1ac:	bd38      	pop	{r3, r4, r5, pc}
 800d1ae:	bf00      	nop
 800d1b0:	2000161c 	.word	0x2000161c

0800d1b4 <_isatty_r>:
 800d1b4:	b538      	push	{r3, r4, r5, lr}
 800d1b6:	4d06      	ldr	r5, [pc, #24]	; (800d1d0 <_isatty_r+0x1c>)
 800d1b8:	2300      	movs	r3, #0
 800d1ba:	4604      	mov	r4, r0
 800d1bc:	4608      	mov	r0, r1
 800d1be:	602b      	str	r3, [r5, #0]
 800d1c0:	f7f4 fc01 	bl	80019c6 <_isatty>
 800d1c4:	1c43      	adds	r3, r0, #1
 800d1c6:	d102      	bne.n	800d1ce <_isatty_r+0x1a>
 800d1c8:	682b      	ldr	r3, [r5, #0]
 800d1ca:	b103      	cbz	r3, 800d1ce <_isatty_r+0x1a>
 800d1cc:	6023      	str	r3, [r4, #0]
 800d1ce:	bd38      	pop	{r3, r4, r5, pc}
 800d1d0:	2000161c 	.word	0x2000161c

0800d1d4 <_lseek_r>:
 800d1d4:	b538      	push	{r3, r4, r5, lr}
 800d1d6:	4d07      	ldr	r5, [pc, #28]	; (800d1f4 <_lseek_r+0x20>)
 800d1d8:	4604      	mov	r4, r0
 800d1da:	4608      	mov	r0, r1
 800d1dc:	4611      	mov	r1, r2
 800d1de:	2200      	movs	r2, #0
 800d1e0:	602a      	str	r2, [r5, #0]
 800d1e2:	461a      	mov	r2, r3
 800d1e4:	f7f4 fbfa 	bl	80019dc <_lseek>
 800d1e8:	1c43      	adds	r3, r0, #1
 800d1ea:	d102      	bne.n	800d1f2 <_lseek_r+0x1e>
 800d1ec:	682b      	ldr	r3, [r5, #0]
 800d1ee:	b103      	cbz	r3, 800d1f2 <_lseek_r+0x1e>
 800d1f0:	6023      	str	r3, [r4, #0]
 800d1f2:	bd38      	pop	{r3, r4, r5, pc}
 800d1f4:	2000161c 	.word	0x2000161c

0800d1f8 <_read_r>:
 800d1f8:	b538      	push	{r3, r4, r5, lr}
 800d1fa:	4d07      	ldr	r5, [pc, #28]	; (800d218 <_read_r+0x20>)
 800d1fc:	4604      	mov	r4, r0
 800d1fe:	4608      	mov	r0, r1
 800d200:	4611      	mov	r1, r2
 800d202:	2200      	movs	r2, #0
 800d204:	602a      	str	r2, [r5, #0]
 800d206:	461a      	mov	r2, r3
 800d208:	f7f4 fb88 	bl	800191c <_read>
 800d20c:	1c43      	adds	r3, r0, #1
 800d20e:	d102      	bne.n	800d216 <_read_r+0x1e>
 800d210:	682b      	ldr	r3, [r5, #0]
 800d212:	b103      	cbz	r3, 800d216 <_read_r+0x1e>
 800d214:	6023      	str	r3, [r4, #0]
 800d216:	bd38      	pop	{r3, r4, r5, pc}
 800d218:	2000161c 	.word	0x2000161c

0800d21c <pow>:
 800d21c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d220:	ec59 8b10 	vmov	r8, r9, d0
 800d224:	ec57 6b11 	vmov	r6, r7, d1
 800d228:	f000 f8da 	bl	800d3e0 <__ieee754_pow>
 800d22c:	4b4e      	ldr	r3, [pc, #312]	; (800d368 <pow+0x14c>)
 800d22e:	f993 3000 	ldrsb.w	r3, [r3]
 800d232:	3301      	adds	r3, #1
 800d234:	ec55 4b10 	vmov	r4, r5, d0
 800d238:	d015      	beq.n	800d266 <pow+0x4a>
 800d23a:	4632      	mov	r2, r6
 800d23c:	463b      	mov	r3, r7
 800d23e:	4630      	mov	r0, r6
 800d240:	4639      	mov	r1, r7
 800d242:	f7f3 fc73 	bl	8000b2c <__aeabi_dcmpun>
 800d246:	b970      	cbnz	r0, 800d266 <pow+0x4a>
 800d248:	4642      	mov	r2, r8
 800d24a:	464b      	mov	r3, r9
 800d24c:	4640      	mov	r0, r8
 800d24e:	4649      	mov	r1, r9
 800d250:	f7f3 fc6c 	bl	8000b2c <__aeabi_dcmpun>
 800d254:	2200      	movs	r2, #0
 800d256:	2300      	movs	r3, #0
 800d258:	b148      	cbz	r0, 800d26e <pow+0x52>
 800d25a:	4630      	mov	r0, r6
 800d25c:	4639      	mov	r1, r7
 800d25e:	f7f3 fc33 	bl	8000ac8 <__aeabi_dcmpeq>
 800d262:	2800      	cmp	r0, #0
 800d264:	d17d      	bne.n	800d362 <pow+0x146>
 800d266:	ec45 4b10 	vmov	d0, r4, r5
 800d26a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d26e:	4640      	mov	r0, r8
 800d270:	4649      	mov	r1, r9
 800d272:	f7f3 fc29 	bl	8000ac8 <__aeabi_dcmpeq>
 800d276:	b1e0      	cbz	r0, 800d2b2 <pow+0x96>
 800d278:	2200      	movs	r2, #0
 800d27a:	2300      	movs	r3, #0
 800d27c:	4630      	mov	r0, r6
 800d27e:	4639      	mov	r1, r7
 800d280:	f7f3 fc22 	bl	8000ac8 <__aeabi_dcmpeq>
 800d284:	2800      	cmp	r0, #0
 800d286:	d16c      	bne.n	800d362 <pow+0x146>
 800d288:	ec47 6b10 	vmov	d0, r6, r7
 800d28c:	f000 fe87 	bl	800df9e <finite>
 800d290:	2800      	cmp	r0, #0
 800d292:	d0e8      	beq.n	800d266 <pow+0x4a>
 800d294:	2200      	movs	r2, #0
 800d296:	2300      	movs	r3, #0
 800d298:	4630      	mov	r0, r6
 800d29a:	4639      	mov	r1, r7
 800d29c:	f7f3 fc1e 	bl	8000adc <__aeabi_dcmplt>
 800d2a0:	2800      	cmp	r0, #0
 800d2a2:	d0e0      	beq.n	800d266 <pow+0x4a>
 800d2a4:	f7fd f8f2 	bl	800a48c <__errno>
 800d2a8:	2321      	movs	r3, #33	; 0x21
 800d2aa:	6003      	str	r3, [r0, #0]
 800d2ac:	2400      	movs	r4, #0
 800d2ae:	4d2f      	ldr	r5, [pc, #188]	; (800d36c <pow+0x150>)
 800d2b0:	e7d9      	b.n	800d266 <pow+0x4a>
 800d2b2:	ec45 4b10 	vmov	d0, r4, r5
 800d2b6:	f000 fe72 	bl	800df9e <finite>
 800d2ba:	bbb8      	cbnz	r0, 800d32c <pow+0x110>
 800d2bc:	ec49 8b10 	vmov	d0, r8, r9
 800d2c0:	f000 fe6d 	bl	800df9e <finite>
 800d2c4:	b390      	cbz	r0, 800d32c <pow+0x110>
 800d2c6:	ec47 6b10 	vmov	d0, r6, r7
 800d2ca:	f000 fe68 	bl	800df9e <finite>
 800d2ce:	b368      	cbz	r0, 800d32c <pow+0x110>
 800d2d0:	4622      	mov	r2, r4
 800d2d2:	462b      	mov	r3, r5
 800d2d4:	4620      	mov	r0, r4
 800d2d6:	4629      	mov	r1, r5
 800d2d8:	f7f3 fc28 	bl	8000b2c <__aeabi_dcmpun>
 800d2dc:	b160      	cbz	r0, 800d2f8 <pow+0xdc>
 800d2de:	f7fd f8d5 	bl	800a48c <__errno>
 800d2e2:	2321      	movs	r3, #33	; 0x21
 800d2e4:	6003      	str	r3, [r0, #0]
 800d2e6:	2200      	movs	r2, #0
 800d2e8:	2300      	movs	r3, #0
 800d2ea:	4610      	mov	r0, r2
 800d2ec:	4619      	mov	r1, r3
 800d2ee:	f7f3 faad 	bl	800084c <__aeabi_ddiv>
 800d2f2:	4604      	mov	r4, r0
 800d2f4:	460d      	mov	r5, r1
 800d2f6:	e7b6      	b.n	800d266 <pow+0x4a>
 800d2f8:	f7fd f8c8 	bl	800a48c <__errno>
 800d2fc:	2322      	movs	r3, #34	; 0x22
 800d2fe:	6003      	str	r3, [r0, #0]
 800d300:	2200      	movs	r2, #0
 800d302:	2300      	movs	r3, #0
 800d304:	4640      	mov	r0, r8
 800d306:	4649      	mov	r1, r9
 800d308:	f7f3 fbe8 	bl	8000adc <__aeabi_dcmplt>
 800d30c:	2400      	movs	r4, #0
 800d30e:	b158      	cbz	r0, 800d328 <pow+0x10c>
 800d310:	ec47 6b10 	vmov	d0, r6, r7
 800d314:	f000 fe58 	bl	800dfc8 <rint>
 800d318:	4632      	mov	r2, r6
 800d31a:	ec51 0b10 	vmov	r0, r1, d0
 800d31e:	463b      	mov	r3, r7
 800d320:	f7f3 fbd2 	bl	8000ac8 <__aeabi_dcmpeq>
 800d324:	2800      	cmp	r0, #0
 800d326:	d0c2      	beq.n	800d2ae <pow+0x92>
 800d328:	4d11      	ldr	r5, [pc, #68]	; (800d370 <pow+0x154>)
 800d32a:	e79c      	b.n	800d266 <pow+0x4a>
 800d32c:	2200      	movs	r2, #0
 800d32e:	2300      	movs	r3, #0
 800d330:	4620      	mov	r0, r4
 800d332:	4629      	mov	r1, r5
 800d334:	f7f3 fbc8 	bl	8000ac8 <__aeabi_dcmpeq>
 800d338:	2800      	cmp	r0, #0
 800d33a:	d094      	beq.n	800d266 <pow+0x4a>
 800d33c:	ec49 8b10 	vmov	d0, r8, r9
 800d340:	f000 fe2d 	bl	800df9e <finite>
 800d344:	2800      	cmp	r0, #0
 800d346:	d08e      	beq.n	800d266 <pow+0x4a>
 800d348:	ec47 6b10 	vmov	d0, r6, r7
 800d34c:	f000 fe27 	bl	800df9e <finite>
 800d350:	2800      	cmp	r0, #0
 800d352:	d088      	beq.n	800d266 <pow+0x4a>
 800d354:	f7fd f89a 	bl	800a48c <__errno>
 800d358:	2322      	movs	r3, #34	; 0x22
 800d35a:	6003      	str	r3, [r0, #0]
 800d35c:	2400      	movs	r4, #0
 800d35e:	2500      	movs	r5, #0
 800d360:	e781      	b.n	800d266 <pow+0x4a>
 800d362:	4d04      	ldr	r5, [pc, #16]	; (800d374 <pow+0x158>)
 800d364:	2400      	movs	r4, #0
 800d366:	e77e      	b.n	800d266 <pow+0x4a>
 800d368:	2000034c 	.word	0x2000034c
 800d36c:	fff00000 	.word	0xfff00000
 800d370:	7ff00000 	.word	0x7ff00000
 800d374:	3ff00000 	.word	0x3ff00000

0800d378 <sqrt>:
 800d378:	b538      	push	{r3, r4, r5, lr}
 800d37a:	ed2d 8b02 	vpush	{d8}
 800d37e:	ec55 4b10 	vmov	r4, r5, d0
 800d382:	f000 fd4f 	bl	800de24 <__ieee754_sqrt>
 800d386:	4b15      	ldr	r3, [pc, #84]	; (800d3dc <sqrt+0x64>)
 800d388:	eeb0 8a40 	vmov.f32	s16, s0
 800d38c:	eef0 8a60 	vmov.f32	s17, s1
 800d390:	f993 3000 	ldrsb.w	r3, [r3]
 800d394:	3301      	adds	r3, #1
 800d396:	d019      	beq.n	800d3cc <sqrt+0x54>
 800d398:	4622      	mov	r2, r4
 800d39a:	462b      	mov	r3, r5
 800d39c:	4620      	mov	r0, r4
 800d39e:	4629      	mov	r1, r5
 800d3a0:	f7f3 fbc4 	bl	8000b2c <__aeabi_dcmpun>
 800d3a4:	b990      	cbnz	r0, 800d3cc <sqrt+0x54>
 800d3a6:	2200      	movs	r2, #0
 800d3a8:	2300      	movs	r3, #0
 800d3aa:	4620      	mov	r0, r4
 800d3ac:	4629      	mov	r1, r5
 800d3ae:	f7f3 fb95 	bl	8000adc <__aeabi_dcmplt>
 800d3b2:	b158      	cbz	r0, 800d3cc <sqrt+0x54>
 800d3b4:	f7fd f86a 	bl	800a48c <__errno>
 800d3b8:	2321      	movs	r3, #33	; 0x21
 800d3ba:	6003      	str	r3, [r0, #0]
 800d3bc:	2200      	movs	r2, #0
 800d3be:	2300      	movs	r3, #0
 800d3c0:	4610      	mov	r0, r2
 800d3c2:	4619      	mov	r1, r3
 800d3c4:	f7f3 fa42 	bl	800084c <__aeabi_ddiv>
 800d3c8:	ec41 0b18 	vmov	d8, r0, r1
 800d3cc:	eeb0 0a48 	vmov.f32	s0, s16
 800d3d0:	eef0 0a68 	vmov.f32	s1, s17
 800d3d4:	ecbd 8b02 	vpop	{d8}
 800d3d8:	bd38      	pop	{r3, r4, r5, pc}
 800d3da:	bf00      	nop
 800d3dc:	2000034c 	.word	0x2000034c

0800d3e0 <__ieee754_pow>:
 800d3e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3e4:	ed2d 8b06 	vpush	{d8-d10}
 800d3e8:	b08d      	sub	sp, #52	; 0x34
 800d3ea:	ed8d 1b02 	vstr	d1, [sp, #8]
 800d3ee:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800d3f2:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800d3f6:	ea56 0100 	orrs.w	r1, r6, r0
 800d3fa:	ec53 2b10 	vmov	r2, r3, d0
 800d3fe:	f000 84d1 	beq.w	800dda4 <__ieee754_pow+0x9c4>
 800d402:	497f      	ldr	r1, [pc, #508]	; (800d600 <__ieee754_pow+0x220>)
 800d404:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800d408:	428c      	cmp	r4, r1
 800d40a:	ee10 8a10 	vmov	r8, s0
 800d40e:	4699      	mov	r9, r3
 800d410:	dc09      	bgt.n	800d426 <__ieee754_pow+0x46>
 800d412:	d103      	bne.n	800d41c <__ieee754_pow+0x3c>
 800d414:	b97a      	cbnz	r2, 800d436 <__ieee754_pow+0x56>
 800d416:	42a6      	cmp	r6, r4
 800d418:	dd02      	ble.n	800d420 <__ieee754_pow+0x40>
 800d41a:	e00c      	b.n	800d436 <__ieee754_pow+0x56>
 800d41c:	428e      	cmp	r6, r1
 800d41e:	dc02      	bgt.n	800d426 <__ieee754_pow+0x46>
 800d420:	428e      	cmp	r6, r1
 800d422:	d110      	bne.n	800d446 <__ieee754_pow+0x66>
 800d424:	b178      	cbz	r0, 800d446 <__ieee754_pow+0x66>
 800d426:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800d42a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d42e:	ea54 0308 	orrs.w	r3, r4, r8
 800d432:	f000 84b7 	beq.w	800dda4 <__ieee754_pow+0x9c4>
 800d436:	4873      	ldr	r0, [pc, #460]	; (800d604 <__ieee754_pow+0x224>)
 800d438:	b00d      	add	sp, #52	; 0x34
 800d43a:	ecbd 8b06 	vpop	{d8-d10}
 800d43e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d442:	f000 bdb9 	b.w	800dfb8 <nan>
 800d446:	f1b9 0f00 	cmp.w	r9, #0
 800d44a:	da36      	bge.n	800d4ba <__ieee754_pow+0xda>
 800d44c:	496e      	ldr	r1, [pc, #440]	; (800d608 <__ieee754_pow+0x228>)
 800d44e:	428e      	cmp	r6, r1
 800d450:	dc51      	bgt.n	800d4f6 <__ieee754_pow+0x116>
 800d452:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800d456:	428e      	cmp	r6, r1
 800d458:	f340 84af 	ble.w	800ddba <__ieee754_pow+0x9da>
 800d45c:	1531      	asrs	r1, r6, #20
 800d45e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800d462:	2914      	cmp	r1, #20
 800d464:	dd0f      	ble.n	800d486 <__ieee754_pow+0xa6>
 800d466:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800d46a:	fa20 fc01 	lsr.w	ip, r0, r1
 800d46e:	fa0c f101 	lsl.w	r1, ip, r1
 800d472:	4281      	cmp	r1, r0
 800d474:	f040 84a1 	bne.w	800ddba <__ieee754_pow+0x9da>
 800d478:	f00c 0c01 	and.w	ip, ip, #1
 800d47c:	f1cc 0102 	rsb	r1, ip, #2
 800d480:	9100      	str	r1, [sp, #0]
 800d482:	b180      	cbz	r0, 800d4a6 <__ieee754_pow+0xc6>
 800d484:	e059      	b.n	800d53a <__ieee754_pow+0x15a>
 800d486:	2800      	cmp	r0, #0
 800d488:	d155      	bne.n	800d536 <__ieee754_pow+0x156>
 800d48a:	f1c1 0114 	rsb	r1, r1, #20
 800d48e:	fa46 fc01 	asr.w	ip, r6, r1
 800d492:	fa0c f101 	lsl.w	r1, ip, r1
 800d496:	42b1      	cmp	r1, r6
 800d498:	f040 848c 	bne.w	800ddb4 <__ieee754_pow+0x9d4>
 800d49c:	f00c 0c01 	and.w	ip, ip, #1
 800d4a0:	f1cc 0102 	rsb	r1, ip, #2
 800d4a4:	9100      	str	r1, [sp, #0]
 800d4a6:	4959      	ldr	r1, [pc, #356]	; (800d60c <__ieee754_pow+0x22c>)
 800d4a8:	428e      	cmp	r6, r1
 800d4aa:	d12d      	bne.n	800d508 <__ieee754_pow+0x128>
 800d4ac:	2f00      	cmp	r7, #0
 800d4ae:	da79      	bge.n	800d5a4 <__ieee754_pow+0x1c4>
 800d4b0:	4956      	ldr	r1, [pc, #344]	; (800d60c <__ieee754_pow+0x22c>)
 800d4b2:	2000      	movs	r0, #0
 800d4b4:	f7f3 f9ca 	bl	800084c <__aeabi_ddiv>
 800d4b8:	e016      	b.n	800d4e8 <__ieee754_pow+0x108>
 800d4ba:	2100      	movs	r1, #0
 800d4bc:	9100      	str	r1, [sp, #0]
 800d4be:	2800      	cmp	r0, #0
 800d4c0:	d13b      	bne.n	800d53a <__ieee754_pow+0x15a>
 800d4c2:	494f      	ldr	r1, [pc, #316]	; (800d600 <__ieee754_pow+0x220>)
 800d4c4:	428e      	cmp	r6, r1
 800d4c6:	d1ee      	bne.n	800d4a6 <__ieee754_pow+0xc6>
 800d4c8:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800d4cc:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800d4d0:	ea53 0308 	orrs.w	r3, r3, r8
 800d4d4:	f000 8466 	beq.w	800dda4 <__ieee754_pow+0x9c4>
 800d4d8:	4b4d      	ldr	r3, [pc, #308]	; (800d610 <__ieee754_pow+0x230>)
 800d4da:	429c      	cmp	r4, r3
 800d4dc:	dd0d      	ble.n	800d4fa <__ieee754_pow+0x11a>
 800d4de:	2f00      	cmp	r7, #0
 800d4e0:	f280 8464 	bge.w	800ddac <__ieee754_pow+0x9cc>
 800d4e4:	2000      	movs	r0, #0
 800d4e6:	2100      	movs	r1, #0
 800d4e8:	ec41 0b10 	vmov	d0, r0, r1
 800d4ec:	b00d      	add	sp, #52	; 0x34
 800d4ee:	ecbd 8b06 	vpop	{d8-d10}
 800d4f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4f6:	2102      	movs	r1, #2
 800d4f8:	e7e0      	b.n	800d4bc <__ieee754_pow+0xdc>
 800d4fa:	2f00      	cmp	r7, #0
 800d4fc:	daf2      	bge.n	800d4e4 <__ieee754_pow+0x104>
 800d4fe:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800d502:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d506:	e7ef      	b.n	800d4e8 <__ieee754_pow+0x108>
 800d508:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800d50c:	d104      	bne.n	800d518 <__ieee754_pow+0x138>
 800d50e:	4610      	mov	r0, r2
 800d510:	4619      	mov	r1, r3
 800d512:	f7f3 f871 	bl	80005f8 <__aeabi_dmul>
 800d516:	e7e7      	b.n	800d4e8 <__ieee754_pow+0x108>
 800d518:	493e      	ldr	r1, [pc, #248]	; (800d614 <__ieee754_pow+0x234>)
 800d51a:	428f      	cmp	r7, r1
 800d51c:	d10d      	bne.n	800d53a <__ieee754_pow+0x15a>
 800d51e:	f1b9 0f00 	cmp.w	r9, #0
 800d522:	db0a      	blt.n	800d53a <__ieee754_pow+0x15a>
 800d524:	ec43 2b10 	vmov	d0, r2, r3
 800d528:	b00d      	add	sp, #52	; 0x34
 800d52a:	ecbd 8b06 	vpop	{d8-d10}
 800d52e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d532:	f000 bc77 	b.w	800de24 <__ieee754_sqrt>
 800d536:	2100      	movs	r1, #0
 800d538:	9100      	str	r1, [sp, #0]
 800d53a:	ec43 2b10 	vmov	d0, r2, r3
 800d53e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d542:	f000 fd23 	bl	800df8c <fabs>
 800d546:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d54a:	ec51 0b10 	vmov	r0, r1, d0
 800d54e:	f1b8 0f00 	cmp.w	r8, #0
 800d552:	d12a      	bne.n	800d5aa <__ieee754_pow+0x1ca>
 800d554:	b12c      	cbz	r4, 800d562 <__ieee754_pow+0x182>
 800d556:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800d60c <__ieee754_pow+0x22c>
 800d55a:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800d55e:	45e6      	cmp	lr, ip
 800d560:	d123      	bne.n	800d5aa <__ieee754_pow+0x1ca>
 800d562:	2f00      	cmp	r7, #0
 800d564:	da05      	bge.n	800d572 <__ieee754_pow+0x192>
 800d566:	4602      	mov	r2, r0
 800d568:	460b      	mov	r3, r1
 800d56a:	2000      	movs	r0, #0
 800d56c:	4927      	ldr	r1, [pc, #156]	; (800d60c <__ieee754_pow+0x22c>)
 800d56e:	f7f3 f96d 	bl	800084c <__aeabi_ddiv>
 800d572:	f1b9 0f00 	cmp.w	r9, #0
 800d576:	dab7      	bge.n	800d4e8 <__ieee754_pow+0x108>
 800d578:	9b00      	ldr	r3, [sp, #0]
 800d57a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800d57e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d582:	4323      	orrs	r3, r4
 800d584:	d108      	bne.n	800d598 <__ieee754_pow+0x1b8>
 800d586:	4602      	mov	r2, r0
 800d588:	460b      	mov	r3, r1
 800d58a:	4610      	mov	r0, r2
 800d58c:	4619      	mov	r1, r3
 800d58e:	f7f2 fe7b 	bl	8000288 <__aeabi_dsub>
 800d592:	4602      	mov	r2, r0
 800d594:	460b      	mov	r3, r1
 800d596:	e78d      	b.n	800d4b4 <__ieee754_pow+0xd4>
 800d598:	9b00      	ldr	r3, [sp, #0]
 800d59a:	2b01      	cmp	r3, #1
 800d59c:	d1a4      	bne.n	800d4e8 <__ieee754_pow+0x108>
 800d59e:	4602      	mov	r2, r0
 800d5a0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d5a4:	4610      	mov	r0, r2
 800d5a6:	4619      	mov	r1, r3
 800d5a8:	e79e      	b.n	800d4e8 <__ieee754_pow+0x108>
 800d5aa:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800d5ae:	f10c 35ff 	add.w	r5, ip, #4294967295
 800d5b2:	950a      	str	r5, [sp, #40]	; 0x28
 800d5b4:	9d00      	ldr	r5, [sp, #0]
 800d5b6:	46ac      	mov	ip, r5
 800d5b8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800d5ba:	ea5c 0505 	orrs.w	r5, ip, r5
 800d5be:	d0e4      	beq.n	800d58a <__ieee754_pow+0x1aa>
 800d5c0:	4b15      	ldr	r3, [pc, #84]	; (800d618 <__ieee754_pow+0x238>)
 800d5c2:	429e      	cmp	r6, r3
 800d5c4:	f340 80fc 	ble.w	800d7c0 <__ieee754_pow+0x3e0>
 800d5c8:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800d5cc:	429e      	cmp	r6, r3
 800d5ce:	4b10      	ldr	r3, [pc, #64]	; (800d610 <__ieee754_pow+0x230>)
 800d5d0:	dd07      	ble.n	800d5e2 <__ieee754_pow+0x202>
 800d5d2:	429c      	cmp	r4, r3
 800d5d4:	dc0a      	bgt.n	800d5ec <__ieee754_pow+0x20c>
 800d5d6:	2f00      	cmp	r7, #0
 800d5d8:	da84      	bge.n	800d4e4 <__ieee754_pow+0x104>
 800d5da:	a307      	add	r3, pc, #28	; (adr r3, 800d5f8 <__ieee754_pow+0x218>)
 800d5dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5e0:	e795      	b.n	800d50e <__ieee754_pow+0x12e>
 800d5e2:	429c      	cmp	r4, r3
 800d5e4:	dbf7      	blt.n	800d5d6 <__ieee754_pow+0x1f6>
 800d5e6:	4b09      	ldr	r3, [pc, #36]	; (800d60c <__ieee754_pow+0x22c>)
 800d5e8:	429c      	cmp	r4, r3
 800d5ea:	dd17      	ble.n	800d61c <__ieee754_pow+0x23c>
 800d5ec:	2f00      	cmp	r7, #0
 800d5ee:	dcf4      	bgt.n	800d5da <__ieee754_pow+0x1fa>
 800d5f0:	e778      	b.n	800d4e4 <__ieee754_pow+0x104>
 800d5f2:	bf00      	nop
 800d5f4:	f3af 8000 	nop.w
 800d5f8:	8800759c 	.word	0x8800759c
 800d5fc:	7e37e43c 	.word	0x7e37e43c
 800d600:	7ff00000 	.word	0x7ff00000
 800d604:	0800e570 	.word	0x0800e570
 800d608:	433fffff 	.word	0x433fffff
 800d60c:	3ff00000 	.word	0x3ff00000
 800d610:	3fefffff 	.word	0x3fefffff
 800d614:	3fe00000 	.word	0x3fe00000
 800d618:	41e00000 	.word	0x41e00000
 800d61c:	4b64      	ldr	r3, [pc, #400]	; (800d7b0 <__ieee754_pow+0x3d0>)
 800d61e:	2200      	movs	r2, #0
 800d620:	f7f2 fe32 	bl	8000288 <__aeabi_dsub>
 800d624:	a356      	add	r3, pc, #344	; (adr r3, 800d780 <__ieee754_pow+0x3a0>)
 800d626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d62a:	4604      	mov	r4, r0
 800d62c:	460d      	mov	r5, r1
 800d62e:	f7f2 ffe3 	bl	80005f8 <__aeabi_dmul>
 800d632:	a355      	add	r3, pc, #340	; (adr r3, 800d788 <__ieee754_pow+0x3a8>)
 800d634:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d638:	4606      	mov	r6, r0
 800d63a:	460f      	mov	r7, r1
 800d63c:	4620      	mov	r0, r4
 800d63e:	4629      	mov	r1, r5
 800d640:	f7f2 ffda 	bl	80005f8 <__aeabi_dmul>
 800d644:	4b5b      	ldr	r3, [pc, #364]	; (800d7b4 <__ieee754_pow+0x3d4>)
 800d646:	4682      	mov	sl, r0
 800d648:	468b      	mov	fp, r1
 800d64a:	2200      	movs	r2, #0
 800d64c:	4620      	mov	r0, r4
 800d64e:	4629      	mov	r1, r5
 800d650:	f7f2 ffd2 	bl	80005f8 <__aeabi_dmul>
 800d654:	4602      	mov	r2, r0
 800d656:	460b      	mov	r3, r1
 800d658:	a14d      	add	r1, pc, #308	; (adr r1, 800d790 <__ieee754_pow+0x3b0>)
 800d65a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d65e:	f7f2 fe13 	bl	8000288 <__aeabi_dsub>
 800d662:	4622      	mov	r2, r4
 800d664:	462b      	mov	r3, r5
 800d666:	f7f2 ffc7 	bl	80005f8 <__aeabi_dmul>
 800d66a:	4602      	mov	r2, r0
 800d66c:	460b      	mov	r3, r1
 800d66e:	2000      	movs	r0, #0
 800d670:	4951      	ldr	r1, [pc, #324]	; (800d7b8 <__ieee754_pow+0x3d8>)
 800d672:	f7f2 fe09 	bl	8000288 <__aeabi_dsub>
 800d676:	4622      	mov	r2, r4
 800d678:	4680      	mov	r8, r0
 800d67a:	4689      	mov	r9, r1
 800d67c:	462b      	mov	r3, r5
 800d67e:	4620      	mov	r0, r4
 800d680:	4629      	mov	r1, r5
 800d682:	f7f2 ffb9 	bl	80005f8 <__aeabi_dmul>
 800d686:	4602      	mov	r2, r0
 800d688:	460b      	mov	r3, r1
 800d68a:	4640      	mov	r0, r8
 800d68c:	4649      	mov	r1, r9
 800d68e:	f7f2 ffb3 	bl	80005f8 <__aeabi_dmul>
 800d692:	a341      	add	r3, pc, #260	; (adr r3, 800d798 <__ieee754_pow+0x3b8>)
 800d694:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d698:	f7f2 ffae 	bl	80005f8 <__aeabi_dmul>
 800d69c:	4602      	mov	r2, r0
 800d69e:	460b      	mov	r3, r1
 800d6a0:	4650      	mov	r0, sl
 800d6a2:	4659      	mov	r1, fp
 800d6a4:	f7f2 fdf0 	bl	8000288 <__aeabi_dsub>
 800d6a8:	4602      	mov	r2, r0
 800d6aa:	460b      	mov	r3, r1
 800d6ac:	4680      	mov	r8, r0
 800d6ae:	4689      	mov	r9, r1
 800d6b0:	4630      	mov	r0, r6
 800d6b2:	4639      	mov	r1, r7
 800d6b4:	f7f2 fdea 	bl	800028c <__adddf3>
 800d6b8:	2400      	movs	r4, #0
 800d6ba:	4632      	mov	r2, r6
 800d6bc:	463b      	mov	r3, r7
 800d6be:	4620      	mov	r0, r4
 800d6c0:	460d      	mov	r5, r1
 800d6c2:	f7f2 fde1 	bl	8000288 <__aeabi_dsub>
 800d6c6:	4602      	mov	r2, r0
 800d6c8:	460b      	mov	r3, r1
 800d6ca:	4640      	mov	r0, r8
 800d6cc:	4649      	mov	r1, r9
 800d6ce:	f7f2 fddb 	bl	8000288 <__aeabi_dsub>
 800d6d2:	9b00      	ldr	r3, [sp, #0]
 800d6d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d6d6:	3b01      	subs	r3, #1
 800d6d8:	4313      	orrs	r3, r2
 800d6da:	4682      	mov	sl, r0
 800d6dc:	468b      	mov	fp, r1
 800d6de:	f040 81f1 	bne.w	800dac4 <__ieee754_pow+0x6e4>
 800d6e2:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800d7a0 <__ieee754_pow+0x3c0>
 800d6e6:	eeb0 8a47 	vmov.f32	s16, s14
 800d6ea:	eef0 8a67 	vmov.f32	s17, s15
 800d6ee:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d6f2:	2600      	movs	r6, #0
 800d6f4:	4632      	mov	r2, r6
 800d6f6:	463b      	mov	r3, r7
 800d6f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d6fc:	f7f2 fdc4 	bl	8000288 <__aeabi_dsub>
 800d700:	4622      	mov	r2, r4
 800d702:	462b      	mov	r3, r5
 800d704:	f7f2 ff78 	bl	80005f8 <__aeabi_dmul>
 800d708:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d70c:	4680      	mov	r8, r0
 800d70e:	4689      	mov	r9, r1
 800d710:	4650      	mov	r0, sl
 800d712:	4659      	mov	r1, fp
 800d714:	f7f2 ff70 	bl	80005f8 <__aeabi_dmul>
 800d718:	4602      	mov	r2, r0
 800d71a:	460b      	mov	r3, r1
 800d71c:	4640      	mov	r0, r8
 800d71e:	4649      	mov	r1, r9
 800d720:	f7f2 fdb4 	bl	800028c <__adddf3>
 800d724:	4632      	mov	r2, r6
 800d726:	463b      	mov	r3, r7
 800d728:	4680      	mov	r8, r0
 800d72a:	4689      	mov	r9, r1
 800d72c:	4620      	mov	r0, r4
 800d72e:	4629      	mov	r1, r5
 800d730:	f7f2 ff62 	bl	80005f8 <__aeabi_dmul>
 800d734:	460b      	mov	r3, r1
 800d736:	4604      	mov	r4, r0
 800d738:	460d      	mov	r5, r1
 800d73a:	4602      	mov	r2, r0
 800d73c:	4649      	mov	r1, r9
 800d73e:	4640      	mov	r0, r8
 800d740:	f7f2 fda4 	bl	800028c <__adddf3>
 800d744:	4b1d      	ldr	r3, [pc, #116]	; (800d7bc <__ieee754_pow+0x3dc>)
 800d746:	4299      	cmp	r1, r3
 800d748:	ec45 4b19 	vmov	d9, r4, r5
 800d74c:	4606      	mov	r6, r0
 800d74e:	460f      	mov	r7, r1
 800d750:	468b      	mov	fp, r1
 800d752:	f340 82fe 	ble.w	800dd52 <__ieee754_pow+0x972>
 800d756:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800d75a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800d75e:	4303      	orrs	r3, r0
 800d760:	f000 81f0 	beq.w	800db44 <__ieee754_pow+0x764>
 800d764:	a310      	add	r3, pc, #64	; (adr r3, 800d7a8 <__ieee754_pow+0x3c8>)
 800d766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d76a:	ec51 0b18 	vmov	r0, r1, d8
 800d76e:	f7f2 ff43 	bl	80005f8 <__aeabi_dmul>
 800d772:	a30d      	add	r3, pc, #52	; (adr r3, 800d7a8 <__ieee754_pow+0x3c8>)
 800d774:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d778:	e6cb      	b.n	800d512 <__ieee754_pow+0x132>
 800d77a:	bf00      	nop
 800d77c:	f3af 8000 	nop.w
 800d780:	60000000 	.word	0x60000000
 800d784:	3ff71547 	.word	0x3ff71547
 800d788:	f85ddf44 	.word	0xf85ddf44
 800d78c:	3e54ae0b 	.word	0x3e54ae0b
 800d790:	55555555 	.word	0x55555555
 800d794:	3fd55555 	.word	0x3fd55555
 800d798:	652b82fe 	.word	0x652b82fe
 800d79c:	3ff71547 	.word	0x3ff71547
 800d7a0:	00000000 	.word	0x00000000
 800d7a4:	bff00000 	.word	0xbff00000
 800d7a8:	8800759c 	.word	0x8800759c
 800d7ac:	7e37e43c 	.word	0x7e37e43c
 800d7b0:	3ff00000 	.word	0x3ff00000
 800d7b4:	3fd00000 	.word	0x3fd00000
 800d7b8:	3fe00000 	.word	0x3fe00000
 800d7bc:	408fffff 	.word	0x408fffff
 800d7c0:	4bd7      	ldr	r3, [pc, #860]	; (800db20 <__ieee754_pow+0x740>)
 800d7c2:	ea03 0309 	and.w	r3, r3, r9
 800d7c6:	2200      	movs	r2, #0
 800d7c8:	b92b      	cbnz	r3, 800d7d6 <__ieee754_pow+0x3f6>
 800d7ca:	4bd6      	ldr	r3, [pc, #856]	; (800db24 <__ieee754_pow+0x744>)
 800d7cc:	f7f2 ff14 	bl	80005f8 <__aeabi_dmul>
 800d7d0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800d7d4:	460c      	mov	r4, r1
 800d7d6:	1523      	asrs	r3, r4, #20
 800d7d8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d7dc:	4413      	add	r3, r2
 800d7de:	9309      	str	r3, [sp, #36]	; 0x24
 800d7e0:	4bd1      	ldr	r3, [pc, #836]	; (800db28 <__ieee754_pow+0x748>)
 800d7e2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800d7e6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800d7ea:	429c      	cmp	r4, r3
 800d7ec:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800d7f0:	dd08      	ble.n	800d804 <__ieee754_pow+0x424>
 800d7f2:	4bce      	ldr	r3, [pc, #824]	; (800db2c <__ieee754_pow+0x74c>)
 800d7f4:	429c      	cmp	r4, r3
 800d7f6:	f340 8163 	ble.w	800dac0 <__ieee754_pow+0x6e0>
 800d7fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d7fc:	3301      	adds	r3, #1
 800d7fe:	9309      	str	r3, [sp, #36]	; 0x24
 800d800:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800d804:	2400      	movs	r4, #0
 800d806:	00e3      	lsls	r3, r4, #3
 800d808:	930b      	str	r3, [sp, #44]	; 0x2c
 800d80a:	4bc9      	ldr	r3, [pc, #804]	; (800db30 <__ieee754_pow+0x750>)
 800d80c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d810:	ed93 7b00 	vldr	d7, [r3]
 800d814:	4629      	mov	r1, r5
 800d816:	ec53 2b17 	vmov	r2, r3, d7
 800d81a:	eeb0 8a47 	vmov.f32	s16, s14
 800d81e:	eef0 8a67 	vmov.f32	s17, s15
 800d822:	4682      	mov	sl, r0
 800d824:	f7f2 fd30 	bl	8000288 <__aeabi_dsub>
 800d828:	4652      	mov	r2, sl
 800d82a:	4606      	mov	r6, r0
 800d82c:	460f      	mov	r7, r1
 800d82e:	462b      	mov	r3, r5
 800d830:	ec51 0b18 	vmov	r0, r1, d8
 800d834:	f7f2 fd2a 	bl	800028c <__adddf3>
 800d838:	4602      	mov	r2, r0
 800d83a:	460b      	mov	r3, r1
 800d83c:	2000      	movs	r0, #0
 800d83e:	49bd      	ldr	r1, [pc, #756]	; (800db34 <__ieee754_pow+0x754>)
 800d840:	f7f3 f804 	bl	800084c <__aeabi_ddiv>
 800d844:	ec41 0b19 	vmov	d9, r0, r1
 800d848:	4602      	mov	r2, r0
 800d84a:	460b      	mov	r3, r1
 800d84c:	4630      	mov	r0, r6
 800d84e:	4639      	mov	r1, r7
 800d850:	f7f2 fed2 	bl	80005f8 <__aeabi_dmul>
 800d854:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d858:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d85c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d860:	2300      	movs	r3, #0
 800d862:	9304      	str	r3, [sp, #16]
 800d864:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800d868:	46ab      	mov	fp, r5
 800d86a:	106d      	asrs	r5, r5, #1
 800d86c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800d870:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800d874:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800d878:	2200      	movs	r2, #0
 800d87a:	4640      	mov	r0, r8
 800d87c:	4649      	mov	r1, r9
 800d87e:	4614      	mov	r4, r2
 800d880:	461d      	mov	r5, r3
 800d882:	f7f2 feb9 	bl	80005f8 <__aeabi_dmul>
 800d886:	4602      	mov	r2, r0
 800d888:	460b      	mov	r3, r1
 800d88a:	4630      	mov	r0, r6
 800d88c:	4639      	mov	r1, r7
 800d88e:	f7f2 fcfb 	bl	8000288 <__aeabi_dsub>
 800d892:	ec53 2b18 	vmov	r2, r3, d8
 800d896:	4606      	mov	r6, r0
 800d898:	460f      	mov	r7, r1
 800d89a:	4620      	mov	r0, r4
 800d89c:	4629      	mov	r1, r5
 800d89e:	f7f2 fcf3 	bl	8000288 <__aeabi_dsub>
 800d8a2:	4602      	mov	r2, r0
 800d8a4:	460b      	mov	r3, r1
 800d8a6:	4650      	mov	r0, sl
 800d8a8:	4659      	mov	r1, fp
 800d8aa:	f7f2 fced 	bl	8000288 <__aeabi_dsub>
 800d8ae:	4642      	mov	r2, r8
 800d8b0:	464b      	mov	r3, r9
 800d8b2:	f7f2 fea1 	bl	80005f8 <__aeabi_dmul>
 800d8b6:	4602      	mov	r2, r0
 800d8b8:	460b      	mov	r3, r1
 800d8ba:	4630      	mov	r0, r6
 800d8bc:	4639      	mov	r1, r7
 800d8be:	f7f2 fce3 	bl	8000288 <__aeabi_dsub>
 800d8c2:	ec53 2b19 	vmov	r2, r3, d9
 800d8c6:	f7f2 fe97 	bl	80005f8 <__aeabi_dmul>
 800d8ca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d8ce:	ec41 0b18 	vmov	d8, r0, r1
 800d8d2:	4610      	mov	r0, r2
 800d8d4:	4619      	mov	r1, r3
 800d8d6:	f7f2 fe8f 	bl	80005f8 <__aeabi_dmul>
 800d8da:	a37d      	add	r3, pc, #500	; (adr r3, 800dad0 <__ieee754_pow+0x6f0>)
 800d8dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8e0:	4604      	mov	r4, r0
 800d8e2:	460d      	mov	r5, r1
 800d8e4:	f7f2 fe88 	bl	80005f8 <__aeabi_dmul>
 800d8e8:	a37b      	add	r3, pc, #492	; (adr r3, 800dad8 <__ieee754_pow+0x6f8>)
 800d8ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8ee:	f7f2 fccd 	bl	800028c <__adddf3>
 800d8f2:	4622      	mov	r2, r4
 800d8f4:	462b      	mov	r3, r5
 800d8f6:	f7f2 fe7f 	bl	80005f8 <__aeabi_dmul>
 800d8fa:	a379      	add	r3, pc, #484	; (adr r3, 800dae0 <__ieee754_pow+0x700>)
 800d8fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d900:	f7f2 fcc4 	bl	800028c <__adddf3>
 800d904:	4622      	mov	r2, r4
 800d906:	462b      	mov	r3, r5
 800d908:	f7f2 fe76 	bl	80005f8 <__aeabi_dmul>
 800d90c:	a376      	add	r3, pc, #472	; (adr r3, 800dae8 <__ieee754_pow+0x708>)
 800d90e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d912:	f7f2 fcbb 	bl	800028c <__adddf3>
 800d916:	4622      	mov	r2, r4
 800d918:	462b      	mov	r3, r5
 800d91a:	f7f2 fe6d 	bl	80005f8 <__aeabi_dmul>
 800d91e:	a374      	add	r3, pc, #464	; (adr r3, 800daf0 <__ieee754_pow+0x710>)
 800d920:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d924:	f7f2 fcb2 	bl	800028c <__adddf3>
 800d928:	4622      	mov	r2, r4
 800d92a:	462b      	mov	r3, r5
 800d92c:	f7f2 fe64 	bl	80005f8 <__aeabi_dmul>
 800d930:	a371      	add	r3, pc, #452	; (adr r3, 800daf8 <__ieee754_pow+0x718>)
 800d932:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d936:	f7f2 fca9 	bl	800028c <__adddf3>
 800d93a:	4622      	mov	r2, r4
 800d93c:	4606      	mov	r6, r0
 800d93e:	460f      	mov	r7, r1
 800d940:	462b      	mov	r3, r5
 800d942:	4620      	mov	r0, r4
 800d944:	4629      	mov	r1, r5
 800d946:	f7f2 fe57 	bl	80005f8 <__aeabi_dmul>
 800d94a:	4602      	mov	r2, r0
 800d94c:	460b      	mov	r3, r1
 800d94e:	4630      	mov	r0, r6
 800d950:	4639      	mov	r1, r7
 800d952:	f7f2 fe51 	bl	80005f8 <__aeabi_dmul>
 800d956:	4642      	mov	r2, r8
 800d958:	4604      	mov	r4, r0
 800d95a:	460d      	mov	r5, r1
 800d95c:	464b      	mov	r3, r9
 800d95e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d962:	f7f2 fc93 	bl	800028c <__adddf3>
 800d966:	ec53 2b18 	vmov	r2, r3, d8
 800d96a:	f7f2 fe45 	bl	80005f8 <__aeabi_dmul>
 800d96e:	4622      	mov	r2, r4
 800d970:	462b      	mov	r3, r5
 800d972:	f7f2 fc8b 	bl	800028c <__adddf3>
 800d976:	4642      	mov	r2, r8
 800d978:	4682      	mov	sl, r0
 800d97a:	468b      	mov	fp, r1
 800d97c:	464b      	mov	r3, r9
 800d97e:	4640      	mov	r0, r8
 800d980:	4649      	mov	r1, r9
 800d982:	f7f2 fe39 	bl	80005f8 <__aeabi_dmul>
 800d986:	4b6c      	ldr	r3, [pc, #432]	; (800db38 <__ieee754_pow+0x758>)
 800d988:	2200      	movs	r2, #0
 800d98a:	4606      	mov	r6, r0
 800d98c:	460f      	mov	r7, r1
 800d98e:	f7f2 fc7d 	bl	800028c <__adddf3>
 800d992:	4652      	mov	r2, sl
 800d994:	465b      	mov	r3, fp
 800d996:	f7f2 fc79 	bl	800028c <__adddf3>
 800d99a:	9c04      	ldr	r4, [sp, #16]
 800d99c:	460d      	mov	r5, r1
 800d99e:	4622      	mov	r2, r4
 800d9a0:	460b      	mov	r3, r1
 800d9a2:	4640      	mov	r0, r8
 800d9a4:	4649      	mov	r1, r9
 800d9a6:	f7f2 fe27 	bl	80005f8 <__aeabi_dmul>
 800d9aa:	4b63      	ldr	r3, [pc, #396]	; (800db38 <__ieee754_pow+0x758>)
 800d9ac:	4680      	mov	r8, r0
 800d9ae:	4689      	mov	r9, r1
 800d9b0:	2200      	movs	r2, #0
 800d9b2:	4620      	mov	r0, r4
 800d9b4:	4629      	mov	r1, r5
 800d9b6:	f7f2 fc67 	bl	8000288 <__aeabi_dsub>
 800d9ba:	4632      	mov	r2, r6
 800d9bc:	463b      	mov	r3, r7
 800d9be:	f7f2 fc63 	bl	8000288 <__aeabi_dsub>
 800d9c2:	4602      	mov	r2, r0
 800d9c4:	460b      	mov	r3, r1
 800d9c6:	4650      	mov	r0, sl
 800d9c8:	4659      	mov	r1, fp
 800d9ca:	f7f2 fc5d 	bl	8000288 <__aeabi_dsub>
 800d9ce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d9d2:	f7f2 fe11 	bl	80005f8 <__aeabi_dmul>
 800d9d6:	4622      	mov	r2, r4
 800d9d8:	4606      	mov	r6, r0
 800d9da:	460f      	mov	r7, r1
 800d9dc:	462b      	mov	r3, r5
 800d9de:	ec51 0b18 	vmov	r0, r1, d8
 800d9e2:	f7f2 fe09 	bl	80005f8 <__aeabi_dmul>
 800d9e6:	4602      	mov	r2, r0
 800d9e8:	460b      	mov	r3, r1
 800d9ea:	4630      	mov	r0, r6
 800d9ec:	4639      	mov	r1, r7
 800d9ee:	f7f2 fc4d 	bl	800028c <__adddf3>
 800d9f2:	4606      	mov	r6, r0
 800d9f4:	460f      	mov	r7, r1
 800d9f6:	4602      	mov	r2, r0
 800d9f8:	460b      	mov	r3, r1
 800d9fa:	4640      	mov	r0, r8
 800d9fc:	4649      	mov	r1, r9
 800d9fe:	f7f2 fc45 	bl	800028c <__adddf3>
 800da02:	9c04      	ldr	r4, [sp, #16]
 800da04:	a33e      	add	r3, pc, #248	; (adr r3, 800db00 <__ieee754_pow+0x720>)
 800da06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da0a:	4620      	mov	r0, r4
 800da0c:	460d      	mov	r5, r1
 800da0e:	f7f2 fdf3 	bl	80005f8 <__aeabi_dmul>
 800da12:	4642      	mov	r2, r8
 800da14:	ec41 0b18 	vmov	d8, r0, r1
 800da18:	464b      	mov	r3, r9
 800da1a:	4620      	mov	r0, r4
 800da1c:	4629      	mov	r1, r5
 800da1e:	f7f2 fc33 	bl	8000288 <__aeabi_dsub>
 800da22:	4602      	mov	r2, r0
 800da24:	460b      	mov	r3, r1
 800da26:	4630      	mov	r0, r6
 800da28:	4639      	mov	r1, r7
 800da2a:	f7f2 fc2d 	bl	8000288 <__aeabi_dsub>
 800da2e:	a336      	add	r3, pc, #216	; (adr r3, 800db08 <__ieee754_pow+0x728>)
 800da30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da34:	f7f2 fde0 	bl	80005f8 <__aeabi_dmul>
 800da38:	a335      	add	r3, pc, #212	; (adr r3, 800db10 <__ieee754_pow+0x730>)
 800da3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da3e:	4606      	mov	r6, r0
 800da40:	460f      	mov	r7, r1
 800da42:	4620      	mov	r0, r4
 800da44:	4629      	mov	r1, r5
 800da46:	f7f2 fdd7 	bl	80005f8 <__aeabi_dmul>
 800da4a:	4602      	mov	r2, r0
 800da4c:	460b      	mov	r3, r1
 800da4e:	4630      	mov	r0, r6
 800da50:	4639      	mov	r1, r7
 800da52:	f7f2 fc1b 	bl	800028c <__adddf3>
 800da56:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800da58:	4b38      	ldr	r3, [pc, #224]	; (800db3c <__ieee754_pow+0x75c>)
 800da5a:	4413      	add	r3, r2
 800da5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da60:	f7f2 fc14 	bl	800028c <__adddf3>
 800da64:	4682      	mov	sl, r0
 800da66:	9809      	ldr	r0, [sp, #36]	; 0x24
 800da68:	468b      	mov	fp, r1
 800da6a:	f7f2 fd5b 	bl	8000524 <__aeabi_i2d>
 800da6e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800da70:	4b33      	ldr	r3, [pc, #204]	; (800db40 <__ieee754_pow+0x760>)
 800da72:	4413      	add	r3, r2
 800da74:	e9d3 8900 	ldrd	r8, r9, [r3]
 800da78:	4606      	mov	r6, r0
 800da7a:	460f      	mov	r7, r1
 800da7c:	4652      	mov	r2, sl
 800da7e:	465b      	mov	r3, fp
 800da80:	ec51 0b18 	vmov	r0, r1, d8
 800da84:	f7f2 fc02 	bl	800028c <__adddf3>
 800da88:	4642      	mov	r2, r8
 800da8a:	464b      	mov	r3, r9
 800da8c:	f7f2 fbfe 	bl	800028c <__adddf3>
 800da90:	4632      	mov	r2, r6
 800da92:	463b      	mov	r3, r7
 800da94:	f7f2 fbfa 	bl	800028c <__adddf3>
 800da98:	9c04      	ldr	r4, [sp, #16]
 800da9a:	4632      	mov	r2, r6
 800da9c:	463b      	mov	r3, r7
 800da9e:	4620      	mov	r0, r4
 800daa0:	460d      	mov	r5, r1
 800daa2:	f7f2 fbf1 	bl	8000288 <__aeabi_dsub>
 800daa6:	4642      	mov	r2, r8
 800daa8:	464b      	mov	r3, r9
 800daaa:	f7f2 fbed 	bl	8000288 <__aeabi_dsub>
 800daae:	ec53 2b18 	vmov	r2, r3, d8
 800dab2:	f7f2 fbe9 	bl	8000288 <__aeabi_dsub>
 800dab6:	4602      	mov	r2, r0
 800dab8:	460b      	mov	r3, r1
 800daba:	4650      	mov	r0, sl
 800dabc:	4659      	mov	r1, fp
 800dabe:	e606      	b.n	800d6ce <__ieee754_pow+0x2ee>
 800dac0:	2401      	movs	r4, #1
 800dac2:	e6a0      	b.n	800d806 <__ieee754_pow+0x426>
 800dac4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800db18 <__ieee754_pow+0x738>
 800dac8:	e60d      	b.n	800d6e6 <__ieee754_pow+0x306>
 800daca:	bf00      	nop
 800dacc:	f3af 8000 	nop.w
 800dad0:	4a454eef 	.word	0x4a454eef
 800dad4:	3fca7e28 	.word	0x3fca7e28
 800dad8:	93c9db65 	.word	0x93c9db65
 800dadc:	3fcd864a 	.word	0x3fcd864a
 800dae0:	a91d4101 	.word	0xa91d4101
 800dae4:	3fd17460 	.word	0x3fd17460
 800dae8:	518f264d 	.word	0x518f264d
 800daec:	3fd55555 	.word	0x3fd55555
 800daf0:	db6fabff 	.word	0xdb6fabff
 800daf4:	3fdb6db6 	.word	0x3fdb6db6
 800daf8:	33333303 	.word	0x33333303
 800dafc:	3fe33333 	.word	0x3fe33333
 800db00:	e0000000 	.word	0xe0000000
 800db04:	3feec709 	.word	0x3feec709
 800db08:	dc3a03fd 	.word	0xdc3a03fd
 800db0c:	3feec709 	.word	0x3feec709
 800db10:	145b01f5 	.word	0x145b01f5
 800db14:	be3e2fe0 	.word	0xbe3e2fe0
 800db18:	00000000 	.word	0x00000000
 800db1c:	3ff00000 	.word	0x3ff00000
 800db20:	7ff00000 	.word	0x7ff00000
 800db24:	43400000 	.word	0x43400000
 800db28:	0003988e 	.word	0x0003988e
 800db2c:	000bb679 	.word	0x000bb679
 800db30:	0800e6e0 	.word	0x0800e6e0
 800db34:	3ff00000 	.word	0x3ff00000
 800db38:	40080000 	.word	0x40080000
 800db3c:	0800e700 	.word	0x0800e700
 800db40:	0800e6f0 	.word	0x0800e6f0
 800db44:	a3b5      	add	r3, pc, #724	; (adr r3, 800de1c <__ieee754_pow+0xa3c>)
 800db46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db4a:	4640      	mov	r0, r8
 800db4c:	4649      	mov	r1, r9
 800db4e:	f7f2 fb9d 	bl	800028c <__adddf3>
 800db52:	4622      	mov	r2, r4
 800db54:	ec41 0b1a 	vmov	d10, r0, r1
 800db58:	462b      	mov	r3, r5
 800db5a:	4630      	mov	r0, r6
 800db5c:	4639      	mov	r1, r7
 800db5e:	f7f2 fb93 	bl	8000288 <__aeabi_dsub>
 800db62:	4602      	mov	r2, r0
 800db64:	460b      	mov	r3, r1
 800db66:	ec51 0b1a 	vmov	r0, r1, d10
 800db6a:	f7f2 ffd5 	bl	8000b18 <__aeabi_dcmpgt>
 800db6e:	2800      	cmp	r0, #0
 800db70:	f47f adf8 	bne.w	800d764 <__ieee754_pow+0x384>
 800db74:	4aa4      	ldr	r2, [pc, #656]	; (800de08 <__ieee754_pow+0xa28>)
 800db76:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800db7a:	4293      	cmp	r3, r2
 800db7c:	f340 810b 	ble.w	800dd96 <__ieee754_pow+0x9b6>
 800db80:	151b      	asrs	r3, r3, #20
 800db82:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800db86:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800db8a:	fa4a f303 	asr.w	r3, sl, r3
 800db8e:	445b      	add	r3, fp
 800db90:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800db94:	4e9d      	ldr	r6, [pc, #628]	; (800de0c <__ieee754_pow+0xa2c>)
 800db96:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800db9a:	4116      	asrs	r6, r2
 800db9c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800dba0:	2000      	movs	r0, #0
 800dba2:	ea23 0106 	bic.w	r1, r3, r6
 800dba6:	f1c2 0214 	rsb	r2, r2, #20
 800dbaa:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800dbae:	fa4a fa02 	asr.w	sl, sl, r2
 800dbb2:	f1bb 0f00 	cmp.w	fp, #0
 800dbb6:	4602      	mov	r2, r0
 800dbb8:	460b      	mov	r3, r1
 800dbba:	4620      	mov	r0, r4
 800dbbc:	4629      	mov	r1, r5
 800dbbe:	bfb8      	it	lt
 800dbc0:	f1ca 0a00 	rsblt	sl, sl, #0
 800dbc4:	f7f2 fb60 	bl	8000288 <__aeabi_dsub>
 800dbc8:	ec41 0b19 	vmov	d9, r0, r1
 800dbcc:	4642      	mov	r2, r8
 800dbce:	464b      	mov	r3, r9
 800dbd0:	ec51 0b19 	vmov	r0, r1, d9
 800dbd4:	f7f2 fb5a 	bl	800028c <__adddf3>
 800dbd8:	2400      	movs	r4, #0
 800dbda:	a379      	add	r3, pc, #484	; (adr r3, 800ddc0 <__ieee754_pow+0x9e0>)
 800dbdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbe0:	4620      	mov	r0, r4
 800dbe2:	460d      	mov	r5, r1
 800dbe4:	f7f2 fd08 	bl	80005f8 <__aeabi_dmul>
 800dbe8:	ec53 2b19 	vmov	r2, r3, d9
 800dbec:	4606      	mov	r6, r0
 800dbee:	460f      	mov	r7, r1
 800dbf0:	4620      	mov	r0, r4
 800dbf2:	4629      	mov	r1, r5
 800dbf4:	f7f2 fb48 	bl	8000288 <__aeabi_dsub>
 800dbf8:	4602      	mov	r2, r0
 800dbfa:	460b      	mov	r3, r1
 800dbfc:	4640      	mov	r0, r8
 800dbfe:	4649      	mov	r1, r9
 800dc00:	f7f2 fb42 	bl	8000288 <__aeabi_dsub>
 800dc04:	a370      	add	r3, pc, #448	; (adr r3, 800ddc8 <__ieee754_pow+0x9e8>)
 800dc06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc0a:	f7f2 fcf5 	bl	80005f8 <__aeabi_dmul>
 800dc0e:	a370      	add	r3, pc, #448	; (adr r3, 800ddd0 <__ieee754_pow+0x9f0>)
 800dc10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc14:	4680      	mov	r8, r0
 800dc16:	4689      	mov	r9, r1
 800dc18:	4620      	mov	r0, r4
 800dc1a:	4629      	mov	r1, r5
 800dc1c:	f7f2 fcec 	bl	80005f8 <__aeabi_dmul>
 800dc20:	4602      	mov	r2, r0
 800dc22:	460b      	mov	r3, r1
 800dc24:	4640      	mov	r0, r8
 800dc26:	4649      	mov	r1, r9
 800dc28:	f7f2 fb30 	bl	800028c <__adddf3>
 800dc2c:	4604      	mov	r4, r0
 800dc2e:	460d      	mov	r5, r1
 800dc30:	4602      	mov	r2, r0
 800dc32:	460b      	mov	r3, r1
 800dc34:	4630      	mov	r0, r6
 800dc36:	4639      	mov	r1, r7
 800dc38:	f7f2 fb28 	bl	800028c <__adddf3>
 800dc3c:	4632      	mov	r2, r6
 800dc3e:	463b      	mov	r3, r7
 800dc40:	4680      	mov	r8, r0
 800dc42:	4689      	mov	r9, r1
 800dc44:	f7f2 fb20 	bl	8000288 <__aeabi_dsub>
 800dc48:	4602      	mov	r2, r0
 800dc4a:	460b      	mov	r3, r1
 800dc4c:	4620      	mov	r0, r4
 800dc4e:	4629      	mov	r1, r5
 800dc50:	f7f2 fb1a 	bl	8000288 <__aeabi_dsub>
 800dc54:	4642      	mov	r2, r8
 800dc56:	4606      	mov	r6, r0
 800dc58:	460f      	mov	r7, r1
 800dc5a:	464b      	mov	r3, r9
 800dc5c:	4640      	mov	r0, r8
 800dc5e:	4649      	mov	r1, r9
 800dc60:	f7f2 fcca 	bl	80005f8 <__aeabi_dmul>
 800dc64:	a35c      	add	r3, pc, #368	; (adr r3, 800ddd8 <__ieee754_pow+0x9f8>)
 800dc66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc6a:	4604      	mov	r4, r0
 800dc6c:	460d      	mov	r5, r1
 800dc6e:	f7f2 fcc3 	bl	80005f8 <__aeabi_dmul>
 800dc72:	a35b      	add	r3, pc, #364	; (adr r3, 800dde0 <__ieee754_pow+0xa00>)
 800dc74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc78:	f7f2 fb06 	bl	8000288 <__aeabi_dsub>
 800dc7c:	4622      	mov	r2, r4
 800dc7e:	462b      	mov	r3, r5
 800dc80:	f7f2 fcba 	bl	80005f8 <__aeabi_dmul>
 800dc84:	a358      	add	r3, pc, #352	; (adr r3, 800dde8 <__ieee754_pow+0xa08>)
 800dc86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc8a:	f7f2 faff 	bl	800028c <__adddf3>
 800dc8e:	4622      	mov	r2, r4
 800dc90:	462b      	mov	r3, r5
 800dc92:	f7f2 fcb1 	bl	80005f8 <__aeabi_dmul>
 800dc96:	a356      	add	r3, pc, #344	; (adr r3, 800ddf0 <__ieee754_pow+0xa10>)
 800dc98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc9c:	f7f2 faf4 	bl	8000288 <__aeabi_dsub>
 800dca0:	4622      	mov	r2, r4
 800dca2:	462b      	mov	r3, r5
 800dca4:	f7f2 fca8 	bl	80005f8 <__aeabi_dmul>
 800dca8:	a353      	add	r3, pc, #332	; (adr r3, 800ddf8 <__ieee754_pow+0xa18>)
 800dcaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcae:	f7f2 faed 	bl	800028c <__adddf3>
 800dcb2:	4622      	mov	r2, r4
 800dcb4:	462b      	mov	r3, r5
 800dcb6:	f7f2 fc9f 	bl	80005f8 <__aeabi_dmul>
 800dcba:	4602      	mov	r2, r0
 800dcbc:	460b      	mov	r3, r1
 800dcbe:	4640      	mov	r0, r8
 800dcc0:	4649      	mov	r1, r9
 800dcc2:	f7f2 fae1 	bl	8000288 <__aeabi_dsub>
 800dcc6:	4604      	mov	r4, r0
 800dcc8:	460d      	mov	r5, r1
 800dcca:	4602      	mov	r2, r0
 800dccc:	460b      	mov	r3, r1
 800dcce:	4640      	mov	r0, r8
 800dcd0:	4649      	mov	r1, r9
 800dcd2:	f7f2 fc91 	bl	80005f8 <__aeabi_dmul>
 800dcd6:	2200      	movs	r2, #0
 800dcd8:	ec41 0b19 	vmov	d9, r0, r1
 800dcdc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800dce0:	4620      	mov	r0, r4
 800dce2:	4629      	mov	r1, r5
 800dce4:	f7f2 fad0 	bl	8000288 <__aeabi_dsub>
 800dce8:	4602      	mov	r2, r0
 800dcea:	460b      	mov	r3, r1
 800dcec:	ec51 0b19 	vmov	r0, r1, d9
 800dcf0:	f7f2 fdac 	bl	800084c <__aeabi_ddiv>
 800dcf4:	4632      	mov	r2, r6
 800dcf6:	4604      	mov	r4, r0
 800dcf8:	460d      	mov	r5, r1
 800dcfa:	463b      	mov	r3, r7
 800dcfc:	4640      	mov	r0, r8
 800dcfe:	4649      	mov	r1, r9
 800dd00:	f7f2 fc7a 	bl	80005f8 <__aeabi_dmul>
 800dd04:	4632      	mov	r2, r6
 800dd06:	463b      	mov	r3, r7
 800dd08:	f7f2 fac0 	bl	800028c <__adddf3>
 800dd0c:	4602      	mov	r2, r0
 800dd0e:	460b      	mov	r3, r1
 800dd10:	4620      	mov	r0, r4
 800dd12:	4629      	mov	r1, r5
 800dd14:	f7f2 fab8 	bl	8000288 <__aeabi_dsub>
 800dd18:	4642      	mov	r2, r8
 800dd1a:	464b      	mov	r3, r9
 800dd1c:	f7f2 fab4 	bl	8000288 <__aeabi_dsub>
 800dd20:	460b      	mov	r3, r1
 800dd22:	4602      	mov	r2, r0
 800dd24:	493a      	ldr	r1, [pc, #232]	; (800de10 <__ieee754_pow+0xa30>)
 800dd26:	2000      	movs	r0, #0
 800dd28:	f7f2 faae 	bl	8000288 <__aeabi_dsub>
 800dd2c:	e9cd 0100 	strd	r0, r1, [sp]
 800dd30:	9b01      	ldr	r3, [sp, #4]
 800dd32:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800dd36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dd3a:	da2f      	bge.n	800dd9c <__ieee754_pow+0x9bc>
 800dd3c:	4650      	mov	r0, sl
 800dd3e:	ed9d 0b00 	vldr	d0, [sp]
 800dd42:	f000 f9cd 	bl	800e0e0 <scalbn>
 800dd46:	ec51 0b10 	vmov	r0, r1, d0
 800dd4a:	ec53 2b18 	vmov	r2, r3, d8
 800dd4e:	f7ff bbe0 	b.w	800d512 <__ieee754_pow+0x132>
 800dd52:	4b30      	ldr	r3, [pc, #192]	; (800de14 <__ieee754_pow+0xa34>)
 800dd54:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800dd58:	429e      	cmp	r6, r3
 800dd5a:	f77f af0b 	ble.w	800db74 <__ieee754_pow+0x794>
 800dd5e:	4b2e      	ldr	r3, [pc, #184]	; (800de18 <__ieee754_pow+0xa38>)
 800dd60:	440b      	add	r3, r1
 800dd62:	4303      	orrs	r3, r0
 800dd64:	d00b      	beq.n	800dd7e <__ieee754_pow+0x99e>
 800dd66:	a326      	add	r3, pc, #152	; (adr r3, 800de00 <__ieee754_pow+0xa20>)
 800dd68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd6c:	ec51 0b18 	vmov	r0, r1, d8
 800dd70:	f7f2 fc42 	bl	80005f8 <__aeabi_dmul>
 800dd74:	a322      	add	r3, pc, #136	; (adr r3, 800de00 <__ieee754_pow+0xa20>)
 800dd76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd7a:	f7ff bbca 	b.w	800d512 <__ieee754_pow+0x132>
 800dd7e:	4622      	mov	r2, r4
 800dd80:	462b      	mov	r3, r5
 800dd82:	f7f2 fa81 	bl	8000288 <__aeabi_dsub>
 800dd86:	4642      	mov	r2, r8
 800dd88:	464b      	mov	r3, r9
 800dd8a:	f7f2 febb 	bl	8000b04 <__aeabi_dcmpge>
 800dd8e:	2800      	cmp	r0, #0
 800dd90:	f43f aef0 	beq.w	800db74 <__ieee754_pow+0x794>
 800dd94:	e7e7      	b.n	800dd66 <__ieee754_pow+0x986>
 800dd96:	f04f 0a00 	mov.w	sl, #0
 800dd9a:	e717      	b.n	800dbcc <__ieee754_pow+0x7ec>
 800dd9c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dda0:	4619      	mov	r1, r3
 800dda2:	e7d2      	b.n	800dd4a <__ieee754_pow+0x96a>
 800dda4:	491a      	ldr	r1, [pc, #104]	; (800de10 <__ieee754_pow+0xa30>)
 800dda6:	2000      	movs	r0, #0
 800dda8:	f7ff bb9e 	b.w	800d4e8 <__ieee754_pow+0x108>
 800ddac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ddb0:	f7ff bb9a 	b.w	800d4e8 <__ieee754_pow+0x108>
 800ddb4:	9000      	str	r0, [sp, #0]
 800ddb6:	f7ff bb76 	b.w	800d4a6 <__ieee754_pow+0xc6>
 800ddba:	2100      	movs	r1, #0
 800ddbc:	f7ff bb60 	b.w	800d480 <__ieee754_pow+0xa0>
 800ddc0:	00000000 	.word	0x00000000
 800ddc4:	3fe62e43 	.word	0x3fe62e43
 800ddc8:	fefa39ef 	.word	0xfefa39ef
 800ddcc:	3fe62e42 	.word	0x3fe62e42
 800ddd0:	0ca86c39 	.word	0x0ca86c39
 800ddd4:	be205c61 	.word	0xbe205c61
 800ddd8:	72bea4d0 	.word	0x72bea4d0
 800dddc:	3e663769 	.word	0x3e663769
 800dde0:	c5d26bf1 	.word	0xc5d26bf1
 800dde4:	3ebbbd41 	.word	0x3ebbbd41
 800dde8:	af25de2c 	.word	0xaf25de2c
 800ddec:	3f11566a 	.word	0x3f11566a
 800ddf0:	16bebd93 	.word	0x16bebd93
 800ddf4:	3f66c16c 	.word	0x3f66c16c
 800ddf8:	5555553e 	.word	0x5555553e
 800ddfc:	3fc55555 	.word	0x3fc55555
 800de00:	c2f8f359 	.word	0xc2f8f359
 800de04:	01a56e1f 	.word	0x01a56e1f
 800de08:	3fe00000 	.word	0x3fe00000
 800de0c:	000fffff 	.word	0x000fffff
 800de10:	3ff00000 	.word	0x3ff00000
 800de14:	4090cbff 	.word	0x4090cbff
 800de18:	3f6f3400 	.word	0x3f6f3400
 800de1c:	652b82fe 	.word	0x652b82fe
 800de20:	3c971547 	.word	0x3c971547

0800de24 <__ieee754_sqrt>:
 800de24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de28:	ec55 4b10 	vmov	r4, r5, d0
 800de2c:	4e56      	ldr	r6, [pc, #344]	; (800df88 <__ieee754_sqrt+0x164>)
 800de2e:	43ae      	bics	r6, r5
 800de30:	ee10 0a10 	vmov	r0, s0
 800de34:	ee10 3a10 	vmov	r3, s0
 800de38:	4629      	mov	r1, r5
 800de3a:	462a      	mov	r2, r5
 800de3c:	d110      	bne.n	800de60 <__ieee754_sqrt+0x3c>
 800de3e:	ee10 2a10 	vmov	r2, s0
 800de42:	462b      	mov	r3, r5
 800de44:	f7f2 fbd8 	bl	80005f8 <__aeabi_dmul>
 800de48:	4602      	mov	r2, r0
 800de4a:	460b      	mov	r3, r1
 800de4c:	4620      	mov	r0, r4
 800de4e:	4629      	mov	r1, r5
 800de50:	f7f2 fa1c 	bl	800028c <__adddf3>
 800de54:	4604      	mov	r4, r0
 800de56:	460d      	mov	r5, r1
 800de58:	ec45 4b10 	vmov	d0, r4, r5
 800de5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de60:	2d00      	cmp	r5, #0
 800de62:	dc10      	bgt.n	800de86 <__ieee754_sqrt+0x62>
 800de64:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800de68:	4330      	orrs	r0, r6
 800de6a:	d0f5      	beq.n	800de58 <__ieee754_sqrt+0x34>
 800de6c:	b15d      	cbz	r5, 800de86 <__ieee754_sqrt+0x62>
 800de6e:	ee10 2a10 	vmov	r2, s0
 800de72:	462b      	mov	r3, r5
 800de74:	ee10 0a10 	vmov	r0, s0
 800de78:	f7f2 fa06 	bl	8000288 <__aeabi_dsub>
 800de7c:	4602      	mov	r2, r0
 800de7e:	460b      	mov	r3, r1
 800de80:	f7f2 fce4 	bl	800084c <__aeabi_ddiv>
 800de84:	e7e6      	b.n	800de54 <__ieee754_sqrt+0x30>
 800de86:	1509      	asrs	r1, r1, #20
 800de88:	d076      	beq.n	800df78 <__ieee754_sqrt+0x154>
 800de8a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800de8e:	07ce      	lsls	r6, r1, #31
 800de90:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800de94:	bf5e      	ittt	pl
 800de96:	0fda      	lsrpl	r2, r3, #31
 800de98:	005b      	lslpl	r3, r3, #1
 800de9a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800de9e:	0fda      	lsrs	r2, r3, #31
 800dea0:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800dea4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800dea8:	2000      	movs	r0, #0
 800deaa:	106d      	asrs	r5, r5, #1
 800deac:	005b      	lsls	r3, r3, #1
 800deae:	f04f 0e16 	mov.w	lr, #22
 800deb2:	4684      	mov	ip, r0
 800deb4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800deb8:	eb0c 0401 	add.w	r4, ip, r1
 800debc:	4294      	cmp	r4, r2
 800debe:	bfde      	ittt	le
 800dec0:	1b12      	suble	r2, r2, r4
 800dec2:	eb04 0c01 	addle.w	ip, r4, r1
 800dec6:	1840      	addle	r0, r0, r1
 800dec8:	0052      	lsls	r2, r2, #1
 800deca:	f1be 0e01 	subs.w	lr, lr, #1
 800dece:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800ded2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800ded6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800deda:	d1ed      	bne.n	800deb8 <__ieee754_sqrt+0x94>
 800dedc:	4671      	mov	r1, lr
 800dede:	2720      	movs	r7, #32
 800dee0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800dee4:	4562      	cmp	r2, ip
 800dee6:	eb04 060e 	add.w	r6, r4, lr
 800deea:	dc02      	bgt.n	800def2 <__ieee754_sqrt+0xce>
 800deec:	d113      	bne.n	800df16 <__ieee754_sqrt+0xf2>
 800deee:	429e      	cmp	r6, r3
 800def0:	d811      	bhi.n	800df16 <__ieee754_sqrt+0xf2>
 800def2:	2e00      	cmp	r6, #0
 800def4:	eb06 0e04 	add.w	lr, r6, r4
 800def8:	da43      	bge.n	800df82 <__ieee754_sqrt+0x15e>
 800defa:	f1be 0f00 	cmp.w	lr, #0
 800defe:	db40      	blt.n	800df82 <__ieee754_sqrt+0x15e>
 800df00:	f10c 0801 	add.w	r8, ip, #1
 800df04:	eba2 020c 	sub.w	r2, r2, ip
 800df08:	429e      	cmp	r6, r3
 800df0a:	bf88      	it	hi
 800df0c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800df10:	1b9b      	subs	r3, r3, r6
 800df12:	4421      	add	r1, r4
 800df14:	46c4      	mov	ip, r8
 800df16:	0052      	lsls	r2, r2, #1
 800df18:	3f01      	subs	r7, #1
 800df1a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800df1e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800df22:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800df26:	d1dd      	bne.n	800dee4 <__ieee754_sqrt+0xc0>
 800df28:	4313      	orrs	r3, r2
 800df2a:	d006      	beq.n	800df3a <__ieee754_sqrt+0x116>
 800df2c:	1c4c      	adds	r4, r1, #1
 800df2e:	bf13      	iteet	ne
 800df30:	3101      	addne	r1, #1
 800df32:	3001      	addeq	r0, #1
 800df34:	4639      	moveq	r1, r7
 800df36:	f021 0101 	bicne.w	r1, r1, #1
 800df3a:	1043      	asrs	r3, r0, #1
 800df3c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800df40:	0849      	lsrs	r1, r1, #1
 800df42:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800df46:	07c2      	lsls	r2, r0, #31
 800df48:	bf48      	it	mi
 800df4a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800df4e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800df52:	460c      	mov	r4, r1
 800df54:	463d      	mov	r5, r7
 800df56:	e77f      	b.n	800de58 <__ieee754_sqrt+0x34>
 800df58:	0ada      	lsrs	r2, r3, #11
 800df5a:	3815      	subs	r0, #21
 800df5c:	055b      	lsls	r3, r3, #21
 800df5e:	2a00      	cmp	r2, #0
 800df60:	d0fa      	beq.n	800df58 <__ieee754_sqrt+0x134>
 800df62:	02d7      	lsls	r7, r2, #11
 800df64:	d50a      	bpl.n	800df7c <__ieee754_sqrt+0x158>
 800df66:	f1c1 0420 	rsb	r4, r1, #32
 800df6a:	fa23 f404 	lsr.w	r4, r3, r4
 800df6e:	1e4d      	subs	r5, r1, #1
 800df70:	408b      	lsls	r3, r1
 800df72:	4322      	orrs	r2, r4
 800df74:	1b41      	subs	r1, r0, r5
 800df76:	e788      	b.n	800de8a <__ieee754_sqrt+0x66>
 800df78:	4608      	mov	r0, r1
 800df7a:	e7f0      	b.n	800df5e <__ieee754_sqrt+0x13a>
 800df7c:	0052      	lsls	r2, r2, #1
 800df7e:	3101      	adds	r1, #1
 800df80:	e7ef      	b.n	800df62 <__ieee754_sqrt+0x13e>
 800df82:	46e0      	mov	r8, ip
 800df84:	e7be      	b.n	800df04 <__ieee754_sqrt+0xe0>
 800df86:	bf00      	nop
 800df88:	7ff00000 	.word	0x7ff00000

0800df8c <fabs>:
 800df8c:	ec51 0b10 	vmov	r0, r1, d0
 800df90:	ee10 2a10 	vmov	r2, s0
 800df94:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800df98:	ec43 2b10 	vmov	d0, r2, r3
 800df9c:	4770      	bx	lr

0800df9e <finite>:
 800df9e:	b082      	sub	sp, #8
 800dfa0:	ed8d 0b00 	vstr	d0, [sp]
 800dfa4:	9801      	ldr	r0, [sp, #4]
 800dfa6:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800dfaa:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800dfae:	0fc0      	lsrs	r0, r0, #31
 800dfb0:	b002      	add	sp, #8
 800dfb2:	4770      	bx	lr
 800dfb4:	0000      	movs	r0, r0
	...

0800dfb8 <nan>:
 800dfb8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800dfc0 <nan+0x8>
 800dfbc:	4770      	bx	lr
 800dfbe:	bf00      	nop
 800dfc0:	00000000 	.word	0x00000000
 800dfc4:	7ff80000 	.word	0x7ff80000

0800dfc8 <rint>:
 800dfc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dfca:	ec51 0b10 	vmov	r0, r1, d0
 800dfce:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800dfd2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800dfd6:	2e13      	cmp	r6, #19
 800dfd8:	ee10 4a10 	vmov	r4, s0
 800dfdc:	460b      	mov	r3, r1
 800dfde:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800dfe2:	dc58      	bgt.n	800e096 <rint+0xce>
 800dfe4:	2e00      	cmp	r6, #0
 800dfe6:	da2b      	bge.n	800e040 <rint+0x78>
 800dfe8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800dfec:	4302      	orrs	r2, r0
 800dfee:	d023      	beq.n	800e038 <rint+0x70>
 800dff0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800dff4:	4302      	orrs	r2, r0
 800dff6:	4254      	negs	r4, r2
 800dff8:	4314      	orrs	r4, r2
 800dffa:	0c4b      	lsrs	r3, r1, #17
 800dffc:	0b24      	lsrs	r4, r4, #12
 800dffe:	045b      	lsls	r3, r3, #17
 800e000:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800e004:	ea44 0103 	orr.w	r1, r4, r3
 800e008:	4b32      	ldr	r3, [pc, #200]	; (800e0d4 <rint+0x10c>)
 800e00a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800e00e:	e9d3 6700 	ldrd	r6, r7, [r3]
 800e012:	4602      	mov	r2, r0
 800e014:	460b      	mov	r3, r1
 800e016:	4630      	mov	r0, r6
 800e018:	4639      	mov	r1, r7
 800e01a:	f7f2 f937 	bl	800028c <__adddf3>
 800e01e:	e9cd 0100 	strd	r0, r1, [sp]
 800e022:	463b      	mov	r3, r7
 800e024:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e028:	4632      	mov	r2, r6
 800e02a:	f7f2 f92d 	bl	8000288 <__aeabi_dsub>
 800e02e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e032:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800e036:	4639      	mov	r1, r7
 800e038:	ec41 0b10 	vmov	d0, r0, r1
 800e03c:	b003      	add	sp, #12
 800e03e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e040:	4a25      	ldr	r2, [pc, #148]	; (800e0d8 <rint+0x110>)
 800e042:	4132      	asrs	r2, r6
 800e044:	ea01 0702 	and.w	r7, r1, r2
 800e048:	4307      	orrs	r7, r0
 800e04a:	d0f5      	beq.n	800e038 <rint+0x70>
 800e04c:	0851      	lsrs	r1, r2, #1
 800e04e:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800e052:	4314      	orrs	r4, r2
 800e054:	d00c      	beq.n	800e070 <rint+0xa8>
 800e056:	ea23 0201 	bic.w	r2, r3, r1
 800e05a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800e05e:	2e13      	cmp	r6, #19
 800e060:	fa43 f606 	asr.w	r6, r3, r6
 800e064:	bf0c      	ite	eq
 800e066:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800e06a:	2400      	movne	r4, #0
 800e06c:	ea42 0306 	orr.w	r3, r2, r6
 800e070:	4918      	ldr	r1, [pc, #96]	; (800e0d4 <rint+0x10c>)
 800e072:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800e076:	4622      	mov	r2, r4
 800e078:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e07c:	4620      	mov	r0, r4
 800e07e:	4629      	mov	r1, r5
 800e080:	f7f2 f904 	bl	800028c <__adddf3>
 800e084:	e9cd 0100 	strd	r0, r1, [sp]
 800e088:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e08c:	4622      	mov	r2, r4
 800e08e:	462b      	mov	r3, r5
 800e090:	f7f2 f8fa 	bl	8000288 <__aeabi_dsub>
 800e094:	e7d0      	b.n	800e038 <rint+0x70>
 800e096:	2e33      	cmp	r6, #51	; 0x33
 800e098:	dd07      	ble.n	800e0aa <rint+0xe2>
 800e09a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800e09e:	d1cb      	bne.n	800e038 <rint+0x70>
 800e0a0:	ee10 2a10 	vmov	r2, s0
 800e0a4:	f7f2 f8f2 	bl	800028c <__adddf3>
 800e0a8:	e7c6      	b.n	800e038 <rint+0x70>
 800e0aa:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800e0ae:	f04f 36ff 	mov.w	r6, #4294967295
 800e0b2:	40d6      	lsrs	r6, r2
 800e0b4:	4230      	tst	r0, r6
 800e0b6:	d0bf      	beq.n	800e038 <rint+0x70>
 800e0b8:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800e0bc:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800e0c0:	bf1f      	itttt	ne
 800e0c2:	ea24 0101 	bicne.w	r1, r4, r1
 800e0c6:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800e0ca:	fa44 f202 	asrne.w	r2, r4, r2
 800e0ce:	ea41 0402 	orrne.w	r4, r1, r2
 800e0d2:	e7cd      	b.n	800e070 <rint+0xa8>
 800e0d4:	0800e710 	.word	0x0800e710
 800e0d8:	000fffff 	.word	0x000fffff
 800e0dc:	00000000 	.word	0x00000000

0800e0e0 <scalbn>:
 800e0e0:	b570      	push	{r4, r5, r6, lr}
 800e0e2:	ec55 4b10 	vmov	r4, r5, d0
 800e0e6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800e0ea:	4606      	mov	r6, r0
 800e0ec:	462b      	mov	r3, r5
 800e0ee:	b99a      	cbnz	r2, 800e118 <scalbn+0x38>
 800e0f0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e0f4:	4323      	orrs	r3, r4
 800e0f6:	d036      	beq.n	800e166 <scalbn+0x86>
 800e0f8:	4b39      	ldr	r3, [pc, #228]	; (800e1e0 <scalbn+0x100>)
 800e0fa:	4629      	mov	r1, r5
 800e0fc:	ee10 0a10 	vmov	r0, s0
 800e100:	2200      	movs	r2, #0
 800e102:	f7f2 fa79 	bl	80005f8 <__aeabi_dmul>
 800e106:	4b37      	ldr	r3, [pc, #220]	; (800e1e4 <scalbn+0x104>)
 800e108:	429e      	cmp	r6, r3
 800e10a:	4604      	mov	r4, r0
 800e10c:	460d      	mov	r5, r1
 800e10e:	da10      	bge.n	800e132 <scalbn+0x52>
 800e110:	a32b      	add	r3, pc, #172	; (adr r3, 800e1c0 <scalbn+0xe0>)
 800e112:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e116:	e03a      	b.n	800e18e <scalbn+0xae>
 800e118:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800e11c:	428a      	cmp	r2, r1
 800e11e:	d10c      	bne.n	800e13a <scalbn+0x5a>
 800e120:	ee10 2a10 	vmov	r2, s0
 800e124:	4620      	mov	r0, r4
 800e126:	4629      	mov	r1, r5
 800e128:	f7f2 f8b0 	bl	800028c <__adddf3>
 800e12c:	4604      	mov	r4, r0
 800e12e:	460d      	mov	r5, r1
 800e130:	e019      	b.n	800e166 <scalbn+0x86>
 800e132:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e136:	460b      	mov	r3, r1
 800e138:	3a36      	subs	r2, #54	; 0x36
 800e13a:	4432      	add	r2, r6
 800e13c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800e140:	428a      	cmp	r2, r1
 800e142:	dd08      	ble.n	800e156 <scalbn+0x76>
 800e144:	2d00      	cmp	r5, #0
 800e146:	a120      	add	r1, pc, #128	; (adr r1, 800e1c8 <scalbn+0xe8>)
 800e148:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e14c:	da1c      	bge.n	800e188 <scalbn+0xa8>
 800e14e:	a120      	add	r1, pc, #128	; (adr r1, 800e1d0 <scalbn+0xf0>)
 800e150:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e154:	e018      	b.n	800e188 <scalbn+0xa8>
 800e156:	2a00      	cmp	r2, #0
 800e158:	dd08      	ble.n	800e16c <scalbn+0x8c>
 800e15a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e15e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e162:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e166:	ec45 4b10 	vmov	d0, r4, r5
 800e16a:	bd70      	pop	{r4, r5, r6, pc}
 800e16c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800e170:	da19      	bge.n	800e1a6 <scalbn+0xc6>
 800e172:	f24c 3350 	movw	r3, #50000	; 0xc350
 800e176:	429e      	cmp	r6, r3
 800e178:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800e17c:	dd0a      	ble.n	800e194 <scalbn+0xb4>
 800e17e:	a112      	add	r1, pc, #72	; (adr r1, 800e1c8 <scalbn+0xe8>)
 800e180:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e184:	2b00      	cmp	r3, #0
 800e186:	d1e2      	bne.n	800e14e <scalbn+0x6e>
 800e188:	a30f      	add	r3, pc, #60	; (adr r3, 800e1c8 <scalbn+0xe8>)
 800e18a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e18e:	f7f2 fa33 	bl	80005f8 <__aeabi_dmul>
 800e192:	e7cb      	b.n	800e12c <scalbn+0x4c>
 800e194:	a10a      	add	r1, pc, #40	; (adr r1, 800e1c0 <scalbn+0xe0>)
 800e196:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d0b8      	beq.n	800e110 <scalbn+0x30>
 800e19e:	a10e      	add	r1, pc, #56	; (adr r1, 800e1d8 <scalbn+0xf8>)
 800e1a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e1a4:	e7b4      	b.n	800e110 <scalbn+0x30>
 800e1a6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e1aa:	3236      	adds	r2, #54	; 0x36
 800e1ac:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e1b0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800e1b4:	4620      	mov	r0, r4
 800e1b6:	4b0c      	ldr	r3, [pc, #48]	; (800e1e8 <scalbn+0x108>)
 800e1b8:	2200      	movs	r2, #0
 800e1ba:	e7e8      	b.n	800e18e <scalbn+0xae>
 800e1bc:	f3af 8000 	nop.w
 800e1c0:	c2f8f359 	.word	0xc2f8f359
 800e1c4:	01a56e1f 	.word	0x01a56e1f
 800e1c8:	8800759c 	.word	0x8800759c
 800e1cc:	7e37e43c 	.word	0x7e37e43c
 800e1d0:	8800759c 	.word	0x8800759c
 800e1d4:	fe37e43c 	.word	0xfe37e43c
 800e1d8:	c2f8f359 	.word	0xc2f8f359
 800e1dc:	81a56e1f 	.word	0x81a56e1f
 800e1e0:	43500000 	.word	0x43500000
 800e1e4:	ffff3cb0 	.word	0xffff3cb0
 800e1e8:	3c900000 	.word	0x3c900000

0800e1ec <_init>:
 800e1ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1ee:	bf00      	nop
 800e1f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e1f2:	bc08      	pop	{r3}
 800e1f4:	469e      	mov	lr, r3
 800e1f6:	4770      	bx	lr

0800e1f8 <_fini>:
 800e1f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1fa:	bf00      	nop
 800e1fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e1fe:	bc08      	pop	{r3}
 800e200:	469e      	mov	lr, r3
 800e202:	4770      	bx	lr
